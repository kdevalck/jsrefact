var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.DEBUG = true;
goog.LOCALE = "en";
goog.provide = function(name) {
  if(!COMPILED) {
    if(goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while(namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if(goog.getObjectByName(namespace)) {
        break
      }
      goog.implicitNamespaces_[namespace] = true
    }
  }
  goog.exportPath_(name)
};
goog.setTestOnly = function(opt_message) {
  if(COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + opt_message ? ": " + opt_message : ".");
  }
};
if(!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && !!goog.getObjectByName(name)
  };
  goog.implicitNamespaces_ = {}
}
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if(!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0])
  }
  for(var part;parts.length && (part = parts.shift());) {
    if(!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object
    }else {
      if(cur[part]) {
        cur = cur[part]
      }else {
        cur = cur[part] = {}
      }
    }
  }
};
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for(var part;part = parts.shift();) {
    if(goog.isDefAndNotNull(cur[part])) {
      cur = cur[part]
    }else {
      return null
    }
  }
  return cur
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for(var x in obj) {
    global[x] = obj[x]
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if(!COMPILED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for(var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if(!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {}
      }
      deps.pathToNames[path][provide] = true
    }
    for(var j = 0;require = requires[j];j++) {
      if(!(path in deps.requires)) {
        deps.requires[path] = {}
      }
      deps.requires[path][require] = true
    }
  }
};
goog.ENABLE_DEBUG_LOADER = true;
goog.require = function(name) {
  if(!COMPILED) {
    if(goog.isProvided_(name)) {
      return
    }
    if(goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if(path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if(goog.global.console) {
      goog.global.console["error"](errorMessage)
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(var_args) {
  return arguments[0]
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    return ctor.instance_ || (ctor.instance_ = new ctor)
  }
};
if(!COMPILED && goog.ENABLE_DEBUG_LOADER) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc
  };
  goog.findBasePath_ = function() {
    if(goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return
    }else {
      if(!goog.inHtmlDocument_()) {
        return
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for(var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if(src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if(!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true
    }
  };
  goog.writeScriptTag_ = function(src) {
    if(goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      doc.write('<script type="text/javascript" src="' + src + '"></' + "script>");
      return true
    }else {
      return false
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if(path in deps.written) {
        return
      }
      if(path in deps.visited) {
        if(!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path)
        }
        return
      }
      deps.visited[path] = true;
      if(path in deps.requires) {
        for(var requireName in deps.requires[path]) {
          if(!goog.isProvided_(requireName)) {
            if(requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName])
            }else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if(!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path)
      }
    }
    for(var path in goog.included_) {
      if(!deps.written[path]) {
        visitNode(path)
      }
    }
    for(var i = 0;i < scripts.length;i++) {
      if(scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i])
      }else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if(rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule]
    }else {
      return null
    }
  };
  goog.findBasePath_();
  if(!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js")
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if(s == "object") {
    if(value) {
      if(value instanceof Array) {
        return"array"
      }else {
        if(value instanceof Object) {
          return s
        }
      }
      var className = Object.prototype.toString.call(value);
      if(className == "[object Window]") {
        return"object"
      }
      if(className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return"array"
      }
      if(className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return"function"
      }
    }else {
      return"null"
    }
  }else {
    if(s == "function" && typeof value.call == "undefined") {
      return"object"
    }
  }
  return s
};
goog.propertyIsEnumerableCustom_ = function(object, propName) {
  if(propName in object) {
    for(var key in object) {
      if(key == propName && Object.prototype.hasOwnProperty.call(object, propName)) {
        return true
      }
    }
  }
  return false
};
goog.propertyIsEnumerable_ = function(object, propName) {
  if(object instanceof Object) {
    return Object.prototype.propertyIsEnumerable.call(object, propName)
  }else {
    return goog.propertyIsEnumerableCustom_(object, propName)
  }
};
goog.isDef = function(val) {
  return val !== undefined
};
goog.isNull = function(val) {
  return val === null
};
goog.isDefAndNotNull = function(val) {
  return val != null
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array"
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number"
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function"
};
goog.isString = function(val) {
  return typeof val == "string"
};
goog.isBoolean = function(val) {
  return typeof val == "boolean"
};
goog.isNumber = function(val) {
  return typeof val == "number"
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function"
};
goog.isObject = function(val) {
  var type = goog.typeOf(val);
  return type == "object" || type == "array" || type == "function"
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_)
};
goog.removeUid = function(obj) {
  if("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_)
  }
  try {
    delete obj[goog.UID_PROPERTY_]
  }catch(ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + Math.floor(Math.random() * 2147483648).toString(36);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if(type == "object" || type == "array") {
    if(obj.clone) {
      return obj.clone()
    }
    var clone = type == "array" ? [] : {};
    for(var key in obj) {
      clone[key] = goog.cloneObject(obj[key])
    }
    return clone
  }
  return obj
};
Object.prototype.clone;
goog.bindNative_ = function(fn, selfObj, var_args) {
  return fn.call.apply(fn.bind, arguments)
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if(!fn) {
    throw new Error;
  }
  if(arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs)
    }
  }else {
    return function() {
      return fn.apply(selfObj, arguments)
    }
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if(Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_
  }else {
    goog.bind = goog.bindJs_
  }
  return goog.bind.apply(null, arguments)
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = Array.prototype.slice.call(arguments);
    newArgs.unshift.apply(newArgs, args);
    return fn.apply(this, newArgs)
  }
};
goog.mixin = function(target, source) {
  for(var x in source) {
    target[x] = source[x]
  }
};
goog.now = Date.now || function() {
  return+new Date
};
goog.globalEval = function(script) {
  if(goog.global.execScript) {
    goog.global.execScript(script, "JavaScript")
  }else {
    if(goog.global.eval) {
      if(goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ = 1;");
        if(typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true
        }else {
          goog.evalWorksForGlobals_ = false
        }
      }
      if(goog.evalWorksForGlobals_) {
        goog.global.eval(script)
      }else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt)
      }
    }else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for(var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]))
    }
    return mapped.join("-")
  };
  var rename;
  if(goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts
  }else {
    rename = function(a) {
      return a
    }
  }
  if(opt_modifier) {
    return className + "-" + rename(opt_modifier)
  }else {
    return rename(className)
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if(!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING
}
goog.getMsg = function(str, opt_values) {
  var values = opt_values || {};
  for(var key in values) {
    var value = ("" + values[key]).replace(/\$/g, "$$$$");
    str = str.replace(new RegExp("\\{\\$" + key + "\\}", "gi"), value)
  }
  return str
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo)
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if(caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1))
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for(var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if(ctor.prototype[opt_methodName] === caller) {
      foundCaller = true
    }else {
      if(foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args)
      }
    }
  }
  if(me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args)
  }else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global)
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  this.stack = (new Error).stack || "";
  if(opt_msg) {
    this.message = String(opt_msg)
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0
};
goog.string.subs = function(str, var_args) {
  for(var i = 1;i < arguments.length;i++) {
    var replacement = String(arguments[i]).replace(/\$/g, "$$$$");
    str = str.replace(/\%s/, replacement)
  }
  return str
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "")
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str)
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str))
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str)
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str)
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str)
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str)
};
goog.string.isSpace = function(ch) {
  return ch == " "
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "\u0080" && ch <= "\ufffd"
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ")
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n")
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ")
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ")
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "")
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "")
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "")
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "")
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if(test1 < test2) {
    return-1
  }else {
    if(test1 == test2) {
      return 0
    }else {
      return 1
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if(str1 == str2) {
    return 0
  }
  if(!str1) {
    return-1
  }
  if(!str2) {
    return 1
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for(var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if(a != b) {
      var num1 = parseInt(a, 10);
      if(!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if(!isNaN(num2) && num1 - num2) {
          return num1 - num2
        }
      }
      return a < b ? -1 : 1
    }
  }
  if(tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length
  }
  return str1 < str2 ? -1 : 1
};
goog.string.encodeUriRegExp_ = /^[a-zA-Z0-9\-_.!~*'()]*$/;
goog.string.urlEncode = function(str) {
  str = String(str);
  if(!goog.string.encodeUriRegExp_.test(str)) {
    return encodeURIComponent(str)
  }
  return str
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "))
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "<br />" : "<br>")
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if(opt_isLikelyToContainHtmlChars) {
    return str.replace(goog.string.amperRe_, "&amp;").replace(goog.string.ltRe_, "&lt;").replace(goog.string.gtRe_, "&gt;").replace(goog.string.quotRe_, "&quot;")
  }else {
    if(!goog.string.allRe_.test(str)) {
      return str
    }
    if(str.indexOf("&") != -1) {
      str = str.replace(goog.string.amperRe_, "&amp;")
    }
    if(str.indexOf("<") != -1) {
      str = str.replace(goog.string.ltRe_, "&lt;")
    }
    if(str.indexOf(">") != -1) {
      str = str.replace(goog.string.gtRe_, "&gt;")
    }
    if(str.indexOf('"') != -1) {
      str = str.replace(goog.string.quotRe_, "&quot;")
    }
    return str
  }
};
goog.string.amperRe_ = /&/g;
goog.string.ltRe_ = /</g;
goog.string.gtRe_ = />/g;
goog.string.quotRe_ = /\"/g;
goog.string.allRe_ = /[&<>\"]/;
goog.string.unescapeEntities = function(str) {
  if(goog.string.contains(str, "&")) {
    if("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str)
    }else {
      return goog.string.unescapePureXmlEntities_(str)
    }
  }
  return str
};
goog.string.unescapeEntitiesUsingDom_ = function(str) {
  var seen = {"&amp;":"&", "&lt;":"<", "&gt;":">", "&quot;":'"'};
  var div = document.createElement("div");
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if(value) {
      return value
    }
    if(entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if(!isNaN(n)) {
        value = String.fromCharCode(n)
      }
    }
    if(!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1)
    }
    return seen[s] = value
  })
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return"&";
      case "lt":
        return"<";
      case "gt":
        return">";
      case "quot":
        return'"';
      default:
        if(entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if(!isNaN(n)) {
            return String.fromCharCode(n)
          }
        }
        return s
    }
  })
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " &#160;"), opt_xml)
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for(var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if(str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1)
    }
  }
  return str
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if(opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str)
  }
  if(str.length > chars) {
    str = str.substring(0, chars - 3) + "..."
  }
  if(opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str)
  }
  return str
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if(opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str)
  }
  if(opt_trailingChars && str.length > chars) {
    if(opt_trailingChars > chars) {
      opt_trailingChars = chars
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint)
  }else {
    if(str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos)
    }
  }
  if(opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str)
  }
  return str
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\u0008":"\\b", "\u000c":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if(s.quote) {
    return s.quote()
  }else {
    var sb = ['"'];
    for(var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch))
    }
    sb.push('"');
    return sb.join("")
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for(var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i))
  }
  return sb.join("")
};
goog.string.escapeChar = function(c) {
  if(c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c]
  }
  if(c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c]
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if(cc > 31 && cc < 127) {
    rv = c
  }else {
    if(cc < 256) {
      rv = "\\x";
      if(cc < 16 || cc > 256) {
        rv += "0"
      }
    }else {
      rv = "\\u";
      if(cc < 4096) {
        rv += "0"
      }
    }
    rv += cc.toString(16).toUpperCase()
  }
  return goog.string.jsEscapeCache_[c] = rv
};
goog.string.toMap = function(s) {
  var rv = {};
  for(var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true
  }
  return rv
};
goog.string.contains = function(s, ss) {
  return s.indexOf(ss) != -1
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if(index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength)
  }
  return resultStr
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "")
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "")
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08")
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string)
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if(index == -1) {
    index = s.length
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj)
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "")
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36)
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for(var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if(v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2])
    }while(order == 0)
  }
  return order
};
goog.string.compareElements_ = function(left, right) {
  if(left < right) {
    return-1
  }else {
    if(left > right) {
      return 1
    }
  }
  return 0
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for(var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_
  }
  return result
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return"goog_" + goog.string.uniqueStringCounter_++
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if(num == 0 && goog.string.isEmpty(str)) {
    return NaN
  }
  return num
};
goog.string.toCamelCaseCache_ = {};
goog.string.toCamelCase = function(str) {
  return goog.string.toCamelCaseCache_[str] || (goog.string.toCamelCaseCache_[str] = String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase()
  }))
};
goog.string.toSelectorCaseCache_ = {};
goog.string.toSelectorCase = function(str) {
  return goog.string.toSelectorCaseCache_[str] || (goog.string.toSelectorCaseCache_[str] = String(str).replace(/([A-Z])/g, "-$1").toLowerCase())
};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.string");
goog.asserts.ENABLE_ASSERTS = goog.DEBUG;
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if(givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs
  }else {
    if(defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs
    }
  }
  throw new goog.asserts.AssertionError("" + message, args || []);
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return condition
};
goog.asserts.fail = function(opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS) {
    throw new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return value
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return value
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return value
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return value
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return value
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return value
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3))
  }
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.NATIVE_ARRAY_PROTOTYPES = true;
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1]
};
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.indexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex)
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if(goog.isString(arr)) {
    if(!goog.isString(obj) || obj.length != 1) {
      return-1
    }
    return arr.indexOf(obj, fromIndex)
  }
  for(var i = fromIndex;i < arr.length;i++) {
    if(i in arr && arr[i] === obj) {
      return i
    }
  }
  return-1
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.lastIndexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex)
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if(fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex)
  }
  if(goog.isString(arr)) {
    if(!goog.isString(obj) || obj.length != 1) {
      return-1
    }
    return arr.lastIndexOf(obj, fromIndex)
  }
  for(var i = fromIndex;i >= 0;i--) {
    if(i in arr && arr[i] === obj) {
      return i
    }
  }
  return-1
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.forEach ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj)
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = 0;i < l;i++) {
    if(i in arr2) {
      f.call(opt_obj, arr2[i], i, arr)
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = l - 1;i >= 0;--i) {
    if(i in arr2) {
      f.call(opt_obj, arr2[i], i, arr)
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.filter ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj)
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = 0;i < l;i++) {
    if(i in arr2) {
      var val = arr2[i];
      if(f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val
      }
    }
  }
  return res
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.map ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj)
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = 0;i < l;i++) {
    if(i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr)
    }
  }
  return res
};
goog.array.reduce = function(arr, f, val, opt_obj) {
  if(arr.reduce) {
    if(opt_obj) {
      return arr.reduce(goog.bind(f, opt_obj), val)
    }else {
      return arr.reduce(f, val)
    }
  }
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr)
  });
  return rval
};
goog.array.reduceRight = function(arr, f, val, opt_obj) {
  if(arr.reduceRight) {
    if(opt_obj) {
      return arr.reduceRight(goog.bind(f, opt_obj), val)
    }else {
      return arr.reduceRight(f, val)
    }
  }
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr)
  });
  return rval
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.some ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj)
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = 0;i < l;i++) {
    if(i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true
    }
  }
  return false
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.every ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj)
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = 0;i < l;i++) {
    if(i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false
    }
  }
  return true
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i]
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = 0;i < l;i++) {
    if(i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i
    }
  }
  return-1
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i]
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = l - 1;i >= 0;i--) {
    if(i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i
    }
  }
  return-1
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0
};
goog.array.clear = function(arr) {
  if(!goog.isArray(arr)) {
    for(var i = arr.length - 1;i >= 0;i--) {
      delete arr[i]
    }
  }
  arr.length = 0
};
goog.array.insert = function(arr, obj) {
  if(!goog.array.contains(arr, obj)) {
    arr.push(obj)
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj)
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd)
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if(arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj)
  }else {
    goog.array.insertAt(arr, obj, i)
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if(rv = i >= 0) {
    goog.array.removeAt(arr, i)
  }
  return rv
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if(i >= 0) {
    goog.array.removeAt(arr, i);
    return true
  }
  return false
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments)
};
goog.array.clone = function(arr) {
  if(goog.isArray(arr)) {
    return goog.array.concat(arr)
  }else {
    var rv = [];
    for(var i = 0, len = arr.length;i < len;i++) {
      rv[i] = arr[i]
    }
    return rv
  }
};
goog.array.toArray = function(object) {
  if(goog.isArray(object)) {
    return goog.array.concat(object)
  }
  return goog.array.clone(object)
};
goog.array.extend = function(arr1, var_args) {
  for(var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if(goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && arr2.hasOwnProperty("callee")) {
      arr1.push.apply(arr1, arr2)
    }else {
      if(isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for(var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j]
        }
      }else {
        arr1.push(arr2)
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1))
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if(arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start)
  }else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end)
  }
};
goog.array.removeDuplicates = function(arr, opt_rv) {
  var returnArray = opt_rv || arr;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while(cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
    if(!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current
    }
  }
  returnArray.length = cursorInsert
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target)
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj)
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while(left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if(isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr)
    }else {
      compareResult = compareFn(opt_target, arr[middle])
    }
    if(compareResult > 0) {
      left = middle + 1
    }else {
      right = middle;
      found = !compareResult
    }
  }
  return found ? left : ~left
};
goog.array.sort = function(arr, opt_compareFn) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.sort.call(arr, opt_compareFn || goog.array.defaultCompare)
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for(var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]}
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index
  }
  goog.array.sort(arr, stableCompareFn);
  for(var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key])
  })
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for(var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if(compareResult > 0 || compareResult == 0 && opt_strict) {
      return false
    }
  }
  return true
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if(!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for(var i = 0;i < l;i++) {
    if(!equalsFn(arr1[i], arr2[i])) {
      return false
    }
  }
  return true
};
goog.array.compare = function(arr1, arr2, opt_equalsFn) {
  return goog.array.equals(arr1, arr2, opt_equalsFn)
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for(var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if(result != 0) {
      return result
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length)
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if(index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true
  }
  return false
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false
};
goog.array.bucket = function(array, sorter) {
  var buckets = {};
  for(var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter(value, i, array);
    if(goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value)
    }
  }
  return buckets
};
goog.array.repeat = function(value, n) {
  var array = [];
  for(var i = 0;i < n;i++) {
    array[i] = value
  }
  return array
};
goog.array.flatten = function(var_args) {
  var result = [];
  for(var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if(goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element))
    }else {
      result.push(element)
    }
  }
  return result
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if(array.length) {
    n %= array.length;
    if(n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n))
    }else {
      if(n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n))
      }
    }
  }
  return array
};
goog.array.zip = function(var_args) {
  if(!arguments.length) {
    return[]
  }
  var result = [];
  for(var i = 0;true;i++) {
    var value = [];
    for(var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if(i >= arr.length) {
        return result
      }
      value.push(arr[i])
    }
    result.push(value)
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for(var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp
  }
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for(var key in obj) {
    f.call(opt_obj, obj[key], key, obj)
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for(var key in obj) {
    if(f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key]
    }
  }
  return res
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for(var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj)
  }
  return res
};
goog.object.some = function(obj, f, opt_obj) {
  for(var key in obj) {
    if(f.call(opt_obj, obj[key], key, obj)) {
      return true
    }
  }
  return false
};
goog.object.every = function(obj, f, opt_obj) {
  for(var key in obj) {
    if(!f.call(opt_obj, obj[key], key, obj)) {
      return false
    }
  }
  return true
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for(var key in obj) {
    rv++
  }
  return rv
};
goog.object.getAnyKey = function(obj) {
  for(var key in obj) {
    return key
  }
};
goog.object.getAnyValue = function(obj) {
  for(var key in obj) {
    return obj[key]
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val)
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for(var key in obj) {
    res[i++] = obj[key]
  }
  return res
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for(var key in obj) {
    res[i++] = key
  }
  return res
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for(var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if(!goog.isDef(obj)) {
      break
    }
  }
  return obj
};
goog.object.containsKey = function(obj, key) {
  return key in obj
};
goog.object.containsValue = function(obj, val) {
  for(var key in obj) {
    if(obj[key] == val) {
      return true
    }
  }
  return false
};
goog.object.findKey = function(obj, f, opt_this) {
  for(var key in obj) {
    if(f.call(opt_this, obj[key], key, obj)) {
      return key
    }
  }
  return undefined
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key]
};
goog.object.isEmpty = function(obj) {
  for(var key in obj) {
    return false
  }
  return true
};
goog.object.clear = function(obj) {
  for(var i in obj) {
    delete obj[i]
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if(rv = key in obj) {
    delete obj[key]
  }
  return rv
};
goog.object.add = function(obj, key, val) {
  if(key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val)
};
goog.object.get = function(obj, key, opt_val) {
  if(key in obj) {
    return obj[key]
  }
  return opt_val
};
goog.object.set = function(obj, key, value) {
  obj[key] = value
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value
};
goog.object.clone = function(obj) {
  var res = {};
  for(var key in obj) {
    res[key] = obj[key]
  }
  return res
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if(type == "object" || type == "array") {
    if(obj.clone) {
      return obj.clone()
    }
    var clone = type == "array" ? [] : {};
    for(var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key])
    }
    return clone
  }
  return obj
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for(var key in obj) {
    transposed[obj[key]] = key
  }
  return transposed
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for(var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for(key in source) {
      target[key] = source[key]
    }
    for(var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if(Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key]
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if(argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0])
  }
  if(argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for(var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1]
  }
  return rv
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if(argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0])
  }
  var rv = {};
  for(var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true
  }
  return rv
};
goog.provide("goog.string.format");
goog.require("goog.string");
goog.string.format = function(formatString, var_args) {
  var args = Array.prototype.slice.call(arguments);
  var template = args.shift();
  if(typeof template == "undefined") {
    throw Error("[goog.string.format] Template required");
  }
  var formatRe = /%([0\-\ \+]*)(\d+)?(\.(\d+))?([%sfdiu])/g;
  function replacerDemuxer(match, flags, width, dotp, precision, type, offset, wholeString) {
    if(type == "%") {
      return"%"
    }
    var value = args.shift();
    if(typeof value == "undefined") {
      throw Error("[goog.string.format] Not enough arguments");
    }
    arguments[0] = value;
    return goog.string.format.demuxes_[type].apply(null, arguments)
  }
  return template.replace(formatRe, replacerDemuxer)
};
goog.string.format.demuxes_ = {};
goog.string.format.demuxes_["s"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  var replacement = value;
  if(isNaN(width) || width == "" || replacement.length >= width) {
    return replacement
  }
  if(flags.indexOf("-", 0) > -1) {
    replacement = replacement + goog.string.repeat(" ", width - replacement.length)
  }else {
    replacement = goog.string.repeat(" ", width - replacement.length) + replacement
  }
  return replacement
};
goog.string.format.demuxes_["f"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  var replacement = value.toString();
  if(!(isNaN(precision) || precision == "")) {
    replacement = value.toFixed(precision)
  }
  var sign;
  if(value < 0) {
    sign = "-"
  }else {
    if(flags.indexOf("+") >= 0) {
      sign = "+"
    }else {
      if(flags.indexOf(" ") >= 0) {
        sign = " "
      }else {
        sign = ""
      }
    }
  }
  if(value >= 0) {
    replacement = sign + replacement
  }
  if(isNaN(width) || replacement.length >= width) {
    return replacement
  }
  replacement = isNaN(precision) ? Math.abs(value).toString() : Math.abs(value).toFixed(precision);
  var padCount = width - replacement.length - sign.length;
  if(flags.indexOf("-", 0) >= 0) {
    replacement = sign + replacement + goog.string.repeat(" ", padCount)
  }else {
    var paddingChar = flags.indexOf("0", 0) >= 0 ? "0" : " ";
    replacement = sign + goog.string.repeat(paddingChar, padCount) + replacement
  }
  return replacement
};
goog.string.format.demuxes_["d"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  return goog.string.format.demuxes_["f"](parseInt(value, 10), flags, width, dotp, 0, type, offset, wholeString)
};
goog.string.format.demuxes_["i"] = goog.string.format.demuxes_["d"];
goog.string.format.demuxes_["u"] = goog.string.format.demuxes_["d"];
goog.provide("goog.userAgent.jscript");
goog.require("goog.string");
goog.userAgent.jscript.ASSUME_NO_JSCRIPT = false;
goog.userAgent.jscript.init_ = function() {
  var hasScriptEngine = "ScriptEngine" in goog.global;
  goog.userAgent.jscript.DETECTED_HAS_JSCRIPT_ = hasScriptEngine && goog.global["ScriptEngine"]() == "JScript";
  goog.userAgent.jscript.DETECTED_VERSION_ = goog.userAgent.jscript.DETECTED_HAS_JSCRIPT_ ? goog.global["ScriptEngineMajorVersion"]() + "." + goog.global["ScriptEngineMinorVersion"]() + "." + goog.global["ScriptEngineBuildVersion"]() : "0"
};
if(!goog.userAgent.jscript.ASSUME_NO_JSCRIPT) {
  goog.userAgent.jscript.init_()
}
goog.userAgent.jscript.HAS_JSCRIPT = goog.userAgent.jscript.ASSUME_NO_JSCRIPT ? false : goog.userAgent.jscript.DETECTED_HAS_JSCRIPT_;
goog.userAgent.jscript.VERSION = goog.userAgent.jscript.ASSUME_NO_JSCRIPT ? "0" : goog.userAgent.jscript.DETECTED_VERSION_;
goog.userAgent.jscript.isVersion = function(version) {
  return goog.string.compareVersions(goog.userAgent.jscript.VERSION, version) >= 0
};
goog.provide("goog.string.StringBuffer");
goog.require("goog.userAgent.jscript");
goog.string.StringBuffer = function(opt_a1, var_args) {
  this.buffer_ = goog.userAgent.jscript.HAS_JSCRIPT ? [] : "";
  if(opt_a1 != null) {
    this.append.apply(this, arguments)
  }
};
goog.string.StringBuffer.prototype.set = function(s) {
  this.clear();
  this.append(s)
};
if(goog.userAgent.jscript.HAS_JSCRIPT) {
  goog.string.StringBuffer.prototype.bufferLength_ = 0;
  goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
    if(opt_a2 == null) {
      this.buffer_[this.bufferLength_++] = a1
    }else {
      this.buffer_.push.apply(this.buffer_, arguments);
      this.bufferLength_ = this.buffer_.length
    }
    return this
  }
}else {
  goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
    this.buffer_ += a1;
    if(opt_a2 != null) {
      for(var i = 1;i < arguments.length;i++) {
        this.buffer_ += arguments[i]
      }
    }
    return this
  }
}
goog.string.StringBuffer.prototype.clear = function() {
  if(goog.userAgent.jscript.HAS_JSCRIPT) {
    this.buffer_.length = 0;
    this.bufferLength_ = 0
  }else {
    this.buffer_ = ""
  }
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.toString().length
};
goog.string.StringBuffer.prototype.toString = function() {
  if(goog.userAgent.jscript.HAS_JSCRIPT) {
    var str = this.buffer_.join("");
    this.clear();
    if(str) {
      this.append(str)
    }
    return str
  }else {
    return this.buffer_
  }
};
goog.provide("cljs.core");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.string.format");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
  throw new Error("No *print-fn* fn set for evaluation environment");
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false
};
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null
};
cljs.core.not = function not(x) {
  if(cljs.core.truth_(x)) {
    return false
  }else {
    return true
  }
};
cljs.core.type_satisfies_ = function type_satisfies_(p, x) {
  var x__$1 = x == null ? null : x;
  if(p[goog.typeOf(x__$1)]) {
    return true
  }else {
    if(p["_"]) {
      return true
    }else {
      if("\ufdd0'else") {
        return false
      }else {
        return null
      }
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  return Error(["No protocol method ", proto, " defined for type ", goog.typeOf(obj), ": ", obj].join(""))
};
cljs.core.aclone = function aclone(array_like) {
  return array_like.slice()
};
cljs.core.array = function array(var_args) {
  return Array.prototype.slice.call(arguments)
};
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size)
  };
  var make_array__2 = function(type, size) {
    return make_array.call(null, size)
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$lang$arity$1 = make_array__1;
  make_array.cljs$lang$arity$2 = make_array__2;
  return make_array
}();
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i]
  };
  var aget__3 = function() {
    var G__3619__delegate = function(array, i, idxs) {
      return cljs.core.apply.call(null, aget, aget.call(null, array, i), idxs)
    };
    var G__3619 = function(array, i, var_args) {
      var idxs = null;
      if(goog.isDef(var_args)) {
        idxs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3619__delegate.call(this, array, i, idxs)
    };
    G__3619.cljs$lang$maxFixedArity = 2;
    G__3619.cljs$lang$applyTo = function(arglist__3620) {
      var array = cljs.core.first(arglist__3620);
      var i = cljs.core.first(cljs.core.next(arglist__3620));
      var idxs = cljs.core.rest(cljs.core.next(arglist__3620));
      return G__3619__delegate(array, i, idxs)
    };
    G__3619.cljs$lang$arity$variadic = G__3619__delegate;
    return G__3619
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        return aget__3.cljs$lang$arity$variadic(array, i, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$lang$arity$2 = aget__2;
  aget.cljs$lang$arity$variadic = aget__3.cljs$lang$arity$variadic;
  return aget
}();
cljs.core.aset = function aset(array, i, val) {
  return array[i] = val
};
cljs.core.alength = function alength(array) {
  return array.length
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.call(null, null, aseq)
  };
  var into_array__2 = function(type, aseq) {
    return cljs.core.reduce.call(null, function(a, x) {
      a.push(x);
      return a
    }, [], aseq)
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$lang$arity$1 = into_array__1;
  into_array.cljs$lang$arity$2 = into_array__2;
  return into_array
}();
cljs.core.IFn = {};
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = cljs.core._invoke[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._invoke["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$)
    }
  };
  var _invoke__2 = function(this$, a) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = cljs.core._invoke[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._invoke["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a)
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = cljs.core._invoke[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._invoke["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b)
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = cljs.core._invoke[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._invoke["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c)
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = cljs.core._invoke[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._invoke["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d)
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = cljs.core._invoke[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._invoke["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e)
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = cljs.core._invoke[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._invoke["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f)
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = cljs.core._invoke[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._invoke["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g)
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = cljs.core._invoke[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._invoke["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h)
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = cljs.core._invoke[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._invoke["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i)
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = cljs.core._invoke[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._invoke["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j)
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = cljs.core._invoke[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._invoke["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k)
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = cljs.core._invoke[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._invoke["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l)
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = cljs.core._invoke[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._invoke["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m)
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = cljs.core._invoke[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._invoke["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n)
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = cljs.core._invoke[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._invoke["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = cljs.core._invoke[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._invoke["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p)
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = cljs.core._invoke[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._invoke["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = cljs.core._invoke[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._invoke["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s)
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = cljs.core._invoke[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._invoke["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t)
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = cljs.core._invoke[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._invoke["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest)
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$lang$arity$1 = _invoke__1;
  _invoke.cljs$lang$arity$2 = _invoke__2;
  _invoke.cljs$lang$arity$3 = _invoke__3;
  _invoke.cljs$lang$arity$4 = _invoke__4;
  _invoke.cljs$lang$arity$5 = _invoke__5;
  _invoke.cljs$lang$arity$6 = _invoke__6;
  _invoke.cljs$lang$arity$7 = _invoke__7;
  _invoke.cljs$lang$arity$8 = _invoke__8;
  _invoke.cljs$lang$arity$9 = _invoke__9;
  _invoke.cljs$lang$arity$10 = _invoke__10;
  _invoke.cljs$lang$arity$11 = _invoke__11;
  _invoke.cljs$lang$arity$12 = _invoke__12;
  _invoke.cljs$lang$arity$13 = _invoke__13;
  _invoke.cljs$lang$arity$14 = _invoke__14;
  _invoke.cljs$lang$arity$15 = _invoke__15;
  _invoke.cljs$lang$arity$16 = _invoke__16;
  _invoke.cljs$lang$arity$17 = _invoke__17;
  _invoke.cljs$lang$arity$18 = _invoke__18;
  _invoke.cljs$lang$arity$19 = _invoke__19;
  _invoke.cljs$lang$arity$20 = _invoke__20;
  _invoke.cljs$lang$arity$21 = _invoke__21;
  return _invoke
}();
cljs.core.ICounted = {};
cljs.core._count = function _count(coll) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._count[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._count["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ICounted.-count", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.IEmptyableCollection = {};
cljs.core._empty = function _empty(coll) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._empty[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._empty["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.ICollection = {};
cljs.core._conj = function _conj(coll, o) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._conj[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._conj["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o)
  }
};
cljs.core.IIndexed = {};
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if(function() {
      var and__3822__auto__ = coll;
      if(and__3822__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2
      }else {
        return and__3822__auto__
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n)
    }else {
      var x__2373__auto__ = coll == null ? null : coll;
      return function() {
        var or__3824__auto__ = cljs.core._nth[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._nth["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n)
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if(function() {
      var and__3822__auto__ = coll;
      if(and__3822__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3
      }else {
        return and__3822__auto__
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found)
    }else {
      var x__2373__auto__ = coll == null ? null : coll;
      return function() {
        var or__3824__auto__ = cljs.core._nth[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._nth["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found)
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$lang$arity$2 = _nth__2;
  _nth.cljs$lang$arity$3 = _nth__3;
  return _nth
}();
cljs.core.ASeq = {};
cljs.core.ISeq = {};
cljs.core._first = function _first(coll) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._first[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._first["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-first", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core._rest = function _rest(coll) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._rest[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._rest["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-rest", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.INext = {};
cljs.core._next = function _next(coll) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$INext$_next$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._next[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._next["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "INext.-next", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.ILookup = {};
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if(function() {
      var and__3822__auto__ = o;
      if(and__3822__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2
      }else {
        return and__3822__auto__
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k)
    }else {
      var x__2373__auto__ = o == null ? null : o;
      return function() {
        var or__3824__auto__ = cljs.core._lookup[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._lookup["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k)
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if(function() {
      var and__3822__auto__ = o;
      if(and__3822__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3
      }else {
        return and__3822__auto__
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found)
    }else {
      var x__2373__auto__ = o == null ? null : o;
      return function() {
        var or__3824__auto__ = cljs.core._lookup[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._lookup["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found)
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$lang$arity$2 = _lookup__2;
  _lookup.cljs$lang$arity$3 = _lookup__3;
  return _lookup
}();
cljs.core.IAssociative = {};
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k)
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._assoc[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._assoc["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v)
  }
};
cljs.core.IMap = {};
cljs.core._dissoc = function _dissoc(coll, k) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._dissoc[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._dissoc["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k)
  }
};
cljs.core.IMapEntry = {};
cljs.core._key = function _key(coll) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._key[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._key["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-key", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core._val = function _val(coll) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._val[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._val["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-val", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.ISet = {};
cljs.core._disjoin = function _disjoin(coll, v) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._disjoin[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._disjoin["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v)
  }
};
cljs.core.IStack = {};
cljs.core._peek = function _peek(coll) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._peek[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._peek["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IStack.-peek", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core._pop = function _pop(coll) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._pop[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._pop["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IStack.-pop", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.IVector = {};
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._assoc_n[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._assoc_n["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val)
  }
};
cljs.core.IDeref = {};
cljs.core._deref = function _deref(o) {
  if(function() {
    var and__3822__auto__ = o;
    if(and__3822__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o)
  }else {
    var x__2373__auto__ = o == null ? null : o;
    return function() {
      var or__3824__auto__ = cljs.core._deref[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._deref["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IDeref.-deref", o);
        }
      }
    }().call(null, o)
  }
};
cljs.core.IDerefWithTimeout = {};
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if(function() {
    var and__3822__auto__ = o;
    if(and__3822__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val)
  }else {
    var x__2373__auto__ = o == null ? null : o;
    return function() {
      var or__3824__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._deref_with_timeout["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val)
  }
};
cljs.core.IMeta = {};
cljs.core._meta = function _meta(o) {
  if(function() {
    var and__3822__auto__ = o;
    if(and__3822__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o)
  }else {
    var x__2373__auto__ = o == null ? null : o;
    return function() {
      var or__3824__auto__ = cljs.core._meta[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._meta["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMeta.-meta", o);
        }
      }
    }().call(null, o)
  }
};
cljs.core.IWithMeta = {};
cljs.core._with_meta = function _with_meta(o, meta) {
  if(function() {
    var and__3822__auto__ = o;
    if(and__3822__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta)
  }else {
    var x__2373__auto__ = o == null ? null : o;
    return function() {
      var or__3824__auto__ = cljs.core._with_meta[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._with_meta["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta)
  }
};
cljs.core.IReduce = {};
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if(function() {
      var and__3822__auto__ = coll;
      if(and__3822__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2
      }else {
        return and__3822__auto__
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f)
    }else {
      var x__2373__auto__ = coll == null ? null : coll;
      return function() {
        var or__3824__auto__ = cljs.core._reduce[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._reduce["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f)
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if(function() {
      var and__3822__auto__ = coll;
      if(and__3822__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3
      }else {
        return and__3822__auto__
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start)
    }else {
      var x__2373__auto__ = coll == null ? null : coll;
      return function() {
        var or__3824__auto__ = cljs.core._reduce[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._reduce["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start)
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$lang$arity$2 = _reduce__2;
  _reduce.cljs$lang$arity$3 = _reduce__3;
  return _reduce
}();
cljs.core.IKVReduce = {};
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._kv_reduce[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._kv_reduce["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init)
  }
};
cljs.core.IEquiv = {};
cljs.core._equiv = function _equiv(o, other) {
  if(function() {
    var and__3822__auto__ = o;
    if(and__3822__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other)
  }else {
    var x__2373__auto__ = o == null ? null : o;
    return function() {
      var or__3824__auto__ = cljs.core._equiv[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._equiv["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other)
  }
};
cljs.core.IHash = {};
cljs.core._hash = function _hash(o) {
  if(function() {
    var and__3822__auto__ = o;
    if(and__3822__auto__) {
      return o.cljs$core$IHash$_hash$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o)
  }else {
    var x__2373__auto__ = o == null ? null : o;
    return function() {
      var or__3824__auto__ = cljs.core._hash[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._hash["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IHash.-hash", o);
        }
      }
    }().call(null, o)
  }
};
cljs.core.ISeqable = {};
cljs.core._seq = function _seq(o) {
  if(function() {
    var and__3822__auto__ = o;
    if(and__3822__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o)
  }else {
    var x__2373__auto__ = o == null ? null : o;
    return function() {
      var or__3824__auto__ = cljs.core._seq[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._seq["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISeqable.-seq", o);
        }
      }
    }().call(null, o)
  }
};
cljs.core.ISequential = {};
cljs.core.IList = {};
cljs.core.IRecord = {};
cljs.core.IReversible = {};
cljs.core._rseq = function _rseq(coll) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._rseq[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._rseq["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IReversible.-rseq", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.ISorted = {};
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._sorted_seq[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._sorted_seq["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_)
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._sorted_seq_from["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_)
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._entry_key[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._entry_key["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry)
  }
};
cljs.core._comparator = function _comparator(coll) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._comparator[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._comparator["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-comparator", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.IPrintable = {};
cljs.core._pr_seq = function _pr_seq(o, opts) {
  if(function() {
    var and__3822__auto__ = o;
    if(and__3822__auto__) {
      return o.cljs$core$IPrintable$_pr_seq$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return o.cljs$core$IPrintable$_pr_seq$arity$2(o, opts)
  }else {
    var x__2373__auto__ = o == null ? null : o;
    return function() {
      var or__3824__auto__ = cljs.core._pr_seq[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._pr_seq["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IPrintable.-pr-seq", o);
        }
      }
    }().call(null, o, opts)
  }
};
cljs.core.IWriter = {};
cljs.core._write = function _write(writer, s) {
  if(function() {
    var and__3822__auto__ = writer;
    if(and__3822__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s)
  }else {
    var x__2373__auto__ = writer == null ? null : writer;
    return function() {
      var or__3824__auto__ = cljs.core._write[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._write["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-write", writer);
        }
      }
    }().call(null, writer, s)
  }
};
cljs.core._flush = function _flush(writer) {
  if(function() {
    var and__3822__auto__ = writer;
    if(and__3822__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer)
  }else {
    var x__2373__auto__ = writer == null ? null : writer;
    return function() {
      var or__3824__auto__ = cljs.core._flush[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._flush["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-flush", writer);
        }
      }
    }().call(null, writer)
  }
};
cljs.core.IPrintWithWriter = {};
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if(function() {
    var and__3822__auto__ = o;
    if(and__3822__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts)
  }else {
    var x__2373__auto__ = o == null ? null : o;
    return function() {
      var or__3824__auto__ = cljs.core._pr_writer[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._pr_writer["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts)
  }
};
cljs.core.IPending = {};
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if(function() {
    var and__3822__auto__ = d;
    if(and__3822__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d)
  }else {
    var x__2373__auto__ = d == null ? null : d;
    return function() {
      var or__3824__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._realized_QMARK_["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IPending.-realized?", d);
        }
      }
    }().call(null, d)
  }
};
cljs.core.IWatchable = {};
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if(function() {
    var and__3822__auto__ = this$;
    if(and__3822__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval)
  }else {
    var x__2373__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3824__auto__ = cljs.core._notify_watches[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._notify_watches["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval)
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if(function() {
    var and__3822__auto__ = this$;
    if(and__3822__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f)
  }else {
    var x__2373__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3824__auto__ = cljs.core._add_watch[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._add_watch["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f)
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if(function() {
    var and__3822__auto__ = this$;
    if(and__3822__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key)
  }else {
    var x__2373__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3824__auto__ = cljs.core._remove_watch[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._remove_watch["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key)
  }
};
cljs.core.IEditableCollection = {};
cljs.core._as_transient = function _as_transient(coll) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._as_transient[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._as_transient["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.ITransientCollection = {};
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if(function() {
    var and__3822__auto__ = tcoll;
    if(and__3822__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val)
  }else {
    var x__2373__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3824__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._conj_BANG_["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val)
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if(function() {
    var and__3822__auto__ = tcoll;
    if(and__3822__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll)
  }else {
    var x__2373__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3824__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._persistent_BANG_["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll)
  }
};
cljs.core.ITransientAssociative = {};
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if(function() {
    var and__3822__auto__ = tcoll;
    if(and__3822__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val)
  }else {
    var x__2373__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3824__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._assoc_BANG_["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val)
  }
};
cljs.core.ITransientMap = {};
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if(function() {
    var and__3822__auto__ = tcoll;
    if(and__3822__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key)
  }else {
    var x__2373__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3824__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key)
  }
};
cljs.core.ITransientVector = {};
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if(function() {
    var and__3822__auto__ = tcoll;
    if(and__3822__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val)
  }else {
    var x__2373__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3824__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val)
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if(function() {
    var and__3822__auto__ = tcoll;
    if(and__3822__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll)
  }else {
    var x__2373__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3824__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._pop_BANG_["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll)
  }
};
cljs.core.ITransientSet = {};
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if(function() {
    var and__3822__auto__ = tcoll;
    if(and__3822__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v)
  }else {
    var x__2373__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3824__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v)
  }
};
cljs.core.IComparable = {};
cljs.core._compare = function _compare(x, y) {
  if(function() {
    var and__3822__auto__ = x;
    if(and__3822__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y)
  }else {
    var x__2373__auto__ = x == null ? null : x;
    return function() {
      var or__3824__auto__ = cljs.core._compare[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._compare["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IComparable.-compare", x);
        }
      }
    }().call(null, x, y)
  }
};
cljs.core.IChunk = {};
cljs.core._drop_first = function _drop_first(coll) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._drop_first[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._drop_first["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.IChunkedSeq = {};
cljs.core._chunked_first = function _chunked_first(coll) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._chunked_first[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._chunked_first["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._chunked_rest[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._chunked_rest["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.IChunkedNext = {};
cljs.core._chunked_next = function _chunked_next(coll) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._chunked_next[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._chunked_next["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.seq = function seq(coll) {
  if(coll == null) {
    return null
  }else {
    if(function() {
      var G__3622 = coll;
      if(G__3622) {
        if(function() {
          var or__3824__auto__ = G__3622.cljs$lang$protocol_mask$partition0$ & 32;
          if(or__3824__auto__) {
            return or__3824__auto__
          }else {
            return G__3622.cljs$core$ASeq$
          }
        }()) {
          return true
        }else {
          if(!G__3622.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.type_satisfies_.call(null, cljs.core.ASeq, G__3622)
          }else {
            return false
          }
        }
      }else {
        return cljs.core.type_satisfies_.call(null, cljs.core.ASeq, G__3622)
      }
    }()) {
      return coll
    }else {
      return cljs.core._seq.call(null, coll)
    }
  }
};
cljs.core.first = function first(coll) {
  if(coll == null) {
    return null
  }else {
    if(function() {
      var G__3624 = coll;
      if(G__3624) {
        if(function() {
          var or__3824__auto__ = G__3624.cljs$lang$protocol_mask$partition0$ & 64;
          if(or__3824__auto__) {
            return or__3824__auto__
          }else {
            return G__3624.cljs$core$ISeq$
          }
        }()) {
          return true
        }else {
          if(!G__3624.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.type_satisfies_.call(null, cljs.core.ISeq, G__3624)
          }else {
            return false
          }
        }
      }else {
        return cljs.core.type_satisfies_.call(null, cljs.core.ISeq, G__3624)
      }
    }()) {
      return cljs.core._first.call(null, coll)
    }else {
      var s = cljs.core.seq.call(null, coll);
      if(s == null) {
        return null
      }else {
        return cljs.core._first.call(null, s)
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if(!(coll == null)) {
    if(function() {
      var G__3626 = coll;
      if(G__3626) {
        if(function() {
          var or__3824__auto__ = G__3626.cljs$lang$protocol_mask$partition0$ & 64;
          if(or__3824__auto__) {
            return or__3824__auto__
          }else {
            return G__3626.cljs$core$ISeq$
          }
        }()) {
          return true
        }else {
          if(!G__3626.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.type_satisfies_.call(null, cljs.core.ISeq, G__3626)
          }else {
            return false
          }
        }
      }else {
        return cljs.core.type_satisfies_.call(null, cljs.core.ISeq, G__3626)
      }
    }()) {
      return cljs.core._rest.call(null, coll)
    }else {
      var s = cljs.core.seq.call(null, coll);
      if(!(s == null)) {
        return cljs.core._rest.call(null, s)
      }else {
        return cljs.core.List.EMPTY
      }
    }
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.next = function next(coll) {
  if(coll == null) {
    return null
  }else {
    if(function() {
      var G__3628 = coll;
      if(G__3628) {
        if(function() {
          var or__3824__auto__ = G__3628.cljs$lang$protocol_mask$partition0$ & 128;
          if(or__3824__auto__) {
            return or__3824__auto__
          }else {
            return G__3628.cljs$core$INext$
          }
        }()) {
          return true
        }else {
          if(!G__3628.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.type_satisfies_.call(null, cljs.core.INext, G__3628)
          }else {
            return false
          }
        }
      }else {
        return cljs.core.type_satisfies_.call(null, cljs.core.INext, G__3628)
      }
    }()) {
      return cljs.core._next.call(null, coll)
    }else {
      return cljs.core.seq.call(null, cljs.core.rest.call(null, coll))
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true
  };
  var _EQ___2 = function(x, y) {
    var or__3824__auto__ = x === y;
    if(or__3824__auto__) {
      return or__3824__auto__
    }else {
      return cljs.core._equiv.call(null, x, y)
    }
  };
  var _EQ___3 = function() {
    var G__3629__delegate = function(x, y, more) {
      while(true) {
        if(cljs.core.truth_(_EQ_.call(null, x, y))) {
          if(cljs.core.next.call(null, more)) {
            var G__3630 = y;
            var G__3631 = cljs.core.first.call(null, more);
            var G__3632 = cljs.core.next.call(null, more);
            x = G__3630;
            y = G__3631;
            more = G__3632;
            continue
          }else {
            return _EQ_.call(null, y, cljs.core.first.call(null, more))
          }
        }else {
          return false
        }
        break
      }
    };
    var G__3629 = function(x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3629__delegate.call(this, x, y, more)
    };
    G__3629.cljs$lang$maxFixedArity = 2;
    G__3629.cljs$lang$applyTo = function(arglist__3633) {
      var x = cljs.core.first(arglist__3633);
      var y = cljs.core.first(cljs.core.next(arglist__3633));
      var more = cljs.core.rest(cljs.core.next(arglist__3633));
      return G__3629__delegate(x, y, more)
    };
    G__3629.cljs$lang$arity$variadic = G__3629__delegate;
    return G__3629
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        return _EQ___3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$lang$arity$1 = _EQ___1;
  _EQ_.cljs$lang$arity$2 = _EQ___2;
  _EQ_.cljs$lang$arity$variadic = _EQ___3.cljs$lang$arity$variadic;
  return _EQ_
}();
cljs.core.type = function type(x) {
  if(x == null) {
    return null
  }else {
    return x.constructor
  }
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t
};
cljs.core.IHash["null"] = true;
cljs.core._hash["null"] = function(o) {
  return 0
};
cljs.core.ILookup["null"] = true;
cljs.core._lookup["null"] = function() {
  var G__3634 = null;
  var G__3634__2 = function(o, k) {
    return null
  };
  var G__3634__3 = function(o, k, not_found) {
    return not_found
  };
  G__3634 = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3634__2.call(this, o, k);
      case 3:
        return G__3634__3.call(this, o, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__3634
}();
cljs.core.IAssociative["null"] = true;
cljs.core._assoc["null"] = function(_, k, v) {
  return cljs.core.hash_map.call(null, k, v)
};
cljs.core.INext["null"] = true;
cljs.core._next["null"] = function(_) {
  return null
};
cljs.core.IPrintWithWriter["null"] = true;
cljs.core._pr_writer["null"] = function(o, writer, _) {
  return cljs.core._write.call(null, writer, "nil")
};
cljs.core.ICollection["null"] = true;
cljs.core._conj["null"] = function(_, o) {
  return cljs.core.list.call(null, o)
};
cljs.core.IReduce["null"] = true;
cljs.core._reduce["null"] = function() {
  var G__3635 = null;
  var G__3635__2 = function(_, f) {
    return f.call(null)
  };
  var G__3635__3 = function(_, f, start) {
    return start
  };
  G__3635 = function(_, f, start) {
    switch(arguments.length) {
      case 2:
        return G__3635__2.call(this, _, f);
      case 3:
        return G__3635__3.call(this, _, f, start)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__3635
}();
cljs.core.IPrintable["null"] = true;
cljs.core._pr_seq["null"] = function(o) {
  return cljs.core.list.call(null, "nil")
};
cljs.core.ISet["null"] = true;
cljs.core._disjoin["null"] = function(_, v) {
  return null
};
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0
};
cljs.core.IStack["null"] = true;
cljs.core._peek["null"] = function(_) {
  return null
};
cljs.core._pop["null"] = function(_) {
  return null
};
cljs.core.ISeq["null"] = true;
cljs.core._first["null"] = function(_) {
  return null
};
cljs.core._rest["null"] = function(_) {
  return cljs.core.list.call(null)
};
cljs.core.IEquiv["null"] = true;
cljs.core._equiv["null"] = function(_, o) {
  return o == null
};
cljs.core.IWithMeta["null"] = true;
cljs.core._with_meta["null"] = function(_, meta) {
  return null
};
cljs.core.IMeta["null"] = true;
cljs.core._meta["null"] = function(_) {
  return null
};
cljs.core.IIndexed["null"] = true;
cljs.core._nth["null"] = function() {
  var G__3636 = null;
  var G__3636__2 = function(_, n) {
    return null
  };
  var G__3636__3 = function(_, n, not_found) {
    return not_found
  };
  G__3636 = function(_, n, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3636__2.call(this, _, n);
      case 3:
        return G__3636__3.call(this, _, n, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__3636
}();
cljs.core.IEmptyableCollection["null"] = true;
cljs.core._empty["null"] = function(_) {
  return null
};
cljs.core.IMap["null"] = true;
cljs.core._dissoc["null"] = function(_, k) {
  return null
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var and__3822__auto__ = cljs.core.instance_QMARK_.call(null, Date, other);
  if(and__3822__auto__) {
    return o.toString() === other.toString()
  }else {
    return and__3822__auto__
  }
};
cljs.core.IHash["number"] = true;
cljs.core._hash["number"] = function(o) {
  return o
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o
};
cljs.core.IHash["boolean"] = true;
cljs.core._hash["boolean"] = function(o) {
  if(o === true) {
    return 1
  }else {
    return 0
  }
};
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o)
};
cljs.core.inc = function inc(x) {
  return x + 1
};
goog.provide("cljs.core.Reduced");
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/Reduced")
};
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/Reduced")
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  return self__.val
};
cljs.core.Reduced;
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x)
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return cljs.core.instance_QMARK_.call(null, cljs.core.Reduced, r)
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count.call(null, cicoll);
    if(cnt === 0) {
      return f.call(null)
    }else {
      var val = cljs.core._nth.call(null, cicoll, 0);
      var n = 1;
      while(true) {
        if(n < cnt) {
          var nval = f.call(null, val, cljs.core._nth.call(null, cicoll, n));
          if(cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval)
          }else {
            var G__3637 = nval;
            var G__3638 = n + 1;
            val = G__3637;
            n = G__3638;
            continue
          }
        }else {
          return val
        }
        break
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = 0;
    while(true) {
      if(n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if(cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval)
        }else {
          var G__3639 = nval;
          var G__3640 = n + 1;
          val__$1 = G__3639;
          n = G__3640;
          continue
        }
      }else {
        return val__$1
      }
      break
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = idx;
    while(true) {
      if(n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if(cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval)
        }else {
          var G__3641 = nval;
          var G__3642 = n + 1;
          val__$1 = G__3641;
          n = G__3642;
          continue
        }
      }else {
        return val__$1
      }
      break
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$lang$arity$2 = ci_reduce__2;
  ci_reduce.cljs$lang$arity$3 = ci_reduce__3;
  ci_reduce.cljs$lang$arity$4 = ci_reduce__4;
  return ci_reduce
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if(arr.length === 0) {
      return f.call(null)
    }else {
      var val = arr[0];
      var n = 1;
      while(true) {
        if(n < cnt) {
          var nval = f.call(null, val, arr[n]);
          if(cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval)
          }else {
            var G__3643 = nval;
            var G__3644 = n + 1;
            val = G__3643;
            n = G__3644;
            continue
          }
        }else {
          return val
        }
        break
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while(true) {
      if(n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if(cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval)
        }else {
          var G__3645 = nval;
          var G__3646 = n + 1;
          val__$1 = G__3645;
          n = G__3646;
          continue
        }
      }else {
        return val__$1
      }
      break
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while(true) {
      if(n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if(cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval)
        }else {
          var G__3647 = nval;
          var G__3648 = n + 1;
          val__$1 = G__3647;
          n = G__3648;
          continue
        }
      }else {
        return val__$1
      }
      break
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$lang$arity$2 = array_reduce__2;
  array_reduce.cljs$lang$arity$3 = array_reduce__3;
  array_reduce.cljs$lang$arity$4 = array_reduce__4;
  return array_reduce
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__3650 = x;
  if(G__3650) {
    if(function() {
      var or__3824__auto__ = G__3650.cljs$lang$protocol_mask$partition0$ & 2;
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        return G__3650.cljs$core$ICounted$
      }
    }()) {
      return true
    }else {
      if(!G__3650.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.type_satisfies_.call(null, cljs.core.ICounted, G__3650)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.type_satisfies_.call(null, cljs.core.ICounted, G__3650)
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__3652 = x;
  if(G__3652) {
    if(function() {
      var or__3824__auto__ = G__3652.cljs$lang$protocol_mask$partition0$ & 16;
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        return G__3652.cljs$core$IIndexed$
      }
    }()) {
      return true
    }else {
      if(!G__3652.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.type_satisfies_.call(null, cljs.core.IIndexed, G__3652)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.type_satisfies_.call(null, cljs.core.IIndexed, G__3652)
  }
};
goog.provide("cljs.core.IndexedSeq");
cljs.core.IndexedSeq = function(a, i) {
  this.a = a;
  this.i = i;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 166199550
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/IndexedSeq")
};
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/IndexedSeq")
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.hash_coll.call(null, coll)
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  if(self__.i + 1 < self__.a.length) {
    return new cljs.core.IndexedSeq(self__.a, self__.i + 1)
  }else {
    return null
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return cljs.core.cons.call(null, o, coll)
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var c = coll.cljs$core$ICounted$_count$arity$1(coll);
  if(c > 0) {
    return new cljs.core.RSeq(coll, c - 1, null)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  if(cljs.core.counted_QMARK_.call(null, self__.a)) {
    return cljs.core.ci_reduce.call(null, self__.a, f, self__.a[self__.i], self__.i + 1)
  }else {
    return cljs.core.ci_reduce.call(null, coll, f, self__.a[self__.i], 0)
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  if(cljs.core.counted_QMARK_.call(null, self__.a)) {
    return cljs.core.ci_reduce.call(null, self__.a, f, start, self__.i)
  }else {
    return cljs.core.ci_reduce.call(null, coll, f, start, 0)
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  return this$
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  return self__.a.length - self__.i
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  return self__.a[self__.i]
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  if(self__.i + 1 < self__.a.length) {
    return new cljs.core.IndexedSeq(self__.a, self__.i + 1)
  }else {
    return cljs.core.list.call(null)
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var i__$1 = n + self__.i;
  if(i__$1 < self__.a.length) {
    return self__.a[i__$1]
  }else {
    return null
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var i__$1 = n + self__.i;
  if(i__$1 < self__.a.length) {
    return self__.a[i__$1]
  }else {
    return not_found
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.List.EMPTY
};
cljs.core.IndexedSeq;
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.call(null, prim, 0)
  };
  var prim_seq__2 = function(prim, i) {
    if(i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i)
    }else {
      return null
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$lang$arity$1 = prim_seq__1;
  prim_seq.cljs$lang$arity$2 = prim_seq__2;
  return prim_seq
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.call(null, array, 0)
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.call(null, array, i)
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$lang$arity$1 = array_seq__1;
  array_seq.cljs$lang$arity$2 = array_seq__2;
  return array_seq
}();
cljs.core.IReduce["array"] = true;
cljs.core._reduce["array"] = function() {
  var G__3653 = null;
  var G__3653__2 = function(array, f) {
    return cljs.core.ci_reduce.call(null, array, f)
  };
  var G__3653__3 = function(array, f, start) {
    return cljs.core.ci_reduce.call(null, array, f, start)
  };
  G__3653 = function(array, f, start) {
    switch(arguments.length) {
      case 2:
        return G__3653__2.call(this, array, f);
      case 3:
        return G__3653__3.call(this, array, f, start)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__3653
}();
cljs.core.ILookup["array"] = true;
cljs.core._lookup["array"] = function() {
  var G__3654 = null;
  var G__3654__2 = function(array, k) {
    return array[k]
  };
  var G__3654__3 = function(array, k, not_found) {
    return cljs.core._nth.call(null, array, k, not_found)
  };
  G__3654 = function(array, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3654__2.call(this, array, k);
      case 3:
        return G__3654__3.call(this, array, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__3654
}();
cljs.core.IIndexed["array"] = true;
cljs.core._nth["array"] = function() {
  var G__3655 = null;
  var G__3655__2 = function(array, n) {
    if(n < array.length) {
      return array[n]
    }else {
      return null
    }
  };
  var G__3655__3 = function(array, n, not_found) {
    if(n < array.length) {
      return array[n]
    }else {
      return not_found
    }
  };
  G__3655 = function(array, n, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3655__2.call(this, array, n);
      case 3:
        return G__3655__3.call(this, array, n, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__3655
}();
cljs.core.ICounted["array"] = true;
cljs.core._count["array"] = function(a) {
  return a.length
};
cljs.core.ISeqable["array"] = true;
cljs.core._seq["array"] = function(array) {
  return cljs.core.array_seq.call(null, array, 0)
};
goog.provide("cljs.core.RSeq");
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850574
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/RSeq")
};
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/RSeq")
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.hash_coll.call(null, coll)
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return cljs.core.cons.call(null, o, coll)
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  return coll
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return self__.i + 1
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core._nth.call(null, self__.ci, self__.i)
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  if(self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta)
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.RSeq;
cljs.core.second = function second(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll))
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first.call(null, cljs.core.first.call(null, coll))
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next.call(null, cljs.core.first.call(null, coll))
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll))
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next.call(null, cljs.core.next.call(null, coll))
};
cljs.core.last = function last(s) {
  while(true) {
    var sn = cljs.core.next.call(null, s);
    if(!(sn == null)) {
      var G__3656 = sn;
      s = G__3656;
      continue
    }else {
      return cljs.core.first.call(null, s)
    }
    break
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o
};
cljs.core.conj = function() {
  var conj = null;
  var conj__2 = function(coll, x) {
    return cljs.core._conj.call(null, coll, x)
  };
  var conj__3 = function() {
    var G__3657__delegate = function(coll, x, xs) {
      while(true) {
        if(cljs.core.truth_(xs)) {
          var G__3658 = conj.call(null, coll, x);
          var G__3659 = cljs.core.first.call(null, xs);
          var G__3660 = cljs.core.next.call(null, xs);
          coll = G__3658;
          x = G__3659;
          xs = G__3660;
          continue
        }else {
          return conj.call(null, coll, x)
        }
        break
      }
    };
    var G__3657 = function(coll, x, var_args) {
      var xs = null;
      if(goog.isDef(var_args)) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3657__delegate.call(this, coll, x, xs)
    };
    G__3657.cljs$lang$maxFixedArity = 2;
    G__3657.cljs$lang$applyTo = function(arglist__3661) {
      var coll = cljs.core.first(arglist__3661);
      var x = cljs.core.first(cljs.core.next(arglist__3661));
      var xs = cljs.core.rest(cljs.core.next(arglist__3661));
      return G__3657__delegate(coll, x, xs)
    };
    G__3657.cljs$lang$arity$variadic = G__3657__delegate;
    return G__3657
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 2:
        return conj__2.call(this, coll, x);
      default:
        return conj__3.cljs$lang$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$lang$arity$2 = conj__2;
  conj.cljs$lang$arity$variadic = conj__3.cljs$lang$arity$variadic;
  return conj
}();
cljs.core.empty = function empty(coll) {
  return cljs.core._empty.call(null, coll)
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq.call(null, coll);
  var acc = 0;
  while(true) {
    if(cljs.core.counted_QMARK_.call(null, s)) {
      return acc + cljs.core._count.call(null, s)
    }else {
      var G__3662 = cljs.core.next.call(null, s);
      var G__3663 = acc + 1;
      s = G__3662;
      acc = G__3663;
      continue
    }
    break
  }
};
cljs.core.count = function count(coll) {
  if(cljs.core.counted_QMARK_.call(null, coll)) {
    return cljs.core._count.call(null, coll)
  }else {
    return cljs.core.accumulating_seq_count.call(null, coll)
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while(true) {
      if(coll == null) {
        throw new Error("Index out of bounds");
      }else {
        if(n === 0) {
          if(cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll)
          }else {
            throw new Error("Index out of bounds");
          }
        }else {
          if(cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n)
          }else {
            if(cljs.core.seq.call(null, coll)) {
              var G__3664 = cljs.core.next.call(null, coll);
              var G__3665 = n - 1;
              coll = G__3664;
              n = G__3665;
              continue
            }else {
              if("\ufdd0'else") {
                throw new Error("Index out of bounds");
              }else {
                return null
              }
            }
          }
        }
      }
      break
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while(true) {
      if(coll == null) {
        return not_found
      }else {
        if(n === 0) {
          if(cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll)
          }else {
            return not_found
          }
        }else {
          if(cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n, not_found)
          }else {
            if(cljs.core.seq.call(null, coll)) {
              var G__3666 = cljs.core.next.call(null, coll);
              var G__3667 = n - 1;
              var G__3668 = not_found;
              coll = G__3666;
              n = G__3667;
              not_found = G__3668;
              continue
            }else {
              if("\ufdd0'else") {
                return not_found
              }else {
                return null
              }
            }
          }
        }
      }
      break
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$lang$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$lang$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if(coll == null) {
      return null
    }else {
      if(function() {
        var G__3671 = coll;
        if(G__3671) {
          if(function() {
            var or__3824__auto__ = G__3671.cljs$lang$protocol_mask$partition0$ & 16;
            if(or__3824__auto__) {
              return or__3824__auto__
            }else {
              return G__3671.cljs$core$IIndexed$
            }
          }()) {
            return true
          }else {
            if(!G__3671.cljs$lang$protocol_mask$partition0$) {
              return cljs.core.type_satisfies_.call(null, cljs.core.IIndexed, G__3671)
            }else {
              return false
            }
          }
        }else {
          return cljs.core.type_satisfies_.call(null, cljs.core.IIndexed, G__3671)
        }
      }()) {
        return cljs.core._nth.call(null, coll, Math.floor(n))
      }else {
        return cljs.core.linear_traversal_nth.call(null, coll, Math.floor(n))
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if(!(coll == null)) {
      if(function() {
        var G__3672 = coll;
        if(G__3672) {
          if(function() {
            var or__3824__auto__ = G__3672.cljs$lang$protocol_mask$partition0$ & 16;
            if(or__3824__auto__) {
              return or__3824__auto__
            }else {
              return G__3672.cljs$core$IIndexed$
            }
          }()) {
            return true
          }else {
            if(!G__3672.cljs$lang$protocol_mask$partition0$) {
              return cljs.core.type_satisfies_.call(null, cljs.core.IIndexed, G__3672)
            }else {
              return false
            }
          }
        }else {
          return cljs.core.type_satisfies_.call(null, cljs.core.IIndexed, G__3672)
        }
      }()) {
        return cljs.core._nth.call(null, coll, Math.floor(n), not_found)
      }else {
        return cljs.core.linear_traversal_nth.call(null, coll, Math.floor(n), not_found)
      }
    }else {
      return not_found
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$lang$arity$2 = nth__2;
  nth.cljs$lang$arity$3 = nth__3;
  return nth
}();
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    return cljs.core._lookup.call(null, o, k)
  };
  var get__3 = function(o, k, not_found) {
    return cljs.core._lookup.call(null, o, k, not_found)
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$lang$arity$2 = get__2;
  get.cljs$lang$arity$3 = get__3;
  return get
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    return cljs.core._assoc.call(null, coll, k, v)
  };
  var assoc__4 = function() {
    var G__3673__delegate = function(coll, k, v, kvs) {
      while(true) {
        var ret = assoc.call(null, coll, k, v);
        if(cljs.core.truth_(kvs)) {
          var G__3674 = ret;
          var G__3675 = cljs.core.first.call(null, kvs);
          var G__3676 = cljs.core.second.call(null, kvs);
          var G__3677 = cljs.core.nnext.call(null, kvs);
          coll = G__3674;
          k = G__3675;
          v = G__3676;
          kvs = G__3677;
          continue
        }else {
          return ret
        }
        break
      }
    };
    var G__3673 = function(coll, k, v, var_args) {
      var kvs = null;
      if(goog.isDef(var_args)) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__3673__delegate.call(this, coll, k, v, kvs)
    };
    G__3673.cljs$lang$maxFixedArity = 3;
    G__3673.cljs$lang$applyTo = function(arglist__3678) {
      var coll = cljs.core.first(arglist__3678);
      var k = cljs.core.first(cljs.core.next(arglist__3678));
      var v = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3678)));
      var kvs = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3678)));
      return G__3673__delegate(coll, k, v, kvs)
    };
    G__3673.cljs$lang$arity$variadic = G__3673__delegate;
    return G__3673
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        return assoc__4.cljs$lang$arity$variadic(coll, k, v, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$lang$arity$3 = assoc__3;
  assoc.cljs$lang$arity$variadic = assoc__4.cljs$lang$arity$variadic;
  return assoc
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll
  };
  var dissoc__2 = function(coll, k) {
    return cljs.core._dissoc.call(null, coll, k)
  };
  var dissoc__3 = function() {
    var G__3679__delegate = function(coll, k, ks) {
      while(true) {
        var ret = dissoc.call(null, coll, k);
        if(cljs.core.truth_(ks)) {
          var G__3680 = ret;
          var G__3681 = cljs.core.first.call(null, ks);
          var G__3682 = cljs.core.next.call(null, ks);
          coll = G__3680;
          k = G__3681;
          ks = G__3682;
          continue
        }else {
          return ret
        }
        break
      }
    };
    var G__3679 = function(coll, k, var_args) {
      var ks = null;
      if(goog.isDef(var_args)) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3679__delegate.call(this, coll, k, ks)
    };
    G__3679.cljs$lang$maxFixedArity = 2;
    G__3679.cljs$lang$applyTo = function(arglist__3683) {
      var coll = cljs.core.first(arglist__3683);
      var k = cljs.core.first(cljs.core.next(arglist__3683));
      var ks = cljs.core.rest(cljs.core.next(arglist__3683));
      return G__3679__delegate(coll, k, ks)
    };
    G__3679.cljs$lang$arity$variadic = G__3679__delegate;
    return G__3679
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        return dissoc__3.cljs$lang$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$lang$arity$1 = dissoc__1;
  dissoc.cljs$lang$arity$2 = dissoc__2;
  dissoc.cljs$lang$arity$variadic = dissoc__3.cljs$lang$arity$variadic;
  return dissoc
}();
cljs.core.with_meta = function with_meta(o, meta) {
  return cljs.core._with_meta.call(null, o, meta)
};
cljs.core.meta = function meta(o) {
  if(function() {
    var G__3685 = o;
    if(G__3685) {
      if(function() {
        var or__3824__auto__ = G__3685.cljs$lang$protocol_mask$partition0$ & 131072;
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          return G__3685.cljs$core$IMeta$
        }
      }()) {
        return true
      }else {
        if(!G__3685.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.type_satisfies_.call(null, cljs.core.IMeta, G__3685)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.type_satisfies_.call(null, cljs.core.IMeta, G__3685)
    }
  }()) {
    return cljs.core._meta.call(null, o)
  }else {
    return null
  }
};
cljs.core.peek = function peek(coll) {
  return cljs.core._peek.call(null, coll)
};
cljs.core.pop = function pop(coll) {
  return cljs.core._pop.call(null, coll)
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll
  };
  var disj__2 = function(coll, k) {
    return cljs.core._disjoin.call(null, coll, k)
  };
  var disj__3 = function() {
    var G__3686__delegate = function(coll, k, ks) {
      while(true) {
        var ret = disj.call(null, coll, k);
        if(cljs.core.truth_(ks)) {
          var G__3687 = ret;
          var G__3688 = cljs.core.first.call(null, ks);
          var G__3689 = cljs.core.next.call(null, ks);
          coll = G__3687;
          k = G__3688;
          ks = G__3689;
          continue
        }else {
          return ret
        }
        break
      }
    };
    var G__3686 = function(coll, k, var_args) {
      var ks = null;
      if(goog.isDef(var_args)) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3686__delegate.call(this, coll, k, ks)
    };
    G__3686.cljs$lang$maxFixedArity = 2;
    G__3686.cljs$lang$applyTo = function(arglist__3690) {
      var coll = cljs.core.first(arglist__3690);
      var k = cljs.core.first(cljs.core.next(arglist__3690));
      var ks = cljs.core.rest(cljs.core.next(arglist__3690));
      return G__3686__delegate(coll, k, ks)
    };
    G__3686.cljs$lang$arity$variadic = G__3686__delegate;
    return G__3686
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        return disj__3.cljs$lang$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$lang$arity$1 = disj__1;
  disj.cljs$lang$arity$2 = disj__2;
  disj.cljs$lang$arity$variadic = disj__3.cljs$lang$arity$variadic;
  return disj
}();
cljs.core.string_hash_cache = {};
cljs.core.string_hash_cache_count = 0;
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = goog.string.hashCode(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h
};
cljs.core.check_string_hash_cache = function check_string_hash_cache(k) {
  if(cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = {};
    cljs.core.string_hash_cache_count = 0
  }else {
  }
  var h = cljs.core.string_hash_cache[k];
  if(!(h == null)) {
    return h
  }else {
    return cljs.core.add_to_string_hash_cache.call(null, k)
  }
};
cljs.core.hash = function() {
  var hash = null;
  var hash__1 = function(o) {
    return hash.call(null, o, true)
  };
  var hash__2 = function(o, check_cache) {
    if(function() {
      var and__3822__auto__ = goog.isString(o);
      if(and__3822__auto__) {
        return check_cache
      }else {
        return and__3822__auto__
      }
    }()) {
      return cljs.core.check_string_hash_cache.call(null, o)
    }else {
      return cljs.core._hash.call(null, o)
    }
  };
  hash = function(o, check_cache) {
    switch(arguments.length) {
      case 1:
        return hash__1.call(this, o);
      case 2:
        return hash__2.call(this, o, check_cache)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash.cljs$lang$arity$1 = hash__1;
  hash.cljs$lang$arity$2 = hash__2;
  return hash
}();
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  var or__3824__auto__ = coll == null;
  if(or__3824__auto__) {
    return or__3824__auto__
  }else {
    return cljs.core.not.call(null, cljs.core.seq.call(null, coll))
  }
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if(x == null) {
    return false
  }else {
    var G__3692 = x;
    if(G__3692) {
      if(function() {
        var or__3824__auto__ = G__3692.cljs$lang$protocol_mask$partition0$ & 8;
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          return G__3692.cljs$core$ICollection$
        }
      }()) {
        return true
      }else {
        if(!G__3692.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.type_satisfies_.call(null, cljs.core.ICollection, G__3692)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.type_satisfies_.call(null, cljs.core.ICollection, G__3692)
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if(x == null) {
    return false
  }else {
    var G__3694 = x;
    if(G__3694) {
      if(function() {
        var or__3824__auto__ = G__3694.cljs$lang$protocol_mask$partition0$ & 4096;
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          return G__3694.cljs$core$ISet$
        }
      }()) {
        return true
      }else {
        if(!G__3694.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.type_satisfies_.call(null, cljs.core.ISet, G__3694)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.type_satisfies_.call(null, cljs.core.ISet, G__3694)
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__3696 = x;
  if(G__3696) {
    if(function() {
      var or__3824__auto__ = G__3696.cljs$lang$protocol_mask$partition0$ & 512;
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        return G__3696.cljs$core$IAssociative$
      }
    }()) {
      return true
    }else {
      if(!G__3696.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.type_satisfies_.call(null, cljs.core.IAssociative, G__3696)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.type_satisfies_.call(null, cljs.core.IAssociative, G__3696)
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__3698 = x;
  if(G__3698) {
    if(function() {
      var or__3824__auto__ = G__3698.cljs$lang$protocol_mask$partition0$ & 16777216;
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        return G__3698.cljs$core$ISequential$
      }
    }()) {
      return true
    }else {
      if(!G__3698.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.type_satisfies_.call(null, cljs.core.ISequential, G__3698)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.type_satisfies_.call(null, cljs.core.ISequential, G__3698)
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__3700 = x;
  if(G__3700) {
    if(function() {
      var or__3824__auto__ = G__3700.cljs$lang$protocol_mask$partition0$ & 524288;
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        return G__3700.cljs$core$IReduce$
      }
    }()) {
      return true
    }else {
      if(!G__3700.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.type_satisfies_.call(null, cljs.core.IReduce, G__3700)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.type_satisfies_.call(null, cljs.core.IReduce, G__3700)
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if(x == null) {
    return false
  }else {
    var G__3702 = x;
    if(G__3702) {
      if(function() {
        var or__3824__auto__ = G__3702.cljs$lang$protocol_mask$partition0$ & 1024;
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          return G__3702.cljs$core$IMap$
        }
      }()) {
        return true
      }else {
        if(!G__3702.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.type_satisfies_.call(null, cljs.core.IMap, G__3702)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.type_satisfies_.call(null, cljs.core.IMap, G__3702)
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__3704 = x;
  if(G__3704) {
    if(function() {
      var or__3824__auto__ = G__3704.cljs$lang$protocol_mask$partition0$ & 16384;
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        return G__3704.cljs$core$IVector$
      }
    }()) {
      return true
    }else {
      if(!G__3704.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.type_satisfies_.call(null, cljs.core.IVector, G__3704)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.type_satisfies_.call(null, cljs.core.IVector, G__3704)
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__3706 = x;
  if(G__3706) {
    if(function() {
      var or__3824__auto__ = G__3706.cljs$lang$protocol_mask$partition1$ & 512;
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        return G__3706.cljs$core$IChunkedSeq$
      }
    }()) {
      return true
    }else {
      if(!G__3706.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.type_satisfies_.call(null, cljs.core.IChunkedSeq, G__3706)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.type_satisfies_.call(null, cljs.core.IChunkedSeq, G__3706)
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    return{}
  };
  var js_obj__1 = function() {
    var G__3707__delegate = function(keyvals) {
      return cljs.core.apply.call(null, goog.object.create, keyvals)
    };
    var G__3707 = function(var_args) {
      var keyvals = null;
      if(goog.isDef(var_args)) {
        keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
      }
      return G__3707__delegate.call(this, keyvals)
    };
    G__3707.cljs$lang$maxFixedArity = 0;
    G__3707.cljs$lang$applyTo = function(arglist__3708) {
      var keyvals = cljs.core.seq(arglist__3708);
      return G__3707__delegate(keyvals)
    };
    G__3707.cljs$lang$arity$variadic = G__3707__delegate;
    return G__3707
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        return js_obj__1.cljs$lang$arity$variadic(cljs.core.array_seq(arguments, 0))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$lang$arity$0 = js_obj__0;
  js_obj.cljs$lang$arity$variadic = js_obj__1.cljs$lang$arity$variadic;
  return js_obj
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  goog.object.forEach(obj, function(val, key, obj__$1) {
    return keys.push(key)
  });
  return keys
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key]
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while(true) {
    if(len__$1 === 0) {
      return to
    }else {
      to[j__$1] = from[i__$1];
      var G__3709 = i__$1 + 1;
      var G__3710 = j__$1 + 1;
      var G__3711 = len__$1 - 1;
      i__$1 = G__3709;
      j__$1 = G__3710;
      len__$1 = G__3711;
      continue
    }
    break
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while(true) {
    if(len__$1 === 0) {
      return to
    }else {
      to[j__$1] = from[i__$1];
      var G__3712 = i__$1 - 1;
      var G__3713 = j__$1 - 1;
      var G__3714 = len__$1 - 1;
      i__$1 = G__3712;
      j__$1 = G__3713;
      len__$1 = G__3714;
      continue
    }
    break
  }
};
cljs.core.lookup_sentinel = {};
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if(s == null) {
    return false
  }else {
    var G__3716 = s;
    if(G__3716) {
      if(function() {
        var or__3824__auto__ = G__3716.cljs$lang$protocol_mask$partition0$ & 64;
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          return G__3716.cljs$core$ISeq$
        }
      }()) {
        return true
      }else {
        if(!G__3716.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.type_satisfies_.call(null, cljs.core.ISeq, G__3716)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.type_satisfies_.call(null, cljs.core.ISeq, G__3716)
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__3718 = s;
  if(G__3718) {
    if(function() {
      var or__3824__auto__ = G__3718.cljs$lang$protocol_mask$partition0$ & 8388608;
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        return G__3718.cljs$core$ISeqable$
      }
    }()) {
      return true
    }else {
      if(!G__3718.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.type_satisfies_.call(null, cljs.core.ISeqable, G__3718)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.type_satisfies_.call(null, cljs.core.ISeqable, G__3718)
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if(cljs.core.truth_(x)) {
    return true
  }else {
    return false
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  var and__3822__auto__ = goog.isString(x);
  if(and__3822__auto__) {
    return!function() {
      var or__3824__auto__ = x.charAt(0) === "\ufdd0";
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        return x.charAt(0) === "\ufdd1"
      }
    }()
  }else {
    return and__3822__auto__
  }
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  var and__3822__auto__ = goog.isString(x);
  if(and__3822__auto__) {
    return x.charAt(0) === "\ufdd0"
  }else {
    return and__3822__auto__
  }
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  var and__3822__auto__ = goog.isString(x);
  if(and__3822__auto__) {
    return x.charAt(0) === "\ufdd1"
  }else {
    return and__3822__auto__
  }
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return goog.isNumber(n)
};
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  return goog.isFunction(f)
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__3824__auto__ = cljs.core.fn_QMARK_.call(null, f);
  if(or__3824__auto__) {
    return or__3824__auto__
  }else {
    var G__3720 = f;
    if(G__3720) {
      if(function() {
        var or__3824__auto____$1 = G__3720.cljs$lang$protocol_mask$partition0$ & 1;
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          return G__3720.cljs$core$IFn$
        }
      }()) {
        return true
      }else {
        if(!G__3720.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.type_satisfies_.call(null, cljs.core.IFn, G__3720)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.type_satisfies_.call(null, cljs.core.IFn, G__3720)
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  var and__3822__auto__ = cljs.core.number_QMARK_.call(null, n);
  if(and__3822__auto__) {
    var and__3822__auto____$1 = !isNaN(n);
    if(and__3822__auto____$1) {
      var and__3822__auto____$2 = !(n === Infinity);
      if(and__3822__auto____$2) {
        return parseFloat(n) === parseInt(n, 10)
      }else {
        return and__3822__auto____$2
      }
    }else {
      return and__3822__auto____$1
    }
  }else {
    return and__3822__auto__
  }
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if(cljs.core._lookup.call(null, coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false
  }else {
    return true
  }
};
cljs.core.find = function find(coll, k) {
  if(function() {
    var and__3822__auto__ = !(coll == null);
    if(and__3822__auto__) {
      var and__3822__auto____$1 = cljs.core.associative_QMARK_.call(null, coll);
      if(and__3822__auto____$1) {
        return cljs.core.contains_QMARK_.call(null, coll, k)
      }else {
        return and__3822__auto____$1
      }
    }else {
      return and__3822__auto__
    }
  }()) {
    return cljs.core.PersistentVector.fromArray([k, cljs.core._lookup.call(null, coll, k)], true)
  }else {
    return null
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y)
  };
  var distinct_QMARK___3 = function() {
    var G__3721__delegate = function(x, y, more) {
      if(!cljs.core._EQ_.call(null, x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([y, x]);
        var xs = more;
        while(true) {
          var x__$1 = cljs.core.first.call(null, xs);
          var etc = cljs.core.next.call(null, xs);
          if(cljs.core.truth_(xs)) {
            if(cljs.core.contains_QMARK_.call(null, s, x__$1)) {
              return false
            }else {
              var G__3722 = cljs.core.conj.call(null, s, x__$1);
              var G__3723 = etc;
              s = G__3722;
              xs = G__3723;
              continue
            }
          }else {
            return true
          }
          break
        }
      }else {
        return false
      }
    };
    var G__3721 = function(x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3721__delegate.call(this, x, y, more)
    };
    G__3721.cljs$lang$maxFixedArity = 2;
    G__3721.cljs$lang$applyTo = function(arglist__3724) {
      var x = cljs.core.first(arglist__3724);
      var y = cljs.core.first(cljs.core.next(arglist__3724));
      var more = cljs.core.rest(cljs.core.next(arglist__3724));
      return G__3721__delegate(x, y, more)
    };
    G__3721.cljs$lang$arity$variadic = G__3721__delegate;
    return G__3721
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        return distinct_QMARK___3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$lang$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$lang$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$lang$arity$variadic = distinct_QMARK___3.cljs$lang$arity$variadic;
  return distinct_QMARK_
}();
cljs.core.compare = function compare(x, y) {
  if(x === y) {
    return 0
  }else {
    if(x == null) {
      return-1
    }else {
      if(y == null) {
        return 1
      }else {
        if(cljs.core.type.call(null, x) === cljs.core.type.call(null, y)) {
          if(function() {
            var G__3726 = x;
            if(G__3726) {
              if(function() {
                var or__3824__auto__ = G__3726.cljs$lang$protocol_mask$partition1$ & 2048;
                if(or__3824__auto__) {
                  return or__3824__auto__
                }else {
                  return G__3726.cljs$core$IComparable$
                }
              }()) {
                return true
              }else {
                if(!G__3726.cljs$lang$protocol_mask$partition1$) {
                  return cljs.core.type_satisfies_.call(null, cljs.core.IComparable, G__3726)
                }else {
                  return false
                }
              }
            }else {
              return cljs.core.type_satisfies_.call(null, cljs.core.IComparable, G__3726)
            }
          }()) {
            return cljs.core._compare.call(null, x, y)
          }else {
            return goog.array.defaultCompare(x, y)
          }
        }else {
          if("\ufdd0'else") {
            throw new Error("compare on non-nil objects of different types");
          }else {
            return null
          }
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count.call(null, xs);
    var yl = cljs.core.count.call(null, ys);
    if(xl < yl) {
      return-1
    }else {
      if(xl > yl) {
        return 1
      }else {
        if("\ufdd0'else") {
          return compare_indexed.call(null, xs, ys, xl, 0)
        }else {
          return null
        }
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while(true) {
      var d = cljs.core.compare.call(null, cljs.core.nth.call(null, xs, n), cljs.core.nth.call(null, ys, n));
      if(function() {
        var and__3822__auto__ = d === 0;
        if(and__3822__auto__) {
          return n + 1 < len
        }else {
          return and__3822__auto__
        }
      }()) {
        var G__3727 = xs;
        var G__3728 = ys;
        var G__3729 = len;
        var G__3730 = n + 1;
        xs = G__3727;
        ys = G__3728;
        len = G__3729;
        n = G__3730;
        continue
      }else {
        return d
      }
      break
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$lang$arity$2 = compare_indexed__2;
  compare_indexed.cljs$lang$arity$4 = compare_indexed__4;
  return compare_indexed
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if(cljs.core._EQ_.call(null, f, cljs.core.compare)) {
    return cljs.core.compare
  }else {
    return function(x, y) {
      var r = f.call(null, x, y);
      if(cljs.core.number_QMARK_.call(null, r)) {
        return r
      }else {
        if(cljs.core.truth_(r)) {
          return-1
        }else {
          if(cljs.core.truth_(f.call(null, y, x))) {
            return 1
          }else {
            return 0
          }
        }
      }
    }
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.call(null, cljs.core.compare, coll)
  };
  var sort__2 = function(comp, coll) {
    if(cljs.core.seq.call(null, coll)) {
      var a = cljs.core.to_array.call(null, coll);
      goog.array.stableSort(a, cljs.core.fn__GT_comparator.call(null, comp));
      return cljs.core.seq.call(null, a)
    }else {
      return cljs.core.List.EMPTY
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$lang$arity$1 = sort__1;
  sort.cljs$lang$arity$2 = sort__2;
  return sort
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.call(null, keyfn, cljs.core.compare, coll)
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.call(null, function(x, y) {
      return cljs.core.fn__GT_comparator.call(null, comp).call(null, keyfn.call(null, x), keyfn.call(null, y))
    }, coll)
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$lang$arity$2 = sort_by__2;
  sort_by.cljs$lang$arity$3 = sort_by__3;
  return sort_by
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__3971__auto__ = cljs.core.seq.call(null, coll);
    if(temp__3971__auto__) {
      var s = temp__3971__auto__;
      return cljs.core.reduce.call(null, f, cljs.core.first.call(null, s), cljs.core.next.call(null, s))
    }else {
      return f.call(null)
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while(true) {
      if(coll__$1) {
        var nval = f.call(null, val__$1, cljs.core.first.call(null, coll__$1));
        if(cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval)
        }else {
          var G__3731 = nval;
          var G__3732 = cljs.core.next.call(null, coll__$1);
          val__$1 = G__3731;
          coll__$1 = G__3732;
          continue
        }
      }else {
        return val__$1
      }
      break
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$lang$arity$2 = seq_reduce__2;
  seq_reduce.cljs$lang$arity$3 = seq_reduce__3;
  return seq_reduce
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.call(null, a)
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if(function() {
      var G__3735 = coll;
      if(G__3735) {
        if(function() {
          var or__3824__auto__ = G__3735.cljs$lang$protocol_mask$partition0$ & 524288;
          if(or__3824__auto__) {
            return or__3824__auto__
          }else {
            return G__3735.cljs$core$IReduce$
          }
        }()) {
          return true
        }else {
          if(!G__3735.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.type_satisfies_.call(null, cljs.core.IReduce, G__3735)
          }else {
            return false
          }
        }
      }else {
        return cljs.core.type_satisfies_.call(null, cljs.core.IReduce, G__3735)
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f)
    }else {
      return cljs.core.seq_reduce.call(null, f, coll)
    }
  };
  var reduce__3 = function(f, val, coll) {
    if(function() {
      var G__3736 = coll;
      if(G__3736) {
        if(function() {
          var or__3824__auto__ = G__3736.cljs$lang$protocol_mask$partition0$ & 524288;
          if(or__3824__auto__) {
            return or__3824__auto__
          }else {
            return G__3736.cljs$core$IReduce$
          }
        }()) {
          return true
        }else {
          if(!G__3736.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.type_satisfies_.call(null, cljs.core.IReduce, G__3736)
          }else {
            return false
          }
        }
      }else {
        return cljs.core.type_satisfies_.call(null, cljs.core.IReduce, G__3736)
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f, val)
    }else {
      return cljs.core.seq_reduce.call(null, f, val, coll)
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$lang$arity$2 = reduce__2;
  reduce.cljs$lang$arity$3 = reduce__3;
  return reduce
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  return cljs.core._kv_reduce.call(null, coll, f, init)
};
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0
  };
  var _PLUS___1 = function(x) {
    return x
  };
  var _PLUS___2 = function(x, y) {
    return x + y
  };
  var _PLUS___3 = function() {
    var G__3737__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _PLUS_, x + y, more)
    };
    var G__3737 = function(x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3737__delegate.call(this, x, y, more)
    };
    G__3737.cljs$lang$maxFixedArity = 2;
    G__3737.cljs$lang$applyTo = function(arglist__3738) {
      var x = cljs.core.first(arglist__3738);
      var y = cljs.core.first(cljs.core.next(arglist__3738));
      var more = cljs.core.rest(cljs.core.next(arglist__3738));
      return G__3737__delegate(x, y, more)
    };
    G__3737.cljs$lang$arity$variadic = G__3737__delegate;
    return G__3737
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        return _PLUS___3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$lang$arity$0 = _PLUS___0;
  _PLUS_.cljs$lang$arity$1 = _PLUS___1;
  _PLUS_.cljs$lang$arity$2 = _PLUS___2;
  _PLUS_.cljs$lang$arity$variadic = _PLUS___3.cljs$lang$arity$variadic;
  return _PLUS_
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x
  };
  var ___2 = function(x, y) {
    return x - y
  };
  var ___3 = function() {
    var G__3739__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _, x - y, more)
    };
    var G__3739 = function(x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3739__delegate.call(this, x, y, more)
    };
    G__3739.cljs$lang$maxFixedArity = 2;
    G__3739.cljs$lang$applyTo = function(arglist__3740) {
      var x = cljs.core.first(arglist__3740);
      var y = cljs.core.first(cljs.core.next(arglist__3740));
      var more = cljs.core.rest(cljs.core.next(arglist__3740));
      return G__3739__delegate(x, y, more)
    };
    G__3739.cljs$lang$arity$variadic = G__3739__delegate;
    return G__3739
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        return ___3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$lang$arity$1 = ___1;
  _.cljs$lang$arity$2 = ___2;
  _.cljs$lang$arity$variadic = ___3.cljs$lang$arity$variadic;
  return _
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1
  };
  var _STAR___1 = function(x) {
    return x
  };
  var _STAR___2 = function(x, y) {
    return x * y
  };
  var _STAR___3 = function() {
    var G__3741__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _STAR_, x * y, more)
    };
    var G__3741 = function(x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3741__delegate.call(this, x, y, more)
    };
    G__3741.cljs$lang$maxFixedArity = 2;
    G__3741.cljs$lang$applyTo = function(arglist__3742) {
      var x = cljs.core.first(arglist__3742);
      var y = cljs.core.first(cljs.core.next(arglist__3742));
      var more = cljs.core.rest(cljs.core.next(arglist__3742));
      return G__3741__delegate(x, y, more)
    };
    G__3741.cljs$lang$arity$variadic = G__3741__delegate;
    return G__3741
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        return _STAR___3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$lang$arity$0 = _STAR___0;
  _STAR_.cljs$lang$arity$1 = _STAR___1;
  _STAR_.cljs$lang$arity$2 = _STAR___2;
  _STAR_.cljs$lang$arity$variadic = _STAR___3.cljs$lang$arity$variadic;
  return _STAR_
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.call(null, 1, x)
  };
  var _SLASH___2 = function(x, y) {
    return x / y
  };
  var _SLASH___3 = function() {
    var G__3743__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _SLASH_, _SLASH_.call(null, x, y), more)
    };
    var G__3743 = function(x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3743__delegate.call(this, x, y, more)
    };
    G__3743.cljs$lang$maxFixedArity = 2;
    G__3743.cljs$lang$applyTo = function(arglist__3744) {
      var x = cljs.core.first(arglist__3744);
      var y = cljs.core.first(cljs.core.next(arglist__3744));
      var more = cljs.core.rest(cljs.core.next(arglist__3744));
      return G__3743__delegate(x, y, more)
    };
    G__3743.cljs$lang$arity$variadic = G__3743__delegate;
    return G__3743
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        return _SLASH___3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$lang$arity$1 = _SLASH___1;
  _SLASH_.cljs$lang$arity$2 = _SLASH___2;
  _SLASH_.cljs$lang$arity$variadic = _SLASH___3.cljs$lang$arity$variadic;
  return _SLASH_
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true
  };
  var _LT___2 = function(x, y) {
    return x < y
  };
  var _LT___3 = function() {
    var G__3745__delegate = function(x, y, more) {
      while(true) {
        if(x < y) {
          if(cljs.core.next.call(null, more)) {
            var G__3746 = y;
            var G__3747 = cljs.core.first.call(null, more);
            var G__3748 = cljs.core.next.call(null, more);
            x = G__3746;
            y = G__3747;
            more = G__3748;
            continue
          }else {
            return y < cljs.core.first.call(null, more)
          }
        }else {
          return false
        }
        break
      }
    };
    var G__3745 = function(x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3745__delegate.call(this, x, y, more)
    };
    G__3745.cljs$lang$maxFixedArity = 2;
    G__3745.cljs$lang$applyTo = function(arglist__3749) {
      var x = cljs.core.first(arglist__3749);
      var y = cljs.core.first(cljs.core.next(arglist__3749));
      var more = cljs.core.rest(cljs.core.next(arglist__3749));
      return G__3745__delegate(x, y, more)
    };
    G__3745.cljs$lang$arity$variadic = G__3745__delegate;
    return G__3745
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        return _LT___3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$lang$arity$1 = _LT___1;
  _LT_.cljs$lang$arity$2 = _LT___2;
  _LT_.cljs$lang$arity$variadic = _LT___3.cljs$lang$arity$variadic;
  return _LT_
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y
  };
  var _LT__EQ___3 = function() {
    var G__3750__delegate = function(x, y, more) {
      while(true) {
        if(x <= y) {
          if(cljs.core.next.call(null, more)) {
            var G__3751 = y;
            var G__3752 = cljs.core.first.call(null, more);
            var G__3753 = cljs.core.next.call(null, more);
            x = G__3751;
            y = G__3752;
            more = G__3753;
            continue
          }else {
            return y <= cljs.core.first.call(null, more)
          }
        }else {
          return false
        }
        break
      }
    };
    var G__3750 = function(x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3750__delegate.call(this, x, y, more)
    };
    G__3750.cljs$lang$maxFixedArity = 2;
    G__3750.cljs$lang$applyTo = function(arglist__3754) {
      var x = cljs.core.first(arglist__3754);
      var y = cljs.core.first(cljs.core.next(arglist__3754));
      var more = cljs.core.rest(cljs.core.next(arglist__3754));
      return G__3750__delegate(x, y, more)
    };
    G__3750.cljs$lang$arity$variadic = G__3750__delegate;
    return G__3750
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        return _LT__EQ___3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$lang$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$lang$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$lang$arity$variadic = _LT__EQ___3.cljs$lang$arity$variadic;
  return _LT__EQ_
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true
  };
  var _GT___2 = function(x, y) {
    return x > y
  };
  var _GT___3 = function() {
    var G__3755__delegate = function(x, y, more) {
      while(true) {
        if(x > y) {
          if(cljs.core.next.call(null, more)) {
            var G__3756 = y;
            var G__3757 = cljs.core.first.call(null, more);
            var G__3758 = cljs.core.next.call(null, more);
            x = G__3756;
            y = G__3757;
            more = G__3758;
            continue
          }else {
            return y > cljs.core.first.call(null, more)
          }
        }else {
          return false
        }
        break
      }
    };
    var G__3755 = function(x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3755__delegate.call(this, x, y, more)
    };
    G__3755.cljs$lang$maxFixedArity = 2;
    G__3755.cljs$lang$applyTo = function(arglist__3759) {
      var x = cljs.core.first(arglist__3759);
      var y = cljs.core.first(cljs.core.next(arglist__3759));
      var more = cljs.core.rest(cljs.core.next(arglist__3759));
      return G__3755__delegate(x, y, more)
    };
    G__3755.cljs$lang$arity$variadic = G__3755__delegate;
    return G__3755
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        return _GT___3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$lang$arity$1 = _GT___1;
  _GT_.cljs$lang$arity$2 = _GT___2;
  _GT_.cljs$lang$arity$variadic = _GT___3.cljs$lang$arity$variadic;
  return _GT_
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y
  };
  var _GT__EQ___3 = function() {
    var G__3760__delegate = function(x, y, more) {
      while(true) {
        if(x >= y) {
          if(cljs.core.next.call(null, more)) {
            var G__3761 = y;
            var G__3762 = cljs.core.first.call(null, more);
            var G__3763 = cljs.core.next.call(null, more);
            x = G__3761;
            y = G__3762;
            more = G__3763;
            continue
          }else {
            return y >= cljs.core.first.call(null, more)
          }
        }else {
          return false
        }
        break
      }
    };
    var G__3760 = function(x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3760__delegate.call(this, x, y, more)
    };
    G__3760.cljs$lang$maxFixedArity = 2;
    G__3760.cljs$lang$applyTo = function(arglist__3764) {
      var x = cljs.core.first(arglist__3764);
      var y = cljs.core.first(cljs.core.next(arglist__3764));
      var more = cljs.core.rest(cljs.core.next(arglist__3764));
      return G__3760__delegate(x, y, more)
    };
    G__3760.cljs$lang$arity$variadic = G__3760__delegate;
    return G__3760
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        return _GT__EQ___3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$lang$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$lang$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$lang$arity$variadic = _GT__EQ___3.cljs$lang$arity$variadic;
  return _GT__EQ_
}();
cljs.core.dec = function dec(x) {
  return x - 1
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x
  };
  var max__2 = function(x, y) {
    return x > y ? x : y
  };
  var max__3 = function() {
    var G__3765__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, max, x > y ? x : y, more)
    };
    var G__3765 = function(x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3765__delegate.call(this, x, y, more)
    };
    G__3765.cljs$lang$maxFixedArity = 2;
    G__3765.cljs$lang$applyTo = function(arglist__3766) {
      var x = cljs.core.first(arglist__3766);
      var y = cljs.core.first(cljs.core.next(arglist__3766));
      var more = cljs.core.rest(cljs.core.next(arglist__3766));
      return G__3765__delegate(x, y, more)
    };
    G__3765.cljs$lang$arity$variadic = G__3765__delegate;
    return G__3765
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        return max__3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$lang$arity$1 = max__1;
  max.cljs$lang$arity$2 = max__2;
  max.cljs$lang$arity$variadic = max__3.cljs$lang$arity$variadic;
  return max
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x
  };
  var min__2 = function(x, y) {
    return x < y ? x : y
  };
  var min__3 = function() {
    var G__3767__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, min, x < y ? x : y, more)
    };
    var G__3767 = function(x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3767__delegate.call(this, x, y, more)
    };
    G__3767.cljs$lang$maxFixedArity = 2;
    G__3767.cljs$lang$applyTo = function(arglist__3768) {
      var x = cljs.core.first(arglist__3768);
      var y = cljs.core.first(cljs.core.next(arglist__3768));
      var more = cljs.core.rest(cljs.core.next(arglist__3768));
      return G__3767__delegate(x, y, more)
    };
    G__3767.cljs$lang$arity$variadic = G__3767__delegate;
    return G__3767
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        return min__3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$lang$arity$1 = min__1;
  min.cljs$lang$arity$2 = min__2;
  min.cljs$lang$arity$variadic = min__3.cljs$lang$arity$variadic;
  return min
}();
cljs.core.fix = function fix(q) {
  if(q >= 0) {
    return Math.floor.call(null, q)
  }else {
    return Math.ceil.call(null, q)
  }
};
cljs.core.int$ = function int$(x) {
  return cljs.core.fix.call(null, x)
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix.call(null, x)
};
cljs.core.mod = function mod(n, d) {
  return n % d
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix.call(null, (n - rem) / d)
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot.call(null, n, d);
  return n - d * q
};
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return Math.random.call(null)
  };
  var rand__1 = function(n) {
    return n * rand.call(null)
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$lang$arity$0 = rand__0;
  rand.cljs$lang$arity$1 = rand__1;
  return rand
}();
cljs.core.rand_int = function rand_int(n) {
  return cljs.core.fix.call(null, cljs.core.rand.call(null, n))
};
cljs.core.bit_xor = function bit_xor(x, y) {
  return x ^ y
};
cljs.core.bit_and = function bit_and(x, y) {
  return x & y
};
cljs.core.bit_or = function bit_or(x, y) {
  return x | y
};
cljs.core.bit_and_not = function bit_and_not(x, y) {
  return x & ~y
};
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n)
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n
};
cljs.core.bit_not = function bit_not(x) {
  return~x
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv.call(null, x, y)
  };
  var _EQ__EQ___3 = function() {
    var G__3769__delegate = function(x, y, more) {
      while(true) {
        if(cljs.core.truth_(_EQ__EQ_.call(null, x, y))) {
          if(cljs.core.next.call(null, more)) {
            var G__3770 = y;
            var G__3771 = cljs.core.first.call(null, more);
            var G__3772 = cljs.core.next.call(null, more);
            x = G__3770;
            y = G__3771;
            more = G__3772;
            continue
          }else {
            return _EQ__EQ_.call(null, y, cljs.core.first.call(null, more))
          }
        }else {
          return false
        }
        break
      }
    };
    var G__3769 = function(x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3769__delegate.call(this, x, y, more)
    };
    G__3769.cljs$lang$maxFixedArity = 2;
    G__3769.cljs$lang$applyTo = function(arglist__3773) {
      var x = cljs.core.first(arglist__3773);
      var y = cljs.core.first(cljs.core.next(arglist__3773));
      var more = cljs.core.rest(cljs.core.next(arglist__3773));
      return G__3769__delegate(x, y, more)
    };
    G__3769.cljs$lang$arity$variadic = G__3769__delegate;
    return G__3769
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        return _EQ__EQ___3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$lang$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$lang$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$lang$arity$variadic = _EQ__EQ___3.cljs$lang$arity$variadic;
  return _EQ__EQ_
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq.call(null, coll);
  while(true) {
    if(cljs.core.truth_(function() {
      var and__3822__auto__ = xs;
      if(and__3822__auto__) {
        return n__$1 > 0
      }else {
        return and__3822__auto__
      }
    }())) {
      var G__3774 = n__$1 - 1;
      var G__3775 = cljs.core.next.call(null, xs);
      n__$1 = G__3774;
      xs = G__3775;
      continue
    }else {
      return xs
    }
    break
  }
};
cljs.core.str_STAR_ = function() {
  var str_STAR_ = null;
  var str_STAR___0 = function() {
    return""
  };
  var str_STAR___1 = function(x) {
    if(x == null) {
      return""
    }else {
      if("\ufdd0'else") {
        return x.toString()
      }else {
        return null
      }
    }
  };
  var str_STAR___2 = function() {
    var G__3776__delegate = function(x, ys) {
      return function(sb, more) {
        while(true) {
          if(cljs.core.truth_(more)) {
            var G__3777 = sb.append(str_STAR_.call(null, cljs.core.first.call(null, more)));
            var G__3778 = cljs.core.next.call(null, more);
            sb = G__3777;
            more = G__3778;
            continue
          }else {
            return str_STAR_.call(null, sb)
          }
          break
        }
      }.call(null, new goog.string.StringBuffer(str_STAR_.call(null, x)), ys)
    };
    var G__3776 = function(x, var_args) {
      var ys = null;
      if(goog.isDef(var_args)) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
      }
      return G__3776__delegate.call(this, x, ys)
    };
    G__3776.cljs$lang$maxFixedArity = 1;
    G__3776.cljs$lang$applyTo = function(arglist__3779) {
      var x = cljs.core.first(arglist__3779);
      var ys = cljs.core.rest(arglist__3779);
      return G__3776__delegate(x, ys)
    };
    G__3776.cljs$lang$arity$variadic = G__3776__delegate;
    return G__3776
  }();
  str_STAR_ = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str_STAR___0.call(this);
      case 1:
        return str_STAR___1.call(this, x);
      default:
        return str_STAR___2.cljs$lang$arity$variadic(x, cljs.core.array_seq(arguments, 1))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str_STAR_.cljs$lang$maxFixedArity = 1;
  str_STAR_.cljs$lang$applyTo = str_STAR___2.cljs$lang$applyTo;
  str_STAR_.cljs$lang$arity$0 = str_STAR___0;
  str_STAR_.cljs$lang$arity$1 = str_STAR___1;
  str_STAR_.cljs$lang$arity$variadic = str_STAR___2.cljs$lang$arity$variadic;
  return str_STAR_
}();
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return""
  };
  var str__1 = function(x) {
    if(cljs.core.symbol_QMARK_.call(null, x)) {
      return x.substring(2, x.length)
    }else {
      if(cljs.core.keyword_QMARK_.call(null, x)) {
        return cljs.core.str_STAR_.call(null, ":", x.substring(2, x.length))
      }else {
        if(x == null) {
          return""
        }else {
          if("\ufdd0'else") {
            return x.toString()
          }else {
            return null
          }
        }
      }
    }
  };
  var str__2 = function() {
    var G__3780__delegate = function(x, ys) {
      return function(sb, more) {
        while(true) {
          if(cljs.core.truth_(more)) {
            var G__3781 = sb.append(str.call(null, cljs.core.first.call(null, more)));
            var G__3782 = cljs.core.next.call(null, more);
            sb = G__3781;
            more = G__3782;
            continue
          }else {
            return cljs.core.str_STAR_.call(null, sb)
          }
          break
        }
      }.call(null, new goog.string.StringBuffer(str.call(null, x)), ys)
    };
    var G__3780 = function(x, var_args) {
      var ys = null;
      if(goog.isDef(var_args)) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
      }
      return G__3780__delegate.call(this, x, ys)
    };
    G__3780.cljs$lang$maxFixedArity = 1;
    G__3780.cljs$lang$applyTo = function(arglist__3783) {
      var x = cljs.core.first(arglist__3783);
      var ys = cljs.core.rest(arglist__3783);
      return G__3780__delegate(x, ys)
    };
    G__3780.cljs$lang$arity$variadic = G__3780__delegate;
    return G__3780
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        return str__2.cljs$lang$arity$variadic(x, cljs.core.array_seq(arguments, 1))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$lang$arity$0 = str__0;
  str.cljs$lang$arity$1 = str__1;
  str.cljs$lang$arity$variadic = str__2.cljs$lang$arity$variadic;
  return str
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start)
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end)
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$lang$arity$2 = subs__2;
  subs.cljs$lang$arity$3 = subs__3;
  return subs
}();
cljs.core.format = function() {
  var format__delegate = function(fmt, args) {
    var args__$1 = cljs.core.map.call(null, function(x) {
      if(function() {
        var or__3824__auto__ = cljs.core.keyword_QMARK_.call(null, x);
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          return cljs.core.symbol_QMARK_.call(null, x)
        }
      }()) {
        return[cljs.core.str(x)].join("")
      }else {
        return x
      }
    }, args);
    return cljs.core.apply.call(null, goog.string.format, fmt, args__$1)
  };
  var format = function(fmt, var_args) {
    var args = null;
    if(goog.isDef(var_args)) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return format__delegate.call(this, fmt, args)
  };
  format.cljs$lang$maxFixedArity = 1;
  format.cljs$lang$applyTo = function(arglist__3784) {
    var fmt = cljs.core.first(arglist__3784);
    var args = cljs.core.rest(arglist__3784);
    return format__delegate(fmt, args)
  };
  format.cljs$lang$arity$variadic = format__delegate;
  return format
}();
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if(cljs.core.symbol_QMARK_.call(null, name)) {
      return name
    }else {
      if(cljs.core.keyword_QMARK_.call(null, name)) {
        return cljs.core.str_STAR_.call(null, "\ufdd1", "'", cljs.core.subs.call(null, name, 2))
      }else {
        if("\ufdd0'else") {
          return cljs.core.str_STAR_.call(null, "\ufdd1", "'", name)
        }else {
          return null
        }
      }
    }
  };
  var symbol__2 = function(ns, name) {
    return symbol.call(null, cljs.core.str_STAR_.call(null, ns, "/", name))
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$lang$arity$1 = symbol__1;
  symbol.cljs$lang$arity$2 = symbol__2;
  return symbol
}();
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if(cljs.core.keyword_QMARK_.call(null, name)) {
      return name
    }else {
      if(cljs.core.symbol_QMARK_.call(null, name)) {
        return cljs.core.str_STAR_.call(null, "\ufdd0", "'", cljs.core.subs.call(null, name, 2))
      }else {
        if("\ufdd0'else") {
          return cljs.core.str_STAR_.call(null, "\ufdd0", "'", name)
        }else {
          return null
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return keyword.call(null, cljs.core.str_STAR_.call(null, ns, "/", name))
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$lang$arity$1 = keyword__1;
  keyword.cljs$lang$arity$2 = keyword__2;
  return keyword
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.sequential_QMARK_.call(null, y) ? function() {
    var xs = cljs.core.seq.call(null, x);
    var ys = cljs.core.seq.call(null, y);
    while(true) {
      if(xs == null) {
        return ys == null
      }else {
        if(ys == null) {
          return false
        }else {
          if(cljs.core._EQ_.call(null, cljs.core.first.call(null, xs), cljs.core.first.call(null, ys))) {
            var G__3785 = cljs.core.next.call(null, xs);
            var G__3786 = cljs.core.next.call(null, ys);
            xs = G__3785;
            ys = G__3786;
            continue
          }else {
            if("\ufdd0'else") {
              return false
            }else {
              return null
            }
          }
        }
      }
      break
    }
  }() : null)
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2)
};
cljs.core.hash_coll = function hash_coll(coll) {
  return cljs.core.reduce.call(null, function(p1__3787_SHARP_, p2__3788_SHARP_) {
    return cljs.core.hash_combine.call(null, p1__3787_SHARP_, cljs.core.hash.call(null, p2__3788_SHARP_, false))
  }, cljs.core.hash.call(null, cljs.core.first.call(null, coll), false), cljs.core.next.call(null, coll))
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq.call(null, m);
  while(true) {
    if(s) {
      var e = cljs.core.first.call(null, s);
      var G__3789 = (h + (cljs.core.hash.call(null, cljs.core.key.call(null, e)) ^ cljs.core.hash.call(null, cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__3790 = cljs.core.next.call(null, s);
      h = G__3789;
      s = G__3790;
      continue
    }else {
      return h
    }
    break
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq.call(null, s);
  while(true) {
    if(s__$1) {
      var e = cljs.core.first.call(null, s__$1);
      var G__3791 = (h + cljs.core.hash.call(null, e)) % 4503599627370496;
      var G__3792 = cljs.core.next.call(null, s__$1);
      h = G__3791;
      s__$1 = G__3792;
      continue
    }else {
      return h
    }
    break
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var G__3795 = cljs.core.seq.call(null, fn_map);
  while(true) {
    if(G__3795) {
      var vec__3796 = cljs.core.first.call(null, G__3795);
      var key_name = cljs.core.nth.call(null, vec__3796, 0, null);
      var f = cljs.core.nth.call(null, vec__3796, 1, null);
      var str_name = cljs.core.name.call(null, key_name);
      obj[str_name] = f;
      var G__3797 = cljs.core.next.call(null, G__3795);
      G__3795 = G__3797;
      continue
    }else {
    }
    break
  }
  return obj
};
goog.provide("cljs.core.List");
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 65413358
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/List")
};
cljs.core.List.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/List")
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  if(self__.count === 1) {
    return null
  }else {
    return self__.rest
  }
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return new cljs.core.List(self__.meta, o, coll, self__.count + 1, null)
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  return coll
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return self__.count
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  return self__.first
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  return coll.cljs$core$ISeq$_rest$arity$1(coll)
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  return self__.first
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  if(self__.count === 1) {
    return cljs.core.List.EMPTY
  }else {
    return self__.rest
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash)
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.List.EMPTY
};
cljs.core.List;
goog.provide("cljs.core.EmptyList");
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 65413326
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/EmptyList")
};
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/EmptyList")
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  return 0
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  return null
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return new cljs.core.List(self__.meta, o, null, 1, null)
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  return null
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return 0
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  return null
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  return null
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.List.EMPTY
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.EmptyList(meta__$1)
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return coll
};
cljs.core.EmptyList;
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__3799 = coll;
  if(G__3799) {
    if(function() {
      var or__3824__auto__ = G__3799.cljs$lang$protocol_mask$partition0$ & 134217728;
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        return G__3799.cljs$core$IReversible$
      }
    }()) {
      return true
    }else {
      if(!G__3799.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.type_satisfies_.call(null, cljs.core.IReversible, G__3799)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.type_satisfies_.call(null, cljs.core.IReversible, G__3799)
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq.call(null, coll)
};
cljs.core.reverse = function reverse(coll) {
  if(cljs.core.reversible_QMARK_.call(null, coll)) {
    return cljs.core.rseq.call(null, coll)
  }else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll)
  }
};
cljs.core.list = function() {
  var list = null;
  var list__0 = function() {
    return cljs.core.List.EMPTY
  };
  var list__1 = function(x) {
    return cljs.core.conj.call(null, cljs.core.List.EMPTY, x)
  };
  var list__2 = function(x, y) {
    return cljs.core.conj.call(null, list.call(null, y), x)
  };
  var list__3 = function(x, y, z) {
    return cljs.core.conj.call(null, list.call(null, y, z), x)
  };
  var list__4 = function() {
    var G__3800__delegate = function(x, y, z, items) {
      return cljs.core.conj.call(null, cljs.core.conj.call(null, cljs.core.conj.call(null, cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, cljs.core.reverse.call(null, items)), z), y), x)
    };
    var G__3800 = function(x, y, z, var_args) {
      var items = null;
      if(goog.isDef(var_args)) {
        items = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__3800__delegate.call(this, x, y, z, items)
    };
    G__3800.cljs$lang$maxFixedArity = 3;
    G__3800.cljs$lang$applyTo = function(arglist__3801) {
      var x = cljs.core.first(arglist__3801);
      var y = cljs.core.first(cljs.core.next(arglist__3801));
      var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3801)));
      var items = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3801)));
      return G__3800__delegate(x, y, z, items)
    };
    G__3800.cljs$lang$arity$variadic = G__3800__delegate;
    return G__3800
  }();
  list = function(x, y, z, var_args) {
    var items = var_args;
    switch(arguments.length) {
      case 0:
        return list__0.call(this);
      case 1:
        return list__1.call(this, x);
      case 2:
        return list__2.call(this, x, y);
      case 3:
        return list__3.call(this, x, y, z);
      default:
        return list__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list.cljs$lang$maxFixedArity = 3;
  list.cljs$lang$applyTo = list__4.cljs$lang$applyTo;
  list.cljs$lang$arity$0 = list__0;
  list.cljs$lang$arity$1 = list__1;
  list.cljs$lang$arity$2 = list__2;
  list.cljs$lang$arity$3 = list__3;
  list.cljs$lang$arity$variadic = list__4.cljs$lang$arity$variadic;
  return list
}();
goog.provide("cljs.core.Cons");
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 65405164
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/Cons")
};
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/Cons")
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  if(self__.rest == null) {
    return null
  }else {
    return cljs.core._seq.call(null, self__.rest)
  }
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return new cljs.core.Cons(null, o, coll, self__.__hash)
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  return coll
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  return self__.first
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  if(self__.rest == null) {
    return cljs.core.List.EMPTY
  }else {
    return self__.rest
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash)
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.Cons;
cljs.core.cons = function cons(x, coll) {
  if(function() {
    var or__3824__auto__ = coll == null;
    if(or__3824__auto__) {
      return or__3824__auto__
    }else {
      var G__3803 = coll;
      if(G__3803) {
        if(function() {
          var or__3824__auto____$1 = G__3803.cljs$lang$protocol_mask$partition0$ & 64;
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            return G__3803.cljs$core$ISeq$
          }
        }()) {
          return true
        }else {
          if(!G__3803.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.type_satisfies_.call(null, cljs.core.ISeq, G__3803)
          }else {
            return false
          }
        }
      }else {
        return cljs.core.type_satisfies_.call(null, cljs.core.ISeq, G__3803)
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null)
  }else {
    return new cljs.core.Cons(null, x, cljs.core.seq.call(null, coll), null)
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__3805 = x;
  if(G__3805) {
    if(function() {
      var or__3824__auto__ = G__3805.cljs$lang$protocol_mask$partition0$ & 33554432;
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        return G__3805.cljs$core$IList$
      }
    }()) {
      return true
    }else {
      if(!G__3805.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.type_satisfies_.call(null, cljs.core.IList, G__3805)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.type_satisfies_.call(null, cljs.core.IList, G__3805)
  }
};
cljs.core.IReduce["string"] = true;
cljs.core._reduce["string"] = function() {
  var G__3806 = null;
  var G__3806__2 = function(string, f) {
    return cljs.core.ci_reduce.call(null, string, f)
  };
  var G__3806__3 = function(string, f, start) {
    return cljs.core.ci_reduce.call(null, string, f, start)
  };
  G__3806 = function(string, f, start) {
    switch(arguments.length) {
      case 2:
        return G__3806__2.call(this, string, f);
      case 3:
        return G__3806__3.call(this, string, f, start)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__3806
}();
cljs.core.ILookup["string"] = true;
cljs.core._lookup["string"] = function() {
  var G__3807 = null;
  var G__3807__2 = function(string, k) {
    return cljs.core._nth.call(null, string, k)
  };
  var G__3807__3 = function(string, k, not_found) {
    return cljs.core._nth.call(null, string, k, not_found)
  };
  G__3807 = function(string, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3807__2.call(this, string, k);
      case 3:
        return G__3807__3.call(this, string, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__3807
}();
cljs.core.IIndexed["string"] = true;
cljs.core._nth["string"] = function() {
  var G__3808 = null;
  var G__3808__2 = function(string, n) {
    if(n < cljs.core._count.call(null, string)) {
      return string.charAt(n)
    }else {
      return null
    }
  };
  var G__3808__3 = function(string, n, not_found) {
    if(n < cljs.core._count.call(null, string)) {
      return string.charAt(n)
    }else {
      return not_found
    }
  };
  G__3808 = function(string, n, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3808__2.call(this, string, n);
      case 3:
        return G__3808__3.call(this, string, n, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__3808
}();
cljs.core.ICounted["string"] = true;
cljs.core._count["string"] = function(s) {
  return s.length
};
cljs.core.ISeqable["string"] = true;
cljs.core._seq["string"] = function(string) {
  return cljs.core.prim_seq.call(null, string, 0)
};
cljs.core.IHash["string"] = true;
cljs.core._hash["string"] = function(o) {
  return goog.string.hashCode(o)
};
goog.provide("cljs.core.Keyword");
cljs.core.Keyword = function(k) {
  this.k = k;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/Keyword")
};
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/Keyword")
};
cljs.core.Keyword.prototype.call = function() {
  var G__3813 = null;
  var G__3813__2 = function(this_sym3811, coll) {
    var self__ = this;
    var this_sym3811__$1 = this;
    var _ = this_sym3811__$1;
    if(coll == null) {
      return null
    }else {
      var strobj = coll.strobj;
      if(strobj == null) {
        return cljs.core._lookup.call(null, coll, self__.k, null)
      }else {
        return strobj[self__.k]
      }
    }
  };
  var G__3813__3 = function(this_sym3812, coll, not_found) {
    var self__ = this;
    var this_sym3812__$1 = this;
    var _ = this_sym3812__$1;
    if(coll == null) {
      return not_found
    }else {
      return cljs.core._lookup.call(null, coll, self__.k, not_found)
    }
  };
  G__3813 = function(this_sym3812, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3813__2.call(this, this_sym3812, coll);
      case 3:
        return G__3813__3.call(this, this_sym3812, coll, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__3813
}();
cljs.core.Keyword.prototype.apply = function(this_sym3809, args3810) {
  var self__ = this;
  return this_sym3809.call.apply(this_sym3809, [this_sym3809].concat(args3810.slice()))
};
cljs.core.Keyword;
String.prototype.cljs$core$IFn$ = true;
String.prototype.call = function() {
  var G__3818 = null;
  var G__3818__2 = function(this_sym3816, coll) {
    var this_sym3816__$1 = this;
    var this$ = this_sym3816__$1;
    return cljs.core._lookup.call(null, coll, this$.toString(), null)
  };
  var G__3818__3 = function(this_sym3817, coll, not_found) {
    var this_sym3817__$1 = this;
    var this$ = this_sym3817__$1;
    return cljs.core._lookup.call(null, coll, this$.toString(), not_found)
  };
  G__3818 = function(this_sym3817, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3818__2.call(this, this_sym3817, coll);
      case 3:
        return G__3818__3.call(this, this_sym3817, coll, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__3818
}();
String.prototype.apply = function(this_sym3814, args3815) {
  return this_sym3814.call.apply(this_sym3814, [this_sym3814].concat(args3815.slice()))
};
String.prototype.apply = function(s, args) {
  if(cljs.core.count.call(null, args) < 2) {
    return cljs.core._lookup.call(null, args[0], s, null)
  }else {
    return cljs.core._lookup.call(null, args[0], s, args[1])
  }
};
cljs.core.lazy_seq_value = function lazy_seq_value(lazy_seq) {
  var x = lazy_seq.x;
  if(lazy_seq.realized) {
    return x
  }else {
    lazy_seq.x = x.call(null);
    lazy_seq.realized = true;
    return lazy_seq.x
  }
};
goog.provide("cljs.core.LazySeq");
cljs.core.LazySeq = function(meta, realized, x, __hash) {
  this.meta = meta;
  this.realized = realized;
  this.x = x;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850700
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/LazySeq")
};
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/LazySeq")
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core._seq.call(null, coll.cljs$core$ISeq$_rest$arity$1(coll))
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return cljs.core.cons.call(null, o, coll)
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.seq.call(null, cljs.core.lazy_seq_value.call(null, coll))
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.first.call(null, cljs.core.lazy_seq_value.call(null, coll))
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.rest.call(null, cljs.core.lazy_seq_value.call(null, coll))
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.LazySeq(meta__$1, self__.realized, self__.x, self__.__hash)
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.LazySeq;
goog.provide("cljs.core.ChunkBuffer");
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/ChunkBuffer")
};
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/ChunkBuffer")
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  return self__.end
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret
};
cljs.core.ChunkBuffer;
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(cljs.core.make_array.call(null, capacity), 0)
};
goog.provide("cljs.core.ArrayChunk");
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/ArrayChunk")
};
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/ArrayChunk")
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.off], self__.off + 1)
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.off)
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  if(self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  }else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end)
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  return self__.arr[self__.off + i]
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  if(function() {
    var and__3822__auto__ = i >= 0;
    if(and__3822__auto__) {
      return i < self__.end - self__.off
    }else {
      return and__3822__auto__
    }
  }()) {
    return self__.arr[self__.off + i]
  }else {
    return not_found
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  return self__.end - self__.off
};
cljs.core.ArrayChunk;
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return array_chunk.call(null, arr, 0, arr.length)
  };
  var array_chunk__2 = function(arr, off) {
    return array_chunk.call(null, arr, off, arr.length)
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end)
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$lang$arity$1 = array_chunk__1;
  array_chunk.cljs$lang$arity$2 = array_chunk__2;
  array_chunk.cljs$lang$arity$3 = array_chunk__3;
  return array_chunk
}();
goog.provide("cljs.core.ChunkedCons");
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850604;
  this.cljs$lang$protocol_mask$partition1$ = 1536
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/ChunkedCons")
};
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/ChunkedCons")
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  return cljs.core.cons.call(null, o, this$)
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  return coll
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core._nth.call(null, self__.chunk, 0)
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  if(cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null)
  }else {
    if(self__.more == null) {
      return cljs.core.List.EMPTY
    }else {
      return self__.more
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  if(self__.more == null) {
    return null
  }else {
    return self__.more
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash)
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  return self__.chunk
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  if(self__.more == null) {
    return cljs.core.List.EMPTY
  }else {
    return self__.more
  }
};
cljs.core.ChunkedCons;
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if(cljs.core._count.call(null, chunk) === 0) {
    return rest
  }else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null)
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x)
};
cljs.core.chunk = function chunk(b) {
  return b.chunk()
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first.call(null, s)
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest.call(null, s)
};
cljs.core.chunk_next = function chunk_next(s) {
  if(function() {
    var G__3820 = s;
    if(G__3820) {
      if(function() {
        var or__3824__auto__ = G__3820.cljs$lang$protocol_mask$partition1$ & 1024;
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          return G__3820.cljs$core$IChunkedNext$
        }
      }()) {
        return true
      }else {
        if(!G__3820.cljs$lang$protocol_mask$partition1$) {
          return cljs.core.type_satisfies_.call(null, cljs.core.IChunkedNext, G__3820)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.type_satisfies_.call(null, cljs.core.IChunkedNext, G__3820)
    }
  }()) {
    return cljs.core._chunked_next.call(null, s)
  }else {
    return cljs.core.seq.call(null, cljs.core._chunked_rest.call(null, s))
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while(true) {
    if(cljs.core.seq.call(null, s__$1)) {
      ary.push(cljs.core.first.call(null, s__$1));
      var G__3821 = cljs.core.next.call(null, s__$1);
      s__$1 = G__3821;
      continue
    }else {
      return ary
    }
    break
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = cljs.core.make_array.call(null, cljs.core.count.call(null, coll));
  var i = 0;
  var xs = cljs.core.seq.call(null, coll);
  while(true) {
    if(xs) {
      ret[i] = cljs.core.to_array.call(null, cljs.core.first.call(null, xs));
      var G__3822 = i + 1;
      var G__3823 = cljs.core.next.call(null, xs);
      i = G__3822;
      xs = G__3823;
      continue
    }else {
    }
    break
  }
  return ret
};
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if(cljs.core.number_QMARK_.call(null, size_or_seq)) {
      return long_array.call(null, size_or_seq, null)
    }else {
      if(cljs.core.seq_QMARK_.call(null, size_or_seq)) {
        return cljs.core.into_array.call(null, size_or_seq)
      }else {
        if("\ufdd0'else") {
          throw new Error("long-array called with something other than size or ISeq");
        }else {
          return null
        }
      }
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = cljs.core.make_array.call(null, size);
    if(cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while(true) {
        if(cljs.core.truth_(function() {
          var and__3822__auto__ = s__$1;
          if(and__3822__auto__) {
            return i < size
          }else {
            return and__3822__auto__
          }
        }())) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__3824 = i + 1;
          var G__3825 = cljs.core.next.call(null, s__$1);
          i = G__3824;
          s__$1 = G__3825;
          continue
        }else {
          return a
        }
        break
      }
    }else {
      var n__2535__auto__ = size;
      var i = 0;
      while(true) {
        if(i < n__2535__auto__) {
          a[i] = init_val_or_seq;
          var G__3826 = i + 1;
          i = G__3826;
          continue
        }else {
        }
        break
      }
      return a
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$lang$arity$1 = long_array__1;
  long_array.cljs$lang$arity$2 = long_array__2;
  return long_array
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if(cljs.core.number_QMARK_.call(null, size_or_seq)) {
      return double_array.call(null, size_or_seq, null)
    }else {
      if(cljs.core.seq_QMARK_.call(null, size_or_seq)) {
        return cljs.core.into_array.call(null, size_or_seq)
      }else {
        if("\ufdd0'else") {
          throw new Error("double-array called with something other than size or ISeq");
        }else {
          return null
        }
      }
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = cljs.core.make_array.call(null, size);
    if(cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while(true) {
        if(cljs.core.truth_(function() {
          var and__3822__auto__ = s__$1;
          if(and__3822__auto__) {
            return i < size
          }else {
            return and__3822__auto__
          }
        }())) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__3827 = i + 1;
          var G__3828 = cljs.core.next.call(null, s__$1);
          i = G__3827;
          s__$1 = G__3828;
          continue
        }else {
          return a
        }
        break
      }
    }else {
      var n__2535__auto__ = size;
      var i = 0;
      while(true) {
        if(i < n__2535__auto__) {
          a[i] = init_val_or_seq;
          var G__3829 = i + 1;
          i = G__3829;
          continue
        }else {
        }
        break
      }
      return a
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$lang$arity$1 = double_array__1;
  double_array.cljs$lang$arity$2 = double_array__2;
  return double_array
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if(cljs.core.number_QMARK_.call(null, size_or_seq)) {
      return object_array.call(null, size_or_seq, null)
    }else {
      if(cljs.core.seq_QMARK_.call(null, size_or_seq)) {
        return cljs.core.into_array.call(null, size_or_seq)
      }else {
        if("\ufdd0'else") {
          throw new Error("object-array called with something other than size or ISeq");
        }else {
          return null
        }
      }
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = cljs.core.make_array.call(null, size);
    if(cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while(true) {
        if(cljs.core.truth_(function() {
          var and__3822__auto__ = s__$1;
          if(and__3822__auto__) {
            return i < size
          }else {
            return and__3822__auto__
          }
        }())) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__3830 = i + 1;
          var G__3831 = cljs.core.next.call(null, s__$1);
          i = G__3830;
          s__$1 = G__3831;
          continue
        }else {
          return a
        }
        break
      }
    }else {
      var n__2535__auto__ = size;
      var i = 0;
      while(true) {
        if(i < n__2535__auto__) {
          a[i] = init_val_or_seq;
          var G__3832 = i + 1;
          i = G__3832;
          continue
        }else {
        }
        break
      }
      return a
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$lang$arity$1 = object_array__1;
  object_array.cljs$lang$arity$2 = object_array__2;
  return object_array
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if(cljs.core.counted_QMARK_.call(null, s)) {
    return cljs.core.count.call(null, s)
  }else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while(true) {
      if(cljs.core.truth_(function() {
        var and__3822__auto__ = i > 0;
        if(and__3822__auto__) {
          return cljs.core.seq.call(null, s__$1)
        }else {
          return and__3822__auto__
        }
      }())) {
        var G__3833 = cljs.core.next.call(null, s__$1);
        var G__3834 = i - 1;
        var G__3835 = sum + 1;
        s__$1 = G__3833;
        i = G__3834;
        sum = G__3835;
        continue
      }else {
        return sum
      }
      break
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if(arglist == null) {
    return null
  }else {
    if(cljs.core.next.call(null, arglist) == null) {
      return cljs.core.seq.call(null, cljs.core.first.call(null, arglist))
    }else {
      if("\ufdd0'else") {
        return cljs.core.cons.call(null, cljs.core.first.call(null, arglist), spread.call(null, cljs.core.next.call(null, arglist)))
      }else {
        return null
      }
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, false, function() {
      return null
    }, null)
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, false, function() {
      return x
    }, null)
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, false, function() {
      var s = cljs.core.seq.call(null, x);
      if(s) {
        if(cljs.core.chunked_seq_QMARK_.call(null, s)) {
          return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, s), concat.call(null, cljs.core.chunk_rest.call(null, s), y))
        }else {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), concat.call(null, cljs.core.rest.call(null, s), y))
        }
      }else {
        return y
      }
    }, null)
  };
  var concat__3 = function() {
    var G__3836__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, false, function() {
          var xys__$1 = cljs.core.seq.call(null, xys);
          if(xys__$1) {
            if(cljs.core.chunked_seq_QMARK_.call(null, xys__$1)) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, xys__$1), cat.call(null, cljs.core.chunk_rest.call(null, xys__$1), zs__$1))
            }else {
              return cljs.core.cons.call(null, cljs.core.first.call(null, xys__$1), cat.call(null, cljs.core.rest.call(null, xys__$1), zs__$1))
            }
          }else {
            if(cljs.core.truth_(zs__$1)) {
              return cat.call(null, cljs.core.first.call(null, zs__$1), cljs.core.next.call(null, zs__$1))
            }else {
              return null
            }
          }
        }, null)
      };
      return cat.call(null, concat.call(null, x, y), zs)
    };
    var G__3836 = function(x, y, var_args) {
      var zs = null;
      if(goog.isDef(var_args)) {
        zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3836__delegate.call(this, x, y, zs)
    };
    G__3836.cljs$lang$maxFixedArity = 2;
    G__3836.cljs$lang$applyTo = function(arglist__3837) {
      var x = cljs.core.first(arglist__3837);
      var y = cljs.core.first(cljs.core.next(arglist__3837));
      var zs = cljs.core.rest(cljs.core.next(arglist__3837));
      return G__3836__delegate(x, y, zs)
    };
    G__3836.cljs$lang$arity$variadic = G__3836__delegate;
    return G__3836
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        return concat__3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$lang$arity$0 = concat__0;
  concat.cljs$lang$arity$1 = concat__1;
  concat.cljs$lang$arity$2 = concat__2;
  concat.cljs$lang$arity$variadic = concat__3.cljs$lang$arity$variadic;
  return concat
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq.call(null, args)
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons.call(null, a, args)
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, args))
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, args)))
  };
  var list_STAR___5 = function() {
    var G__3838__delegate = function(a, b, c, d, more) {
      return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, more)))))
    };
    var G__3838 = function(a, b, c, d, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0)
      }
      return G__3838__delegate.call(this, a, b, c, d, more)
    };
    G__3838.cljs$lang$maxFixedArity = 4;
    G__3838.cljs$lang$applyTo = function(arglist__3839) {
      var a = cljs.core.first(arglist__3839);
      var b = cljs.core.first(cljs.core.next(arglist__3839));
      var c = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3839)));
      var d = cljs.core.first(cljs.core.next(cljs.core.next(cljs.core.next(arglist__3839))));
      var more = cljs.core.rest(cljs.core.next(cljs.core.next(cljs.core.next(arglist__3839))));
      return G__3838__delegate(a, b, c, d, more)
    };
    G__3838.cljs$lang$arity$variadic = G__3838__delegate;
    return G__3838
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        return list_STAR___5.cljs$lang$arity$variadic(a, b, c, d, cljs.core.array_seq(arguments, 4))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$lang$arity$1 = list_STAR___1;
  list_STAR_.cljs$lang$arity$2 = list_STAR___2;
  list_STAR_.cljs$lang$arity$3 = list_STAR___3;
  list_STAR_.cljs$lang$arity$4 = list_STAR___4;
  list_STAR_.cljs$lang$arity$variadic = list_STAR___5.cljs$lang$arity$variadic;
  return list_STAR_
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient.call(null, coll)
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_.call(null, tcoll)
};
cljs.core.conj_BANG_ = function conj_BANG_(tcoll, val) {
  return cljs.core._conj_BANG_.call(null, tcoll, val)
};
cljs.core.assoc_BANG_ = function assoc_BANG_(tcoll, key, val) {
  return cljs.core._assoc_BANG_.call(null, tcoll, key, val)
};
cljs.core.dissoc_BANG_ = function dissoc_BANG_(tcoll, key) {
  return cljs.core._dissoc_BANG_.call(null, tcoll, key)
};
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_.call(null, tcoll)
};
cljs.core.disj_BANG_ = function disj_BANG_(tcoll, val) {
  return cljs.core._disjoin_BANG_.call(null, tcoll, val)
};
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq.call(null, args);
  if(argc === 0) {
    return f.call(null)
  }else {
    var a = cljs.core._first.call(null, args__$1);
    var args__$2 = cljs.core._rest.call(null, args__$1);
    if(argc === 1) {
      if(f.cljs$lang$arity$1) {
        return f.cljs$lang$arity$1(a)
      }else {
        return f.call(null, a)
      }
    }else {
      var b = cljs.core._first.call(null, args__$2);
      var args__$3 = cljs.core._rest.call(null, args__$2);
      if(argc === 2) {
        if(f.cljs$lang$arity$2) {
          return f.cljs$lang$arity$2(a, b)
        }else {
          return f.call(null, a, b)
        }
      }else {
        var c = cljs.core._first.call(null, args__$3);
        var args__$4 = cljs.core._rest.call(null, args__$3);
        if(argc === 3) {
          if(f.cljs$lang$arity$3) {
            return f.cljs$lang$arity$3(a, b, c)
          }else {
            return f.call(null, a, b, c)
          }
        }else {
          var d = cljs.core._first.call(null, args__$4);
          var args__$5 = cljs.core._rest.call(null, args__$4);
          if(argc === 4) {
            if(f.cljs$lang$arity$4) {
              return f.cljs$lang$arity$4(a, b, c, d)
            }else {
              return f.call(null, a, b, c, d)
            }
          }else {
            var e = cljs.core._first.call(null, args__$5);
            var args__$6 = cljs.core._rest.call(null, args__$5);
            if(argc === 5) {
              if(f.cljs$lang$arity$5) {
                return f.cljs$lang$arity$5(a, b, c, d, e)
              }else {
                return f.call(null, a, b, c, d, e)
              }
            }else {
              var f__$1 = cljs.core._first.call(null, args__$6);
              var args__$7 = cljs.core._rest.call(null, args__$6);
              if(argc === 6) {
                if(f__$1.cljs$lang$arity$6) {
                  return f__$1.cljs$lang$arity$6(a, b, c, d, e, f__$1)
                }else {
                  return f__$1.call(null, a, b, c, d, e, f__$1)
                }
              }else {
                var g = cljs.core._first.call(null, args__$7);
                var args__$8 = cljs.core._rest.call(null, args__$7);
                if(argc === 7) {
                  if(f__$1.cljs$lang$arity$7) {
                    return f__$1.cljs$lang$arity$7(a, b, c, d, e, f__$1, g)
                  }else {
                    return f__$1.call(null, a, b, c, d, e, f__$1, g)
                  }
                }else {
                  var h = cljs.core._first.call(null, args__$8);
                  var args__$9 = cljs.core._rest.call(null, args__$8);
                  if(argc === 8) {
                    if(f__$1.cljs$lang$arity$8) {
                      return f__$1.cljs$lang$arity$8(a, b, c, d, e, f__$1, g, h)
                    }else {
                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h)
                    }
                  }else {
                    var i = cljs.core._first.call(null, args__$9);
                    var args__$10 = cljs.core._rest.call(null, args__$9);
                    if(argc === 9) {
                      if(f__$1.cljs$lang$arity$9) {
                        return f__$1.cljs$lang$arity$9(a, b, c, d, e, f__$1, g, h, i)
                      }else {
                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i)
                      }
                    }else {
                      var j = cljs.core._first.call(null, args__$10);
                      var args__$11 = cljs.core._rest.call(null, args__$10);
                      if(argc === 10) {
                        if(f__$1.cljs$lang$arity$10) {
                          return f__$1.cljs$lang$arity$10(a, b, c, d, e, f__$1, g, h, i, j)
                        }else {
                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j)
                        }
                      }else {
                        var k = cljs.core._first.call(null, args__$11);
                        var args__$12 = cljs.core._rest.call(null, args__$11);
                        if(argc === 11) {
                          if(f__$1.cljs$lang$arity$11) {
                            return f__$1.cljs$lang$arity$11(a, b, c, d, e, f__$1, g, h, i, j, k)
                          }else {
                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k)
                          }
                        }else {
                          var l = cljs.core._first.call(null, args__$12);
                          var args__$13 = cljs.core._rest.call(null, args__$12);
                          if(argc === 12) {
                            if(f__$1.cljs$lang$arity$12) {
                              return f__$1.cljs$lang$arity$12(a, b, c, d, e, f__$1, g, h, i, j, k, l)
                            }else {
                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l)
                            }
                          }else {
                            var m = cljs.core._first.call(null, args__$13);
                            var args__$14 = cljs.core._rest.call(null, args__$13);
                            if(argc === 13) {
                              if(f__$1.cljs$lang$arity$13) {
                                return f__$1.cljs$lang$arity$13(a, b, c, d, e, f__$1, g, h, i, j, k, l, m)
                              }else {
                                return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m)
                              }
                            }else {
                              var n = cljs.core._first.call(null, args__$14);
                              var args__$15 = cljs.core._rest.call(null, args__$14);
                              if(argc === 14) {
                                if(f__$1.cljs$lang$arity$14) {
                                  return f__$1.cljs$lang$arity$14(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n)
                                }else {
                                  return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n)
                                }
                              }else {
                                var o = cljs.core._first.call(null, args__$15);
                                var args__$16 = cljs.core._rest.call(null, args__$15);
                                if(argc === 15) {
                                  if(f__$1.cljs$lang$arity$15) {
                                    return f__$1.cljs$lang$arity$15(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o)
                                  }else {
                                    return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o)
                                  }
                                }else {
                                  var p = cljs.core._first.call(null, args__$16);
                                  var args__$17 = cljs.core._rest.call(null, args__$16);
                                  if(argc === 16) {
                                    if(f__$1.cljs$lang$arity$16) {
                                      return f__$1.cljs$lang$arity$16(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p)
                                    }else {
                                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p)
                                    }
                                  }else {
                                    var q = cljs.core._first.call(null, args__$17);
                                    var args__$18 = cljs.core._rest.call(null, args__$17);
                                    if(argc === 17) {
                                      if(f__$1.cljs$lang$arity$17) {
                                        return f__$1.cljs$lang$arity$17(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q)
                                      }else {
                                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q)
                                      }
                                    }else {
                                      var r = cljs.core._first.call(null, args__$18);
                                      var args__$19 = cljs.core._rest.call(null, args__$18);
                                      if(argc === 18) {
                                        if(f__$1.cljs$lang$arity$18) {
                                          return f__$1.cljs$lang$arity$18(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r)
                                        }else {
                                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r)
                                        }
                                      }else {
                                        var s = cljs.core._first.call(null, args__$19);
                                        var args__$20 = cljs.core._rest.call(null, args__$19);
                                        if(argc === 19) {
                                          if(f__$1.cljs$lang$arity$19) {
                                            return f__$1.cljs$lang$arity$19(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s)
                                          }else {
                                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s)
                                          }
                                        }else {
                                          var t = cljs.core._first.call(null, args__$20);
                                          var args__$21 = cljs.core._rest.call(null, args__$20);
                                          if(argc === 20) {
                                            if(f__$1.cljs$lang$arity$20) {
                                              return f__$1.cljs$lang$arity$20(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t)
                                            }else {
                                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t)
                                            }
                                          }else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if(f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, args, fixed_arity + 1);
      if(bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, args)
      }else {
        return f.cljs$lang$applyTo(args)
      }
    }else {
      return f.apply(f, cljs.core.to_array.call(null, args))
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if(f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if(bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist)
      }else {
        return f.cljs$lang$applyTo(arglist)
      }
    }else {
      return f.apply(f, cljs.core.to_array.call(null, arglist))
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if(f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if(bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist)
      }else {
        return f.cljs$lang$applyTo(arglist)
      }
    }else {
      return f.apply(f, cljs.core.to_array.call(null, arglist))
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if(f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if(bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist)
      }else {
        return f.cljs$lang$applyTo(arglist)
      }
    }else {
      return f.apply(f, cljs.core.to_array.call(null, arglist))
    }
  };
  var apply__6 = function() {
    var G__3840__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if(f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
        if(bc <= fixed_arity) {
          return cljs.core.apply_to.call(null, f, bc, arglist)
        }else {
          return f.cljs$lang$applyTo(arglist)
        }
      }else {
        return f.apply(f, cljs.core.to_array.call(null, arglist))
      }
    };
    var G__3840 = function(f, a, b, c, d, var_args) {
      var args = null;
      if(goog.isDef(var_args)) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0)
      }
      return G__3840__delegate.call(this, f, a, b, c, d, args)
    };
    G__3840.cljs$lang$maxFixedArity = 5;
    G__3840.cljs$lang$applyTo = function(arglist__3841) {
      var f = cljs.core.first(arglist__3841);
      var a = cljs.core.first(cljs.core.next(arglist__3841));
      var b = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3841)));
      var c = cljs.core.first(cljs.core.next(cljs.core.next(cljs.core.next(arglist__3841))));
      var d = cljs.core.first(cljs.core.next(cljs.core.next(cljs.core.next(cljs.core.next(arglist__3841)))));
      var args = cljs.core.rest(cljs.core.next(cljs.core.next(cljs.core.next(cljs.core.next(arglist__3841)))));
      return G__3840__delegate(f, a, b, c, d, args)
    };
    G__3840.cljs$lang$arity$variadic = G__3840__delegate;
    return G__3840
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        return apply__6.cljs$lang$arity$variadic(f, a, b, c, d, cljs.core.array_seq(arguments, 5))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$lang$arity$2 = apply__2;
  apply.cljs$lang$arity$3 = apply__3;
  apply.cljs$lang$arity$4 = apply__4;
  apply.cljs$lang$arity$5 = apply__5;
  apply.cljs$lang$arity$variadic = apply__6.cljs$lang$arity$variadic;
  return apply
}();
cljs.core.vary_meta = function() {
  var vary_meta__delegate = function(obj, f, args) {
    return cljs.core.with_meta.call(null, obj, cljs.core.apply.call(null, f, cljs.core.meta.call(null, obj), args))
  };
  var vary_meta = function(obj, f, var_args) {
    var args = null;
    if(goog.isDef(var_args)) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
    }
    return vary_meta__delegate.call(this, obj, f, args)
  };
  vary_meta.cljs$lang$maxFixedArity = 2;
  vary_meta.cljs$lang$applyTo = function(arglist__3842) {
    var obj = cljs.core.first(arglist__3842);
    var f = cljs.core.first(cljs.core.next(arglist__3842));
    var args = cljs.core.rest(cljs.core.next(arglist__3842));
    return vary_meta__delegate(obj, f, args)
  };
  vary_meta.cljs$lang$arity$variadic = vary_meta__delegate;
  return vary_meta
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y)
  };
  var not_EQ___3 = function() {
    var G__3843__delegate = function(x, y, more) {
      return cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core._EQ_, x, y, more))
    };
    var G__3843 = function(x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3843__delegate.call(this, x, y, more)
    };
    G__3843.cljs$lang$maxFixedArity = 2;
    G__3843.cljs$lang$applyTo = function(arglist__3844) {
      var x = cljs.core.first(arglist__3844);
      var y = cljs.core.first(cljs.core.next(arglist__3844));
      var more = cljs.core.rest(cljs.core.next(arglist__3844));
      return G__3843__delegate(x, y, more)
    };
    G__3843.cljs$lang$arity$variadic = G__3843__delegate;
    return G__3843
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        return not_EQ___3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$lang$arity$1 = not_EQ___1;
  not_EQ_.cljs$lang$arity$2 = not_EQ___2;
  not_EQ_.cljs$lang$arity$variadic = not_EQ___3.cljs$lang$arity$variadic;
  return not_EQ_
}();
cljs.core.not_empty = function not_empty(coll) {
  if(cljs.core.seq.call(null, coll)) {
    return coll
  }else {
    return null
  }
};
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while(true) {
    if(cljs.core.seq.call(null, coll) == null) {
      return true
    }else {
      if(cljs.core.truth_(pred.call(null, cljs.core.first.call(null, coll)))) {
        var G__3845 = pred;
        var G__3846 = cljs.core.next.call(null, coll);
        pred = G__3845;
        coll = G__3846;
        continue
      }else {
        if("\ufdd0'else") {
          return false
        }else {
          return null
        }
      }
    }
    break
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_.call(null, pred, coll)
};
cljs.core.some = function some(pred, coll) {
  while(true) {
    if(cljs.core.seq.call(null, coll)) {
      var or__3824__auto__ = pred.call(null, cljs.core.first.call(null, coll));
      if(cljs.core.truth_(or__3824__auto__)) {
        return or__3824__auto__
      }else {
        var G__3847 = pred;
        var G__3848 = cljs.core.next.call(null, coll);
        pred = G__3847;
        coll = G__3848;
        continue
      }
    }else {
      return null
    }
    break
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not.call(null, cljs.core.some.call(null, pred, coll))
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if(cljs.core.integer_QMARK_.call(null, n)) {
    return(n & 1) === 0
  }else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_.call(null, n)
};
cljs.core.identity = function identity(x) {
  return x
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__3849 = null;
    var G__3849__0 = function() {
      return cljs.core.not.call(null, f.call(null))
    };
    var G__3849__1 = function(x) {
      return cljs.core.not.call(null, f.call(null, x))
    };
    var G__3849__2 = function(x, y) {
      return cljs.core.not.call(null, f.call(null, x, y))
    };
    var G__3849__3 = function() {
      var G__3850__delegate = function(x, y, zs) {
        return cljs.core.not.call(null, cljs.core.apply.call(null, f, x, y, zs))
      };
      var G__3850 = function(x, y, var_args) {
        var zs = null;
        if(goog.isDef(var_args)) {
          zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
        }
        return G__3850__delegate.call(this, x, y, zs)
      };
      G__3850.cljs$lang$maxFixedArity = 2;
      G__3850.cljs$lang$applyTo = function(arglist__3851) {
        var x = cljs.core.first(arglist__3851);
        var y = cljs.core.first(cljs.core.next(arglist__3851));
        var zs = cljs.core.rest(cljs.core.next(arglist__3851));
        return G__3850__delegate(x, y, zs)
      };
      G__3850.cljs$lang$arity$variadic = G__3850__delegate;
      return G__3850
    }();
    G__3849 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__3849__0.call(this);
        case 1:
          return G__3849__1.call(this, x);
        case 2:
          return G__3849__2.call(this, x, y);
        default:
          return G__3849__3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__3849.cljs$lang$maxFixedArity = 2;
    G__3849.cljs$lang$applyTo = G__3849__3.cljs$lang$applyTo;
    return G__3849
  }()
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__3852__delegate = function(args) {
      return x
    };
    var G__3852 = function(var_args) {
      var args = null;
      if(goog.isDef(var_args)) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
      }
      return G__3852__delegate.call(this, args)
    };
    G__3852.cljs$lang$maxFixedArity = 0;
    G__3852.cljs$lang$applyTo = function(arglist__3853) {
      var args = cljs.core.seq(arglist__3853);
      return G__3852__delegate(args)
    };
    G__3852.cljs$lang$arity$variadic = G__3852__delegate;
    return G__3852
  }()
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity
  };
  var comp__1 = function(f) {
    return f
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__3854 = null;
      var G__3854__0 = function() {
        return f.call(null, g.call(null))
      };
      var G__3854__1 = function(x) {
        return f.call(null, g.call(null, x))
      };
      var G__3854__2 = function(x, y) {
        return f.call(null, g.call(null, x, y))
      };
      var G__3854__3 = function(x, y, z) {
        return f.call(null, g.call(null, x, y, z))
      };
      var G__3854__4 = function() {
        var G__3855__delegate = function(x, y, z, args) {
          return f.call(null, cljs.core.apply.call(null, g, x, y, z, args))
        };
        var G__3855 = function(x, y, z, var_args) {
          var args = null;
          if(goog.isDef(var_args)) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__3855__delegate.call(this, x, y, z, args)
        };
        G__3855.cljs$lang$maxFixedArity = 3;
        G__3855.cljs$lang$applyTo = function(arglist__3856) {
          var x = cljs.core.first(arglist__3856);
          var y = cljs.core.first(cljs.core.next(arglist__3856));
          var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3856)));
          var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3856)));
          return G__3855__delegate(x, y, z, args)
        };
        G__3855.cljs$lang$arity$variadic = G__3855__delegate;
        return G__3855
      }();
      G__3854 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__3854__0.call(this);
          case 1:
            return G__3854__1.call(this, x);
          case 2:
            return G__3854__2.call(this, x, y);
          case 3:
            return G__3854__3.call(this, x, y, z);
          default:
            return G__3854__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__3854.cljs$lang$maxFixedArity = 3;
      G__3854.cljs$lang$applyTo = G__3854__4.cljs$lang$applyTo;
      return G__3854
    }()
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__3857 = null;
      var G__3857__0 = function() {
        return f.call(null, g.call(null, h.call(null)))
      };
      var G__3857__1 = function(x) {
        return f.call(null, g.call(null, h.call(null, x)))
      };
      var G__3857__2 = function(x, y) {
        return f.call(null, g.call(null, h.call(null, x, y)))
      };
      var G__3857__3 = function(x, y, z) {
        return f.call(null, g.call(null, h.call(null, x, y, z)))
      };
      var G__3857__4 = function() {
        var G__3858__delegate = function(x, y, z, args) {
          return f.call(null, g.call(null, cljs.core.apply.call(null, h, x, y, z, args)))
        };
        var G__3858 = function(x, y, z, var_args) {
          var args = null;
          if(goog.isDef(var_args)) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__3858__delegate.call(this, x, y, z, args)
        };
        G__3858.cljs$lang$maxFixedArity = 3;
        G__3858.cljs$lang$applyTo = function(arglist__3859) {
          var x = cljs.core.first(arglist__3859);
          var y = cljs.core.first(cljs.core.next(arglist__3859));
          var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3859)));
          var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3859)));
          return G__3858__delegate(x, y, z, args)
        };
        G__3858.cljs$lang$arity$variadic = G__3858__delegate;
        return G__3858
      }();
      G__3857 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__3857__0.call(this);
          case 1:
            return G__3857__1.call(this, x);
          case 2:
            return G__3857__2.call(this, x, y);
          case 3:
            return G__3857__3.call(this, x, y, z);
          default:
            return G__3857__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__3857.cljs$lang$maxFixedArity = 3;
      G__3857.cljs$lang$applyTo = G__3857__4.cljs$lang$applyTo;
      return G__3857
    }()
  };
  var comp__4 = function() {
    var G__3860__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse.call(null, cljs.core.list_STAR_.call(null, f1, f2, f3, fs));
      return function() {
        var G__3861__delegate = function(args) {
          var ret = cljs.core.apply.call(null, cljs.core.first.call(null, fs__$1), args);
          var fs__$2 = cljs.core.next.call(null, fs__$1);
          while(true) {
            if(fs__$2) {
              var G__3862 = cljs.core.first.call(null, fs__$2).call(null, ret);
              var G__3863 = cljs.core.next.call(null, fs__$2);
              ret = G__3862;
              fs__$2 = G__3863;
              continue
            }else {
              return ret
            }
            break
          }
        };
        var G__3861 = function(var_args) {
          var args = null;
          if(goog.isDef(var_args)) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
          }
          return G__3861__delegate.call(this, args)
        };
        G__3861.cljs$lang$maxFixedArity = 0;
        G__3861.cljs$lang$applyTo = function(arglist__3864) {
          var args = cljs.core.seq(arglist__3864);
          return G__3861__delegate(args)
        };
        G__3861.cljs$lang$arity$variadic = G__3861__delegate;
        return G__3861
      }()
    };
    var G__3860 = function(f1, f2, f3, var_args) {
      var fs = null;
      if(goog.isDef(var_args)) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__3860__delegate.call(this, f1, f2, f3, fs)
    };
    G__3860.cljs$lang$maxFixedArity = 3;
    G__3860.cljs$lang$applyTo = function(arglist__3865) {
      var f1 = cljs.core.first(arglist__3865);
      var f2 = cljs.core.first(cljs.core.next(arglist__3865));
      var f3 = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3865)));
      var fs = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3865)));
      return G__3860__delegate(f1, f2, f3, fs)
    };
    G__3860.cljs$lang$arity$variadic = G__3860__delegate;
    return G__3860
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        return comp__4.cljs$lang$arity$variadic(f1, f2, f3, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$lang$arity$0 = comp__0;
  comp.cljs$lang$arity$1 = comp__1;
  comp.cljs$lang$arity$2 = comp__2;
  comp.cljs$lang$arity$3 = comp__3;
  comp.cljs$lang$arity$variadic = comp__4.cljs$lang$arity$variadic;
  return comp
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__2 = function(f, arg1) {
    return function() {
      var G__3866__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, args)
      };
      var G__3866 = function(var_args) {
        var args = null;
        if(goog.isDef(var_args)) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
        }
        return G__3866__delegate.call(this, args)
      };
      G__3866.cljs$lang$maxFixedArity = 0;
      G__3866.cljs$lang$applyTo = function(arglist__3867) {
        var args = cljs.core.seq(arglist__3867);
        return G__3866__delegate(args)
      };
      G__3866.cljs$lang$arity$variadic = G__3866__delegate;
      return G__3866
    }()
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__3868__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, args)
      };
      var G__3868 = function(var_args) {
        var args = null;
        if(goog.isDef(var_args)) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
        }
        return G__3868__delegate.call(this, args)
      };
      G__3868.cljs$lang$maxFixedArity = 0;
      G__3868.cljs$lang$applyTo = function(arglist__3869) {
        var args = cljs.core.seq(arglist__3869);
        return G__3868__delegate(args)
      };
      G__3868.cljs$lang$arity$variadic = G__3868__delegate;
      return G__3868
    }()
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__3870__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, arg3, args)
      };
      var G__3870 = function(var_args) {
        var args = null;
        if(goog.isDef(var_args)) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
        }
        return G__3870__delegate.call(this, args)
      };
      G__3870.cljs$lang$maxFixedArity = 0;
      G__3870.cljs$lang$applyTo = function(arglist__3871) {
        var args = cljs.core.seq(arglist__3871);
        return G__3870__delegate(args)
      };
      G__3870.cljs$lang$arity$variadic = G__3870__delegate;
      return G__3870
    }()
  };
  var partial__5 = function() {
    var G__3872__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__3873__delegate = function(args) {
          return cljs.core.apply.call(null, f, arg1, arg2, arg3, cljs.core.concat.call(null, more, args))
        };
        var G__3873 = function(var_args) {
          var args = null;
          if(goog.isDef(var_args)) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
          }
          return G__3873__delegate.call(this, args)
        };
        G__3873.cljs$lang$maxFixedArity = 0;
        G__3873.cljs$lang$applyTo = function(arglist__3874) {
          var args = cljs.core.seq(arglist__3874);
          return G__3873__delegate(args)
        };
        G__3873.cljs$lang$arity$variadic = G__3873__delegate;
        return G__3873
      }()
    };
    var G__3872 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0)
      }
      return G__3872__delegate.call(this, f, arg1, arg2, arg3, more)
    };
    G__3872.cljs$lang$maxFixedArity = 4;
    G__3872.cljs$lang$applyTo = function(arglist__3875) {
      var f = cljs.core.first(arglist__3875);
      var arg1 = cljs.core.first(cljs.core.next(arglist__3875));
      var arg2 = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3875)));
      var arg3 = cljs.core.first(cljs.core.next(cljs.core.next(cljs.core.next(arglist__3875))));
      var more = cljs.core.rest(cljs.core.next(cljs.core.next(cljs.core.next(arglist__3875))));
      return G__3872__delegate(f, arg1, arg2, arg3, more)
    };
    G__3872.cljs$lang$arity$variadic = G__3872__delegate;
    return G__3872
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        return partial__5.cljs$lang$arity$variadic(f, arg1, arg2, arg3, cljs.core.array_seq(arguments, 4))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$lang$arity$2 = partial__2;
  partial.cljs$lang$arity$3 = partial__3;
  partial.cljs$lang$arity$4 = partial__4;
  partial.cljs$lang$arity$variadic = partial__5.cljs$lang$arity$variadic;
  return partial
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__3876 = null;
      var G__3876__1 = function(a) {
        return f.call(null, a == null ? x : a)
      };
      var G__3876__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b)
      };
      var G__3876__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b, c)
      };
      var G__3876__4 = function() {
        var G__3877__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b, c, ds)
        };
        var G__3877 = function(a, b, c, var_args) {
          var ds = null;
          if(goog.isDef(var_args)) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__3877__delegate.call(this, a, b, c, ds)
        };
        G__3877.cljs$lang$maxFixedArity = 3;
        G__3877.cljs$lang$applyTo = function(arglist__3878) {
          var a = cljs.core.first(arglist__3878);
          var b = cljs.core.first(cljs.core.next(arglist__3878));
          var c = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3878)));
          var ds = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3878)));
          return G__3877__delegate(a, b, c, ds)
        };
        G__3877.cljs$lang$arity$variadic = G__3877__delegate;
        return G__3877
      }();
      G__3876 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__3876__1.call(this, a);
          case 2:
            return G__3876__2.call(this, a, b);
          case 3:
            return G__3876__3.call(this, a, b, c);
          default:
            return G__3876__4.cljs$lang$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__3876.cljs$lang$maxFixedArity = 3;
      G__3876.cljs$lang$applyTo = G__3876__4.cljs$lang$applyTo;
      return G__3876
    }()
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__3879 = null;
      var G__3879__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b)
      };
      var G__3879__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c)
      };
      var G__3879__4 = function() {
        var G__3880__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c, ds)
        };
        var G__3880 = function(a, b, c, var_args) {
          var ds = null;
          if(goog.isDef(var_args)) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__3880__delegate.call(this, a, b, c, ds)
        };
        G__3880.cljs$lang$maxFixedArity = 3;
        G__3880.cljs$lang$applyTo = function(arglist__3881) {
          var a = cljs.core.first(arglist__3881);
          var b = cljs.core.first(cljs.core.next(arglist__3881));
          var c = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3881)));
          var ds = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3881)));
          return G__3880__delegate(a, b, c, ds)
        };
        G__3880.cljs$lang$arity$variadic = G__3880__delegate;
        return G__3880
      }();
      G__3879 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__3879__2.call(this, a, b);
          case 3:
            return G__3879__3.call(this, a, b, c);
          default:
            return G__3879__4.cljs$lang$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__3879.cljs$lang$maxFixedArity = 3;
      G__3879.cljs$lang$applyTo = G__3879__4.cljs$lang$applyTo;
      return G__3879
    }()
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__3882 = null;
      var G__3882__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b)
      };
      var G__3882__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c == null ? z : c)
      };
      var G__3882__4 = function() {
        var G__3883__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds)
        };
        var G__3883 = function(a, b, c, var_args) {
          var ds = null;
          if(goog.isDef(var_args)) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__3883__delegate.call(this, a, b, c, ds)
        };
        G__3883.cljs$lang$maxFixedArity = 3;
        G__3883.cljs$lang$applyTo = function(arglist__3884) {
          var a = cljs.core.first(arglist__3884);
          var b = cljs.core.first(cljs.core.next(arglist__3884));
          var c = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3884)));
          var ds = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3884)));
          return G__3883__delegate(a, b, c, ds)
        };
        G__3883.cljs$lang$arity$variadic = G__3883__delegate;
        return G__3883
      }();
      G__3882 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__3882__2.call(this, a, b);
          case 3:
            return G__3882__3.call(this, a, b, c);
          default:
            return G__3882__4.cljs$lang$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__3882.cljs$lang$maxFixedArity = 3;
      G__3882.cljs$lang$applyTo = G__3882__4.cljs$lang$applyTo;
      return G__3882
    }()
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$lang$arity$2 = fnil__2;
  fnil.cljs$lang$arity$3 = fnil__3;
  fnil.cljs$lang$arity$4 = fnil__4;
  return fnil
}();
cljs.core.map_indexed = function map_indexed(f, coll) {
  var mapi = function mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, false, function() {
      var temp__3974__auto__ = cljs.core.seq.call(null, coll__$1);
      if(temp__3974__auto__) {
        var s = temp__3974__auto__;
        if(cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__2535__auto__ = size;
          var i = 0;
          while(true) {
            if(i < n__2535__auto__) {
              cljs.core.chunk_append.call(null, b, f.call(null, idx + i, cljs.core._nth.call(null, c, i)));
              var G__3885 = i + 1;
              i = G__3885;
              continue
            }else {
            }
            break
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), mapi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)))
        }else {
          return cljs.core.cons.call(null, f.call(null, idx, cljs.core.first.call(null, s)), mapi.call(null, idx + 1, cljs.core.rest.call(null, s)))
        }
      }else {
        return null
      }
    }, null)
  };
  return mapi.call(null, 0, coll)
};
cljs.core.keep = function keep(f, coll) {
  return new cljs.core.LazySeq(null, false, function() {
    var temp__3974__auto__ = cljs.core.seq.call(null, coll);
    if(temp__3974__auto__) {
      var s = temp__3974__auto__;
      if(cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__2535__auto__ = size;
        var i = 0;
        while(true) {
          if(i < n__2535__auto__) {
            var x = f.call(null, cljs.core._nth.call(null, c, i));
            if(x == null) {
            }else {
              cljs.core.chunk_append.call(null, b, x)
            }
            var G__3886 = i + 1;
            i = G__3886;
            continue
          }else {
          }
          break
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keep.call(null, f, cljs.core.chunk_rest.call(null, s)))
      }else {
        var x = f.call(null, cljs.core.first.call(null, s));
        if(x == null) {
          return keep.call(null, f, cljs.core.rest.call(null, s))
        }else {
          return cljs.core.cons.call(null, x, keep.call(null, f, cljs.core.rest.call(null, s)))
        }
      }
    }else {
      return null
    }
  }, null)
};
cljs.core.keep_indexed = function keep_indexed(f, coll) {
  var keepi = function keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, false, function() {
      var temp__3974__auto__ = cljs.core.seq.call(null, coll__$1);
      if(temp__3974__auto__) {
        var s = temp__3974__auto__;
        if(cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__2535__auto__ = size;
          var i = 0;
          while(true) {
            if(i < n__2535__auto__) {
              var x = f.call(null, idx + i, cljs.core._nth.call(null, c, i));
              if(x == null) {
              }else {
                cljs.core.chunk_append.call(null, b, x)
              }
              var G__3893 = i + 1;
              i = G__3893;
              continue
            }else {
            }
            break
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keepi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)))
        }else {
          var x = f.call(null, idx, cljs.core.first.call(null, s));
          if(x == null) {
            return keepi.call(null, idx + 1, cljs.core.rest.call(null, s))
          }else {
            return cljs.core.cons.call(null, x, keepi.call(null, idx + 1, cljs.core.rest.call(null, s)))
          }
        }
      }else {
        return null
      }
    }, null)
  };
  return keepi.call(null, 0, coll)
};
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$.call(null, p.call(null, x))
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3822__auto__ = p.call(null, x);
          if(cljs.core.truth_(and__3822__auto__)) {
            return p.call(null, y)
          }else {
            return and__3822__auto__
          }
        }())
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3822__auto__ = p.call(null, x);
          if(cljs.core.truth_(and__3822__auto__)) {
            var and__3822__auto____$1 = p.call(null, y);
            if(cljs.core.truth_(and__3822__auto____$1)) {
              return p.call(null, z)
            }else {
              return and__3822__auto____$1
            }
          }else {
            return and__3822__auto__
          }
        }())
      };
      var ep1__4 = function() {
        var G__3900__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, function() {
            var and__3822__auto__ = ep1.call(null, x, y, z);
            if(cljs.core.truth_(and__3822__auto__)) {
              return cljs.core.every_QMARK_.call(null, p, args)
            }else {
              return and__3822__auto__
            }
          }())
        };
        var G__3900 = function(x, y, z, var_args) {
          var args = null;
          if(goog.isDef(var_args)) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__3900__delegate.call(this, x, y, z, args)
        };
        G__3900.cljs$lang$maxFixedArity = 3;
        G__3900.cljs$lang$applyTo = function(arglist__3901) {
          var x = cljs.core.first(arglist__3901);
          var y = cljs.core.first(cljs.core.next(arglist__3901));
          var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3901)));
          var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3901)));
          return G__3900__delegate(x, y, z, args)
        };
        G__3900.cljs$lang$arity$variadic = G__3900__delegate;
        return G__3900
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            return ep1__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$lang$arity$0 = ep1__0;
      ep1.cljs$lang$arity$1 = ep1__1;
      ep1.cljs$lang$arity$2 = ep1__2;
      ep1.cljs$lang$arity$3 = ep1__3;
      ep1.cljs$lang$arity$variadic = ep1__4.cljs$lang$arity$variadic;
      return ep1
    }()
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3822__auto__ = p1.call(null, x);
          if(cljs.core.truth_(and__3822__auto__)) {
            return p2.call(null, x)
          }else {
            return and__3822__auto__
          }
        }())
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3822__auto__ = p1.call(null, x);
          if(cljs.core.truth_(and__3822__auto__)) {
            var and__3822__auto____$1 = p1.call(null, y);
            if(cljs.core.truth_(and__3822__auto____$1)) {
              var and__3822__auto____$2 = p2.call(null, x);
              if(cljs.core.truth_(and__3822__auto____$2)) {
                return p2.call(null, y)
              }else {
                return and__3822__auto____$2
              }
            }else {
              return and__3822__auto____$1
            }
          }else {
            return and__3822__auto__
          }
        }())
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3822__auto__ = p1.call(null, x);
          if(cljs.core.truth_(and__3822__auto__)) {
            var and__3822__auto____$1 = p1.call(null, y);
            if(cljs.core.truth_(and__3822__auto____$1)) {
              var and__3822__auto____$2 = p1.call(null, z);
              if(cljs.core.truth_(and__3822__auto____$2)) {
                var and__3822__auto____$3 = p2.call(null, x);
                if(cljs.core.truth_(and__3822__auto____$3)) {
                  var and__3822__auto____$4 = p2.call(null, y);
                  if(cljs.core.truth_(and__3822__auto____$4)) {
                    return p2.call(null, z)
                  }else {
                    return and__3822__auto____$4
                  }
                }else {
                  return and__3822__auto____$3
                }
              }else {
                return and__3822__auto____$2
              }
            }else {
              return and__3822__auto____$1
            }
          }else {
            return and__3822__auto__
          }
        }())
      };
      var ep2__4 = function() {
        var G__3902__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, function() {
            var and__3822__auto__ = ep2.call(null, x, y, z);
            if(cljs.core.truth_(and__3822__auto__)) {
              return cljs.core.every_QMARK_.call(null, function(p1__3887_SHARP_) {
                var and__3822__auto____$1 = p1.call(null, p1__3887_SHARP_);
                if(cljs.core.truth_(and__3822__auto____$1)) {
                  return p2.call(null, p1__3887_SHARP_)
                }else {
                  return and__3822__auto____$1
                }
              }, args)
            }else {
              return and__3822__auto__
            }
          }())
        };
        var G__3902 = function(x, y, z, var_args) {
          var args = null;
          if(goog.isDef(var_args)) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__3902__delegate.call(this, x, y, z, args)
        };
        G__3902.cljs$lang$maxFixedArity = 3;
        G__3902.cljs$lang$applyTo = function(arglist__3903) {
          var x = cljs.core.first(arglist__3903);
          var y = cljs.core.first(cljs.core.next(arglist__3903));
          var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3903)));
          var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3903)));
          return G__3902__delegate(x, y, z, args)
        };
        G__3902.cljs$lang$arity$variadic = G__3902__delegate;
        return G__3902
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            return ep2__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$lang$arity$0 = ep2__0;
      ep2.cljs$lang$arity$1 = ep2__1;
      ep2.cljs$lang$arity$2 = ep2__2;
      ep2.cljs$lang$arity$3 = ep2__3;
      ep2.cljs$lang$arity$variadic = ep2__4.cljs$lang$arity$variadic;
      return ep2
    }()
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3822__auto__ = p1.call(null, x);
          if(cljs.core.truth_(and__3822__auto__)) {
            var and__3822__auto____$1 = p2.call(null, x);
            if(cljs.core.truth_(and__3822__auto____$1)) {
              return p3.call(null, x)
            }else {
              return and__3822__auto____$1
            }
          }else {
            return and__3822__auto__
          }
        }())
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3822__auto__ = p1.call(null, x);
          if(cljs.core.truth_(and__3822__auto__)) {
            var and__3822__auto____$1 = p2.call(null, x);
            if(cljs.core.truth_(and__3822__auto____$1)) {
              var and__3822__auto____$2 = p3.call(null, x);
              if(cljs.core.truth_(and__3822__auto____$2)) {
                var and__3822__auto____$3 = p1.call(null, y);
                if(cljs.core.truth_(and__3822__auto____$3)) {
                  var and__3822__auto____$4 = p2.call(null, y);
                  if(cljs.core.truth_(and__3822__auto____$4)) {
                    return p3.call(null, y)
                  }else {
                    return and__3822__auto____$4
                  }
                }else {
                  return and__3822__auto____$3
                }
              }else {
                return and__3822__auto____$2
              }
            }else {
              return and__3822__auto____$1
            }
          }else {
            return and__3822__auto__
          }
        }())
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3822__auto__ = p1.call(null, x);
          if(cljs.core.truth_(and__3822__auto__)) {
            var and__3822__auto____$1 = p2.call(null, x);
            if(cljs.core.truth_(and__3822__auto____$1)) {
              var and__3822__auto____$2 = p3.call(null, x);
              if(cljs.core.truth_(and__3822__auto____$2)) {
                var and__3822__auto____$3 = p1.call(null, y);
                if(cljs.core.truth_(and__3822__auto____$3)) {
                  var and__3822__auto____$4 = p2.call(null, y);
                  if(cljs.core.truth_(and__3822__auto____$4)) {
                    var and__3822__auto____$5 = p3.call(null, y);
                    if(cljs.core.truth_(and__3822__auto____$5)) {
                      var and__3822__auto____$6 = p1.call(null, z);
                      if(cljs.core.truth_(and__3822__auto____$6)) {
                        var and__3822__auto____$7 = p2.call(null, z);
                        if(cljs.core.truth_(and__3822__auto____$7)) {
                          return p3.call(null, z)
                        }else {
                          return and__3822__auto____$7
                        }
                      }else {
                        return and__3822__auto____$6
                      }
                    }else {
                      return and__3822__auto____$5
                    }
                  }else {
                    return and__3822__auto____$4
                  }
                }else {
                  return and__3822__auto____$3
                }
              }else {
                return and__3822__auto____$2
              }
            }else {
              return and__3822__auto____$1
            }
          }else {
            return and__3822__auto__
          }
        }())
      };
      var ep3__4 = function() {
        var G__3904__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, function() {
            var and__3822__auto__ = ep3.call(null, x, y, z);
            if(cljs.core.truth_(and__3822__auto__)) {
              return cljs.core.every_QMARK_.call(null, function(p1__3888_SHARP_) {
                var and__3822__auto____$1 = p1.call(null, p1__3888_SHARP_);
                if(cljs.core.truth_(and__3822__auto____$1)) {
                  var and__3822__auto____$2 = p2.call(null, p1__3888_SHARP_);
                  if(cljs.core.truth_(and__3822__auto____$2)) {
                    return p3.call(null, p1__3888_SHARP_)
                  }else {
                    return and__3822__auto____$2
                  }
                }else {
                  return and__3822__auto____$1
                }
              }, args)
            }else {
              return and__3822__auto__
            }
          }())
        };
        var G__3904 = function(x, y, z, var_args) {
          var args = null;
          if(goog.isDef(var_args)) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__3904__delegate.call(this, x, y, z, args)
        };
        G__3904.cljs$lang$maxFixedArity = 3;
        G__3904.cljs$lang$applyTo = function(arglist__3905) {
          var x = cljs.core.first(arglist__3905);
          var y = cljs.core.first(cljs.core.next(arglist__3905));
          var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3905)));
          var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3905)));
          return G__3904__delegate(x, y, z, args)
        };
        G__3904.cljs$lang$arity$variadic = G__3904__delegate;
        return G__3904
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            return ep3__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$lang$arity$0 = ep3__0;
      ep3.cljs$lang$arity$1 = ep3__1;
      ep3.cljs$lang$arity$2 = ep3__2;
      ep3.cljs$lang$arity$3 = ep3__3;
      ep3.cljs$lang$arity$variadic = ep3__4.cljs$lang$arity$variadic;
      return ep3
    }()
  };
  var every_pred__4 = function() {
    var G__3906__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var epn = null;
        var epn__0 = function() {
          return true
        };
        var epn__1 = function(x) {
          return cljs.core.every_QMARK_.call(null, function(p1__3889_SHARP_) {
            return p1__3889_SHARP_.call(null, x)
          }, ps__$1)
        };
        var epn__2 = function(x, y) {
          return cljs.core.every_QMARK_.call(null, function(p1__3890_SHARP_) {
            var and__3822__auto__ = p1__3890_SHARP_.call(null, x);
            if(cljs.core.truth_(and__3822__auto__)) {
              return p1__3890_SHARP_.call(null, y)
            }else {
              return and__3822__auto__
            }
          }, ps__$1)
        };
        var epn__3 = function(x, y, z) {
          return cljs.core.every_QMARK_.call(null, function(p1__3891_SHARP_) {
            var and__3822__auto__ = p1__3891_SHARP_.call(null, x);
            if(cljs.core.truth_(and__3822__auto__)) {
              var and__3822__auto____$1 = p1__3891_SHARP_.call(null, y);
              if(cljs.core.truth_(and__3822__auto____$1)) {
                return p1__3891_SHARP_.call(null, z)
              }else {
                return and__3822__auto____$1
              }
            }else {
              return and__3822__auto__
            }
          }, ps__$1)
        };
        var epn__4 = function() {
          var G__3907__delegate = function(x, y, z, args) {
            return cljs.core.boolean$.call(null, function() {
              var and__3822__auto__ = epn.call(null, x, y, z);
              if(cljs.core.truth_(and__3822__auto__)) {
                return cljs.core.every_QMARK_.call(null, function(p1__3892_SHARP_) {
                  return cljs.core.every_QMARK_.call(null, p1__3892_SHARP_, args)
                }, ps__$1)
              }else {
                return and__3822__auto__
              }
            }())
          };
          var G__3907 = function(x, y, z, var_args) {
            var args = null;
            if(goog.isDef(var_args)) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
            }
            return G__3907__delegate.call(this, x, y, z, args)
          };
          G__3907.cljs$lang$maxFixedArity = 3;
          G__3907.cljs$lang$applyTo = function(arglist__3908) {
            var x = cljs.core.first(arglist__3908);
            var y = cljs.core.first(cljs.core.next(arglist__3908));
            var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3908)));
            var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3908)));
            return G__3907__delegate(x, y, z, args)
          };
          G__3907.cljs$lang$arity$variadic = G__3907__delegate;
          return G__3907
        }();
        epn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return epn__0.call(this);
            case 1:
              return epn__1.call(this, x);
            case 2:
              return epn__2.call(this, x, y);
            case 3:
              return epn__3.call(this, x, y, z);
            default:
              return epn__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        epn.cljs$lang$maxFixedArity = 3;
        epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
        epn.cljs$lang$arity$0 = epn__0;
        epn.cljs$lang$arity$1 = epn__1;
        epn.cljs$lang$arity$2 = epn__2;
        epn.cljs$lang$arity$3 = epn__3;
        epn.cljs$lang$arity$variadic = epn__4.cljs$lang$arity$variadic;
        return epn
      }()
    };
    var G__3906 = function(p1, p2, p3, var_args) {
      var ps = null;
      if(goog.isDef(var_args)) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__3906__delegate.call(this, p1, p2, p3, ps)
    };
    G__3906.cljs$lang$maxFixedArity = 3;
    G__3906.cljs$lang$applyTo = function(arglist__3909) {
      var p1 = cljs.core.first(arglist__3909);
      var p2 = cljs.core.first(cljs.core.next(arglist__3909));
      var p3 = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3909)));
      var ps = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3909)));
      return G__3906__delegate(p1, p2, p3, ps)
    };
    G__3906.cljs$lang$arity$variadic = G__3906__delegate;
    return G__3906
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        return every_pred__4.cljs$lang$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$lang$arity$1 = every_pred__1;
  every_pred.cljs$lang$arity$2 = every_pred__2;
  every_pred.cljs$lang$arity$3 = every_pred__3;
  every_pred.cljs$lang$arity$variadic = every_pred__4.cljs$lang$arity$variadic;
  return every_pred
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null
      };
      var sp1__1 = function(x) {
        return p.call(null, x)
      };
      var sp1__2 = function(x, y) {
        var or__3824__auto__ = p.call(null, x);
        if(cljs.core.truth_(or__3824__auto__)) {
          return or__3824__auto__
        }else {
          return p.call(null, y)
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__3824__auto__ = p.call(null, x);
        if(cljs.core.truth_(or__3824__auto__)) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = p.call(null, y);
          if(cljs.core.truth_(or__3824__auto____$1)) {
            return or__3824__auto____$1
          }else {
            return p.call(null, z)
          }
        }
      };
      var sp1__4 = function() {
        var G__3911__delegate = function(x, y, z, args) {
          var or__3824__auto__ = sp1.call(null, x, y, z);
          if(cljs.core.truth_(or__3824__auto__)) {
            return or__3824__auto__
          }else {
            return cljs.core.some.call(null, p, args)
          }
        };
        var G__3911 = function(x, y, z, var_args) {
          var args = null;
          if(goog.isDef(var_args)) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__3911__delegate.call(this, x, y, z, args)
        };
        G__3911.cljs$lang$maxFixedArity = 3;
        G__3911.cljs$lang$applyTo = function(arglist__3912) {
          var x = cljs.core.first(arglist__3912);
          var y = cljs.core.first(cljs.core.next(arglist__3912));
          var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3912)));
          var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3912)));
          return G__3911__delegate(x, y, z, args)
        };
        G__3911.cljs$lang$arity$variadic = G__3911__delegate;
        return G__3911
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            return sp1__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$lang$arity$0 = sp1__0;
      sp1.cljs$lang$arity$1 = sp1__1;
      sp1.cljs$lang$arity$2 = sp1__2;
      sp1.cljs$lang$arity$3 = sp1__3;
      sp1.cljs$lang$arity$variadic = sp1__4.cljs$lang$arity$variadic;
      return sp1
    }()
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null
      };
      var sp2__1 = function(x) {
        var or__3824__auto__ = p1.call(null, x);
        if(cljs.core.truth_(or__3824__auto__)) {
          return or__3824__auto__
        }else {
          return p2.call(null, x)
        }
      };
      var sp2__2 = function(x, y) {
        var or__3824__auto__ = p1.call(null, x);
        if(cljs.core.truth_(or__3824__auto__)) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = p1.call(null, y);
          if(cljs.core.truth_(or__3824__auto____$1)) {
            return or__3824__auto____$1
          }else {
            var or__3824__auto____$2 = p2.call(null, x);
            if(cljs.core.truth_(or__3824__auto____$2)) {
              return or__3824__auto____$2
            }else {
              return p2.call(null, y)
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__3824__auto__ = p1.call(null, x);
        if(cljs.core.truth_(or__3824__auto__)) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = p1.call(null, y);
          if(cljs.core.truth_(or__3824__auto____$1)) {
            return or__3824__auto____$1
          }else {
            var or__3824__auto____$2 = p1.call(null, z);
            if(cljs.core.truth_(or__3824__auto____$2)) {
              return or__3824__auto____$2
            }else {
              var or__3824__auto____$3 = p2.call(null, x);
              if(cljs.core.truth_(or__3824__auto____$3)) {
                return or__3824__auto____$3
              }else {
                var or__3824__auto____$4 = p2.call(null, y);
                if(cljs.core.truth_(or__3824__auto____$4)) {
                  return or__3824__auto____$4
                }else {
                  return p2.call(null, z)
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__3913__delegate = function(x, y, z, args) {
          var or__3824__auto__ = sp2.call(null, x, y, z);
          if(cljs.core.truth_(or__3824__auto__)) {
            return or__3824__auto__
          }else {
            return cljs.core.some.call(null, function(p1__3894_SHARP_) {
              var or__3824__auto____$1 = p1.call(null, p1__3894_SHARP_);
              if(cljs.core.truth_(or__3824__auto____$1)) {
                return or__3824__auto____$1
              }else {
                return p2.call(null, p1__3894_SHARP_)
              }
            }, args)
          }
        };
        var G__3913 = function(x, y, z, var_args) {
          var args = null;
          if(goog.isDef(var_args)) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__3913__delegate.call(this, x, y, z, args)
        };
        G__3913.cljs$lang$maxFixedArity = 3;
        G__3913.cljs$lang$applyTo = function(arglist__3914) {
          var x = cljs.core.first(arglist__3914);
          var y = cljs.core.first(cljs.core.next(arglist__3914));
          var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3914)));
          var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3914)));
          return G__3913__delegate(x, y, z, args)
        };
        G__3913.cljs$lang$arity$variadic = G__3913__delegate;
        return G__3913
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            return sp2__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$lang$arity$0 = sp2__0;
      sp2.cljs$lang$arity$1 = sp2__1;
      sp2.cljs$lang$arity$2 = sp2__2;
      sp2.cljs$lang$arity$3 = sp2__3;
      sp2.cljs$lang$arity$variadic = sp2__4.cljs$lang$arity$variadic;
      return sp2
    }()
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null
      };
      var sp3__1 = function(x) {
        var or__3824__auto__ = p1.call(null, x);
        if(cljs.core.truth_(or__3824__auto__)) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = p2.call(null, x);
          if(cljs.core.truth_(or__3824__auto____$1)) {
            return or__3824__auto____$1
          }else {
            return p3.call(null, x)
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__3824__auto__ = p1.call(null, x);
        if(cljs.core.truth_(or__3824__auto__)) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = p2.call(null, x);
          if(cljs.core.truth_(or__3824__auto____$1)) {
            return or__3824__auto____$1
          }else {
            var or__3824__auto____$2 = p3.call(null, x);
            if(cljs.core.truth_(or__3824__auto____$2)) {
              return or__3824__auto____$2
            }else {
              var or__3824__auto____$3 = p1.call(null, y);
              if(cljs.core.truth_(or__3824__auto____$3)) {
                return or__3824__auto____$3
              }else {
                var or__3824__auto____$4 = p2.call(null, y);
                if(cljs.core.truth_(or__3824__auto____$4)) {
                  return or__3824__auto____$4
                }else {
                  return p3.call(null, y)
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__3824__auto__ = p1.call(null, x);
        if(cljs.core.truth_(or__3824__auto__)) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = p2.call(null, x);
          if(cljs.core.truth_(or__3824__auto____$1)) {
            return or__3824__auto____$1
          }else {
            var or__3824__auto____$2 = p3.call(null, x);
            if(cljs.core.truth_(or__3824__auto____$2)) {
              return or__3824__auto____$2
            }else {
              var or__3824__auto____$3 = p1.call(null, y);
              if(cljs.core.truth_(or__3824__auto____$3)) {
                return or__3824__auto____$3
              }else {
                var or__3824__auto____$4 = p2.call(null, y);
                if(cljs.core.truth_(or__3824__auto____$4)) {
                  return or__3824__auto____$4
                }else {
                  var or__3824__auto____$5 = p3.call(null, y);
                  if(cljs.core.truth_(or__3824__auto____$5)) {
                    return or__3824__auto____$5
                  }else {
                    var or__3824__auto____$6 = p1.call(null, z);
                    if(cljs.core.truth_(or__3824__auto____$6)) {
                      return or__3824__auto____$6
                    }else {
                      var or__3824__auto____$7 = p2.call(null, z);
                      if(cljs.core.truth_(or__3824__auto____$7)) {
                        return or__3824__auto____$7
                      }else {
                        return p3.call(null, z)
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__3915__delegate = function(x, y, z, args) {
          var or__3824__auto__ = sp3.call(null, x, y, z);
          if(cljs.core.truth_(or__3824__auto__)) {
            return or__3824__auto__
          }else {
            return cljs.core.some.call(null, function(p1__3895_SHARP_) {
              var or__3824__auto____$1 = p1.call(null, p1__3895_SHARP_);
              if(cljs.core.truth_(or__3824__auto____$1)) {
                return or__3824__auto____$1
              }else {
                var or__3824__auto____$2 = p2.call(null, p1__3895_SHARP_);
                if(cljs.core.truth_(or__3824__auto____$2)) {
                  return or__3824__auto____$2
                }else {
                  return p3.call(null, p1__3895_SHARP_)
                }
              }
            }, args)
          }
        };
        var G__3915 = function(x, y, z, var_args) {
          var args = null;
          if(goog.isDef(var_args)) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__3915__delegate.call(this, x, y, z, args)
        };
        G__3915.cljs$lang$maxFixedArity = 3;
        G__3915.cljs$lang$applyTo = function(arglist__3916) {
          var x = cljs.core.first(arglist__3916);
          var y = cljs.core.first(cljs.core.next(arglist__3916));
          var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3916)));
          var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3916)));
          return G__3915__delegate(x, y, z, args)
        };
        G__3915.cljs$lang$arity$variadic = G__3915__delegate;
        return G__3915
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            return sp3__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$lang$arity$0 = sp3__0;
      sp3.cljs$lang$arity$1 = sp3__1;
      sp3.cljs$lang$arity$2 = sp3__2;
      sp3.cljs$lang$arity$3 = sp3__3;
      sp3.cljs$lang$arity$variadic = sp3__4.cljs$lang$arity$variadic;
      return sp3
    }()
  };
  var some_fn__4 = function() {
    var G__3917__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var spn = null;
        var spn__0 = function() {
          return null
        };
        var spn__1 = function(x) {
          return cljs.core.some.call(null, function(p1__3896_SHARP_) {
            return p1__3896_SHARP_.call(null, x)
          }, ps__$1)
        };
        var spn__2 = function(x, y) {
          return cljs.core.some.call(null, function(p1__3897_SHARP_) {
            var or__3824__auto__ = p1__3897_SHARP_.call(null, x);
            if(cljs.core.truth_(or__3824__auto__)) {
              return or__3824__auto__
            }else {
              return p1__3897_SHARP_.call(null, y)
            }
          }, ps__$1)
        };
        var spn__3 = function(x, y, z) {
          return cljs.core.some.call(null, function(p1__3898_SHARP_) {
            var or__3824__auto__ = p1__3898_SHARP_.call(null, x);
            if(cljs.core.truth_(or__3824__auto__)) {
              return or__3824__auto__
            }else {
              var or__3824__auto____$1 = p1__3898_SHARP_.call(null, y);
              if(cljs.core.truth_(or__3824__auto____$1)) {
                return or__3824__auto____$1
              }else {
                return p1__3898_SHARP_.call(null, z)
              }
            }
          }, ps__$1)
        };
        var spn__4 = function() {
          var G__3918__delegate = function(x, y, z, args) {
            var or__3824__auto__ = spn.call(null, x, y, z);
            if(cljs.core.truth_(or__3824__auto__)) {
              return or__3824__auto__
            }else {
              return cljs.core.some.call(null, function(p1__3899_SHARP_) {
                return cljs.core.some.call(null, p1__3899_SHARP_, args)
              }, ps__$1)
            }
          };
          var G__3918 = function(x, y, z, var_args) {
            var args = null;
            if(goog.isDef(var_args)) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
            }
            return G__3918__delegate.call(this, x, y, z, args)
          };
          G__3918.cljs$lang$maxFixedArity = 3;
          G__3918.cljs$lang$applyTo = function(arglist__3919) {
            var x = cljs.core.first(arglist__3919);
            var y = cljs.core.first(cljs.core.next(arglist__3919));
            var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3919)));
            var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3919)));
            return G__3918__delegate(x, y, z, args)
          };
          G__3918.cljs$lang$arity$variadic = G__3918__delegate;
          return G__3918
        }();
        spn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return spn__0.call(this);
            case 1:
              return spn__1.call(this, x);
            case 2:
              return spn__2.call(this, x, y);
            case 3:
              return spn__3.call(this, x, y, z);
            default:
              return spn__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        spn.cljs$lang$maxFixedArity = 3;
        spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
        spn.cljs$lang$arity$0 = spn__0;
        spn.cljs$lang$arity$1 = spn__1;
        spn.cljs$lang$arity$2 = spn__2;
        spn.cljs$lang$arity$3 = spn__3;
        spn.cljs$lang$arity$variadic = spn__4.cljs$lang$arity$variadic;
        return spn
      }()
    };
    var G__3917 = function(p1, p2, p3, var_args) {
      var ps = null;
      if(goog.isDef(var_args)) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__3917__delegate.call(this, p1, p2, p3, ps)
    };
    G__3917.cljs$lang$maxFixedArity = 3;
    G__3917.cljs$lang$applyTo = function(arglist__3920) {
      var p1 = cljs.core.first(arglist__3920);
      var p2 = cljs.core.first(cljs.core.next(arglist__3920));
      var p3 = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3920)));
      var ps = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3920)));
      return G__3917__delegate(p1, p2, p3, ps)
    };
    G__3917.cljs$lang$arity$variadic = G__3917__delegate;
    return G__3917
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        return some_fn__4.cljs$lang$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$lang$arity$1 = some_fn__1;
  some_fn.cljs$lang$arity$2 = some_fn__2;
  some_fn.cljs$lang$arity$3 = some_fn__3;
  some_fn.cljs$lang$arity$variadic = some_fn__4.cljs$lang$arity$variadic;
  return some_fn
}();
cljs.core.map = function() {
  var map = null;
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, false, function() {
      var temp__3974__auto__ = cljs.core.seq.call(null, coll);
      if(temp__3974__auto__) {
        var s = temp__3974__auto__;
        if(cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__2535__auto__ = size;
          var i = 0;
          while(true) {
            if(i < n__2535__auto__) {
              cljs.core.chunk_append.call(null, b, f.call(null, cljs.core._nth.call(null, c, i)));
              var G__3921 = i + 1;
              i = G__3921;
              continue
            }else {
            }
            break
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), map.call(null, f, cljs.core.chunk_rest.call(null, s)))
        }else {
          return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s)), map.call(null, f, cljs.core.rest.call(null, s)))
        }
      }else {
        return null
      }
    }, null)
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, false, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if(function() {
        var and__3822__auto__ = s1;
        if(and__3822__auto__) {
          return s2
        }else {
          return and__3822__auto__
        }
      }()) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2)))
      }else {
        return null
      }
    }, null)
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, false, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      var s3 = cljs.core.seq.call(null, c3);
      if(function() {
        var and__3822__auto__ = s1;
        if(and__3822__auto__) {
          var and__3822__auto____$1 = s2;
          if(and__3822__auto____$1) {
            return s3
          }else {
            return and__3822__auto____$1
          }
        }else {
          return and__3822__auto__
        }
      }()) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2), cljs.core.first.call(null, s3)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2), cljs.core.rest.call(null, s3)))
      }else {
        return null
      }
    }, null)
  };
  var map__5 = function() {
    var G__3922__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, false, function() {
          var ss = map.call(null, cljs.core.seq, cs);
          if(cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
            return cljs.core.cons.call(null, map.call(null, cljs.core.first, ss), step.call(null, map.call(null, cljs.core.rest, ss)))
          }else {
            return null
          }
        }, null)
      };
      return map.call(null, function(p1__3910_SHARP_) {
        return cljs.core.apply.call(null, f, p1__3910_SHARP_)
      }, step.call(null, cljs.core.conj.call(null, colls, c3, c2, c1)))
    };
    var G__3922 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if(goog.isDef(var_args)) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0)
      }
      return G__3922__delegate.call(this, f, c1, c2, c3, colls)
    };
    G__3922.cljs$lang$maxFixedArity = 4;
    G__3922.cljs$lang$applyTo = function(arglist__3923) {
      var f = cljs.core.first(arglist__3923);
      var c1 = cljs.core.first(cljs.core.next(arglist__3923));
      var c2 = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3923)));
      var c3 = cljs.core.first(cljs.core.next(cljs.core.next(cljs.core.next(arglist__3923))));
      var colls = cljs.core.rest(cljs.core.next(cljs.core.next(cljs.core.next(arglist__3923))));
      return G__3922__delegate(f, c1, c2, c3, colls)
    };
    G__3922.cljs$lang$arity$variadic = G__3922__delegate;
    return G__3922
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        return map__5.cljs$lang$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$lang$arity$2 = map__2;
  map.cljs$lang$arity$3 = map__3;
  map.cljs$lang$arity$4 = map__4;
  map.cljs$lang$arity$variadic = map__5.cljs$lang$arity$variadic;
  return map
}();
cljs.core.take = function take(n, coll) {
  return new cljs.core.LazySeq(null, false, function() {
    if(n > 0) {
      var temp__3974__auto__ = cljs.core.seq.call(null, coll);
      if(temp__3974__auto__) {
        var s = temp__3974__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take.call(null, n - 1, cljs.core.rest.call(null, s)))
      }else {
        return null
      }
    }else {
      return null
    }
  }, null)
};
cljs.core.drop = function drop(n, coll) {
  var step = function(n__$1, coll__$1) {
    while(true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if(cljs.core.truth_(function() {
        var and__3822__auto__ = n__$1 > 0;
        if(and__3822__auto__) {
          return s
        }else {
          return and__3822__auto__
        }
      }())) {
        var G__3924 = n__$1 - 1;
        var G__3925 = cljs.core.rest.call(null, s);
        n__$1 = G__3924;
        coll__$1 = G__3925;
        continue
      }else {
        return s
      }
      break
    }
  };
  return new cljs.core.LazySeq(null, false, function() {
    return step.call(null, n, coll)
  }, null)
};
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.call(null, 1, s)
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.call(null, function(x, _) {
      return x
    }, s, cljs.core.drop.call(null, n, s))
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$lang$arity$1 = drop_last__1;
  drop_last.cljs$lang$arity$2 = drop_last__2;
  return drop_last
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq.call(null, coll);
  var lead = cljs.core.seq.call(null, cljs.core.drop.call(null, n, coll));
  while(true) {
    if(lead) {
      var G__3926 = cljs.core.next.call(null, s);
      var G__3927 = cljs.core.next.call(null, lead);
      s = G__3926;
      lead = G__3927;
      continue
    }else {
      return s
    }
    break
  }
};
cljs.core.drop_while = function drop_while(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while(true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if(cljs.core.truth_(function() {
        var and__3822__auto__ = s;
        if(and__3822__auto__) {
          return pred__$1.call(null, cljs.core.first.call(null, s))
        }else {
          return and__3822__auto__
        }
      }())) {
        var G__3928 = pred__$1;
        var G__3929 = cljs.core.rest.call(null, s);
        pred__$1 = G__3928;
        coll__$1 = G__3929;
        continue
      }else {
        return s
      }
      break
    }
  };
  return new cljs.core.LazySeq(null, false, function() {
    return step.call(null, pred, coll)
  }, null)
};
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, false, function() {
    var temp__3974__auto__ = cljs.core.seq.call(null, coll);
    if(temp__3974__auto__) {
      var s = temp__3974__auto__;
      return cljs.core.concat.call(null, s, cycle.call(null, s))
    }else {
      return null
    }
  }, null)
};
cljs.core.split_at = function split_at(n, coll) {
  return cljs.core.PersistentVector.fromArray([cljs.core.take.call(null, n, coll), cljs.core.drop.call(null, n, coll)], true)
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, false, function() {
      return cljs.core.cons.call(null, x, repeat.call(null, x))
    }, null)
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.call(null, n, repeat.call(null, x))
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$lang$arity$1 = repeat__1;
  repeat.cljs$lang$arity$2 = repeat__2;
  return repeat
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.call(null, n, cljs.core.repeat.call(null, x))
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, false, function() {
      return cljs.core.cons.call(null, f.call(null), repeatedly.call(null, f))
    }, null)
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.call(null, n, repeatedly.call(null, f))
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$lang$arity$1 = repeatedly__1;
  repeatedly.cljs$lang$arity$2 = repeatedly__2;
  return repeatedly
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons.call(null, x, new cljs.core.LazySeq(null, false, function() {
    return iterate.call(null, f, f.call(null, x))
  }, null))
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, false, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if(function() {
        var and__3822__auto__ = s1;
        if(and__3822__auto__) {
          return s2
        }else {
          return and__3822__auto__
        }
      }()) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))))
      }else {
        return null
      }
    }, null)
  };
  var interleave__3 = function() {
    var G__3930__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, false, function() {
        var ss = cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1));
        if(cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave, cljs.core.map.call(null, cljs.core.rest, ss)))
        }else {
          return null
        }
      }, null)
    };
    var G__3930 = function(c1, c2, var_args) {
      var colls = null;
      if(goog.isDef(var_args)) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3930__delegate.call(this, c1, c2, colls)
    };
    G__3930.cljs$lang$maxFixedArity = 2;
    G__3930.cljs$lang$applyTo = function(arglist__3931) {
      var c1 = cljs.core.first(arglist__3931);
      var c2 = cljs.core.first(cljs.core.next(arglist__3931));
      var colls = cljs.core.rest(cljs.core.next(arglist__3931));
      return G__3930__delegate(c1, c2, colls)
    };
    G__3930.cljs$lang$arity$variadic = G__3930__delegate;
    return G__3930
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        return interleave__3.cljs$lang$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$lang$arity$2 = interleave__2;
  interleave.cljs$lang$arity$variadic = interleave__3.cljs$lang$arity$variadic;
  return interleave
}();
cljs.core.interpose = function interpose(sep, coll) {
  return cljs.core.drop.call(null, 1, cljs.core.interleave.call(null, cljs.core.repeat.call(null, sep), coll))
};
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, false, function() {
      var temp__3971__auto__ = cljs.core.seq.call(null, coll);
      if(temp__3971__auto__) {
        var coll__$1 = temp__3971__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, coll__$1), cat.call(null, cljs.core.rest.call(null, coll__$1), colls__$1))
      }else {
        if(cljs.core.seq.call(null, colls__$1)) {
          return cat.call(null, cljs.core.first.call(null, colls__$1), cljs.core.rest.call(null, colls__$1))
        }else {
          return null
        }
      }
    }, null)
  };
  return cat.call(null, null, colls)
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__2 = function(f, coll) {
    return cljs.core.flatten1.call(null, cljs.core.map.call(null, f, coll))
  };
  var mapcat__3 = function() {
    var G__3932__delegate = function(f, coll, colls) {
      return cljs.core.flatten1.call(null, cljs.core.apply.call(null, cljs.core.map, f, coll, colls))
    };
    var G__3932 = function(f, coll, var_args) {
      var colls = null;
      if(goog.isDef(var_args)) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3932__delegate.call(this, f, coll, colls)
    };
    G__3932.cljs$lang$maxFixedArity = 2;
    G__3932.cljs$lang$applyTo = function(arglist__3933) {
      var f = cljs.core.first(arglist__3933);
      var coll = cljs.core.first(cljs.core.next(arglist__3933));
      var colls = cljs.core.rest(cljs.core.next(arglist__3933));
      return G__3932__delegate(f, coll, colls)
    };
    G__3932.cljs$lang$arity$variadic = G__3932__delegate;
    return G__3932
  }();
  mapcat = function(f, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapcat__2.call(this, f, coll);
      default:
        return mapcat__3.cljs$lang$arity$variadic(f, coll, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 2;
  mapcat.cljs$lang$applyTo = mapcat__3.cljs$lang$applyTo;
  mapcat.cljs$lang$arity$2 = mapcat__2;
  mapcat.cljs$lang$arity$variadic = mapcat__3.cljs$lang$arity$variadic;
  return mapcat
}();
cljs.core.filter = function filter(pred, coll) {
  return new cljs.core.LazySeq(null, false, function() {
    var temp__3974__auto__ = cljs.core.seq.call(null, coll);
    if(temp__3974__auto__) {
      var s = temp__3974__auto__;
      if(cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__2535__auto__ = size;
        var i = 0;
        while(true) {
          if(i < n__2535__auto__) {
            if(cljs.core.truth_(pred.call(null, cljs.core._nth.call(null, c, i)))) {
              cljs.core.chunk_append.call(null, b, cljs.core._nth.call(null, c, i))
            }else {
            }
            var G__3934 = i + 1;
            i = G__3934;
            continue
          }else {
          }
          break
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), filter.call(null, pred, cljs.core.chunk_rest.call(null, s)))
      }else {
        var f = cljs.core.first.call(null, s);
        var r = cljs.core.rest.call(null, s);
        if(cljs.core.truth_(pred.call(null, f))) {
          return cljs.core.cons.call(null, f, filter.call(null, pred, r))
        }else {
          return filter.call(null, pred, r)
        }
      }
    }else {
      return null
    }
  }, null)
};
cljs.core.remove = function remove(pred, coll) {
  return cljs.core.filter.call(null, cljs.core.complement.call(null, pred), coll)
};
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, false, function() {
      return cljs.core.cons.call(null, node, cljs.core.truth_(branch_QMARK_.call(null, node)) ? cljs.core.mapcat.call(null, walk, children.call(null, node)) : null)
    }, null)
  };
  return walk.call(null, root)
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.call(null, function(p1__3935_SHARP_) {
    return!cljs.core.sequential_QMARK_.call(null, p1__3935_SHARP_)
  }, cljs.core.rest.call(null, cljs.core.tree_seq.call(null, cljs.core.sequential_QMARK_, cljs.core.seq, x)))
};
cljs.core.into = function into(to, from) {
  if(function() {
    var G__3937 = to;
    if(G__3937) {
      if(function() {
        var or__3824__auto__ = G__3937.cljs$lang$protocol_mask$partition1$ & 4;
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          return G__3937.cljs$core$IEditableCollection$
        }
      }()) {
        return true
      }else {
        if(!G__3937.cljs$lang$protocol_mask$partition1$) {
          return cljs.core.type_satisfies_.call(null, cljs.core.IEditableCollection, G__3937)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.type_satisfies_.call(null, cljs.core.IEditableCollection, G__3937)
    }
  }()) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core.transient$.call(null, to), from))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, to, from)
  }
};
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
      return cljs.core.conj_BANG_.call(null, v, f.call(null, o))
    }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll))
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2))
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2, c3))
  };
  var mapv__5 = function() {
    var G__3938__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.apply.call(null, cljs.core.map, f, c1, c2, c3, colls))
    };
    var G__3938 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if(goog.isDef(var_args)) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0)
      }
      return G__3938__delegate.call(this, f, c1, c2, c3, colls)
    };
    G__3938.cljs$lang$maxFixedArity = 4;
    G__3938.cljs$lang$applyTo = function(arglist__3939) {
      var f = cljs.core.first(arglist__3939);
      var c1 = cljs.core.first(cljs.core.next(arglist__3939));
      var c2 = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3939)));
      var c3 = cljs.core.first(cljs.core.next(cljs.core.next(cljs.core.next(arglist__3939))));
      var colls = cljs.core.rest(cljs.core.next(cljs.core.next(cljs.core.next(arglist__3939))));
      return G__3938__delegate(f, c1, c2, c3, colls)
    };
    G__3938.cljs$lang$arity$variadic = G__3938__delegate;
    return G__3938
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        return mapv__5.cljs$lang$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$lang$arity$2 = mapv__2;
  mapv.cljs$lang$arity$3 = mapv__3;
  mapv.cljs$lang$arity$4 = mapv__4;
  mapv.cljs$lang$arity$variadic = mapv__5.cljs$lang$arity$variadic;
  return mapv
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
    if(cljs.core.truth_(pred.call(null, o))) {
      return cljs.core.conj_BANG_.call(null, v, o)
    }else {
      return v
    }
  }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll))
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.call(null, n, n, coll)
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, false, function() {
      var temp__3974__auto__ = cljs.core.seq.call(null, coll);
      if(temp__3974__auto__) {
        var s = temp__3974__auto__;
        var p = cljs.core.take.call(null, n, s);
        if(n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, cljs.core.drop.call(null, step, s)))
        }else {
          return null
        }
      }else {
        return null
      }
    }, null)
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, false, function() {
      var temp__3974__auto__ = cljs.core.seq.call(null, coll);
      if(temp__3974__auto__) {
        var s = temp__3974__auto__;
        var p = cljs.core.take.call(null, n, s);
        if(n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, pad, cljs.core.drop.call(null, step, s)))
        }else {
          return cljs.core.list.call(null, cljs.core.take.call(null, n, cljs.core.concat.call(null, p, pad)))
        }
      }else {
        return null
      }
    }, null)
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$lang$arity$2 = partition__2;
  partition.cljs$lang$arity$3 = partition__3;
  partition.cljs$lang$arity$4 = partition__4;
  return partition
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return cljs.core.reduce.call(null, cljs.core.get, m, ks)
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq.call(null, ks);
    while(true) {
      if(ks__$1) {
        var m__$2 = cljs.core._lookup.call(null, m__$1, cljs.core.first.call(null, ks__$1), sentinel);
        if(sentinel === m__$2) {
          return not_found
        }else {
          var G__3940 = sentinel;
          var G__3941 = m__$2;
          var G__3942 = cljs.core.next.call(null, ks__$1);
          sentinel = G__3940;
          m__$1 = G__3941;
          ks__$1 = G__3942;
          continue
        }
      }else {
        return m__$1
      }
      break
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$lang$arity$2 = get_in__2;
  get_in.cljs$lang$arity$3 = get_in__3;
  return get_in
}();
cljs.core.assoc_in = function assoc_in(m, p__3943, v) {
  var vec__3945 = p__3943;
  var k = cljs.core.nth.call(null, vec__3945, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__3945, 1);
  if(cljs.core.truth_(ks)) {
    return cljs.core.assoc.call(null, m, k, assoc_in.call(null, cljs.core._lookup.call(null, m, k, null), ks, v))
  }else {
    return cljs.core.assoc.call(null, m, k, v)
  }
};
cljs.core.update_in = function() {
  var update_in__delegate = function(m, p__3946, f, args) {
    var vec__3948 = p__3946;
    var k = cljs.core.nth.call(null, vec__3948, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__3948, 1);
    if(cljs.core.truth_(ks)) {
      return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, update_in, cljs.core._lookup.call(null, m, k, null), ks, f, args))
    }else {
      return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core._lookup.call(null, m, k, null), args))
    }
  };
  var update_in = function(m, p__3946, f, var_args) {
    var args = null;
    if(goog.isDef(var_args)) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
    }
    return update_in__delegate.call(this, m, p__3946, f, args)
  };
  update_in.cljs$lang$maxFixedArity = 3;
  update_in.cljs$lang$applyTo = function(arglist__3949) {
    var m = cljs.core.first(arglist__3949);
    var p__3946 = cljs.core.first(cljs.core.next(arglist__3949));
    var f = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3949)));
    var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3949)));
    return update_in__delegate(m, p__3946, f, args)
  };
  update_in.cljs$lang$arity$variadic = update_in__delegate;
  return update_in
}();
goog.provide("cljs.core.Vector");
cljs.core.Vector = function(meta, array, __hash) {
  this.meta = meta;
  this.array = array;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32400159
};
cljs.core.Vector.cljs$lang$type = true;
cljs.core.Vector.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/Vector")
};
cljs.core.Vector.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/Vector")
};
cljs.core.Vector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.Vector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(coll, k, null)
};
cljs.core.Vector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(coll, k, not_found)
};
cljs.core.Vector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var new_array = self__.array.slice();
  new_array[k] = v;
  return new cljs.core.Vector(self__.meta, new_array, null)
};
cljs.core.Vector.prototype.call = function() {
  var G__3954 = null;
  var G__3954__2 = function(this_sym3952, k) {
    var self__ = this;
    var this_sym3952__$1 = this;
    var coll = this_sym3952__$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(coll, k)
  };
  var G__3954__3 = function(this_sym3953, k, not_found) {
    var self__ = this;
    var this_sym3953__$1 = this;
    var coll = this_sym3953__$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, not_found)
  };
  G__3954 = function(this_sym3953, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3954__2.call(this, this_sym3953, k);
      case 3:
        return G__3954__3.call(this, this_sym3953, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__3954
}();
cljs.core.Vector.prototype.apply = function(this_sym3950, args3951) {
  var self__ = this;
  return this_sym3950.call.apply(this_sym3950, [this_sym3950].concat(args3951.slice()))
};
cljs.core.Vector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var new_array = self__.array.slice();
  new_array.push(o);
  return new cljs.core.Vector(self__.meta, new_array, null)
};
cljs.core.Vector.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.Vector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, self__.array, f)
};
cljs.core.Vector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, start) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, self__.array, f, start)
};
cljs.core.Vector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  if(self__.array.length > 0) {
    var vector_seq = function vector_seq(i) {
      return new cljs.core.LazySeq(null, false, function() {
        if(i < self__.array.length) {
          return cljs.core.cons.call(null, self__.array[i], vector_seq.call(null, i + 1))
        }else {
          return null
        }
      }, null)
    };
    return vector_seq.call(null, 0)
  }else {
    return null
  }
};
cljs.core.Vector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return self__.array.length
};
cljs.core.Vector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var count = self__.array.length;
  if(count > 0) {
    return self__.array[count - 1]
  }else {
    return null
  }
};
cljs.core.Vector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  if(self__.array.length > 0) {
    var new_array = self__.array.slice();
    new_array.pop();
    return new cljs.core.Vector(self__.meta, new_array, null)
  }else {
    throw new Error("Can't pop empty vector");
  }
};
cljs.core.Vector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  return coll.cljs$core$IAssociative$_assoc$arity$3(coll, n, val)
};
cljs.core.Vector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.Vector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.Vector(meta__$1, self__.array, self__.__hash)
};
cljs.core.Vector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.Vector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  if(function() {
    var and__3822__auto__ = 0 <= n;
    if(and__3822__auto__) {
      return n < self__.array.length
    }else {
      return and__3822__auto__
    }
  }()) {
    return self__.array[n]
  }else {
    return null
  }
};
cljs.core.Vector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  if(function() {
    var and__3822__auto__ = 0 <= n;
    if(and__3822__auto__) {
      return n < self__.array.length
    }else {
      return and__3822__auto__
    }
  }()) {
    return self__.array[n]
  }else {
    return not_found
  }
};
cljs.core.Vector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.Vector.EMPTY, self__.meta)
};
cljs.core.Vector;
cljs.core.Vector.EMPTY = new cljs.core.Vector(null, [], 0);
cljs.core.Vector.fromArray = function(xs) {
  return new cljs.core.Vector(null, xs, null)
};
goog.provide("cljs.core.VectorNode");
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorPrSeq = function(this__2317__auto__) {
  return cljs.core.list.call(null, "cljs.core/VectorNode")
};
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__2317__auto__, writer__2318__auto__) {
  return cljs.core._write.call(null, writer__2318__auto__, "cljs.core/VectorNode")
};
cljs.core.VectorNode;
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, cljs.core.make_array.call(null, 32))
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx]
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, node.arr.slice())
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if(cnt < 32) {
    return 0
  }else {
    return cnt - 1 >>> 5 << 5
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while(true) {
    if(ll === 0) {
      return ret
    }else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node.call(null, edit);
      var _ = cljs.core.pv_aset.call(null, r, 0, embed);
      var G__3955 = ll - 5;
      var G__3956 = r;
      ll = G__3955;
      ret = G__3956;
      continue
    }
    break
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node.call(null, parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if(5 === level) {
    cljs.core.pv_aset.call(null, ret, subidx, tailnode);
    return ret
  }else {
    var child = cljs.core.pv_aget.call(null, parent, subidx);
    if(!(child == null)) {
      var node_to_insert = push_tail.call(null, pv, level - 5, child, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret
    }else {
      var node_to_insert = cljs.core.new_path.call(null, null, level - 5, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret
    }
  }
};
cljs.core.array_for = function array_for(pv, i) {
  if(function() {
    var and__3822__auto__ = 0 <= i;
    if(and__3822__auto__) {
      return i < pv.cnt
    }else {
      return and__3822__auto__
    }
  }()) {
    if(i >= cljs.core.tail_off.call(null, pv)) {
      return pv.tail
    }else {
      var node = pv.root;
      var level = pv.shift;
      while(true) {
        if(level > 0) {
          var G__3957 = cljs.core.pv_aget.call(null, node, i >>> level & 31);
          var G__3958 = level - 5;
          node = G__3957;
          level = G__3958;
          continue
        }else {
          return node.arr
        }
        break
      }
    }
  }else {
    throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(pv.cnt)].join(""));
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node.call(null, node);
  if(level === 0) {
    cljs.core.pv_aset.call(null, ret, i & 31, val);
    return ret
  }else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset.call(null, ret, subidx, do_assoc.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx), i, val));
    return ret
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if(level > 5) {
    var new_child = pop_tail.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx));
    if(function() {
      var and__3822__auto__ = new_child == null;
      if(and__3822__auto__) {
        return subidx === 0
      }else {
        return and__3822__auto__
      }
    }()) {
      return null
    }else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, new_child);
      return ret
    }
  }else {
    if(subidx === 0) {
      return null
    }else {
      if("\ufdd0'else") {
        var ret = cljs.core.pv_clone_node.call(null, node);
        cljs.core.pv_aset.call(null, ret, subidx, null);
        return ret
      }else {
        return null
      }
    }
  }
};
goog.provide("cljs.core.PersistentVector");
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 167668511
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/PersistentVector")
};
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/PersistentVector")
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.call(null, self__.tail))
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(coll, k, null)
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(coll, k, not_found)
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  if(function() {
    var and__3822__auto__ = 0 <= k;
    if(and__3822__auto__) {
      return k < self__.cnt
    }else {
      return and__3822__auto__
    }
  }()) {
    if(cljs.core.tail_off.call(null, coll) <= k) {
      var new_tail = self__.tail.slice();
      new_tail[k & 31] = v;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null)
    }else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc.call(null, coll, self__.shift, self__.root, k, v), self__.tail, null)
    }
  }else {
    if(k === self__.cnt) {
      return coll.cljs$core$ICollection$_conj$arity$2(coll, v)
    }else {
      if("\ufdd0'else") {
        throw new Error([cljs.core.str("Index "), cljs.core.str(k), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__3963 = null;
  var G__3963__2 = function(this_sym3961, k) {
    var self__ = this;
    var this_sym3961__$1 = this;
    var coll = this_sym3961__$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(coll, k)
  };
  var G__3963__3 = function(this_sym3962, k, not_found) {
    var self__ = this;
    var this_sym3962__$1 = this;
    var coll = this_sym3962__$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, not_found)
  };
  G__3963 = function(this_sym3962, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3963__2.call(this, this_sym3962, k);
      case 3:
        return G__3963__3.call(this, this_sym3962, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__3963
}();
cljs.core.PersistentVector.prototype.apply = function(this_sym3959, args3960) {
  var self__ = this;
  return this_sym3959.call.apply(this_sym3959, [this_sym3959].concat(args3960.slice()))
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var step_init = [0, init];
  var i = 0;
  while(true) {
    if(i < self__.cnt) {
      var arr = cljs.core.array_for.call(null, v, i);
      var len = arr.length;
      var init__$1 = function() {
        var j = 0;
        var init__$1 = step_init[1];
        while(true) {
          if(j < len) {
            var init__$2 = f.call(null, init__$1, j + i, arr[j]);
            if(cljs.core.reduced_QMARK_.call(null, init__$2)) {
              return init__$2
            }else {
              var G__3964 = j + 1;
              var G__3965 = init__$2;
              j = G__3964;
              init__$1 = G__3965;
              continue
            }
          }else {
            step_init[0] = len;
            step_init[1] = init__$1;
            return init__$1
          }
          break
        }
      }();
      if(cljs.core.reduced_QMARK_.call(null, init__$1)) {
        return cljs.core.deref.call(null, init__$1)
      }else {
        var G__3966 = i + step_init[0];
        i = G__3966;
        continue
      }
    }else {
      return step_init[1]
    }
    break
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  if(self__.cnt - cljs.core.tail_off.call(null, coll) < 32) {
    var new_tail = self__.tail.slice();
    new_tail.push(o);
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null)
  }else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node.call(null, null);
      cljs.core.pv_aset.call(null, n_r, 0, self__.root);
      cljs.core.pv_aset.call(null, n_r, 1, cljs.core.new_path.call(null, null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r
    }() : cljs.core.push_tail.call(null, coll, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null)
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  if(self__.cnt > 0) {
    return new cljs.core.RSeq(coll, self__.cnt - 1, null)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(coll, 0)
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(coll, 1)
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, v, f)
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, start) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, v, f, start)
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  if(self__.cnt === 0) {
    return null
  }else {
    return cljs.core.chunked_seq.call(null, coll, 0, 0)
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return self__.cnt
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  if(self__.cnt > 0) {
    return coll.cljs$core$IIndexed$_nth$arity$2(coll, self__.cnt - 1)
  }else {
    return null
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  if(self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  }else {
    if(1 === self__.cnt) {
      return cljs.core._with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta)
    }else {
      if(1 < self__.cnt - cljs.core.tail_off.call(null, coll)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null)
      }else {
        if("\ufdd0'else") {
          var new_tail = cljs.core.array_for.call(null, coll, self__.cnt - 2);
          var nr = cljs.core.pop_tail.call(null, coll, self__.shift, self__.root);
          var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
          var cnt_1 = self__.cnt - 1;
          if(function() {
            var and__3822__auto__ = 5 < self__.shift;
            if(and__3822__auto__) {
              return cljs.core.pv_aget.call(null, new_root, 1) == null
            }else {
              return and__3822__auto__
            }
          }()) {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget.call(null, new_root, 0), new_tail, null)
          }else {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null)
          }
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  return coll.cljs$core$IAssociative$_assoc$arity$3(coll, n, val)
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash)
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  return cljs.core.array_for.call(null, coll, n)[n & 31]
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  if(function() {
    var and__3822__auto__ = 0 <= n;
    if(and__3822__auto__) {
      return n < self__.cnt
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$IIndexed$_nth$arity$2(coll, n)
  }else {
    return not_found
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta)
};
cljs.core.PersistentVector;
cljs.core.PersistentVector.EMPTY_NODE = cljs.core.pv_fresh_node.call(null, null);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], 0);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone === true ? xs : xs.slice();
  if(l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null)
  }else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = cljs.core._as_transient.call(null, v);
    while(true) {
      if(i < l) {
        var G__3967 = i + 1;
        var G__3968 = cljs.core.conj_BANG_.call(null, out, xs__$1[i]);
        i = G__3967;
        out = G__3968;
        continue
      }else {
        return cljs.core.persistent_BANG_.call(null, out)
      }
      break
    }
  }
};
cljs.core.vec = function vec(coll) {
  return cljs.core._persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core._as_transient.call(null, cljs.core.PersistentVector.EMPTY), coll))
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    return cljs.core.vec.call(null, args)
  };
  var vector = function(var_args) {
    var args = null;
    if(goog.isDef(var_args)) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return vector__delegate.call(this, args)
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__3969) {
    var args = cljs.core.seq(arglist__3969);
    return vector__delegate(args)
  };
  vector.cljs$lang$arity$variadic = vector__delegate;
  return vector
}();
goog.provide("cljs.core.ChunkedSeq");
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31719660;
  this.cljs$lang$protocol_mask$partition1$ = 1536
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/ChunkedSeq")
};
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/ChunkedSeq")
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  if(self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if(s == null) {
      return null
    }else {
      return s
    }
  }else {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll)
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return cljs.core.cons.call(null, o, coll)
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  return coll
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  return self__.node[self__.off]
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  if(self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if(s == null) {
      return cljs.core.List.EMPTY
    }else {
      return s
    }
  }else {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll)
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if(s == null) {
    return null
  }else {
    return s
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  return cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.array_chunk.call(null, self__.node, self__.off)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if(s == null) {
    return cljs.core.List.EMPTY
  }else {
    return s
  }
};
cljs.core.ChunkedSeq;
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return chunked_seq.call(null, vec, cljs.core.array_for.call(null, vec, i), i, off, null)
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return chunked_seq.call(null, vec, node, i, off, null)
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null)
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$lang$arity$3 = chunked_seq__3;
  chunked_seq.cljs$lang$arity$4 = chunked_seq__4;
  chunked_seq.cljs$lang$arity$5 = chunked_seq__5;
  return chunked_seq
}();
goog.provide("cljs.core.Subvec");
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32400159
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/Subvec")
};
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/Subvec")
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(coll, k, null)
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(coll, k, not_found)
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var v_pos = self__.start + key;
  return new cljs.core.Subvec(self__.meta, cljs.core._assoc.call(null, self__.v, v_pos, val), self__.start, self__.end > v_pos + 1 ? self__.end : v_pos + 1, null)
};
cljs.core.Subvec.prototype.call = function() {
  var G__3974 = null;
  var G__3974__2 = function(this_sym3972, k) {
    var self__ = this;
    var this_sym3972__$1 = this;
    var coll = this_sym3972__$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(coll, k)
  };
  var G__3974__3 = function(this_sym3973, k, not_found) {
    var self__ = this;
    var this_sym3973__$1 = this;
    var coll = this_sym3973__$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, not_found)
  };
  G__3974 = function(this_sym3973, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3974__2.call(this, this_sym3973, k);
      case 3:
        return G__3974__3.call(this, this_sym3973, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__3974
}();
cljs.core.Subvec.prototype.apply = function(this_sym3970, args3971) {
  var self__ = this;
  return this_sym3970.call.apply(this_sym3970, [this_sym3970].concat(args3971.slice()))
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return new cljs.core.Subvec(self__.meta, cljs.core._assoc_n.call(null, self__.v, self__.end, o), self__.start, self__.end + 1, null)
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, coll, f)
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, coll, f, start__$1)
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var subvec_seq = function subvec_seq(i) {
    if(i === self__.end) {
      return null
    }else {
      return cljs.core.cons.call(null, cljs.core._nth.call(null, self__.v, i), new cljs.core.LazySeq(null, false, function() {
        return subvec_seq.call(null, i + 1)
      }, null))
    }
  };
  return subvec_seq.call(null, self__.start)
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return self__.end - self__.start
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core._nth.call(null, self__.v, self__.end - 1)
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  if(self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  }else {
    return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end - 1, null)
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  return coll.cljs$core$IAssociative$_assoc$arity$3(coll, n, val)
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.Subvec(meta__$1, self__.v, self__.start, self__.end, self__.__hash)
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  return cljs.core._nth.call(null, self__.v, self__.start + n)
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  return cljs.core._nth.call(null, self__.v, self__.start + n, not_found)
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.Vector.EMPTY, self__.meta)
};
cljs.core.Subvec;
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.call(null, v, start, cljs.core.count.call(null, v))
  };
  var subvec__3 = function(v, start, end) {
    return new cljs.core.Subvec(null, v, start, end, null)
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$lang$arity$2 = subvec__2;
  subvec.cljs$lang$arity$3 = subvec__3;
  return subvec
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if(edit === node.edit) {
    return node
  }else {
    return new cljs.core.VectorNode(edit, node.arr.slice())
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode({}, node.arr.slice())
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = cljs.core.make_array.call(null, 32);
  cljs.core.array_copy.call(null, tl, 0, ret, 0, tl.length);
  return ret
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable.call(null, tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset.call(null, ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget.call(null, ret, subidx);
    if(!(child == null)) {
      return tv_push_tail.call(null, tv, level - 5, child, tail_node)
    }else {
      return cljs.core.new_path.call(null, tv.root.edit, level - 5, tail_node)
    }
  }());
  return ret
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable.call(null, tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if(level > 5) {
    var new_child = tv_pop_tail.call(null, tv, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx));
    if(function() {
      var and__3822__auto__ = new_child == null;
      if(and__3822__auto__) {
        return subidx === 0
      }else {
        return and__3822__auto__
      }
    }()) {
      return null
    }else {
      cljs.core.pv_aset.call(null, node__$1, subidx, new_child);
      return node__$1
    }
  }else {
    if(subidx === 0) {
      return null
    }else {
      if("\ufdd0'else") {
        cljs.core.pv_aset.call(null, node__$1, subidx, null);
        return node__$1
      }else {
        return null
      }
    }
  }
};
cljs.core.editable_array_for = function editable_array_for(tv, i) {
  if(function() {
    var and__3822__auto__ = 0 <= i;
    if(and__3822__auto__) {
      return i < tv.cnt
    }else {
      return and__3822__auto__
    }
  }()) {
    if(i >= cljs.core.tail_off.call(null, tv)) {
      return tv.tail
    }else {
      var root = tv.root;
      var node = root;
      var level = tv.shift;
      while(true) {
        if(level > 0) {
          var G__3975 = cljs.core.tv_ensure_editable.call(null, root.edit, cljs.core.pv_aget.call(null, node, i >>> level & 31));
          var G__3976 = level - 5;
          node = G__3975;
          level = G__3976;
          continue
        }else {
          return node.arr
        }
        break
      }
    }
  }else {
    throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in transient vector of length "), cljs.core.str(tv.cnt)].join(""));
  }
};
goog.provide("cljs.core.TransientVector");
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/TransientVector")
};
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/TransientVector")
};
cljs.core.TransientVector.prototype.call = function() {
  var G__3981 = null;
  var G__3981__2 = function(this_sym3979, k) {
    var self__ = this;
    var this_sym3979__$1 = this;
    var coll = this_sym3979__$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(coll, k)
  };
  var G__3981__3 = function(this_sym3980, k, not_found) {
    var self__ = this;
    var this_sym3980__$1 = this;
    var coll = this_sym3980__$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, not_found)
  };
  G__3981 = function(this_sym3980, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3981__2.call(this, this_sym3980, k);
      case 3:
        return G__3981__3.call(this, this_sym3980, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__3981
}();
cljs.core.TransientVector.prototype.apply = function(this_sym3977, args3978) {
  var self__ = this;
  return this_sym3977.call.apply(this_sym3977, [this_sym3977].concat(args3978.slice()))
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(coll, k, null)
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(coll, k, not_found)
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  if(self__.root.edit) {
    return cljs.core.array_for.call(null, coll, n)[n & 31]
  }else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  if(function() {
    var and__3822__auto__ = 0 <= n;
    if(and__3822__auto__) {
      return n < self__.cnt
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$IIndexed$_nth$arity$2(coll, n)
  }else {
    return not_found
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  if(self__.root.edit) {
    return self__.cnt
  }else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  if(self__.root.edit) {
    if(function() {
      var and__3822__auto__ = 0 <= n;
      if(and__3822__auto__) {
        return n < self__.cnt
      }else {
        return and__3822__auto__
      }
    }()) {
      if(cljs.core.tail_off.call(null, tcoll) <= n) {
        self__.tail[n & 31] = val;
        return tcoll
      }else {
        var new_root = function go(level, node) {
          var node__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, node);
          if(level === 0) {
            cljs.core.pv_aset.call(null, node__$1, n & 31, val);
            return node__$1
          }else {
            var subidx = n >>> level & 31;
            cljs.core.pv_aset.call(null, node__$1, subidx, go.call(null, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx)));
            return node__$1
          }
        }.call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll
      }
    }else {
      if(n === self__.cnt) {
        return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val)
      }else {
        if("\ufdd0'else") {
          throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
        }else {
          return null
        }
      }
    }
  }else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  if(self__.root.edit) {
    if(self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    }else {
      if(1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll
      }else {
        if((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll
        }else {
          if("\ufdd0'else") {
            var new_tail = cljs.core.editable_array_for.call(null, tcoll, self__.cnt - 2);
            var new_root = function() {
              var nr = cljs.core.tv_pop_tail.call(null, tcoll, self__.shift, self__.root);
              if(!(nr == null)) {
                return nr
              }else {
                return new cljs.core.VectorNode(self__.root.edit, cljs.core.make_array.call(null, 32))
              }
            }();
            if(function() {
              var and__3822__auto__ = 5 < self__.shift;
              if(and__3822__auto__) {
                return cljs.core.pv_aget.call(null, new_root, 1) == null
              }else {
                return and__3822__auto__
              }
            }()) {
              var new_root__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, cljs.core.pv_aget.call(null, new_root, 0));
              self__.root = new_root__$1;
              self__.shift = self__.shift - 5;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll
            }else {
              self__.root = new_root;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll
            }
          }else {
            return null
          }
        }
      }
    }
  }else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, key, val)
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  if(self__.root.edit) {
    if(self__.cnt - cljs.core.tail_off.call(null, tcoll) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll
    }else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = cljs.core.make_array.call(null, 32);
      new_tail[0] = o;
      self__.tail = new_tail;
      if(self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = cljs.core.make_array.call(null, 32);
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path.call(null, self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll
      }else {
        var new_root = cljs.core.tv_push_tail.call(null, tcoll, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll
      }
    }
  }else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  if(self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off.call(null, tcoll);
    var trimmed_tail = cljs.core.make_array.call(null, len);
    cljs.core.array_copy.call(null, self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null)
  }else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientVector;
goog.provide("cljs.core.PersistentQueueSeq");
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/PersistentQueueSeq")
};
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/PersistentQueueSeq")
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return cljs.core.cons.call(null, o, coll)
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  return coll
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core._first.call(null, self__.front)
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var temp__3971__auto__ = cljs.core.next.call(null, self__.front);
  if(temp__3971__auto__) {
    var f1 = temp__3971__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null)
  }else {
    if(self__.rear == null) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll)
    }else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null)
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash)
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.PersistentQueueSeq;
goog.provide("cljs.core.PersistentQueue");
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31858766
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/PersistentQueue")
};
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/PersistentQueue")
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  if(cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.call(null, function() {
      var or__3824__auto__ = self__.rear;
      if(cljs.core.truth_(or__3824__auto__)) {
        return or__3824__auto__
      }else {
        return cljs.core.PersistentVector.EMPTY
      }
    }(), o), null)
  }else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.call(null, self__.front, o), cljs.core.PersistentVector.EMPTY, null)
  }
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var rear__$1 = cljs.core.seq.call(null, self__.rear);
  if(cljs.core.truth_(function() {
    var or__3824__auto__ = self__.front;
    if(cljs.core.truth_(or__3824__auto__)) {
      return or__3824__auto__
    }else {
      return rear__$1
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq.call(null, rear__$1), null)
  }else {
    return null
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return self__.count
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core._first.call(null, self__.front)
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  if(cljs.core.truth_(self__.front)) {
    var temp__3971__auto__ = cljs.core.next.call(null, self__.front);
    if(temp__3971__auto__) {
      var f1 = temp__3971__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null)
    }else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq.call(null, self__.rear), cljs.core.PersistentVector.EMPTY, null)
    }
  }else {
    return coll
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.first.call(null, self__.front)
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, coll))
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash)
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.PersistentQueue.EMPTY
};
cljs.core.PersistentQueue;
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, 0);
goog.provide("cljs.core.NeverEquiv");
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/NeverEquiv")
};
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/NeverEquiv")
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  return false
};
cljs.core.NeverEquiv;
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.map_QMARK_.call(null, y) ? cljs.core.count.call(null, x) === cljs.core.count.call(null, y) ? cljs.core.every_QMARK_.call(null, cljs.core.identity, cljs.core.map.call(null, function(xkv) {
    return cljs.core._EQ_.call(null, cljs.core._lookup.call(null, y, cljs.core.first.call(null, xkv), cljs.core.never_equiv), cljs.core.second.call(null, xkv))
  }, x)) : null : null)
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while(true) {
    if(i < len) {
      if(k === array[i]) {
        return i
      }else {
        var G__3982 = i + incr;
        i = G__3982;
        continue
      }
    }else {
      return null
    }
    break
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash.call(null, a);
  var b__$1 = cljs.core.hash.call(null, b);
  if(a__$1 < b__$1) {
    return-1
  }else {
    if(a__$1 > b__$1) {
      return 1
    }else {
      if("\ufdd0'else") {
        return 0
      }else {
        return null
      }
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var out = cljs.core.with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, cljs.core.meta.call(null, m));
  var i = 0;
  var out__$1 = cljs.core.transient$.call(null, out);
  while(true) {
    if(i < len) {
      var k__$1 = ks[i];
      var G__3983 = i + 1;
      var G__3984 = cljs.core.assoc_BANG_.call(null, out__$1, k__$1, so[k__$1]);
      i = G__3983;
      out__$1 = G__3984;
      continue
    }else {
      return cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, out__$1, k, v))
    }
    break
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = {};
  var l = ks.length;
  var i = 0;
  while(true) {
    if(i < l) {
      var k = ks[i];
      new_obj[k] = obj[k];
      var G__3986 = i + 1;
      i = G__3986;
      continue
    }else {
    }
    break
  }
  return new_obj
};
goog.provide("cljs.core.ObjMap");
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 15075087
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/ObjMap")
};
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/ObjMap")
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.hash_map.call(null), coll))
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_imap.call(null, coll);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, null)
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  if(function() {
    var and__3822__auto__ = goog.isString(k);
    if(and__3822__auto__) {
      return!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)
    }else {
      return and__3822__auto__
    }
  }()) {
    return self__.strobj[k]
  }else {
    return not_found
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  if(goog.isString(k)) {
    if(function() {
      var or__3824__auto__ = self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD;
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        return self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD
      }
    }()) {
      return cljs.core.obj_map__GT_hash_map.call(null, coll, k, v)
    }else {
      if(!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null)
      }else {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        var new_keys = self__.keys.slice();
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null)
      }
    }
  }else {
    return cljs.core.obj_map__GT_hash_map.call(null, coll, k, v)
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  if(function() {
    var and__3822__auto__ = goog.isString(k);
    if(and__3822__auto__) {
      return!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)
    }else {
      return and__3822__auto__
    }
  }()) {
    return true
  }else {
    return false
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__3991 = null;
  var G__3991__2 = function(this_sym3989, k) {
    var self__ = this;
    var this_sym3989__$1 = this;
    var coll = this_sym3989__$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(coll, k)
  };
  var G__3991__3 = function(this_sym3990, k, not_found) {
    var self__ = this;
    var this_sym3990__$1 = this;
    var coll = this_sym3990__$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, not_found)
  };
  G__3991 = function(this_sym3990, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3991__2.call(this, this_sym3990, k);
      case 3:
        return G__3991__3.call(this, this_sym3990, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__3991
}();
cljs.core.ObjMap.prototype.apply = function(this_sym3987, args3988) {
  var self__ = this;
  return this_sym3987.call.apply(this_sym3987, [this_sym3987].concat(args3988.slice()))
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  if(cljs.core.vector_QMARK_.call(null, entry)) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll, entry)
  }
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  if(self__.keys.length > 0) {
    return cljs.core.map.call(null, function(p1__3985_SHARP_) {
      return cljs.core.vector.call(null, p1__3985_SHARP_, self__.strobj[p1__3985_SHARP_])
    }, self__.keys.sort(cljs.core.obj_map_compare_keys))
  }else {
    return null
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return self__.keys.length
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_map.call(null, coll, other)
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash)
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.ObjMap.EMPTY, self__.meta)
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  if(function() {
    var and__3822__auto__ = goog.isString(k);
    if(and__3822__auto__) {
      return!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)
    }else {
      return and__3822__auto__
    }
  }()) {
    var new_keys = self__.keys.slice();
    var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array.call(null, 1, k, new_keys), 1);
    cljs.core.js_delete.call(null, new_strobj, k);
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null)
  }else {
    return coll
  }
};
cljs.core.ObjMap;
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], {}, 0, 0);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 32;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null)
};
goog.provide("cljs.core.HashMap");
cljs.core.HashMap = function(meta, count, hashobj, __hash) {
  this.meta = meta;
  this.count = count;
  this.hashobj = hashobj;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 15075087
};
cljs.core.HashMap.cljs$lang$type = true;
cljs.core.HashMap.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/HashMap")
};
cljs.core.HashMap.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/HashMap")
};
cljs.core.HashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_imap.call(null, coll);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.HashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, null)
};
cljs.core.HashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var bucket = self__.hashobj[cljs.core.hash.call(null, k)];
  var i = cljs.core.truth_(bucket) ? cljs.core.scan_array.call(null, 2, k, bucket) : null;
  if(cljs.core.truth_(i)) {
    return bucket[i + 1]
  }else {
    return not_found
  }
};
cljs.core.HashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var h = cljs.core.hash.call(null, k);
  var bucket = self__.hashobj[h];
  if(cljs.core.truth_(bucket)) {
    var new_bucket = bucket.slice();
    var new_hashobj = goog.object.clone(self__.hashobj);
    new_hashobj[h] = new_bucket;
    var temp__3971__auto__ = cljs.core.scan_array.call(null, 2, k, new_bucket);
    if(cljs.core.truth_(temp__3971__auto__)) {
      var i = temp__3971__auto__;
      new_bucket[i + 1] = v;
      return new cljs.core.HashMap(self__.meta, self__.count, new_hashobj, null)
    }else {
      new_bucket.push(k, v);
      return new cljs.core.HashMap(self__.meta, self__.count + 1, new_hashobj, null)
    }
  }else {
    var new_hashobj = goog.object.clone(self__.hashobj);
    new_hashobj[h] = [k, v];
    return new cljs.core.HashMap(self__.meta, self__.count + 1, new_hashobj, null)
  }
};
cljs.core.HashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var bucket = self__.hashobj[cljs.core.hash.call(null, k)];
  var i = cljs.core.truth_(bucket) ? cljs.core.scan_array.call(null, 2, k, bucket) : null;
  if(cljs.core.truth_(i)) {
    return true
  }else {
    return false
  }
};
cljs.core.HashMap.prototype.call = function() {
  var G__3997 = null;
  var G__3997__2 = function(this_sym3995, k) {
    var self__ = this;
    var this_sym3995__$1 = this;
    var coll = this_sym3995__$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(coll, k)
  };
  var G__3997__3 = function(this_sym3996, k, not_found) {
    var self__ = this;
    var this_sym3996__$1 = this;
    var coll = this_sym3996__$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, not_found)
  };
  G__3997 = function(this_sym3996, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3997__2.call(this, this_sym3996, k);
      case 3:
        return G__3997__3.call(this, this_sym3996, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__3997
}();
cljs.core.HashMap.prototype.apply = function(this_sym3993, args3994) {
  var self__ = this;
  return this_sym3993.call.apply(this_sym3993, [this_sym3993].concat(args3994.slice()))
};
cljs.core.HashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  if(cljs.core.vector_QMARK_.call(null, entry)) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll, entry)
  }
};
cljs.core.HashMap.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.HashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  if(self__.count > 0) {
    var hashes = cljs.core.js_keys.call(null, self__.hashobj).sort();
    return cljs.core.mapcat.call(null, function(p1__3992_SHARP_) {
      return cljs.core.map.call(null, cljs.core.vec, cljs.core.partition.call(null, 2, self__.hashobj[p1__3992_SHARP_]))
    }, hashes)
  }else {
    return null
  }
};
cljs.core.HashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return self__.count
};
cljs.core.HashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_map.call(null, coll, other)
};
cljs.core.HashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.HashMap(meta__$1, self__.count, self__.hashobj, self__.__hash)
};
cljs.core.HashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.HashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.HashMap.EMPTY, self__.meta)
};
cljs.core.HashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var h = cljs.core.hash.call(null, k);
  var bucket = self__.hashobj[h];
  var i = cljs.core.truth_(bucket) ? cljs.core.scan_array.call(null, 2, k, bucket) : null;
  if(cljs.core.not.call(null, i)) {
    return coll
  }else {
    var new_hashobj = goog.object.clone(self__.hashobj);
    if(3 > bucket.length) {
      cljs.core.js_delete.call(null, new_hashobj, h)
    }else {
      var new_bucket = bucket.slice();
      new_bucket.splice(i, 2);
      new_hashobj[h] = new_bucket
    }
    return new cljs.core.HashMap(self__.meta, self__.count - 1, new_hashobj, null)
  }
};
cljs.core.HashMap;
cljs.core.HashMap.EMPTY = new cljs.core.HashMap(null, 0, {}, 0);
cljs.core.HashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.HashMap.EMPTY;
  while(true) {
    if(i < len) {
      var G__3998 = i + 1;
      var G__3999 = cljs.core.assoc.call(null, out, ks[i], vs[i]);
      i = G__3998;
      out = G__3999;
      continue
    }else {
      return out
    }
    break
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  var len = arr.length;
  var i = 0;
  while(true) {
    if(len <= i) {
      return-1
    }else {
      if(cljs.core._EQ_.call(null, arr[i], k)) {
        return i
      }else {
        if("\ufdd0'else") {
          var G__4000 = i + 2;
          i = G__4000;
          continue
        }else {
          return null
        }
      }
    }
    break
  }
};
goog.provide("cljs.core.PersistentArrayMap");
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/PersistentArrayMap")
};
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/PersistentArrayMap")
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  return new cljs.core.TransientArrayMap({}, self__.arr.length, self__.arr.slice())
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_imap.call(null, coll);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, null)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var idx = cljs.core.array_map_index_of.call(null, coll, k);
  if(idx === -1) {
    return not_found
  }else {
    return self__.arr[idx + 1]
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var idx = cljs.core.array_map_index_of.call(null, coll, k);
  if(idx === -1) {
    if(self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, function() {
        var G__4003 = self__.arr.slice();
        G__4003.push(k);
        G__4003.push(v);
        return G__4003
      }(), null)
    }else {
      return cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll)), k, v))
    }
  }else {
    if(v === self__.arr[idx + 1]) {
      return coll
    }else {
      if("\ufdd0'else") {
        return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, function() {
          var G__4004 = self__.arr.slice();
          G__4004[idx + 1] = v;
          return G__4004
        }(), null)
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  return!(cljs.core.array_map_index_of.call(null, coll, k) === -1)
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__4007 = null;
  var G__4007__2 = function(this_sym4005, k) {
    var self__ = this;
    var this_sym4005__$1 = this;
    var coll = this_sym4005__$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(coll, k)
  };
  var G__4007__3 = function(this_sym4006, k, not_found) {
    var self__ = this;
    var this_sym4006__$1 = this;
    var coll = this_sym4006__$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, not_found)
  };
  G__4007 = function(this_sym4006, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__4007__2.call(this, this_sym4006, k);
      case 3:
        return G__4007__3.call(this, this_sym4006, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__4007
}();
cljs.core.PersistentArrayMap.prototype.apply = function(this_sym4001, args4002) {
  var self__ = this;
  return this_sym4001.call.apply(this_sym4001, [this_sym4001].concat(args4002.slice()))
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while(true) {
    if(i < len) {
      var init__$2 = f.call(null, init__$1, self__.arr[i], self__.arr[i + 1]);
      if(cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2)
      }else {
        var G__4008 = i + 2;
        var G__4009 = init__$2;
        i = G__4008;
        init__$1 = G__4009;
        continue
      }
    }else {
      return null
    }
    break
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  if(cljs.core.vector_QMARK_.call(null, entry)) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll, entry)
  }
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  if(self__.cnt > 0) {
    var len = self__.arr.length;
    var array_map_seq = function array_map_seq(i) {
      return new cljs.core.LazySeq(null, false, function() {
        if(i < len) {
          return cljs.core.cons.call(null, cljs.core.PersistentVector.fromArray([self__.arr[i], self__.arr[i + 1]], true), array_map_seq.call(null, i + 2))
        }else {
          return null
        }
      }, null)
    };
    return array_map_seq.call(null, 0)
  }else {
    return null
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return self__.cnt
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_map.call(null, coll, other)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentArrayMap.EMPTY, self__.meta)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var idx = cljs.core.array_map_index_of.call(null, coll, k);
  if(idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if(new_len === 0) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll)
    }else {
      var new_arr = cljs.core.make_array.call(null, new_len);
      var s = 0;
      var d = 0;
      while(true) {
        if(s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null)
        }else {
          if(cljs.core._EQ_.call(null, k, self__.arr[s])) {
            var G__4010 = s + 2;
            var G__4011 = d;
            s = G__4010;
            d = G__4011;
            continue
          }else {
            if("\ufdd0'else") {
              new_arr[d] = self__.arr[s];
              new_arr[d + 1] = self__.arr[s + 1];
              var G__4012 = s + 2;
              var G__4013 = d + 2;
              s = G__4012;
              d = G__4013;
              continue
            }else {
              return null
            }
          }
        }
        break
      }
    }
  }else {
    return coll
  }
};
cljs.core.PersistentArrayMap;
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], null);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 16;
cljs.core.PersistentArrayMap.fromArrays = function(ks, vs) {
  var len = cljs.core.count.call(null, ks);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
  while(true) {
    if(i < len) {
      var G__4014 = i + 1;
      var G__4015 = cljs.core.assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__4014;
      out = G__4015;
      continue
    }else {
      return cljs.core.persistent_BANG_.call(null, out)
    }
    break
  }
};
goog.provide("cljs.core.TransientArrayMap");
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/TransientArrayMap")
};
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/TransientArrayMap")
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  if(cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll, key);
    if(idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__4016 = self__.arr;
      G__4016.pop();
      G__4016.pop();
      G__4016;
      self__.len = self__.len - 2
    }else {
    }
    return tcoll
  }else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  if(cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll, key);
    if(idx === -1) {
      if(self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll
      }else {
        return cljs.core.assoc_BANG_.call(null, cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val)
      }
    }else {
      if(val === self__.arr[idx + 1]) {
        return tcoll
      }else {
        self__.arr[idx + 1] = val;
        return tcoll
      }
    }
  }else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  if(cljs.core.truth_(self__.editable_QMARK_)) {
    if(function() {
      var G__4017 = o;
      if(G__4017) {
        if(function() {
          var or__3824__auto__ = G__4017.cljs$lang$protocol_mask$partition0$ & 2048;
          if(or__3824__auto__) {
            return or__3824__auto__
          }else {
            return G__4017.cljs$core$IMapEntry$
          }
        }()) {
          return true
        }else {
          if(!G__4017.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.type_satisfies_.call(null, cljs.core.IMapEntry, G__4017)
          }else {
            return false
          }
        }
      }else {
        return cljs.core.type_satisfies_.call(null, cljs.core.IMapEntry, G__4017)
      }
    }()) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, cljs.core.key.call(null, o), cljs.core.val.call(null, o))
    }else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while(true) {
        var temp__3971__auto__ = cljs.core.first.call(null, es);
        if(cljs.core.truth_(temp__3971__auto__)) {
          var e = temp__3971__auto__;
          var G__4018 = cljs.core.next.call(null, es);
          var G__4019 = tcoll__$1.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll__$1, cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__4018;
          tcoll__$1 = G__4019;
          continue
        }else {
          return tcoll__$1
        }
        break
      }
    }
  }else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  if(cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, self__.len, 2), self__.arr, null)
  }else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  return tcoll.cljs$core$ILookup$_lookup$arity$3(tcoll, k, null)
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  if(cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll, k);
    if(idx === -1) {
      return not_found
    }else {
      return self__.arr[idx + 1]
    }
  }else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  if(cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot.call(null, self__.len, 2)
  }else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientArrayMap;
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$.call(null, cljs.core.ObjMap.EMPTY);
  var i = 0;
  while(true) {
    if(i < len) {
      var G__4020 = cljs.core.assoc_BANG_.call(null, out, arr[i], arr[i + 1]);
      var G__4021 = i + 2;
      out = G__4020;
      i = G__4021;
      continue
    }else {
      return out
    }
    break
  }
};
goog.provide("cljs.core.Box");
cljs.core.Box = function(val) {
  this.val = val
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorPrSeq = function(this__2317__auto__) {
  return cljs.core.list.call(null, "cljs.core/Box")
};
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__2317__auto__, writer__2318__auto__) {
  return cljs.core._write.call(null, writer__2318__auto__, "cljs.core/Box")
};
cljs.core.Box;
cljs.core.key_test = function key_test(key, other) {
  if(goog.isString(key)) {
    return key === other
  }else {
    return cljs.core._EQ_.call(null, key, other)
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__4024 = arr.slice();
    G__4024[i] = a;
    return G__4024
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__4025 = arr.slice();
    G__4025[i] = a;
    G__4025[j] = b;
    return G__4025
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$lang$arity$3 = clone_and_set__3;
  clone_and_set.cljs$lang$arity$5 = clone_and_set__5;
  return clone_and_set
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = cljs.core.make_array.call(null, arr.length - 2);
  cljs.core.array_copy.call(null, arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy.call(null, arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count.call(null, bitmap & bit - 1)
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31)
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$lang$arity$4 = edit_and_set__4;
  edit_and_set.cljs$lang$arity$6 = edit_and_set__6;
  return edit_and_set
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while(true) {
    if(i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if(!(k == null)) {
          return f.call(null, init__$1, k, arr[i + 1])
        }else {
          var node = arr[i + 1];
          if(!(node == null)) {
            return node.kv_reduce(f, init__$1)
          }else {
            return init__$1
          }
        }
      }();
      if(cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2)
      }else {
        var G__4026 = i + 2;
        var G__4027 = init__$2;
        i = G__4026;
        init__$1 = G__4027;
        continue
      }
    }else {
      return init__$1
    }
    break
  }
};
goog.provide("cljs.core.BitmapIndexedNode");
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/BitmapIndexedNode")
};
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/BitmapIndexedNode")
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if(self__.bitmap === bit) {
    return null
  }else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy.call(null, earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if(2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward.call(null, earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable
    }else {
      if(n >= 16) {
        var nodes = cljs.core.make_array.call(null, 32);
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i = 0;
        var j = 0;
        while(true) {
          if(i < 32) {
            if((self__.bitmap >>> i & 1) === 0) {
              var G__4028 = i + 1;
              var G__4029 = j;
              i = G__4028;
              j = G__4029;
              continue
            }else {
              nodes[i] = !(self__.arr[j] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash.call(null, self__.arr[j]), self__.arr[j], self__.arr[j + 1], added_leaf_QMARK_) : self__.arr[j + 1];
              var G__4030 = i + 1;
              var G__4031 = j + 2;
              i = G__4030;
              j = G__4031;
              continue
            }
          }else {
          }
          break
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes)
      }else {
        if("\ufdd0'else") {
          var new_arr = cljs.core.make_array.call(null, 2 * (n + 4));
          cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
          new_arr[2 * idx] = key;
          new_arr[2 * idx + 1] = val;
          cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
          added_leaf_QMARK_.val = true;
          var editable = inode.ensure_editable(edit__$1);
          editable.arr = new_arr;
          editable.bitmap = editable.bitmap | bit;
          return editable
        }else {
          return null
        }
      }
    }
  }else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if(key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if(n === val_or_node) {
        return inode
      }else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n)
      }
    }else {
      if(cljs.core.key_test.call(null, key, key_or_nil)) {
        if(val === val_or_node) {
          return inode
        }else {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, val)
        }
      }else {
        if("\ufdd0'else") {
          added_leaf_QMARK_.val = true;
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, edit__$1, shift + 5, key_or_nil, val_or_node, hash, key, val))
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr)
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if((self__.bitmap & bit) === 0) {
    return inode
  }else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if(key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if(n === val_or_node) {
        return inode
      }else {
        if(!(n == null)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n)
        }else {
          if(self__.bitmap === bit) {
            return null
          }else {
            if("\ufdd0'else") {
              return inode.edit_and_remove_pair(edit__$1, bit, idx)
            }else {
              return null
            }
          }
        }
      }
    }else {
      if(cljs.core.key_test.call(null, key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx)
      }else {
        if("\ufdd0'else") {
          return inode
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if(e === self__.edit) {
    return inode
  }else {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    var new_arr = cljs.core.make_array.call(null, n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr)
  }
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init)
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if((self__.bitmap & bit) === 0) {
    return not_found
  }else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if(key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found)
    }else {
      if(cljs.core.key_test.call(null, key, key_or_nil)) {
        return cljs.core.PersistentVector.fromArray([key_or_nil, val_or_node], true)
      }else {
        if("\ufdd0'else") {
          return not_found
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if((self__.bitmap & bit) === 0) {
    return inode
  }else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if(key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if(n === val_or_node) {
        return inode
      }else {
        if(!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n))
        }else {
          if(self__.bitmap === bit) {
            return null
          }else {
            if("\ufdd0'else") {
              return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx))
            }else {
              return null
            }
          }
        }
      }
    }else {
      if(cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx))
      }else {
        if("\ufdd0'else") {
          return inode
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if(n >= 16) {
      var nodes = cljs.core.make_array.call(null, 32);
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i = 0;
      var j = 0;
      while(true) {
        if(i < 32) {
          if((self__.bitmap >>> i & 1) === 0) {
            var G__4032 = i + 1;
            var G__4033 = j;
            i = G__4032;
            j = G__4033;
            continue
          }else {
            nodes[i] = !(self__.arr[j] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash.call(null, self__.arr[j]), self__.arr[j], self__.arr[j + 1], added_leaf_QMARK_) : self__.arr[j + 1];
            var G__4034 = i + 1;
            var G__4035 = j + 2;
            i = G__4034;
            j = G__4035;
            continue
          }
        }else {
        }
        break
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes)
    }else {
      var new_arr = cljs.core.make_array.call(null, 2 * (n + 1));
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr)
    }
  }else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if(key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if(n === val_or_node) {
        return inode
      }else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n))
      }
    }else {
      if(cljs.core.key_test.call(null, key, key_or_nil)) {
        if(val === val_or_node) {
          return inode
        }else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, val))
        }
      }else {
        if("\ufdd0'else") {
          added_leaf_QMARK_.val = true;
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, shift + 5, key_or_nil, val_or_node, hash, key, val)))
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if((self__.bitmap & bit) === 0) {
    return not_found
  }else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if(key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found)
    }else {
      if(cljs.core.key_test.call(null, key, key_or_nil)) {
        return val_or_node
      }else {
        if("\ufdd0'else") {
          return not_found
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode;
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, cljs.core.make_array.call(null, 0));
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = 2 * (array_node.cnt - 1);
  var new_arr = cljs.core.make_array.call(null, len);
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while(true) {
    if(i < len) {
      if(function() {
        var and__3822__auto__ = !(i === idx);
        if(and__3822__auto__) {
          return!(arr[i] == null)
        }else {
          return and__3822__auto__
        }
      }()) {
        new_arr[j] = arr[i];
        var G__4036 = i + 1;
        var G__4037 = j + 2;
        var G__4038 = bitmap | 1 << i;
        i = G__4036;
        j = G__4037;
        bitmap = G__4038;
        continue
      }else {
        var G__4039 = i + 1;
        var G__4040 = j;
        var G__4041 = bitmap;
        i = G__4039;
        j = G__4040;
        bitmap = G__4041;
        continue
      }
    }else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr)
    }
    break
  }
};
goog.provide("cljs.core.ArrayNode");
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/ArrayNode")
};
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/ArrayNode")
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if(node == null) {
    var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable
  }else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if(n === node) {
      return inode
    }else {
      return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n)
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.call(null, self__.arr)
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if(node == null) {
    return inode
  }else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if(n === node) {
      return inode
    }else {
      if(n == null) {
        if(self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, edit__$1, idx)
        }else {
          var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable
        }
      }else {
        if("\ufdd0'else") {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n)
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if(e === self__.edit) {
    return inode
  }else {
    return new cljs.core.ArrayNode(e, self__.cnt, self__.arr.slice())
  }
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while(true) {
    if(i < len) {
      var node = self__.arr[i];
      if(!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if(cljs.core.reduced_QMARK_.call(null, init__$2)) {
          return cljs.core.deref.call(null, init__$2)
        }else {
          var G__4042 = i + 1;
          var G__4043 = init__$2;
          i = G__4042;
          init__$1 = G__4043;
          continue
        }
      }else {
        return null
      }
    }else {
      return init__$1
    }
    break
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if(!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found)
  }else {
    return not_found
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if(!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if(n === node) {
      return inode
    }else {
      if(n == null) {
        if(self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, null, idx)
        }else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.call(null, self__.arr, idx, n))
        }
      }else {
        if("\ufdd0'else") {
          return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n))
        }else {
          return null
        }
      }
    }
  }else {
    return inode
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if(node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.call(null, self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)))
  }else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if(n === node) {
      return inode
    }else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n))
    }
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if(!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found)
  }else {
    return not_found
  }
};
cljs.core.ArrayNode;
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while(true) {
    if(i < lim) {
      if(cljs.core.key_test.call(null, key, arr[i])) {
        return i
      }else {
        var G__4044 = i + 2;
        i = G__4044;
        continue
      }
    }else {
      return-1
    }
    break
  }
};
goog.provide("cljs.core.HashCollisionNode");
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/HashCollisionNode")
};
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/HashCollisionNode")
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if(hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if(idx === -1) {
      if(self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable
      }else {
        var len = self__.arr.length;
        var new_arr = cljs.core.make_array.call(null, len + 2);
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr)
      }
    }else {
      if(self__.arr[idx + 1] === val) {
        return inode
      }else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx + 1, val)
      }
    }
  }else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_)
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr)
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if(idx === -1) {
    return inode
  }else {
    removed_leaf_QMARK_[0] = true;
    if(self__.cnt === 1) {
      return null
    }else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if(e === self__.edit) {
    return inode
  }else {
    var new_arr = cljs.core.make_array.call(null, 2 * (self__.cnt + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr)
  }
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init)
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if(idx < 0) {
    return not_found
  }else {
    if(cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return cljs.core.PersistentVector.fromArray([self__.arr[idx], self__.arr[idx + 1]], true)
    }else {
      if("\ufdd0'else") {
        return not_found
      }else {
        return null
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if(idx === -1) {
    return inode
  }else {
    if(self__.cnt === 1) {
      return null
    }else {
      if("\ufdd0'else") {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair.call(null, self__.arr, cljs.core.quot.call(null, idx, 2)))
      }else {
        return null
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if(hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if(idx === -1) {
      var len = self__.arr.length;
      var new_arr = cljs.core.make_array.call(null, len + 2);
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr)
    }else {
      if(cljs.core._EQ_.call(null, self__.arr[idx], val)) {
        return inode
      }else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx + 1, val))
      }
    }
  }else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_)
  }
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if(idx < 0) {
    return not_found
  }else {
    if(cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return self__.arr[idx + 1]
    }else {
      if("\ufdd0'else") {
        return not_found
      }else {
        return null
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if(e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode
  }else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array)
  }
};
cljs.core.HashCollisionNode;
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if(key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2])
    }else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_)
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if(key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2])
    }else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_)
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$lang$arity$6 = create_node__6;
  create_node.cljs$lang$arity$7 = create_node__7;
  return create_node
}();
goog.provide("cljs.core.NodeSeq");
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/NodeSeq")
};
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/NodeSeq")
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return cljs.core.cons.call(null, o, coll)
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  return this$
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  if(self__.s == null) {
    return cljs.core.PersistentVector.fromArray([self__.nodes[self__.i], self__.nodes[self__.i + 1]], true)
  }else {
    return cljs.core.first.call(null, self__.s)
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  if(self__.s == null) {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i + 2, null)
  }else {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s))
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash)
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.NodeSeq;
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.call(null, nodes, 0, null)
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if(s == null) {
      var len = nodes.length;
      var j = i;
      while(true) {
        if(j < len) {
          if(!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null)
          }else {
            var temp__3971__auto__ = nodes[j + 1];
            if(cljs.core.truth_(temp__3971__auto__)) {
              var node = temp__3971__auto__;
              var temp__3971__auto____$1 = node.inode_seq();
              if(cljs.core.truth_(temp__3971__auto____$1)) {
                var node_seq = temp__3971__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null)
              }else {
                var G__4045 = j + 2;
                j = G__4045;
                continue
              }
            }else {
              var G__4046 = j + 2;
              j = G__4046;
              continue
            }
          }
        }else {
          return null
        }
        break
      }
    }else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null)
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$lang$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$lang$arity$3 = create_inode_seq__3;
  return create_inode_seq
}();
goog.provide("cljs.core.ArrayNodeSeq");
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/ArrayNodeSeq")
};
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/ArrayNodeSeq")
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return cljs.core.cons.call(null, o, coll)
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  return this$
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.first.call(null, self__.s)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.create_array_node_seq.call(null, null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s))
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.ArrayNodeSeq;
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.call(null, null, nodes, 0, null)
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if(s == null) {
      var len = nodes.length;
      var j = i;
      while(true) {
        if(j < len) {
          var temp__3971__auto__ = nodes[j];
          if(cljs.core.truth_(temp__3971__auto__)) {
            var nj = temp__3971__auto__;
            var temp__3971__auto____$1 = nj.inode_seq();
            if(cljs.core.truth_(temp__3971__auto____$1)) {
              var ns = temp__3971__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null)
            }else {
              var G__4047 = j + 1;
              j = G__4047;
              continue
            }
          }else {
            var G__4048 = j + 1;
            j = G__4048;
            continue
          }
        }else {
          return null
        }
        break
      }
    }else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null)
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$lang$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$lang$arity$4 = create_array_node_seq__4;
  return create_array_node_seq
}();
goog.provide("cljs.core.PersistentHashMap");
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/PersistentHashMap")
};
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/PersistentHashMap")
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  return new cljs.core.TransientHashMap({}, self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val)
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_imap.call(null, coll);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, null)
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  if(k == null) {
    if(self__.has_nil_QMARK_) {
      return self__.nil_val
    }else {
      return not_found
    }
  }else {
    if(self__.root == null) {
      return not_found
    }else {
      if("\ufdd0'else") {
        return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found)
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  if(k == null) {
    if(function() {
      var and__3822__auto__ = self__.has_nil_QMARK_;
      if(and__3822__auto__) {
        return v === self__.nil_val
      }else {
        return and__3822__auto__
      }
    }()) {
      return coll
    }else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null)
    }
  }else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
    if(new_root === self__.root) {
      return coll
    }else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null)
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  if(k == null) {
    return self__.has_nil_QMARK_
  }else {
    if(self__.root == null) {
      return false
    }else {
      if("\ufdd0'else") {
        return!(self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel)
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__4053 = null;
  var G__4053__2 = function(this_sym4051, k) {
    var self__ = this;
    var this_sym4051__$1 = this;
    var coll = this_sym4051__$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(coll, k)
  };
  var G__4053__3 = function(this_sym4052, k, not_found) {
    var self__ = this;
    var this_sym4052__$1 = this;
    var coll = this_sym4052__$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, not_found)
  };
  G__4053 = function(this_sym4052, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__4053__2.call(this, this_sym4052, k);
      case 3:
        return G__4053__3.call(this, this_sym4052, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__4053
}();
cljs.core.PersistentHashMap.prototype.apply = function(this_sym4049, args4050) {
  var self__ = this;
  return this_sym4049.call.apply(this_sym4049, [this_sym4049].concat(args4050.slice()))
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.call(null, init, null, self__.nil_val) : init;
  if(cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1)
  }else {
    if(!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1)
    }else {
      if("\ufdd0'else") {
        return init__$1
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  if(cljs.core.vector_QMARK_.call(null, entry)) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll, entry)
  }
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  if(self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if(self__.has_nil_QMARK_) {
      return cljs.core.cons.call(null, cljs.core.PersistentVector.fromArray([null, self__.nil_val], true), s)
    }else {
      return s
    }
  }else {
    return null
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return self__.cnt
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_map.call(null, coll, other)
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash)
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, self__.meta)
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  if(k == null) {
    if(self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null)
    }else {
      return coll
    }
  }else {
    if(self__.root == null) {
      return coll
    }else {
      if("\ufdd0'else") {
        var new_root = self__.root.inode_without(0, cljs.core.hash.call(null, k), k);
        if(new_root === self__.root) {
          return coll
        }else {
          return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null)
        }
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentHashMap;
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, 0);
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while(true) {
    if(i < len) {
      var G__4054 = i + 1;
      var G__4055 = cljs.core.assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__4054;
      out = G__4055;
      continue
    }else {
      return cljs.core.persistent_BANG_.call(null, out)
    }
    break
  }
};
goog.provide("cljs.core.TransientHashMap");
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/TransientHashMap")
};
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/TransientHashMap")
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  return tcoll.without_BANG_(key)
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  return tcoll.assoc_BANG_(key, val)
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  return tcoll.conj_BANG_(val)
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  return tcoll.persistent_BANG_()
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  if(k == null) {
    if(self__.has_nil_QMARK_) {
      return self__.nil_val
    }else {
      return null
    }
  }else {
    if(self__.root == null) {
      return null
    }else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k)
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  if(k == null) {
    if(self__.has_nil_QMARK_) {
      return self__.nil_val
    }else {
      return not_found
    }
  }else {
    if(self__.root == null) {
      return not_found
    }else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found)
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  if(self__.edit) {
    return self__.count
  }else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if(self__.edit) {
    if(function() {
      var G__4056 = o;
      if(G__4056) {
        if(function() {
          var or__3824__auto__ = G__4056.cljs$lang$protocol_mask$partition0$ & 2048;
          if(or__3824__auto__) {
            return or__3824__auto__
          }else {
            return G__4056.cljs$core$IMapEntry$
          }
        }()) {
          return true
        }else {
          if(!G__4056.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.type_satisfies_.call(null, cljs.core.IMapEntry, G__4056)
          }else {
            return false
          }
        }
      }else {
        return cljs.core.type_satisfies_.call(null, cljs.core.IMapEntry, G__4056)
      }
    }()) {
      return tcoll.assoc_BANG_(cljs.core.key.call(null, o), cljs.core.val.call(null, o))
    }else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while(true) {
        var temp__3971__auto__ = cljs.core.first.call(null, es);
        if(cljs.core.truth_(temp__3971__auto__)) {
          var e = temp__3971__auto__;
          var G__4057 = cljs.core.next.call(null, es);
          var G__4058 = tcoll__$1.assoc_BANG_(cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__4057;
          tcoll__$1 = G__4058;
          continue
        }else {
          return tcoll__$1
        }
        break
      }
    }
  }else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if(self__.edit) {
    if(k == null) {
      if(self__.nil_val === v) {
      }else {
        self__.nil_val = v
      }
      if(self__.has_nil_QMARK_) {
      }else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true
      }
      return tcoll
    }else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
      if(node === self__.root) {
      }else {
        self__.root = node
      }
      if(added_leaf_QMARK_.val) {
        self__.count = self__.count + 1
      }else {
      }
      return tcoll
    }
  }else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if(self__.edit) {
    if(k == null) {
      if(self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll
      }else {
        return tcoll
      }
    }else {
      if(self__.root == null) {
        return tcoll
      }else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, removed_leaf_QMARK_);
        if(node === self__.root) {
        }else {
          self__.root = node
        }
        if(cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1
        }else {
        }
        return tcoll
      }
    }
  }else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if(self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null)
  }else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientHashMap;
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while(true) {
    if(!(t == null)) {
      var G__4059 = ascending_QMARK_ ? t.left : t.right;
      var G__4060 = cljs.core.conj.call(null, stack__$1, t);
      t = G__4059;
      stack__$1 = G__4060;
      continue
    }else {
      return stack__$1
    }
    break
  }
};
goog.provide("cljs.core.PersistentTreeMapSeq");
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850574
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/PersistentTreeMapSeq")
};
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/PersistentTreeMapSeq")
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return cljs.core.cons.call(null, o, coll)
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  return this$
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  if(self__.cnt < 0) {
    return cljs.core.count.call(null, cljs.core.next.call(null, coll)) + 1
  }else {
    return self__.cnt
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  return cljs.core.peek.call(null, self__.stack)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var t = cljs.core.first.call(null, self__.stack);
  var next_stack = cljs.core.tree_map_seq_push.call(null, self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next.call(null, self__.stack), self__.ascending_QMARK_);
  if(!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.PersistentTreeMapSeq;
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push.call(null, tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null)
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, ins)) {
    if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, ins.left)) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null)
    }else {
      if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, ins.right)) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null)
      }else {
        if("\ufdd0'else") {
          return new cljs.core.BlackNode(key, val, ins, right, null)
        }else {
          return null
        }
      }
    }
  }else {
    return new cljs.core.BlackNode(key, val, ins, right, null)
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, ins)) {
    if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, ins.right)) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null)
    }else {
      if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, ins.left)) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null)
      }else {
        if("\ufdd0'else") {
          return new cljs.core.BlackNode(key, val, left, ins, null)
        }else {
          return null
        }
      }
    }
  }else {
    return new cljs.core.BlackNode(key, val, left, ins, null)
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, del)) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null)
  }else {
    if(cljs.core.instance_QMARK_.call(null, cljs.core.BlackNode, right)) {
      return cljs.core.balance_right.call(null, key, val, del, right.redden())
    }else {
      if(function() {
        var and__3822__auto__ = cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, right);
        if(and__3822__auto__) {
          return cljs.core.instance_QMARK_.call(null, cljs.core.BlackNode, right.left)
        }else {
          return and__3822__auto__
        }
      }()) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right.call(null, right.key, right.val, right.left.right, right.right.redden()), null)
      }else {
        if("\ufdd0'else") {
          throw new Error("red-black tree invariant violation");
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, del)) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null)
  }else {
    if(cljs.core.instance_QMARK_.call(null, cljs.core.BlackNode, left)) {
      return cljs.core.balance_left.call(null, key, val, left.redden(), del)
    }else {
      if(function() {
        var and__3822__auto__ = cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, left);
        if(and__3822__auto__) {
          return cljs.core.instance_QMARK_.call(null, cljs.core.BlackNode, left.right)
        }else {
          return and__3822__auto__
        }
      }()) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left.call(null, left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null)
      }else {
        if("\ufdd0'else") {
          throw new Error("red-black tree invariant violation");
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = f.call(null, init, node.key, node.val);
  if(cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1)
  }else {
    var init__$2 = !(node.left == null) ? tree_map_kv_reduce.call(null, node.left, f, init__$1) : init__$1;
    if(cljs.core.reduced_QMARK_.call(null, init__$2)) {
      return cljs.core.deref.call(null, init__$2)
    }else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce.call(null, node.right, f, init__$2) : init__$2;
      if(cljs.core.reduced_QMARK_.call(null, init__$3)) {
        return cljs.core.deref.call(null, init__$3)
      }else {
        return init__$3
      }
    }
  }
};
goog.provide("cljs.core.BlackNode");
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/BlackNode")
};
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/BlackNode")
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  return node.cljs$core$IIndexed$_nth$arity$3(node, k, null)
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  return node.cljs$core$IIndexed$_nth$arity$3(node, k, not_found)
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  return cljs.core.assoc.call(null, cljs.core.PersistentVector.fromArray([self__.key, self__.val], true), k, v)
};
cljs.core.BlackNode.prototype.call = function() {
  var G__4065 = null;
  var G__4065__2 = function(this_sym4063, k) {
    var self__ = this;
    var this_sym4063__$1 = this;
    var node = this_sym4063__$1;
    return node.cljs$core$ILookup$_lookup$arity$2(node, k)
  };
  var G__4065__3 = function(this_sym4064, k, not_found) {
    var self__ = this;
    var this_sym4064__$1 = this;
    var node = this_sym4064__$1;
    return node.cljs$core$ILookup$_lookup$arity$3(node, k, not_found)
  };
  G__4065 = function(this_sym4064, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__4065__2.call(this, this_sym4064, k);
      case 3:
        return G__4065__3.call(this, this_sym4064, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__4065
}();
cljs.core.BlackNode.prototype.apply = function(this_sym4061, args4062) {
  var self__ = this;
  return this_sym4061.call.apply(this_sym4061, [this_sym4061].concat(args4062.slice()))
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  return cljs.core.PersistentVector.fromArray([self__.key, self__.val, o], true)
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  return self__.key
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  return self__.val
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node)
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null)
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del.call(null, self__.key, self__.val, self__.left, del)
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null)
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init)
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del.call(null, self__.key, self__.val, del, self__.right)
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node)
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null)
};
cljs.core.BlackNode.prototype.toString = function() {
  var G__4066 = null;
  var G__4066__0 = function() {
    var self__ = this;
    var this$ = this;
    return cljs.core.pr_str.call(null, this$)
  };
  G__4066 = function() {
    switch(arguments.length) {
      case 0:
        return G__4066__0.call(this)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__4066
}();
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null)
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, node, f)
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, node, f, start)
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  return cljs.core.list.call(null, self__.key, self__.val)
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  return 2
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  return self__.val
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  return cljs.core.PersistentVector.fromArray([self__.key], true)
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  return cljs.core._assoc_n.call(null, cljs.core.PersistentVector.fromArray([self__.key, self__.val], true), n, v)
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.fromArray([self__.key, self__.val], true), meta)
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  return null
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  if(n === 0) {
    return self__.key
  }else {
    if(n === 1) {
      return self__.val
    }else {
      if("\ufdd0'else") {
        return null
      }else {
        return null
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  if(n === 0) {
    return self__.key
  }else {
    if(n === 1) {
      return self__.val
    }else {
      if("\ufdd0'else") {
        return not_found
      }else {
        return null
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  return cljs.core.PersistentVector.EMPTY
};
cljs.core.BlackNode;
goog.provide("cljs.core.RedNode");
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/RedNode")
};
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/RedNode")
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  return node.cljs$core$IIndexed$_nth$arity$3(node, k, null)
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  return node.cljs$core$IIndexed$_nth$arity$3(node, k, not_found)
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  return cljs.core.assoc.call(null, cljs.core.PersistentVector.fromArray([self__.key, self__.val], true), k, v)
};
cljs.core.RedNode.prototype.call = function() {
  var G__4071 = null;
  var G__4071__2 = function(this_sym4069, k) {
    var self__ = this;
    var this_sym4069__$1 = this;
    var node = this_sym4069__$1;
    return node.cljs$core$ILookup$_lookup$arity$2(node, k)
  };
  var G__4071__3 = function(this_sym4070, k, not_found) {
    var self__ = this;
    var this_sym4070__$1 = this;
    var node = this_sym4070__$1;
    return node.cljs$core$ILookup$_lookup$arity$3(node, k, not_found)
  };
  G__4071 = function(this_sym4070, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__4071__2.call(this, this_sym4070, k);
      case 3:
        return G__4071__3.call(this, this_sym4070, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__4071
}();
cljs.core.RedNode.prototype.apply = function(this_sym4067, args4068) {
  var self__ = this;
  return this_sym4067.call.apply(this_sym4067, [this_sym4067].concat(args4068.slice()))
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  return cljs.core.PersistentVector.fromArray([self__.key, self__.val, o], true)
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  return self__.key
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  return self__.val
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null)
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null)
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null)
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init)
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null)
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null)
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, self__.left)) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null)
  }else {
    if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, self__.right)) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null)
    }else {
      if("\ufdd0'else") {
        return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null)
      }else {
        return null
      }
    }
  }
};
cljs.core.RedNode.prototype.toString = function() {
  var G__4072 = null;
  var G__4072__0 = function() {
    var self__ = this;
    var this$ = this;
    return cljs.core.pr_str.call(null, this$)
  };
  G__4072 = function() {
    switch(arguments.length) {
      case 0:
        return G__4072__0.call(this)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__4072
}();
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, self__.right)) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null)
  }else {
    if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, self__.left)) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null)
    }else {
      if("\ufdd0'else") {
        return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null)
      }else {
        return null
      }
    }
  }
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null)
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, node, f)
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, node, f, start)
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  return cljs.core.list.call(null, self__.key, self__.val)
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  return 2
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  return self__.val
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  return cljs.core.PersistentVector.fromArray([self__.key], true)
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  return cljs.core._assoc_n.call(null, cljs.core.PersistentVector.fromArray([self__.key, self__.val], true), n, v)
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.fromArray([self__.key, self__.val], true), meta)
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  return null
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  if(n === 0) {
    return self__.key
  }else {
    if(n === 1) {
      return self__.val
    }else {
      if("\ufdd0'else") {
        return null
      }else {
        return null
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  if(n === 0) {
    return self__.key
  }else {
    if(n === 1) {
      return self__.val
    }else {
      if("\ufdd0'else") {
        return not_found
      }else {
        return null
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  return cljs.core.PersistentVector.EMPTY
};
cljs.core.RedNode;
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if(tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null)
  }else {
    var c = comp.call(null, k, tree.key);
    if(c === 0) {
      found[0] = tree;
      return null
    }else {
      if(c < 0) {
        var ins = tree_map_add.call(null, comp, tree.left, k, v, found);
        if(!(ins == null)) {
          return tree.add_left(ins)
        }else {
          return null
        }
      }else {
        if("\ufdd0'else") {
          var ins = tree_map_add.call(null, comp, tree.right, k, v, found);
          if(!(ins == null)) {
            return tree.add_right(ins)
          }else {
            return null
          }
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if(left == null) {
    return right
  }else {
    if(right == null) {
      return left
    }else {
      if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, left)) {
        if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, right)) {
          var app = tree_map_append.call(null, left.right, right.left);
          if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, app)) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null)
          }else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null)
          }
        }else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append.call(null, left.right, right), null)
        }
      }else {
        if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, right)) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append.call(null, left, right.left), right.right, null)
        }else {
          if("\ufdd0'else") {
            var app = tree_map_append.call(null, left.right, right.left);
            if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, app)) {
              return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null)
            }else {
              return cljs.core.balance_left_del.call(null, left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null))
            }
          }else {
            return null
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if(!(tree == null)) {
    var c = comp.call(null, k, tree.key);
    if(c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append.call(null, tree.left, tree.right)
    }else {
      if(c < 0) {
        var del = tree_map_remove.call(null, comp, tree.left, k, found);
        if(function() {
          var or__3824__auto__ = !(del == null);
          if(or__3824__auto__) {
            return or__3824__auto__
          }else {
            return!(found[0] == null)
          }
        }()) {
          if(cljs.core.instance_QMARK_.call(null, cljs.core.BlackNode, tree.left)) {
            return cljs.core.balance_left_del.call(null, tree.key, tree.val, del, tree.right)
          }else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null)
          }
        }else {
          return null
        }
      }else {
        if("\ufdd0'else") {
          var del = tree_map_remove.call(null, comp, tree.right, k, found);
          if(function() {
            var or__3824__auto__ = !(del == null);
            if(or__3824__auto__) {
              return or__3824__auto__
            }else {
              return!(found[0] == null)
            }
          }()) {
            if(cljs.core.instance_QMARK_.call(null, cljs.core.BlackNode, tree.right)) {
              return cljs.core.balance_right_del.call(null, tree.key, tree.val, tree.left, del)
            }else {
              return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null)
            }
          }else {
            return null
          }
        }else {
          return null
        }
      }
    }
  }else {
    return null
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.call(null, k, tk);
  if(c === 0) {
    return tree.replace(tk, v, tree.left, tree.right)
  }else {
    if(c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace.call(null, comp, tree.left, k, v), tree.right)
    }else {
      if("\ufdd0'else") {
        return tree.replace(tk, tree.val, tree.left, tree_map_replace.call(null, comp, tree.right, k, v))
      }else {
        return null
      }
    }
  }
};
goog.provide("cljs.core.PersistentTreeMap");
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 418776847
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/PersistentTreeMap")
};
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/PersistentTreeMap")
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_imap.call(null, coll);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, null)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var n = coll.entry_at(k);
  if(!(n == null)) {
    return n.val
  }else {
    return not_found
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var found = [null];
  var t = cljs.core.tree_map_add.call(null, self__.comp, self__.tree, k, v, found);
  if(t == null) {
    var found_node = cljs.core.nth.call(null, found, 0);
    if(cljs.core._EQ_.call(null, v, found_node.val)) {
      return coll
    }else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace.call(null, self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null)
    }
  }else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null)
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  return!(coll.entry_at(k) == null)
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__4077 = null;
  var G__4077__2 = function(this_sym4075, k) {
    var self__ = this;
    var this_sym4075__$1 = this;
    var coll = this_sym4075__$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(coll, k)
  };
  var G__4077__3 = function(this_sym4076, k, not_found) {
    var self__ = this;
    var this_sym4076__$1 = this;
    var coll = this_sym4076__$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, not_found)
  };
  G__4077 = function(this_sym4076, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__4077__2.call(this, this_sym4076, k);
      case 3:
        return G__4077__3.call(this, this_sym4076, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__4077
}();
cljs.core.PersistentTreeMap.prototype.apply = function(this_sym4073, args4074) {
  var self__ = this;
  return this_sym4073.call.apply(this_sym4073, [this_sym4073].concat(args4074.slice()))
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  if(!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce.call(null, self__.tree, f, init)
  }else {
    return init
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  if(cljs.core.vector_QMARK_.call(null, entry)) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll, entry)
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  if(self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, false, self__.cnt)
  }else {
    return null
  }
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while(true) {
    if(!(t == null)) {
      var c = self__.comp.call(null, k, t.key);
      if(c === 0) {
        return t
      }else {
        if(c < 0) {
          var G__4078 = t.left;
          t = G__4078;
          continue
        }else {
          if("\ufdd0'else") {
            var G__4079 = t.right;
            t = G__4079;
            continue
          }else {
            return null
          }
        }
      }
    }else {
      return null
    }
    break
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  if(self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, ascending_QMARK_, self__.cnt)
  }else {
    return null
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  if(self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while(true) {
      if(!(t == null)) {
        var c = self__.comp.call(null, k, t.key);
        if(c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.call(null, stack, t), ascending_QMARK_, -1, null)
        }else {
          if(cljs.core.truth_(ascending_QMARK_)) {
            if(c < 0) {
              var G__4080 = cljs.core.conj.call(null, stack, t);
              var G__4081 = t.left;
              stack = G__4080;
              t = G__4081;
              continue
            }else {
              var G__4082 = stack;
              var G__4083 = t.right;
              stack = G__4082;
              t = G__4083;
              continue
            }
          }else {
            if("\ufdd0'else") {
              if(c > 0) {
                var G__4084 = cljs.core.conj.call(null, stack, t);
                var G__4085 = t.right;
                stack = G__4084;
                t = G__4085;
                continue
              }else {
                var G__4086 = stack;
                var G__4087 = t.left;
                stack = G__4086;
                t = G__4087;
                continue
              }
            }else {
              return null
            }
          }
        }
      }else {
        if(stack == null) {
          return null
        }else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null)
        }
      }
      break
    }
  }else {
    return null
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  return cljs.core.key.call(null, entry)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  return self__.comp
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  if(self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, true, self__.cnt)
  }else {
    return null
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return self__.cnt
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_map.call(null, coll, other)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeMap.EMPTY, self__.meta)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var found = [null];
  var t = cljs.core.tree_map_remove.call(null, self__.comp, self__.tree, k, found);
  if(t == null) {
    if(cljs.core.nth.call(null, found, 0) == null) {
      return coll
    }else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null)
    }
  }else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null)
  }
};
cljs.core.PersistentTreeMap;
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, 0);
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
    while(true) {
      if(in$) {
        var G__4088 = cljs.core.nnext.call(null, in$);
        var G__4089 = cljs.core.assoc_BANG_.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__4088;
        out = G__4089;
        continue
      }else {
        return cljs.core.persistent_BANG_.call(null, out)
      }
      break
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if(goog.isDef(var_args)) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return hash_map__delegate.call(this, keyvals)
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__4090) {
    var keyvals = cljs.core.seq(arglist__4090);
    return hash_map__delegate(keyvals)
  };
  hash_map.cljs$lang$arity$variadic = hash_map__delegate;
  return hash_map
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, cljs.core.count.call(null, keyvals), 2), cljs.core.apply.call(null, cljs.core.array, keyvals), null)
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if(goog.isDef(var_args)) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return array_map__delegate.call(this, keyvals)
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__4091) {
    var keyvals = cljs.core.seq(arglist__4091);
    return array_map__delegate(keyvals)
  };
  array_map.cljs$lang$arity$variadic = array_map__delegate;
  return array_map
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = {};
    var kvs = cljs.core.seq.call(null, keyvals);
    while(true) {
      if(kvs) {
        ks.push(cljs.core.first.call(null, kvs));
        obj[cljs.core.first.call(null, kvs)] = cljs.core.second.call(null, kvs);
        var G__4092 = cljs.core.nnext.call(null, kvs);
        kvs = G__4092;
        continue
      }else {
        return cljs.core.ObjMap.fromObject.call(null, ks, obj)
      }
      break
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if(goog.isDef(var_args)) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return obj_map__delegate.call(this, keyvals)
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__4093) {
    var keyvals = cljs.core.seq(arglist__4093);
    return obj_map__delegate(keyvals)
  };
  obj_map.cljs$lang$arity$variadic = obj_map__delegate;
  return obj_map
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while(true) {
      if(in$) {
        var G__4094 = cljs.core.nnext.call(null, in$);
        var G__4095 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__4094;
        out = G__4095;
        continue
      }else {
        return out
      }
      break
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if(goog.isDef(var_args)) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return sorted_map__delegate.call(this, keyvals)
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__4096) {
    var keyvals = cljs.core.seq(arglist__4096);
    return sorted_map__delegate(keyvals)
  };
  sorted_map.cljs$lang$arity$variadic = sorted_map__delegate;
  return sorted_map
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator.call(null, comparator), null, 0, null, 0);
    while(true) {
      if(in$) {
        var G__4097 = cljs.core.nnext.call(null, in$);
        var G__4098 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__4097;
        out = G__4098;
        continue
      }else {
        return out
      }
      break
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if(goog.isDef(var_args)) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals)
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__4099) {
    var comparator = cljs.core.first(arglist__4099);
    var keyvals = cljs.core.rest(arglist__4099);
    return sorted_map_by__delegate(comparator, keyvals)
  };
  sorted_map_by.cljs$lang$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by
}();
cljs.core.keys = function keys(hash_map) {
  return cljs.core.seq.call(null, cljs.core.map.call(null, cljs.core.first, hash_map))
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key.call(null, map_entry)
};
cljs.core.vals = function vals(hash_map) {
  return cljs.core.seq.call(null, cljs.core.map.call(null, cljs.core.second, hash_map))
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val.call(null, map_entry)
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if(cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      return cljs.core.reduce.call(null, function(p1__4100_SHARP_, p2__4101_SHARP_) {
        return cljs.core.conj.call(null, function() {
          var or__3824__auto__ = p1__4100_SHARP_;
          if(cljs.core.truth_(or__3824__auto__)) {
            return or__3824__auto__
          }else {
            return cljs.core.ObjMap.EMPTY
          }
        }(), p2__4101_SHARP_)
      }, maps)
    }else {
      return null
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if(goog.isDef(var_args)) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return merge__delegate.call(this, maps)
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__4102) {
    var maps = cljs.core.seq(arglist__4102);
    return merge__delegate(maps)
  };
  merge.cljs$lang$arity$variadic = merge__delegate;
  return merge
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if(cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first.call(null, e);
        var v = cljs.core.second.call(null, e);
        if(cljs.core.contains_QMARK_.call(null, m, k)) {
          return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core._lookup.call(null, m, k, null), v))
        }else {
          return cljs.core.assoc.call(null, m, k, v)
        }
      };
      var merge2 = function(m1, m2) {
        return cljs.core.reduce.call(null, merge_entry, function() {
          var or__3824__auto__ = m1;
          if(cljs.core.truth_(or__3824__auto__)) {
            return or__3824__auto__
          }else {
            return cljs.core.ObjMap.EMPTY
          }
        }(), cljs.core.seq.call(null, m2))
      };
      return cljs.core.reduce.call(null, merge2, maps)
    }else {
      return null
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if(goog.isDef(var_args)) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return merge_with__delegate.call(this, f, maps)
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__4103) {
    var f = cljs.core.first(arglist__4103);
    var maps = cljs.core.rest(arglist__4103);
    return merge_with__delegate(f, maps)
  };
  merge_with.cljs$lang$arity$variadic = merge_with__delegate;
  return merge_with
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.ObjMap.EMPTY;
  var keys = cljs.core.seq.call(null, keyseq);
  while(true) {
    if(keys) {
      var key = cljs.core.first.call(null, keys);
      var entry = cljs.core._lookup.call(null, map, key, "\ufdd0'cljs.core/not-found");
      var G__4104 = cljs.core.not_EQ_.call(null, entry, "\ufdd0'cljs.core/not-found") ? cljs.core.assoc.call(null, ret, key, entry) : ret;
      var G__4105 = cljs.core.next.call(null, keys);
      ret = G__4104;
      keys = G__4105;
      continue
    }else {
      return ret
    }
    break
  }
};
goog.provide("cljs.core.PersistentHashSet");
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 15077647
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/PersistentHashSet")
};
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/PersistentHashSet")
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  return new cljs.core.TransientHashSet(cljs.core.transient$.call(null, self__.hash_map))
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_iset.call(null, coll);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(coll, v, null)
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  if(cljs.core.truth_(cljs.core._contains_key_QMARK_.call(null, self__.hash_map, v))) {
    return v
  }else {
    return not_found
  }
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__4111 = null;
  var G__4111__2 = function(this_sym4109, k) {
    var self__ = this;
    var this_sym4109__$1 = this;
    var coll = this_sym4109__$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(coll, k)
  };
  var G__4111__3 = function(this_sym4110, k, not_found) {
    var self__ = this;
    var this_sym4110__$1 = this;
    var coll = this_sym4110__$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, not_found)
  };
  G__4111 = function(this_sym4110, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__4111__2.call(this, this_sym4110, k);
      case 3:
        return G__4111__3.call(this, this_sym4110, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__4111
}();
cljs.core.PersistentHashSet.prototype.apply = function(this_sym4107, args4108) {
  var self__ = this;
  return this_sym4107.call.apply(this_sym4107, [this_sym4107].concat(args4108.slice()))
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.call(null, self__.hash_map, o, null), null)
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.keys.call(null, self__.hash_map)
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.dissoc.call(null, self__.hash_map, v), null)
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.count.call(null, cljs.core.seq.call(null, coll))
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var and__3822__auto__ = cljs.core.set_QMARK_.call(null, other);
  if(and__3822__auto__) {
    var and__3822__auto____$1 = cljs.core.count.call(null, coll) === cljs.core.count.call(null, other);
    if(and__3822__auto____$1) {
      return cljs.core.every_QMARK_.call(null, function(p1__4106_SHARP_) {
        return cljs.core.contains_QMARK_.call(null, coll, p1__4106_SHARP_)
      }, other)
    }else {
      return and__3822__auto____$1
    }
  }else {
    return and__3822__auto__
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash)
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, self__.meta)
};
cljs.core.PersistentHashSet;
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.hash_map.call(null), 0);
cljs.core.PersistentHashSet.fromArray = function(items) {
  var len = cljs.core.count.call(null, items);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
  while(true) {
    if(i < len) {
      var G__4112 = i + 1;
      var G__4113 = cljs.core.conj_BANG_.call(null, out, items[i]);
      i = G__4112;
      out = G__4113;
      continue
    }else {
      return cljs.core.persistent_BANG_.call(null, out)
    }
    break
  }
};
goog.provide("cljs.core.TransientHashSet");
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/TransientHashSet")
};
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/TransientHashSet")
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__4119 = null;
  var G__4119__2 = function(this_sym4117, k) {
    var self__ = this;
    var this_sym4117__$1 = this;
    var tcoll = this_sym4117__$1;
    if(cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null
    }else {
      return k
    }
  };
  var G__4119__3 = function(this_sym4118, k, not_found) {
    var self__ = this;
    var this_sym4118__$1 = this;
    var tcoll = this_sym4118__$1;
    if(cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found
    }else {
      return k
    }
  };
  G__4119 = function(this_sym4118, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__4119__2.call(this, this_sym4118, k);
      case 3:
        return G__4119__3.call(this, this_sym4118, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__4119
}();
cljs.core.TransientHashSet.prototype.apply = function(this_sym4115, args4116) {
  var self__ = this;
  return this_sym4115.call.apply(this_sym4115, [this_sym4115].concat(args4116.slice()))
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  return tcoll.cljs$core$ILookup$_lookup$arity$3(tcoll, v, null)
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  if(cljs.core._lookup.call(null, self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found
  }else {
    return v
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  return cljs.core.count.call(null, self__.transient_map)
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  self__.transient_map = cljs.core.dissoc_BANG_.call(null, self__.transient_map, v);
  return tcoll
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  self__.transient_map = cljs.core.assoc_BANG_.call(null, self__.transient_map, o, null);
  return tcoll
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_.call(null, self__.transient_map), null)
};
cljs.core.TransientHashSet;
goog.provide("cljs.core.PersistentTreeSet");
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 417730831
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/PersistentTreeSet")
};
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/PersistentTreeSet")
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_iset.call(null, coll);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(coll, v, null)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var n = self__.tree_map.entry_at(v);
  if(!(n == null)) {
    return n.key
  }else {
    return not_found
  }
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__4124 = null;
  var G__4124__2 = function(this_sym4122, k) {
    var self__ = this;
    var this_sym4122__$1 = this;
    var coll = this_sym4122__$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(coll, k)
  };
  var G__4124__3 = function(this_sym4123, k, not_found) {
    var self__ = this;
    var this_sym4123__$1 = this;
    var coll = this_sym4123__$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, not_found)
  };
  G__4124 = function(this_sym4123, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__4124__2.call(this, this_sym4123, k);
      case 3:
        return G__4124__3.call(this, this_sym4123, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__4124
}();
cljs.core.PersistentTreeSet.prototype.apply = function(this_sym4120, args4121) {
  var self__ = this;
  return this_sym4120.call.apply(this_sym4120, [this_sym4120].concat(args4121.slice()))
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.call(null, self__.tree_map, o, null), null)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core.rseq.call(null, self__.tree_map))
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq.call(null, self__.tree_map, ascending_QMARK_))
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq_from.call(null, self__.tree_map, k, ascending_QMARK_))
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  return entry
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core._comparator.call(null, self__.tree_map)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.keys.call(null, self__.tree_map)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.call(null, self__.tree_map, v), null)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.count.call(null, self__.tree_map)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var and__3822__auto__ = cljs.core.set_QMARK_.call(null, other);
  if(and__3822__auto__) {
    var and__3822__auto____$1 = cljs.core.count.call(null, coll) === cljs.core.count.call(null, other);
    if(and__3822__auto____$1) {
      return cljs.core.every_QMARK_.call(null, function(p1__4114_SHARP_) {
        return cljs.core.contains_QMARK_.call(null, coll, p1__4114_SHARP_)
      }, other)
    }else {
      return and__3822__auto____$1
    }
  }else {
    return and__3822__auto__
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeSet.EMPTY, self__.meta)
};
cljs.core.PersistentTreeSet;
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map.call(null), 0);
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY
  };
  var hash_set__1 = function() {
    var G__4125__delegate = function(keys) {
      var in$ = cljs.core.seq.call(null, keys);
      var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
      while(true) {
        if(cljs.core.seq.call(null, in$)) {
          var G__4126 = cljs.core.next.call(null, in$);
          var G__4127 = cljs.core.conj_BANG_.call(null, out, cljs.core.first.call(null, in$));
          in$ = G__4126;
          out = G__4127;
          continue
        }else {
          return cljs.core.persistent_BANG_.call(null, out)
        }
        break
      }
    };
    var G__4125 = function(var_args) {
      var keys = null;
      if(goog.isDef(var_args)) {
        keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
      }
      return G__4125__delegate.call(this, keys)
    };
    G__4125.cljs$lang$maxFixedArity = 0;
    G__4125.cljs$lang$applyTo = function(arglist__4128) {
      var keys = cljs.core.seq(arglist__4128);
      return G__4125__delegate(keys)
    };
    G__4125.cljs$lang$arity$variadic = G__4125__delegate;
    return G__4125
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        return hash_set__1.cljs$lang$arity$variadic(cljs.core.array_seq(arguments, 0))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$lang$arity$0 = hash_set__0;
  hash_set.cljs$lang$arity$variadic = hash_set__1.cljs$lang$arity$variadic;
  return hash_set
}();
cljs.core.set = function set(coll) {
  return cljs.core.apply.call(null, cljs.core.hash_set, coll)
};
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys)
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if(goog.isDef(var_args)) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return sorted_set__delegate.call(this, keys)
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__4129) {
    var keys = cljs.core.seq(arglist__4129);
    return sorted_set__delegate(keys)
  };
  sorted_set.cljs$lang$arity$variadic = sorted_set__delegate;
  return sorted_set
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by.call(null, comparator), 0), keys)
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if(goog.isDef(var_args)) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return sorted_set_by__delegate.call(this, comparator, keys)
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__4131) {
    var comparator = cljs.core.first(arglist__4131);
    var keys = cljs.core.rest(arglist__4131);
    return sorted_set_by__delegate(comparator, keys)
  };
  sorted_set_by.cljs$lang$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by
}();
cljs.core.replace = function replace(smap, coll) {
  if(cljs.core.vector_QMARK_.call(null, coll)) {
    var n = cljs.core.count.call(null, coll);
    return cljs.core.reduce.call(null, function(v, i) {
      var temp__3971__auto__ = cljs.core.find.call(null, smap, cljs.core.nth.call(null, v, i));
      if(cljs.core.truth_(temp__3971__auto__)) {
        var e = temp__3971__auto__;
        return cljs.core.assoc.call(null, v, i, cljs.core.second.call(null, e))
      }else {
        return v
      }
    }, coll, cljs.core.take.call(null, n, cljs.core.iterate.call(null, cljs.core.inc, 0)))
  }else {
    return cljs.core.map.call(null, function(p1__4130_SHARP_) {
      var temp__3971__auto__ = cljs.core.find.call(null, smap, p1__4130_SHARP_);
      if(cljs.core.truth_(temp__3971__auto__)) {
        var e = temp__3971__auto__;
        return cljs.core.second.call(null, e)
      }else {
        return p1__4130_SHARP_
      }
    }, coll)
  }
};
cljs.core.distinct = function distinct(coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, false, function() {
      return function(p__4138, seen__$1) {
        while(true) {
          var vec__4139 = p__4138;
          var f = cljs.core.nth.call(null, vec__4139, 0, null);
          var xs__$1 = vec__4139;
          var temp__3974__auto__ = cljs.core.seq.call(null, xs__$1);
          if(temp__3974__auto__) {
            var s = temp__3974__auto__;
            if(cljs.core.contains_QMARK_.call(null, seen__$1, f)) {
              var G__4140 = cljs.core.rest.call(null, s);
              var G__4141 = seen__$1;
              p__4138 = G__4140;
              seen__$1 = G__4141;
              continue
            }else {
              return cljs.core.cons.call(null, f, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, f)))
            }
          }else {
            return null
          }
          break
        }
      }.call(null, xs, seen)
    }, null)
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY)
};
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while(true) {
    if(cljs.core.next.call(null, s__$1)) {
      var G__4142 = cljs.core.conj.call(null, ret, cljs.core.first.call(null, s__$1));
      var G__4143 = cljs.core.next.call(null, s__$1);
      ret = G__4142;
      s__$1 = G__4143;
      continue
    }else {
      return cljs.core.seq.call(null, ret)
    }
    break
  }
};
cljs.core.name = function name(x) {
  if(cljs.core.string_QMARK_.call(null, x)) {
    return x
  }else {
    if(function() {
      var or__3824__auto__ = cljs.core.keyword_QMARK_.call(null, x);
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        return cljs.core.symbol_QMARK_.call(null, x)
      }
    }()) {
      var i = x.lastIndexOf("/");
      if(i < 0) {
        return cljs.core.subs.call(null, x, 2)
      }else {
        return cljs.core.subs.call(null, x, i + 1)
      }
    }else {
      if("\ufdd0'else") {
        throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
      }else {
        return null
      }
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if(function() {
    var or__3824__auto__ = cljs.core.keyword_QMARK_.call(null, x);
    if(or__3824__auto__) {
      return or__3824__auto__
    }else {
      return cljs.core.symbol_QMARK_.call(null, x)
    }
  }()) {
    var i = x.lastIndexOf("/");
    if(i > -1) {
      return cljs.core.subs.call(null, x, 2, i)
    }else {
      return null
    }
  }else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.ObjMap.EMPTY;
  var ks = cljs.core.seq.call(null, keys);
  var vs = cljs.core.seq.call(null, vals);
  while(true) {
    if(function() {
      var and__3822__auto__ = ks;
      if(and__3822__auto__) {
        return vs
      }else {
        return and__3822__auto__
      }
    }()) {
      var G__4146 = cljs.core.assoc.call(null, map, cljs.core.first.call(null, ks), cljs.core.first.call(null, vs));
      var G__4147 = cljs.core.next.call(null, ks);
      var G__4148 = cljs.core.next.call(null, vs);
      map = G__4146;
      ks = G__4147;
      vs = G__4148;
      continue
    }else {
      return map
    }
    break
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x
  };
  var max_key__3 = function(k, x, y) {
    if(k.call(null, x) > k.call(null, y)) {
      return x
    }else {
      return y
    }
  };
  var max_key__4 = function() {
    var G__4151__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__4144_SHARP_, p2__4145_SHARP_) {
        return max_key.call(null, k, p1__4144_SHARP_, p2__4145_SHARP_)
      }, max_key.call(null, k, x, y), more)
    };
    var G__4151 = function(k, x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__4151__delegate.call(this, k, x, y, more)
    };
    G__4151.cljs$lang$maxFixedArity = 3;
    G__4151.cljs$lang$applyTo = function(arglist__4152) {
      var k = cljs.core.first(arglist__4152);
      var x = cljs.core.first(cljs.core.next(arglist__4152));
      var y = cljs.core.first(cljs.core.next(cljs.core.next(arglist__4152)));
      var more = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__4152)));
      return G__4151__delegate(k, x, y, more)
    };
    G__4151.cljs$lang$arity$variadic = G__4151__delegate;
    return G__4151
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        return max_key__4.cljs$lang$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$lang$arity$2 = max_key__2;
  max_key.cljs$lang$arity$3 = max_key__3;
  max_key.cljs$lang$arity$variadic = max_key__4.cljs$lang$arity$variadic;
  return max_key
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x
  };
  var min_key__3 = function(k, x, y) {
    if(k.call(null, x) < k.call(null, y)) {
      return x
    }else {
      return y
    }
  };
  var min_key__4 = function() {
    var G__4153__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__4149_SHARP_, p2__4150_SHARP_) {
        return min_key.call(null, k, p1__4149_SHARP_, p2__4150_SHARP_)
      }, min_key.call(null, k, x, y), more)
    };
    var G__4153 = function(k, x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__4153__delegate.call(this, k, x, y, more)
    };
    G__4153.cljs$lang$maxFixedArity = 3;
    G__4153.cljs$lang$applyTo = function(arglist__4154) {
      var k = cljs.core.first(arglist__4154);
      var x = cljs.core.first(cljs.core.next(arglist__4154));
      var y = cljs.core.first(cljs.core.next(cljs.core.next(arglist__4154)));
      var more = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__4154)));
      return G__4153__delegate(k, x, y, more)
    };
    G__4153.cljs$lang$arity$variadic = G__4153__delegate;
    return G__4153
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        return min_key__4.cljs$lang$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$lang$arity$2 = min_key__2;
  min_key.cljs$lang$arity$3 = min_key__3;
  min_key.cljs$lang$arity$variadic = min_key__4.cljs$lang$arity$variadic;
  return min_key
}();
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__2 = function(n, coll) {
    return partition_all.call(null, n, n, coll)
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, false, function() {
      var temp__3974__auto__ = cljs.core.seq.call(null, coll);
      if(temp__3974__auto__) {
        var s = temp__3974__auto__;
        return cljs.core.cons.call(null, cljs.core.take.call(null, n, s), partition_all.call(null, n, step, cljs.core.drop.call(null, step, s)))
      }else {
        return null
      }
    }, null)
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$lang$arity$2 = partition_all__2;
  partition_all.cljs$lang$arity$3 = partition_all__3;
  return partition_all
}();
cljs.core.take_while = function take_while(pred, coll) {
  return new cljs.core.LazySeq(null, false, function() {
    var temp__3974__auto__ = cljs.core.seq.call(null, coll);
    if(temp__3974__auto__) {
      var s = temp__3974__auto__;
      if(cljs.core.truth_(pred.call(null, cljs.core.first.call(null, s)))) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_while.call(null, pred, cljs.core.rest.call(null, s)))
      }else {
        return null
      }
    }else {
      return null
    }
  }, null)
};
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator.call(null, sc);
    return test.call(null, comp.call(null, cljs.core._entry_key.call(null, sc, e), key), 0)
  }
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if(cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_]).call(null, test))) {
      var temp__3974__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, true);
      if(cljs.core.truth_(temp__3974__auto__)) {
        var vec__4157 = temp__3974__auto__;
        var e = cljs.core.nth.call(null, vec__4157, 0, null);
        var s = vec__4157;
        if(cljs.core.truth_(include.call(null, e))) {
          return s
        }else {
          return cljs.core.next.call(null, s)
        }
      }else {
        return null
      }
    }else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, true))
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__3974__auto__ = cljs.core._sorted_seq_from.call(null, sc, start_key, true);
    if(cljs.core.truth_(temp__3974__auto__)) {
      var vec__4158 = temp__3974__auto__;
      var e = cljs.core.nth.call(null, vec__4158, 0, null);
      var s = vec__4158;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, start_test, start_key).call(null, e)) ? s : cljs.core.next.call(null, s))
    }else {
      return null
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$lang$arity$3 = subseq__3;
  subseq.cljs$lang$arity$5 = subseq__5;
  return subseq
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if(cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_]).call(null, test))) {
      var temp__3974__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, false);
      if(cljs.core.truth_(temp__3974__auto__)) {
        var vec__4161 = temp__3974__auto__;
        var e = cljs.core.nth.call(null, vec__4161, 0, null);
        var s = vec__4161;
        if(cljs.core.truth_(include.call(null, e))) {
          return s
        }else {
          return cljs.core.next.call(null, s)
        }
      }else {
        return null
      }
    }else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, false))
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__3974__auto__ = cljs.core._sorted_seq_from.call(null, sc, end_key, false);
    if(cljs.core.truth_(temp__3974__auto__)) {
      var vec__4162 = temp__3974__auto__;
      var e = cljs.core.nth.call(null, vec__4162, 0, null);
      var s = vec__4162;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, end_test, end_key).call(null, e)) ? s : cljs.core.next.call(null, s))
    }else {
      return null
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$lang$arity$3 = rsubseq__3;
  rsubseq.cljs$lang$arity$5 = rsubseq__5;
  return rsubseq
}();
goog.provide("cljs.core.Range");
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32375006
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/Range")
};
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/Range")
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_coll.call(null, rng);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  if(self__.step > 0) {
    if(self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null)
    }else {
      return null
    }
  }else {
    if(self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null)
    }else {
      return null
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  return cljs.core.cons.call(null, o, rng)
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, rng, f)
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, s) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, rng, f, s)
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  if(self__.step > 0) {
    if(self__.start < self__.end) {
      return rng
    }else {
      return null
    }
  }else {
    if(self__.start > self__.end) {
      return rng
    }else {
      return null
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  if(cljs.core.not.call(null, rng.cljs$core$ISeqable$_seq$arity$1(rng))) {
    return 0
  }else {
    return Math.ceil((self__.end - self__.start) / self__.step)
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  return self__.start
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  if(!(rng.cljs$core$ISeqable$_seq$arity$1(rng) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, rng, other)
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash)
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  return self__.meta
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  if(n < rng.cljs$core$ICounted$_count$arity$1(rng)) {
    return self__.start + n * self__.step
  }else {
    if(function() {
      var and__3822__auto__ = self__.start > self__.end;
      if(and__3822__auto__) {
        return self__.step === 0
      }else {
        return and__3822__auto__
      }
    }()) {
      return self__.start
    }else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  if(n < rng.cljs$core$ICounted$_count$arity$1(rng)) {
    return self__.start + n * self__.step
  }else {
    if(function() {
      var and__3822__auto__ = self__.start > self__.end;
      if(and__3822__auto__) {
        return self__.step === 0
      }else {
        return and__3822__auto__
      }
    }()) {
      return self__.start
    }else {
      return not_found
    }
  }
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.Range;
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.call(null, 0, Number.MAX_VALUE, 1)
  };
  var range__1 = function(end) {
    return range.call(null, 0, end, 1)
  };
  var range__2 = function(start, end) {
    return range.call(null, start, end, 1)
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null)
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$lang$arity$0 = range__0;
  range.cljs$lang$arity$1 = range__1;
  range.cljs$lang$arity$2 = range__2;
  range.cljs$lang$arity$3 = range__3;
  return range
}();
cljs.core.take_nth = function take_nth(n, coll) {
  return new cljs.core.LazySeq(null, false, function() {
    var temp__3974__auto__ = cljs.core.seq.call(null, coll);
    if(temp__3974__auto__) {
      var s = temp__3974__auto__;
      return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_nth.call(null, n, cljs.core.drop.call(null, n, s)))
    }else {
      return null
    }
  }, null)
};
cljs.core.split_with = function split_with(pred, coll) {
  return cljs.core.PersistentVector.fromArray([cljs.core.take_while.call(null, pred, coll), cljs.core.drop_while.call(null, pred, coll)], true)
};
cljs.core.partition_by = function partition_by(f, coll) {
  return new cljs.core.LazySeq(null, false, function() {
    var temp__3974__auto__ = cljs.core.seq.call(null, coll);
    if(temp__3974__auto__) {
      var s = temp__3974__auto__;
      var fst = cljs.core.first.call(null, s);
      var fv = f.call(null, fst);
      var run = cljs.core.cons.call(null, fst, cljs.core.take_while.call(null, function(p1__4163_SHARP_) {
        return cljs.core._EQ_.call(null, fv, f.call(null, p1__4163_SHARP_))
      }, cljs.core.next.call(null, s)));
      return cljs.core.cons.call(null, run, partition_by.call(null, f, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, run), s))))
    }else {
      return null
    }
  }, null)
};
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(counts, x) {
    return cljs.core.assoc_BANG_.call(null, counts, x, cljs.core._lookup.call(null, counts, x, 0) + 1)
  }, cljs.core.transient$.call(null, cljs.core.ObjMap.EMPTY), coll))
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, false, function() {
      var temp__3971__auto__ = cljs.core.seq.call(null, coll);
      if(temp__3971__auto__) {
        var s = temp__3971__auto__;
        return reductions.call(null, f, cljs.core.first.call(null, s), cljs.core.rest.call(null, s))
      }else {
        return cljs.core.list.call(null, f.call(null))
      }
    }, null)
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons.call(null, init, new cljs.core.LazySeq(null, false, function() {
      var temp__3974__auto__ = cljs.core.seq.call(null, coll);
      if(temp__3974__auto__) {
        var s = temp__3974__auto__;
        return reductions.call(null, f, f.call(null, init, cljs.core.first.call(null, s)), cljs.core.rest.call(null, s))
      }else {
        return null
      }
    }, null))
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$lang$arity$2 = reductions__2;
  reductions.cljs$lang$arity$3 = reductions__3;
  return reductions
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__4174 = null;
      var G__4174__0 = function() {
        return cljs.core.vector.call(null, f.call(null))
      };
      var G__4174__1 = function(x) {
        return cljs.core.vector.call(null, f.call(null, x))
      };
      var G__4174__2 = function(x, y) {
        return cljs.core.vector.call(null, f.call(null, x, y))
      };
      var G__4174__3 = function(x, y, z) {
        return cljs.core.vector.call(null, f.call(null, x, y, z))
      };
      var G__4174__4 = function() {
        var G__4175__delegate = function(x, y, z, args) {
          return cljs.core.vector.call(null, cljs.core.apply.call(null, f, x, y, z, args))
        };
        var G__4175 = function(x, y, z, var_args) {
          var args = null;
          if(goog.isDef(var_args)) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__4175__delegate.call(this, x, y, z, args)
        };
        G__4175.cljs$lang$maxFixedArity = 3;
        G__4175.cljs$lang$applyTo = function(arglist__4176) {
          var x = cljs.core.first(arglist__4176);
          var y = cljs.core.first(cljs.core.next(arglist__4176));
          var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__4176)));
          var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__4176)));
          return G__4175__delegate(x, y, z, args)
        };
        G__4175.cljs$lang$arity$variadic = G__4175__delegate;
        return G__4175
      }();
      G__4174 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__4174__0.call(this);
          case 1:
            return G__4174__1.call(this, x);
          case 2:
            return G__4174__2.call(this, x, y);
          case 3:
            return G__4174__3.call(this, x, y, z);
          default:
            return G__4174__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__4174.cljs$lang$maxFixedArity = 3;
      G__4174.cljs$lang$applyTo = G__4174__4.cljs$lang$applyTo;
      return G__4174
    }()
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__4177 = null;
      var G__4177__0 = function() {
        return cljs.core.vector.call(null, f.call(null), g.call(null))
      };
      var G__4177__1 = function(x) {
        return cljs.core.vector.call(null, f.call(null, x), g.call(null, x))
      };
      var G__4177__2 = function(x, y) {
        return cljs.core.vector.call(null, f.call(null, x, y), g.call(null, x, y))
      };
      var G__4177__3 = function(x, y, z) {
        return cljs.core.vector.call(null, f.call(null, x, y, z), g.call(null, x, y, z))
      };
      var G__4177__4 = function() {
        var G__4178__delegate = function(x, y, z, args) {
          return cljs.core.vector.call(null, cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args))
        };
        var G__4178 = function(x, y, z, var_args) {
          var args = null;
          if(goog.isDef(var_args)) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__4178__delegate.call(this, x, y, z, args)
        };
        G__4178.cljs$lang$maxFixedArity = 3;
        G__4178.cljs$lang$applyTo = function(arglist__4179) {
          var x = cljs.core.first(arglist__4179);
          var y = cljs.core.first(cljs.core.next(arglist__4179));
          var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__4179)));
          var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__4179)));
          return G__4178__delegate(x, y, z, args)
        };
        G__4178.cljs$lang$arity$variadic = G__4178__delegate;
        return G__4178
      }();
      G__4177 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__4177__0.call(this);
          case 1:
            return G__4177__1.call(this, x);
          case 2:
            return G__4177__2.call(this, x, y);
          case 3:
            return G__4177__3.call(this, x, y, z);
          default:
            return G__4177__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__4177.cljs$lang$maxFixedArity = 3;
      G__4177.cljs$lang$applyTo = G__4177__4.cljs$lang$applyTo;
      return G__4177
    }()
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__4180 = null;
      var G__4180__0 = function() {
        return cljs.core.vector.call(null, f.call(null), g.call(null), h.call(null))
      };
      var G__4180__1 = function(x) {
        return cljs.core.vector.call(null, f.call(null, x), g.call(null, x), h.call(null, x))
      };
      var G__4180__2 = function(x, y) {
        return cljs.core.vector.call(null, f.call(null, x, y), g.call(null, x, y), h.call(null, x, y))
      };
      var G__4180__3 = function(x, y, z) {
        return cljs.core.vector.call(null, f.call(null, x, y, z), g.call(null, x, y, z), h.call(null, x, y, z))
      };
      var G__4180__4 = function() {
        var G__4181__delegate = function(x, y, z, args) {
          return cljs.core.vector.call(null, cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args), cljs.core.apply.call(null, h, x, y, z, args))
        };
        var G__4181 = function(x, y, z, var_args) {
          var args = null;
          if(goog.isDef(var_args)) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__4181__delegate.call(this, x, y, z, args)
        };
        G__4181.cljs$lang$maxFixedArity = 3;
        G__4181.cljs$lang$applyTo = function(arglist__4182) {
          var x = cljs.core.first(arglist__4182);
          var y = cljs.core.first(cljs.core.next(arglist__4182));
          var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__4182)));
          var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__4182)));
          return G__4181__delegate(x, y, z, args)
        };
        G__4181.cljs$lang$arity$variadic = G__4181__delegate;
        return G__4181
      }();
      G__4180 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__4180__0.call(this);
          case 1:
            return G__4180__1.call(this, x);
          case 2:
            return G__4180__2.call(this, x, y);
          case 3:
            return G__4180__3.call(this, x, y, z);
          default:
            return G__4180__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__4180.cljs$lang$maxFixedArity = 3;
      G__4180.cljs$lang$applyTo = G__4180__4.cljs$lang$applyTo;
      return G__4180
    }()
  };
  var juxt__4 = function() {
    var G__4183__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.call(null, f, g, h, fs);
      return function() {
        var G__4184 = null;
        var G__4184__0 = function() {
          return cljs.core.reduce.call(null, function(p1__4164_SHARP_, p2__4165_SHARP_) {
            return cljs.core.conj.call(null, p1__4164_SHARP_, p2__4165_SHARP_.call(null))
          }, cljs.core.PersistentVector.EMPTY, fs__$1)
        };
        var G__4184__1 = function(x) {
          return cljs.core.reduce.call(null, function(p1__4166_SHARP_, p2__4167_SHARP_) {
            return cljs.core.conj.call(null, p1__4166_SHARP_, p2__4167_SHARP_.call(null, x))
          }, cljs.core.PersistentVector.EMPTY, fs__$1)
        };
        var G__4184__2 = function(x, y) {
          return cljs.core.reduce.call(null, function(p1__4168_SHARP_, p2__4169_SHARP_) {
            return cljs.core.conj.call(null, p1__4168_SHARP_, p2__4169_SHARP_.call(null, x, y))
          }, cljs.core.PersistentVector.EMPTY, fs__$1)
        };
        var G__4184__3 = function(x, y, z) {
          return cljs.core.reduce.call(null, function(p1__4170_SHARP_, p2__4171_SHARP_) {
            return cljs.core.conj.call(null, p1__4170_SHARP_, p2__4171_SHARP_.call(null, x, y, z))
          }, cljs.core.PersistentVector.EMPTY, fs__$1)
        };
        var G__4184__4 = function() {
          var G__4185__delegate = function(x, y, z, args) {
            return cljs.core.reduce.call(null, function(p1__4172_SHARP_, p2__4173_SHARP_) {
              return cljs.core.conj.call(null, p1__4172_SHARP_, cljs.core.apply.call(null, p2__4173_SHARP_, x, y, z, args))
            }, cljs.core.PersistentVector.EMPTY, fs__$1)
          };
          var G__4185 = function(x, y, z, var_args) {
            var args = null;
            if(goog.isDef(var_args)) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
            }
            return G__4185__delegate.call(this, x, y, z, args)
          };
          G__4185.cljs$lang$maxFixedArity = 3;
          G__4185.cljs$lang$applyTo = function(arglist__4186) {
            var x = cljs.core.first(arglist__4186);
            var y = cljs.core.first(cljs.core.next(arglist__4186));
            var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__4186)));
            var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__4186)));
            return G__4185__delegate(x, y, z, args)
          };
          G__4185.cljs$lang$arity$variadic = G__4185__delegate;
          return G__4185
        }();
        G__4184 = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return G__4184__0.call(this);
            case 1:
              return G__4184__1.call(this, x);
            case 2:
              return G__4184__2.call(this, x, y);
            case 3:
              return G__4184__3.call(this, x, y, z);
            default:
              return G__4184__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__4184.cljs$lang$maxFixedArity = 3;
        G__4184.cljs$lang$applyTo = G__4184__4.cljs$lang$applyTo;
        return G__4184
      }()
    };
    var G__4183 = function(f, g, h, var_args) {
      var fs = null;
      if(goog.isDef(var_args)) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__4183__delegate.call(this, f, g, h, fs)
    };
    G__4183.cljs$lang$maxFixedArity = 3;
    G__4183.cljs$lang$applyTo = function(arglist__4187) {
      var f = cljs.core.first(arglist__4187);
      var g = cljs.core.first(cljs.core.next(arglist__4187));
      var h = cljs.core.first(cljs.core.next(cljs.core.next(arglist__4187)));
      var fs = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__4187)));
      return G__4183__delegate(f, g, h, fs)
    };
    G__4183.cljs$lang$arity$variadic = G__4183__delegate;
    return G__4183
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        return juxt__4.cljs$lang$arity$variadic(f, g, h, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$lang$arity$1 = juxt__1;
  juxt.cljs$lang$arity$2 = juxt__2;
  juxt.cljs$lang$arity$3 = juxt__3;
  juxt.cljs$lang$arity$variadic = juxt__4.cljs$lang$arity$variadic;
  return juxt
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while(true) {
      if(cljs.core.seq.call(null, coll)) {
        var G__4188 = cljs.core.next.call(null, coll);
        coll = G__4188;
        continue
      }else {
        return null
      }
      break
    }
  };
  var dorun__2 = function(n, coll) {
    while(true) {
      if(cljs.core.truth_(function() {
        var and__3822__auto__ = cljs.core.seq.call(null, coll);
        if(and__3822__auto__) {
          return n > 0
        }else {
          return and__3822__auto__
        }
      }())) {
        var G__4189 = n - 1;
        var G__4190 = cljs.core.next.call(null, coll);
        n = G__4189;
        coll = G__4190;
        continue
      }else {
        return null
      }
      break
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$lang$arity$1 = dorun__1;
  dorun.cljs$lang$arity$2 = dorun__2;
  return dorun
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.call(null, coll);
    return coll
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.call(null, n, coll);
    return coll
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$lang$arity$1 = doall__1;
  doall.cljs$lang$arity$2 = doall__2;
  return doall
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp
};
cljs.core.re_matches = function re_matches(re, s) {
  var matches = re.exec(s);
  if(cljs.core._EQ_.call(null, cljs.core.first.call(null, matches), s)) {
    if(cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches)
    }else {
      return cljs.core.vec.call(null, matches)
    }
  }else {
    return null
  }
};
cljs.core.re_find = function re_find(re, s) {
  var matches = re.exec(s);
  if(matches == null) {
    return null
  }else {
    if(cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches)
    }else {
      return cljs.core.vec.call(null, matches)
    }
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find.call(null, re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_.call(null, match_data) ? cljs.core.first.call(null, match_data) : match_data;
  var post_match = cljs.core.subs.call(null, s, match_idx + cljs.core.count.call(null, match_str));
  if(cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, false, function() {
      return cljs.core.cons.call(null, match_data, re_seq.call(null, re, post_match))
    }, null)
  }else {
    return null
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  var vec__4193 = cljs.core.re_find.call(null, /^(?:\(\?([idmsux]*)\))?(.*)/, s);
  var _ = cljs.core.nth.call(null, vec__4193, 0, null);
  var flags = cljs.core.nth.call(null, vec__4193, 1, null);
  var pattern = cljs.core.nth.call(null, vec__4193, 2, null);
  return new RegExp(pattern, flags)
};
cljs.core.pr_sequential = function pr_sequential(print_one, begin, sep, end, opts, coll) {
  return cljs.core.concat.call(null, cljs.core.PersistentVector.fromArray([begin], true), cljs.core.flatten1.call(null, cljs.core.interpose.call(null, cljs.core.PersistentVector.fromArray([sep], true), cljs.core.map.call(null, function(p1__4191_SHARP_) {
    return print_one.call(null, p1__4191_SHARP_, opts)
  }, coll))), cljs.core.PersistentVector.fromArray([end], true))
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  cljs.core._write.call(null, writer, begin);
  if(cljs.core.seq.call(null, coll)) {
    print_one.call(null, cljs.core.first.call(null, coll), writer, opts)
  }else {
  }
  var G__4195 = cljs.core.seq.call(null, cljs.core.next.call(null, coll));
  while(true) {
    if(G__4195) {
      var o = cljs.core.first.call(null, G__4195);
      cljs.core._write.call(null, writer, sep);
      print_one.call(null, o, writer, opts);
      var G__4196 = cljs.core.next.call(null, G__4195);
      G__4195 = G__4196;
      continue
    }else {
    }
    break
  }
  return cljs.core._write.call(null, writer, end)
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var G__4198 = cljs.core.seq.call(null, ss);
    while(true) {
      if(G__4198) {
        var s = cljs.core.first.call(null, G__4198);
        cljs.core._write.call(null, writer, s);
        var G__4199 = cljs.core.next.call(null, G__4198);
        G__4198 = G__4199;
        continue
      }else {
        return null
      }
      break
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if(goog.isDef(var_args)) {
      ss = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return write_all__delegate.call(this, writer, ss)
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__4200) {
    var writer = cljs.core.first(arglist__4200);
    var ss = cljs.core.rest(arglist__4200);
    return write_all__delegate(writer, ss)
  };
  write_all.cljs$lang$arity$variadic = write_all__delegate;
  return write_all
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null
};
cljs.core.flush = function flush() {
  return null
};
goog.provide("cljs.core.StringBufferWriter");
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/StringBufferWriter")
};
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/StringBufferWriter")
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  return self__.sb.append(s)
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  return null
};
cljs.core.StringBufferWriter;
cljs.core.pr_seq = function pr_seq(obj, opts) {
  if(obj == null) {
    return cljs.core.list.call(null, "nil")
  }else {
    if(void 0 === obj) {
      return cljs.core.list.call(null, "#<undefined>")
    }else {
      if("\ufdd0'else") {
        return cljs.core.concat.call(null, cljs.core.truth_(function() {
          var and__3822__auto__ = cljs.core._lookup.call(null, opts, "\ufdd0'meta", null);
          if(cljs.core.truth_(and__3822__auto__)) {
            var and__3822__auto____$1 = function() {
              var G__4203 = obj;
              if(G__4203) {
                if(function() {
                  var or__3824__auto__ = G__4203.cljs$lang$protocol_mask$partition0$ & 131072;
                  if(or__3824__auto__) {
                    return or__3824__auto__
                  }else {
                    return G__4203.cljs$core$IMeta$
                  }
                }()) {
                  return true
                }else {
                  if(!G__4203.cljs$lang$protocol_mask$partition0$) {
                    return cljs.core.type_satisfies_.call(null, cljs.core.IMeta, G__4203)
                  }else {
                    return false
                  }
                }
              }else {
                return cljs.core.type_satisfies_.call(null, cljs.core.IMeta, G__4203)
              }
            }();
            if(cljs.core.truth_(and__3822__auto____$1)) {
              return cljs.core.meta.call(null, obj)
            }else {
              return and__3822__auto____$1
            }
          }else {
            return and__3822__auto__
          }
        }()) ? cljs.core.concat.call(null, cljs.core.PersistentVector.fromArray(["^"], true), pr_seq.call(null, cljs.core.meta.call(null, obj), opts), cljs.core.PersistentVector.fromArray([" "], true)) : null, function() {
          var and__3822__auto__ = !(obj == null);
          if(and__3822__auto__) {
            return obj.cljs$lang$type
          }else {
            return and__3822__auto__
          }
        }() ? obj.cljs$lang$ctorPrSeq(obj) : function() {
          var G__4204 = obj;
          if(G__4204) {
            if(function() {
              var or__3824__auto__ = G__4204.cljs$lang$protocol_mask$partition0$ & 536870912;
              if(or__3824__auto__) {
                return or__3824__auto__
              }else {
                return G__4204.cljs$core$IPrintable$
              }
            }()) {
              return true
            }else {
              if(!G__4204.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.type_satisfies_.call(null, cljs.core.IPrintable, G__4204)
              }else {
                return false
              }
            }
          }else {
            return cljs.core.type_satisfies_.call(null, cljs.core.IPrintable, G__4204)
          }
        }() ? cljs.core._pr_seq.call(null, obj, opts) : cljs.core.truth_(cljs.core.regexp_QMARK_.call(null, obj)) ? cljs.core.list.call(null, '#"', obj.source, '"') : "\ufdd0'else" ? cljs.core.list.call(null, "#<", [cljs.core.str(obj)].join(""), ">") : null)
      }else {
        return null
      }
    }
  }
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  if(obj == null) {
    return cljs.core._write.call(null, writer, "nil")
  }else {
    if(void 0 === obj) {
      return cljs.core._write.call(null, writer, "#<undefined>")
    }else {
      if("\ufdd0'else") {
        if(cljs.core.truth_(function() {
          var and__3822__auto__ = cljs.core._lookup.call(null, opts, "\ufdd0'meta", null);
          if(cljs.core.truth_(and__3822__auto__)) {
            var and__3822__auto____$1 = function() {
              var G__4208 = obj;
              if(G__4208) {
                if(function() {
                  var or__3824__auto__ = G__4208.cljs$lang$protocol_mask$partition0$ & 131072;
                  if(or__3824__auto__) {
                    return or__3824__auto__
                  }else {
                    return G__4208.cljs$core$IMeta$
                  }
                }()) {
                  return true
                }else {
                  if(!G__4208.cljs$lang$protocol_mask$partition0$) {
                    return cljs.core.type_satisfies_.call(null, cljs.core.IMeta, G__4208)
                  }else {
                    return false
                  }
                }
              }else {
                return cljs.core.type_satisfies_.call(null, cljs.core.IMeta, G__4208)
              }
            }();
            if(cljs.core.truth_(and__3822__auto____$1)) {
              return cljs.core.meta.call(null, obj)
            }else {
              return and__3822__auto____$1
            }
          }else {
            return and__3822__auto__
          }
        }())) {
          cljs.core._write.call(null, writer, "^");
          pr_writer.call(null, cljs.core.meta.call(null, obj), writer, opts);
          cljs.core._write.call(null, writer, " ")
        }else {
        }
        if(function() {
          var and__3822__auto__ = !(obj == null);
          if(and__3822__auto__) {
            return obj.cljs$lang$type
          }else {
            return and__3822__auto__
          }
        }()) {
          return obj.cljs$lang$ctorPrWriter(writer, opts)
        }else {
          if(function() {
            var G__4209 = obj;
            if(G__4209) {
              if(function() {
                var or__3824__auto__ = G__4209.cljs$lang$protocol_mask$partition0$ & 2147483648;
                if(or__3824__auto__) {
                  return or__3824__auto__
                }else {
                  return G__4209.cljs$core$IPrintWithWriter$
                }
              }()) {
                return true
              }else {
                if(!G__4209.cljs$lang$protocol_mask$partition0$) {
                  return cljs.core.type_satisfies_.call(null, cljs.core.IPrintWithWriter, G__4209)
                }else {
                  return false
                }
              }
            }else {
              return cljs.core.type_satisfies_.call(null, cljs.core.IPrintWithWriter, G__4209)
            }
          }()) {
            return cljs.core._pr_writer.call(null, obj, writer, opts)
          }else {
            if(function() {
              var G__4210 = obj;
              if(G__4210) {
                if(function() {
                  var or__3824__auto__ = G__4210.cljs$lang$protocol_mask$partition0$ & 536870912;
                  if(or__3824__auto__) {
                    return or__3824__auto__
                  }else {
                    return G__4210.cljs$core$IPrintable$
                  }
                }()) {
                  return true
                }else {
                  if(!G__4210.cljs$lang$protocol_mask$partition0$) {
                    return cljs.core.type_satisfies_.call(null, cljs.core.IPrintable, G__4210)
                  }else {
                    return false
                  }
                }
              }else {
                return cljs.core.type_satisfies_.call(null, cljs.core.IPrintable, G__4210)
              }
            }()) {
              return cljs.core.apply.call(null, cljs.core.write_all, writer, cljs.core._pr_seq.call(null, obj, opts))
            }else {
              if(cljs.core.truth_(cljs.core.regexp_QMARK_.call(null, obj))) {
                return cljs.core.write_all.call(null, writer, '#"', obj.source, '"')
              }else {
                if("\ufdd0'else") {
                  return cljs.core.write_all.call(null, writer, "#<", [cljs.core.str(obj)].join(""), ">")
                }else {
                  return null
                }
              }
            }
          }
        }
      }else {
        return null
      }
    }
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer.call(null, cljs.core.first.call(null, objs), writer, opts);
  var G__4212 = cljs.core.seq.call(null, cljs.core.next.call(null, objs));
  while(true) {
    if(G__4212) {
      var obj = cljs.core.first.call(null, G__4212);
      cljs.core._write.call(null, writer, " ");
      cljs.core.pr_writer.call(null, obj, writer, opts);
      var G__4213 = cljs.core.next.call(null, G__4212);
      G__4212 = G__4213;
      continue
    }else {
      return null
    }
    break
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer.call(null, objs, writer, opts);
  cljs.core._flush.call(null, writer);
  return sb
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if(cljs.core.empty_QMARK_.call(null, objs)) {
    return""
  }else {
    return[cljs.core.str(cljs.core.pr_sb_with_opts.call(null, objs, opts))].join("")
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if(cljs.core.empty_QMARK_.call(null, objs)) {
    return"\n"
  }else {
    var sb = cljs.core.pr_sb_with_opts.call(null, objs, opts);
    sb.append("\n");
    return[cljs.core.str(sb)].join("")
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print.call(null, cljs.core.pr_str_with_opts.call(null, objs, opts))
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print.call(null, "\n");
  if(cljs.core.truth_(cljs.core._lookup.call(null, opts, "\ufdd0'flush-on-newline", null))) {
    return cljs.core.flush.call(null)
  }else {
    return null
  }
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core.pr_opts = function pr_opts() {
  return cljs.core.ObjMap.fromObject(["\ufdd0'flush-on-newline", "\ufdd0'readably", "\ufdd0'meta", "\ufdd0'dup"], {"\ufdd0'flush-on-newline":cljs.core._STAR_flush_on_newline_STAR_, "\ufdd0'readably":cljs.core._STAR_print_readably_STAR_, "\ufdd0'meta":cljs.core._STAR_print_meta_STAR_, "\ufdd0'dup":cljs.core._STAR_print_dup_STAR_})
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null))
  };
  var pr_str = function(var_args) {
    var objs = null;
    if(goog.isDef(var_args)) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return pr_str__delegate.call(this, objs)
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__4214) {
    var objs = cljs.core.seq(arglist__4214);
    return pr_str__delegate(objs)
  };
  pr_str.cljs$lang$arity$variadic = pr_str__delegate;
  return pr_str
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null))
  };
  var prn_str = function(var_args) {
    var objs = null;
    if(goog.isDef(var_args)) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return prn_str__delegate.call(this, objs)
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__4215) {
    var objs = cljs.core.seq(arglist__4215);
    return prn_str__delegate(objs)
  };
  prn_str.cljs$lang$arity$variadic = prn_str__delegate;
  return prn_str
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null))
  };
  var pr = function(var_args) {
    var objs = null;
    if(goog.isDef(var_args)) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return pr__delegate.call(this, objs)
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__4216) {
    var objs = cljs.core.seq(arglist__4216);
    return pr__delegate(objs)
  };
  pr.cljs$lang$arity$variadic = pr__delegate;
  return pr
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), "\ufdd0'readably", false))
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if(goog.isDef(var_args)) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return cljs_core_print__delegate.call(this, objs)
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__4217) {
    var objs = cljs.core.seq(arglist__4217);
    return cljs_core_print__delegate(objs)
  };
  cljs_core_print.cljs$lang$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), "\ufdd0'readably", false))
  };
  var print_str = function(var_args) {
    var objs = null;
    if(goog.isDef(var_args)) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return print_str__delegate.call(this, objs)
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__4218) {
    var objs = cljs.core.seq(arglist__4218);
    return print_str__delegate(objs)
  };
  print_str.cljs$lang$arity$variadic = print_str__delegate;
  return print_str
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), "\ufdd0'readably", false));
    return cljs.core.newline.call(null, cljs.core.pr_opts.call(null))
  };
  var println = function(var_args) {
    var objs = null;
    if(goog.isDef(var_args)) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return println__delegate.call(this, objs)
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__4219) {
    var objs = cljs.core.seq(arglist__4219);
    return println__delegate(objs)
  };
  println.cljs$lang$arity$variadic = println__delegate;
  return println
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), "\ufdd0'readably", false))
  };
  var println_str = function(var_args) {
    var objs = null;
    if(goog.isDef(var_args)) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return println_str__delegate.call(this, objs)
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__4220) {
    var objs = cljs.core.seq(arglist__4220);
    return println_str__delegate(objs)
  };
  println_str.cljs$lang$arity$variadic = println_str__delegate;
  return println_str
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
    return cljs.core.newline.call(null, cljs.core.pr_opts.call(null))
  };
  var prn = function(var_args) {
    var objs = null;
    if(goog.isDef(var_args)) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return prn__delegate.call(this, objs)
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__4221) {
    var objs = cljs.core.seq(arglist__4221);
    return prn__delegate(objs)
  };
  prn.cljs$lang$arity$variadic = prn__delegate;
  return prn
}();
cljs.core.printf = function() {
  var printf__delegate = function(fmt, args) {
    return cljs.core.print.call(null, cljs.core.apply.call(null, cljs.core.format, fmt, args))
  };
  var printf = function(fmt, var_args) {
    var args = null;
    if(goog.isDef(var_args)) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return printf__delegate.call(this, fmt, args)
  };
  printf.cljs$lang$maxFixedArity = 1;
  printf.cljs$lang$applyTo = function(arglist__4222) {
    var fmt = cljs.core.first(arglist__4222);
    var args = cljs.core.rest(arglist__4222);
    return printf__delegate(fmt, args)
  };
  printf.cljs$lang$arity$variadic = printf__delegate;
  return printf
}();
cljs.core.HashMap.prototype.cljs$core$IPrintable$ = true;
cljs.core.HashMap.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential.call(null, pr_pair, "{", ", ", "}", opts, coll)
};
cljs.core.IPrintable["number"] = true;
cljs.core._pr_seq["number"] = function(n, opts) {
  return cljs.core.list.call(null, [cljs.core.str(n)].join(""))
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "(", " ", ")", opts, coll)
};
cljs.core.Subvec.prototype.cljs$core$IPrintable$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "[", " ", "]", opts, coll)
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintable$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "(", " ", ")", opts, coll)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintable$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential.call(null, pr_pair, "{", ", ", "}", opts, coll)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential.call(null, pr_pair, "{", ", ", "}", opts, coll)
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintable$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll))
};
cljs.core.LazySeq.prototype.cljs$core$IPrintable$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "(", " ", ")", opts, coll)
};
cljs.core.RSeq.prototype.cljs$core$IPrintable$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "(", " ", ")", opts, coll)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintable$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "#{", " ", "}", opts, coll)
};
cljs.core.IPrintable["boolean"] = true;
cljs.core._pr_seq["boolean"] = function(bool, opts) {
  return cljs.core.list.call(null, [cljs.core.str(bool)].join(""))
};
cljs.core.IPrintable["string"] = true;
cljs.core._pr_seq["string"] = function(obj, opts) {
  if(cljs.core.keyword_QMARK_.call(null, obj)) {
    return cljs.core.list.call(null, [cljs.core.str(":"), cljs.core.str(function() {
      var temp__3974__auto__ = cljs.core.namespace.call(null, obj);
      if(cljs.core.truth_(temp__3974__auto__)) {
        var nspc = temp__3974__auto__;
        return[cljs.core.str(nspc), cljs.core.str("/")].join("")
      }else {
        return null
      }
    }()), cljs.core.str(cljs.core.name.call(null, obj))].join(""))
  }else {
    if(cljs.core.symbol_QMARK_.call(null, obj)) {
      return cljs.core.list.call(null, [cljs.core.str(function() {
        var temp__3974__auto__ = cljs.core.namespace.call(null, obj);
        if(cljs.core.truth_(temp__3974__auto__)) {
          var nspc = temp__3974__auto__;
          return[cljs.core.str(nspc), cljs.core.str("/")].join("")
        }else {
          return null
        }
      }()), cljs.core.str(cljs.core.name.call(null, obj))].join(""))
    }else {
      if("\ufdd0'else") {
        return cljs.core.list.call(null, cljs.core.truth_((new cljs.core.Keyword("\ufdd0'readably")).call(null, opts)) ? goog.string.quote(obj) : obj)
      }else {
        return null
      }
    }
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintable$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "(", " ", ")", opts, coll)
};
cljs.core.RedNode.prototype.cljs$core$IPrintable$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "[", " ", "]", opts, coll)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintable$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "(", " ", ")", opts, coll)
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintable$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential.call(null, pr_pair, "{", ", ", "}", opts, coll)
};
cljs.core.Vector.prototype.cljs$core$IPrintable$ = true;
cljs.core.Vector.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "[", " ", "]", opts, coll)
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintable$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "#{", " ", "}", opts, coll)
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "[", " ", "]", opts, coll)
};
cljs.core.List.prototype.cljs$core$IPrintable$ = true;
cljs.core.List.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "(", " ", ")", opts, coll)
};
cljs.core.IPrintable["array"] = true;
cljs.core._pr_seq["array"] = function(a, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "#<Array [", ", ", "]>", opts, a)
};
cljs.core.IPrintable["function"] = true;
cljs.core._pr_seq["function"] = function(this$) {
  return cljs.core.list.call(null, "#<", [cljs.core.str(this$)].join(""), ">")
};
cljs.core.EmptyList.prototype.cljs$core$IPrintable$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.list.call(null, "()")
};
cljs.core.BlackNode.prototype.cljs$core$IPrintable$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "[", " ", "]", opts, coll)
};
Date.prototype.cljs$core$IPrintable$ = true;
Date.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(d, _) {
  var normalize = function(n, len) {
    var ns = [cljs.core.str(n)].join("");
    while(true) {
      if(cljs.core.count.call(null, ns) < len) {
        var G__4223 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
        ns = G__4223;
        continue
      }else {
        return ns
      }
      break
    }
  };
  return cljs.core.list.call(null, [cljs.core.str('#inst "'), cljs.core.str(d.getUTCFullYear()), cljs.core.str("-"), cljs.core.str(normalize.call(null, d.getUTCMonth() + 1, 2)), cljs.core.str("-"), cljs.core.str(normalize.call(null, d.getUTCDate(), 2)), cljs.core.str("T"), cljs.core.str(normalize.call(null, d.getUTCHours(), 2)), cljs.core.str(":"), cljs.core.str(normalize.call(null, d.getUTCMinutes(), 2)), cljs.core.str(":"), cljs.core.str(normalize.call(null, d.getUTCSeconds(), 2)), cljs.core.str("."), 
  cljs.core.str(normalize.call(null, d.getUTCMilliseconds(), 3)), cljs.core.str("-"), cljs.core.str('00:00"')].join(""))
};
cljs.core.Cons.prototype.cljs$core$IPrintable$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "(", " ", ")", opts, coll)
};
cljs.core.Range.prototype.cljs$core$IPrintable$ = true;
cljs.core.Range.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "(", " ", ")", opts, coll)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintable$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "(", " ", ")", opts, coll)
};
cljs.core.ObjMap.prototype.cljs$core$IPrintable$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential.call(null, pr_pair, "{", ", ", "}", opts, coll)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintable$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "(", " ", ")", opts, coll)
};
cljs.core.HashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.HashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll)
};
cljs.core.IPrintWithWriter["number"] = true;
cljs.core._pr_writer["number"] = function(n, writer, opts) {
  1 / 0;
  return cljs.core._write.call(null, writer, [cljs.core.str(n)].join(""))
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll)
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll)
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll))
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll)
};
cljs.core.IPrintWithWriter["boolean"] = true;
cljs.core._pr_writer["boolean"] = function(bool, writer, opts) {
  return cljs.core._write.call(null, writer, [cljs.core.str(bool)].join(""))
};
cljs.core.IPrintWithWriter["string"] = true;
cljs.core._pr_writer["string"] = function(obj, writer, opts) {
  if(cljs.core.keyword_QMARK_.call(null, obj)) {
    cljs.core._write.call(null, writer, ":");
    var temp__3974__auto__ = cljs.core.namespace.call(null, obj);
    if(cljs.core.truth_(temp__3974__auto__)) {
      var nspc = temp__3974__auto__;
      cljs.core.write_all.call(null, writer, [cljs.core.str(nspc)].join(""), "/")
    }else {
    }
    return cljs.core._write.call(null, writer, cljs.core.name.call(null, obj))
  }else {
    if(cljs.core.symbol_QMARK_.call(null, obj)) {
      var temp__3974__auto__ = cljs.core.namespace.call(null, obj);
      if(cljs.core.truth_(temp__3974__auto__)) {
        var nspc = temp__3974__auto__;
        cljs.core.write_all.call(null, writer, [cljs.core.str(nspc)].join(""), "/")
      }else {
      }
      return cljs.core._write.call(null, writer, cljs.core.name.call(null, obj))
    }else {
      if("\ufdd0'else") {
        if(cljs.core.truth_((new cljs.core.Keyword("\ufdd0'readably")).call(null, opts))) {
          return cljs.core._write.call(null, writer, goog.string.quote(obj))
        }else {
          return cljs.core._write.call(null, writer, obj)
        }
      }else {
        return null
      }
    }
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll)
};
cljs.core.Vector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Vector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll)
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll)
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll)
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.IPrintWithWriter["array"] = true;
cljs.core._pr_writer["array"] = function(a, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#<Array [", ", ", "]>", opts, a)
};
cljs.core.IPrintWithWriter["function"] = true;
cljs.core._pr_writer["function"] = function(this$, writer, _) {
  return cljs.core.write_all.call(null, writer, "#<", [cljs.core.str(this$)].join(""), ">")
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core._write.call(null, writer, "()")
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll)
};
Date.prototype.cljs$core$IPrintWithWriter$ = true;
Date.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(d, writer, _) {
  var normalize = function(n, len) {
    var ns = [cljs.core.str(n)].join("");
    while(true) {
      if(cljs.core.count.call(null, ns) < len) {
        var G__4224 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
        ns = G__4224;
        continue
      }else {
        return ns
      }
      break
    }
  };
  return cljs.core.write_all.call(null, writer, '#inst "', [cljs.core.str(d.getUTCFullYear())].join(""), "-", normalize.call(null, d.getUTCMonth() + 1, 2), "-", normalize.call(null, d.getUTCDate(), 2), "T", normalize.call(null, d.getUTCHours(), 2), ":", normalize.call(null, d.getUTCMinutes(), 2), ":", normalize.call(null, d.getUTCSeconds(), 2), ".", normalize.call(null, d.getUTCMilliseconds(), 3), "-", '00:00"')
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  return cljs.core.compare_indexed.call(null, x, y)
};
goog.provide("cljs.core.Atom");
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2690809856;
  this.cljs$lang$protocol_mask$partition1$ = 2
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/Atom")
};
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/Atom")
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  return goog.getUid(this$)
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var G__4225 = cljs.core.seq.call(null, self__.watches);
  while(true) {
    if(G__4225) {
      var vec__4226 = cljs.core.first.call(null, G__4225);
      var key = cljs.core.nth.call(null, vec__4226, 0, null);
      var f = cljs.core.nth.call(null, vec__4226, 1, null);
      f.call(null, key, this$, oldval, newval);
      var G__4227 = cljs.core.next.call(null, G__4225);
      G__4225 = G__4227;
      continue
    }else {
      return null
    }
    break
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  return this$.watches = cljs.core.assoc.call(null, self__.watches, key, f)
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  return this$.watches = cljs.core.dissoc.call(null, self__.watches, key)
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  cljs.core._write.call(null, writer, "#<Atom: ");
  cljs.core._pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, ">")
};
cljs.core.Atom.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(a, opts) {
  var self__ = this;
  return cljs.core.concat.call(null, cljs.core.PersistentVector.fromArray(["#<Atom: "], true), cljs.core._pr_seq.call(null, self__.state, opts), ">")
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  return self__.meta
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  return self__.state
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  return o === other
};
cljs.core.Atom;
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null)
  };
  var atom__2 = function() {
    var G__4231__delegate = function(x, p__4228) {
      var map__4230 = p__4228;
      var map__4230__$1 = cljs.core.seq_QMARK_.call(null, map__4230) ? cljs.core.apply.call(null, cljs.core.hash_map, map__4230) : map__4230;
      var validator = cljs.core._lookup.call(null, map__4230__$1, "\ufdd0'validator", null);
      var meta = cljs.core._lookup.call(null, map__4230__$1, "\ufdd0'meta", null);
      return new cljs.core.Atom(x, meta, validator, null)
    };
    var G__4231 = function(x, var_args) {
      var p__4228 = null;
      if(goog.isDef(var_args)) {
        p__4228 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
      }
      return G__4231__delegate.call(this, x, p__4228)
    };
    G__4231.cljs$lang$maxFixedArity = 1;
    G__4231.cljs$lang$applyTo = function(arglist__4232) {
      var x = cljs.core.first(arglist__4232);
      var p__4228 = cljs.core.rest(arglist__4232);
      return G__4231__delegate(x, p__4228)
    };
    G__4231.cljs$lang$arity$variadic = G__4231__delegate;
    return G__4231
  }();
  atom = function(x, var_args) {
    var p__4228 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$lang$arity$variadic(x, cljs.core.array_seq(arguments, 1))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$lang$arity$1 = atom__1;
  atom.cljs$lang$arity$variadic = atom__2.cljs$lang$arity$variadic;
  return atom
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  var temp__3974__auto__ = a.validator;
  if(cljs.core.truth_(temp__3974__auto__)) {
    var validate = temp__3974__auto__;
    if(cljs.core.truth_(validate.call(null, new_value))) {
    }else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'validate", "\ufdd1'new-value"), cljs.core.hash_map("\ufdd0'line", 6685))))].join(""));
    }
  }else {
  }
  var old_value = a.state;
  a.state = new_value;
  cljs.core._notify_watches.call(null, a, old_value, new_value);
  return new_value
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state))
  };
  var swap_BANG___3 = function(a, f, x) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x))
  };
  var swap_BANG___4 = function(a, f, x, y) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y))
  };
  var swap_BANG___5 = function(a, f, x, y, z) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y, z))
  };
  var swap_BANG___6 = function() {
    var G__4233__delegate = function(a, f, x, y, z, more) {
      return cljs.core.reset_BANG_.call(null, a, cljs.core.apply.call(null, f, a.state, x, y, z, more))
    };
    var G__4233 = function(a, f, x, y, z, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0)
      }
      return G__4233__delegate.call(this, a, f, x, y, z, more)
    };
    G__4233.cljs$lang$maxFixedArity = 5;
    G__4233.cljs$lang$applyTo = function(arglist__4234) {
      var a = cljs.core.first(arglist__4234);
      var f = cljs.core.first(cljs.core.next(arglist__4234));
      var x = cljs.core.first(cljs.core.next(cljs.core.next(arglist__4234)));
      var y = cljs.core.first(cljs.core.next(cljs.core.next(cljs.core.next(arglist__4234))));
      var z = cljs.core.first(cljs.core.next(cljs.core.next(cljs.core.next(cljs.core.next(arglist__4234)))));
      var more = cljs.core.rest(cljs.core.next(cljs.core.next(cljs.core.next(cljs.core.next(arglist__4234)))));
      return G__4233__delegate(a, f, x, y, z, more)
    };
    G__4233.cljs$lang$arity$variadic = G__4233__delegate;
    return G__4233
  }();
  swap_BANG_ = function(a, f, x, y, z, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      case 5:
        return swap_BANG___5.call(this, a, f, x, y, z);
      default:
        return swap_BANG___6.cljs$lang$arity$variadic(a, f, x, y, z, cljs.core.array_seq(arguments, 5))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 5;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___6.cljs$lang$applyTo;
  swap_BANG_.cljs$lang$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$lang$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$lang$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$lang$arity$5 = swap_BANG___5;
  swap_BANG_.cljs$lang$arity$variadic = swap_BANG___6.cljs$lang$arity$variadic;
  return swap_BANG_
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if(cljs.core._EQ_.call(null, a.state, oldval)) {
    cljs.core.reset_BANG_.call(null, a, newval);
    return true
  }else {
    return false
  }
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref.call(null, o)
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.call(null, f, iref.meta, args)
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if(goog.isDef(var_args)) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args)
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__4235) {
    var iref = cljs.core.first(arglist__4235);
    var f = cljs.core.first(cljs.core.next(arglist__4235));
    var args = cljs.core.rest(cljs.core.next(arglist__4235));
    return alter_meta_BANG___delegate(iref, f, args)
  };
  alter_meta_BANG_.cljs$lang$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  return cljs.core._add_watch.call(null, iref, key, f)
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  return cljs.core._remove_watch.call(null, iref, key)
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.call(null, "G__")
  };
  var gensym__1 = function(prefix_string) {
    if(cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = cljs.core.atom.call(null, 0)
    }else {
    }
    return cljs.core.symbol.call(null, [cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.call(null, cljs.core.gensym_counter, cljs.core.inc))].join(""))
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$lang$arity$0 = gensym__0;
  gensym.cljs$lang$arity$1 = gensym__1;
  return gensym
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
goog.provide("cljs.core.Delay");
cljs.core.Delay = function(state, f) {
  this.state = state;
  this.f = f;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/Delay")
};
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/Delay")
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  return(new cljs.core.Keyword("\ufdd0'done")).call(null, cljs.core.deref.call(null, self__.state))
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  return(new cljs.core.Keyword("\ufdd0'value")).call(null, cljs.core.swap_BANG_.call(null, self__.state, function(p__4236) {
    var map__4237 = p__4236;
    var map__4237__$1 = cljs.core.seq_QMARK_.call(null, map__4237) ? cljs.core.apply.call(null, cljs.core.hash_map, map__4237) : map__4237;
    var curr_state = map__4237__$1;
    var done = cljs.core._lookup.call(null, map__4237__$1, "\ufdd0'done", null);
    if(cljs.core.truth_(done)) {
      return curr_state
    }else {
      return cljs.core.ObjMap.fromObject(["\ufdd0'done", "\ufdd0'value"], {"\ufdd0'done":true, "\ufdd0'value":self__.f.call(null)})
    }
  }))
};
cljs.core.Delay;
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return cljs.core.instance_QMARK_.call(null, cljs.core.Delay, x)
};
cljs.core.force = function force(x) {
  if(cljs.core.delay_QMARK_.call(null, x)) {
    return cljs.core.deref.call(null, x)
  }else {
    return x
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_.call(null, d)
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj__delegate = function(x, options) {
    var map__4243 = options;
    var map__4243__$1 = cljs.core.seq_QMARK_.call(null, map__4243) ? cljs.core.apply.call(null, cljs.core.hash_map, map__4243) : map__4243;
    var keywordize_keys = cljs.core._lookup.call(null, map__4243__$1, "\ufdd0'keywordize-keys", null);
    var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
    var f = function thisfn(x__$1) {
      if(cljs.core.seq_QMARK_.call(null, x__$1)) {
        return cljs.core.doall.call(null, cljs.core.map.call(null, thisfn, x__$1))
      }else {
        if(cljs.core.coll_QMARK_.call(null, x__$1)) {
          return cljs.core.into.call(null, cljs.core.empty.call(null, x__$1), cljs.core.map.call(null, thisfn, x__$1))
        }else {
          if(cljs.core.truth_(goog.isArray(x__$1))) {
            return cljs.core.vec.call(null, cljs.core.map.call(null, thisfn, x__$1))
          }else {
            if(cljs.core.type.call(null, x__$1) === Object) {
              return cljs.core.into.call(null, cljs.core.ObjMap.EMPTY, function() {
                var iter__2470__auto__ = function iter__4246(s__4247) {
                  return new cljs.core.LazySeq(null, false, function() {
                    var s__4247__$1 = s__4247;
                    while(true) {
                      if(cljs.core.seq.call(null, s__4247__$1)) {
                        var k = cljs.core.first.call(null, s__4247__$1);
                        return cljs.core.cons.call(null, cljs.core.PersistentVector.fromArray([keyfn.call(null, k), thisfn.call(null, x__$1[k])], true), iter__4246.call(null, cljs.core.rest.call(null, s__4247__$1)))
                      }else {
                        return null
                      }
                      break
                    }
                  }, null)
                };
                return iter__2470__auto__.call(null, cljs.core.js_keys.call(null, x__$1))
              }())
            }else {
              if("\ufdd0'else") {
                return x__$1
              }else {
                return null
              }
            }
          }
        }
      }
    };
    return f.call(null, x)
  };
  var js__GT_clj = function(x, var_args) {
    var options = null;
    if(goog.isDef(var_args)) {
      options = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return js__GT_clj__delegate.call(this, x, options)
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = function(arglist__4248) {
    var x = cljs.core.first(arglist__4248);
    var options = cljs.core.rest(arglist__4248);
    return js__GT_clj__delegate(x, options)
  };
  js__GT_clj.cljs$lang$arity$variadic = js__GT_clj__delegate;
  return js__GT_clj
}();
cljs.core.memoize = function memoize(f) {
  var mem = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  return function() {
    var G__4249__delegate = function(args) {
      var temp__3971__auto__ = cljs.core._lookup.call(null, cljs.core.deref.call(null, mem), args, null);
      if(cljs.core.truth_(temp__3971__auto__)) {
        var v = temp__3971__auto__;
        return v
      }else {
        var ret = cljs.core.apply.call(null, f, args);
        cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, args, ret);
        return ret
      }
    };
    var G__4249 = function(var_args) {
      var args = null;
      if(goog.isDef(var_args)) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
      }
      return G__4249__delegate.call(this, args)
    };
    G__4249.cljs$lang$maxFixedArity = 0;
    G__4249.cljs$lang$applyTo = function(arglist__4250) {
      var args = cljs.core.seq(arglist__4250);
      return G__4249__delegate(args)
    };
    G__4249.cljs$lang$arity$variadic = G__4249__delegate;
    return G__4249
  }()
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while(true) {
      var ret = f.call(null);
      if(cljs.core.fn_QMARK_.call(null, ret)) {
        var G__4251 = ret;
        f = G__4251;
        continue
      }else {
        return ret
      }
      break
    }
  };
  var trampoline__2 = function() {
    var G__4252__delegate = function(f, args) {
      return trampoline.call(null, function() {
        return cljs.core.apply.call(null, f, args)
      })
    };
    var G__4252 = function(f, var_args) {
      var args = null;
      if(goog.isDef(var_args)) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
      }
      return G__4252__delegate.call(this, f, args)
    };
    G__4252.cljs$lang$maxFixedArity = 1;
    G__4252.cljs$lang$applyTo = function(arglist__4253) {
      var f = cljs.core.first(arglist__4253);
      var args = cljs.core.rest(arglist__4253);
      return G__4252__delegate(f, args)
    };
    G__4252.cljs$lang$arity$variadic = G__4252__delegate;
    return G__4252
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        return trampoline__2.cljs$lang$arity$variadic(f, cljs.core.array_seq(arguments, 1))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$lang$arity$1 = trampoline__1;
  trampoline.cljs$lang$arity$variadic = trampoline__2.cljs$lang$arity$variadic;
  return trampoline
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.call(null, 1)
  };
  var rand__1 = function(n) {
    return Math.random.call(null) * n
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$lang$arity$0 = rand__0;
  rand.cljs$lang$arity$1 = rand__1;
  return rand
}();
cljs.core.rand_int = function rand_int(n) {
  return Math.floor.call(null, Math.random.call(null) * n)
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.call(null, coll, cljs.core.rand_int.call(null, cljs.core.count.call(null, coll)))
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.reduce.call(null, function(ret, x) {
    var k = f.call(null, x);
    return cljs.core.assoc.call(null, ret, k, cljs.core.conj.call(null, cljs.core._lookup.call(null, ret, k, cljs.core.PersistentVector.EMPTY), x))
  }, cljs.core.ObjMap.EMPTY, coll)
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return cljs.core.ObjMap.fromObject(["\ufdd0'parents", "\ufdd0'descendants", "\ufdd0'ancestors"], {"\ufdd0'parents":cljs.core.ObjMap.EMPTY, "\ufdd0'descendants":cljs.core.ObjMap.EMPTY, "\ufdd0'ancestors":cljs.core.ObjMap.EMPTY})
};
cljs.core.global_hierarchy = cljs.core.atom.call(null, cljs.core.make_hierarchy.call(null));
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.call(null, cljs.core.deref.call(null, cljs.core.global_hierarchy), child, parent)
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__3824__auto__ = cljs.core._EQ_.call(null, child, parent);
    if(or__3824__auto__) {
      return or__3824__auto__
    }else {
      var or__3824__auto____$1 = cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword("\ufdd0'ancestors")).call(null, h).call(null, child), parent);
      if(or__3824__auto____$1) {
        return or__3824__auto____$1
      }else {
        var and__3822__auto__ = cljs.core.vector_QMARK_.call(null, parent);
        if(and__3822__auto__) {
          var and__3822__auto____$1 = cljs.core.vector_QMARK_.call(null, child);
          if(and__3822__auto____$1) {
            var and__3822__auto____$2 = cljs.core.count.call(null, parent) === cljs.core.count.call(null, child);
            if(and__3822__auto____$2) {
              var ret = true;
              var i = 0;
              while(true) {
                if(function() {
                  var or__3824__auto____$2 = cljs.core.not.call(null, ret);
                  if(or__3824__auto____$2) {
                    return or__3824__auto____$2
                  }else {
                    return i === cljs.core.count.call(null, parent)
                  }
                }()) {
                  return ret
                }else {
                  var G__4254 = isa_QMARK_.call(null, h, child.call(null, i), parent.call(null, i));
                  var G__4255 = i + 1;
                  ret = G__4254;
                  i = G__4255;
                  continue
                }
                break
              }
            }else {
              return and__3822__auto____$2
            }
          }else {
            return and__3822__auto____$1
          }
        }else {
          return and__3822__auto__
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$lang$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$lang$arity$3 = isa_QMARK___3;
  return isa_QMARK_
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.call(null, cljs.core.deref.call(null, cljs.core.global_hierarchy), tag)
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core._lookup.call(null, (new cljs.core.Keyword("\ufdd0'parents")).call(null, h), tag, null))
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$lang$arity$1 = parents__1;
  parents.cljs$lang$arity$2 = parents__2;
  return parents
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.call(null, cljs.core.deref.call(null, cljs.core.global_hierarchy), tag)
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core._lookup.call(null, (new cljs.core.Keyword("\ufdd0'ancestors")).call(null, h), tag, null))
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$lang$arity$1 = ancestors__1;
  ancestors.cljs$lang$arity$2 = ancestors__2;
  return ancestors
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.call(null, cljs.core.deref.call(null, cljs.core.global_hierarchy), tag)
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core._lookup.call(null, (new cljs.core.Keyword("\ufdd0'descendants")).call(null, h), tag, null))
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$lang$arity$1 = descendants__1;
  descendants.cljs$lang$arity$2 = descendants__2;
  return descendants
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if(cljs.core.truth_(cljs.core.namespace.call(null, parent))) {
    }else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'namespace", "\ufdd1'parent"), cljs.core.hash_map("\ufdd0'line", 6969))))].join(""));
    }
    cljs.core.swap_BANG_.call(null, cljs.core.global_hierarchy, derive, tag, parent);
    return null
  };
  var derive__3 = function(h, tag, parent) {
    if(cljs.core.not_EQ_.call(null, tag, parent)) {
    }else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'not=", "\ufdd1'tag", "\ufdd1'parent"), cljs.core.hash_map("\ufdd0'line", 6973))))].join(""));
    }
    var tp = (new cljs.core.Keyword("\ufdd0'parents")).call(null, h);
    var td = (new cljs.core.Keyword("\ufdd0'descendants")).call(null, h);
    var ta = (new cljs.core.Keyword("\ufdd0'ancestors")).call(null, h);
    var tf = function(m, source, sources, target, targets) {
      return cljs.core.reduce.call(null, function(ret, k) {
        return cljs.core.assoc.call(null, ret, k, cljs.core.reduce.call(null, cljs.core.conj, cljs.core._lookup.call(null, targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons.call(null, target, targets.call(null, target))))
      }, m, cljs.core.cons.call(null, source, sources.call(null, source)))
    };
    var or__3824__auto__ = cljs.core.contains_QMARK_.call(null, tp.call(null, tag), parent) ? null : function() {
      if(cljs.core.contains_QMARK_.call(null, ta.call(null, tag), parent)) {
        throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
      }else {
      }
      if(cljs.core.contains_QMARK_.call(null, ta.call(null, parent), tag)) {
        throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
      }else {
      }
      return cljs.core.ObjMap.fromObject(["\ufdd0'parents", "\ufdd0'ancestors", "\ufdd0'descendants"], {"\ufdd0'parents":cljs.core.assoc.call(null, (new cljs.core.Keyword("\ufdd0'parents")).call(null, h), tag, cljs.core.conj.call(null, cljs.core._lookup.call(null, tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), "\ufdd0'ancestors":tf.call(null, (new cljs.core.Keyword("\ufdd0'ancestors")).call(null, h), tag, td, parent, ta), "\ufdd0'descendants":tf.call(null, (new cljs.core.Keyword("\ufdd0'descendants")).call(null, 
      h), parent, ta, tag, td)})
    }();
    if(cljs.core.truth_(or__3824__auto__)) {
      return or__3824__auto__
    }else {
      return h
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$lang$arity$2 = derive__2;
  derive.cljs$lang$arity$3 = derive__3;
  return derive
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_BANG_.call(null, cljs.core.global_hierarchy, underive, tag, parent);
    return null
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword("\ufdd0'parents")).call(null, h);
    var childsParents = cljs.core.truth_(parentMap.call(null, tag)) ? cljs.core.disj.call(null, parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty.call(null, childsParents)) ? cljs.core.assoc.call(null, parentMap, tag, childsParents) : cljs.core.dissoc.call(null, parentMap, tag);
    var deriv_seq = cljs.core.flatten.call(null, cljs.core.map.call(null, function(p1__4256_SHARP_) {
      return cljs.core.cons.call(null, cljs.core.first.call(null, p1__4256_SHARP_), cljs.core.interpose.call(null, cljs.core.first.call(null, p1__4256_SHARP_), cljs.core.second.call(null, p1__4256_SHARP_)))
    }, cljs.core.seq.call(null, newParents)));
    if(cljs.core.contains_QMARK_.call(null, parentMap.call(null, tag), parent)) {
      return cljs.core.reduce.call(null, function(p1__4257_SHARP_, p2__4258_SHARP_) {
        return cljs.core.apply.call(null, cljs.core.derive, p1__4257_SHARP_, p2__4258_SHARP_)
      }, cljs.core.make_hierarchy.call(null), cljs.core.partition.call(null, 2, deriv_seq))
    }else {
      return h
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$lang$arity$2 = underive__2;
  underive.cljs$lang$arity$3 = underive__3;
  return underive
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.call(null, method_cache, function(_) {
    return cljs.core.deref.call(null, method_table)
  });
  return cljs.core.swap_BANG_.call(null, cached_hierarchy, function(_) {
    return cljs.core.deref.call(null, hierarchy)
  })
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = cljs.core.deref.call(null, prefer_table).call(null, x);
  var or__3824__auto__ = cljs.core.truth_(function() {
    var and__3822__auto__ = xprefs;
    if(cljs.core.truth_(and__3822__auto__)) {
      return xprefs.call(null, y)
    }else {
      return and__3822__auto__
    }
  }()) ? true : null;
  if(cljs.core.truth_(or__3824__auto__)) {
    return or__3824__auto__
  }else {
    var or__3824__auto____$1 = function() {
      var ps = cljs.core.parents.call(null, y);
      while(true) {
        if(cljs.core.count.call(null, ps) > 0) {
          if(cljs.core.truth_(prefers_STAR_.call(null, x, cljs.core.first.call(null, ps), prefer_table))) {
          }else {
          }
          var G__4259 = cljs.core.rest.call(null, ps);
          ps = G__4259;
          continue
        }else {
          return null
        }
        break
      }
    }();
    if(cljs.core.truth_(or__3824__auto____$1)) {
      return or__3824__auto____$1
    }else {
      var or__3824__auto____$2 = function() {
        var ps = cljs.core.parents.call(null, x);
        while(true) {
          if(cljs.core.count.call(null, ps) > 0) {
            if(cljs.core.truth_(prefers_STAR_.call(null, cljs.core.first.call(null, ps), y, prefer_table))) {
            }else {
            }
            var G__4260 = cljs.core.rest.call(null, ps);
            ps = G__4260;
            continue
          }else {
            return null
          }
          break
        }
      }();
      if(cljs.core.truth_(or__3824__auto____$2)) {
        return or__3824__auto____$2
      }else {
        return false
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__3824__auto__ = cljs.core.prefers_STAR_.call(null, x, y, prefer_table);
  if(cljs.core.truth_(or__3824__auto__)) {
    return or__3824__auto__
  }else {
    return cljs.core.isa_QMARK_.call(null, x, y)
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.call(null, function(be, p__4263) {
    var vec__4264 = p__4263;
    var k = cljs.core.nth.call(null, vec__4264, 0, null);
    var _ = cljs.core.nth.call(null, vec__4264, 1, null);
    var e = vec__4264;
    if(cljs.core.isa_QMARK_.call(null, dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__3824__auto__ = be == null;
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          return cljs.core.dominates.call(null, k, cljs.core.first.call(null, be), prefer_table)
        }
      }()) ? e : be;
      if(cljs.core.truth_(cljs.core.dominates.call(null, cljs.core.first.call(null, be2), k, prefer_table))) {
      }else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -> "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first.call(null, be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2
    }else {
      return be
    }
  }, null, cljs.core.deref.call(null, method_table));
  if(cljs.core.truth_(best_entry)) {
    if(cljs.core._EQ_.call(null, cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.call(null, method_cache, cljs.core.assoc, dispatch_val, cljs.core.second.call(null, best_entry));
      return cljs.core.second.call(null, best_entry)
    }else {
      cljs.core.reset_cache.call(null, method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy)
    }
  }else {
    return null
  }
};
cljs.core.IMultiFn = {};
cljs.core._reset = function _reset(mf) {
  if(function() {
    var and__3822__auto__ = mf;
    if(and__3822__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf)
  }else {
    var x__2373__auto__ = mf == null ? null : mf;
    return function() {
      var or__3824__auto__ = cljs.core._reset[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._reset["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf)
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if(function() {
    var and__3822__auto__ = mf;
    if(and__3822__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method)
  }else {
    var x__2373__auto__ = mf == null ? null : mf;
    return function() {
      var or__3824__auto__ = cljs.core._add_method[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._add_method["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method)
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if(function() {
    var and__3822__auto__ = mf;
    if(and__3822__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val)
  }else {
    var x__2373__auto__ = mf == null ? null : mf;
    return function() {
      var or__3824__auto__ = cljs.core._remove_method[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._remove_method["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val)
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if(function() {
    var and__3822__auto__ = mf;
    if(and__3822__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y)
  }else {
    var x__2373__auto__ = mf == null ? null : mf;
    return function() {
      var or__3824__auto__ = cljs.core._prefer_method[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._prefer_method["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y)
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if(function() {
    var and__3822__auto__ = mf;
    if(and__3822__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val)
  }else {
    var x__2373__auto__ = mf == null ? null : mf;
    return function() {
      var or__3824__auto__ = cljs.core._get_method[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._get_method["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val)
  }
};
cljs.core._methods = function _methods(mf) {
  if(function() {
    var and__3822__auto__ = mf;
    if(and__3822__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf)
  }else {
    var x__2373__auto__ = mf == null ? null : mf;
    return function() {
      var or__3824__auto__ = cljs.core._methods[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._methods["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf)
  }
};
cljs.core._prefers = function _prefers(mf) {
  if(function() {
    var and__3822__auto__ = mf;
    if(and__3822__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf)
  }else {
    var x__2373__auto__ = mf == null ? null : mf;
    return function() {
      var or__3824__auto__ = cljs.core._prefers[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._prefers["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf)
  }
};
cljs.core._dispatch = function _dispatch(mf, args) {
  if(function() {
    var and__3822__auto__ = mf;
    if(and__3822__auto__) {
      return mf.cljs$core$IMultiFn$_dispatch$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_dispatch$arity$2(mf, args)
  }else {
    var x__2373__auto__ = mf == null ? null : mf;
    return function() {
      var or__3824__auto__ = cljs.core._dispatch[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._dispatch["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-dispatch", mf);
        }
      }
    }().call(null, mf, args)
  }
};
cljs.core.do_dispatch = function do_dispatch(mf, dispatch_fn, args) {
  var dispatch_val = cljs.core.apply.call(null, dispatch_fn, args);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if(cljs.core.truth_(target_fn)) {
  }else {
    throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(cljs.core.name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
  }
  return cljs.core.apply.call(null, target_fn, args)
};
goog.provide("cljs.core.MultiFn");
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194304;
  this.cljs$lang$protocol_mask$partition1$ = 256
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/MultiFn")
};
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/MultiFn")
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  return goog.getUid(this$)
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, function(mf__$1) {
    return cljs.core.ObjMap.EMPTY
  });
  cljs.core.swap_BANG_.call(null, self__.method_cache, function(mf__$1) {
    return cljs.core.ObjMap.EMPTY
  });
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$1) {
    return cljs.core.ObjMap.EMPTY
  });
  cljs.core.swap_BANG_.call(null, self__.cached_hierarchy, function(mf__$1) {
    return null
  });
  return mf
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  if(cljs.core._EQ_.call(null, cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.call(null, self__.hierarchy))) {
  }else {
    cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy)
  }
  var temp__3971__auto__ = cljs.core.deref.call(null, self__.method_cache).call(null, dispatch_val);
  if(cljs.core.truth_(temp__3971__auto__)) {
    var target_fn = temp__3971__auto__;
    return target_fn
  }else {
    var temp__3971__auto____$1 = cljs.core.find_and_cache_best_method.call(null, self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if(cljs.core.truth_(temp__3971__auto____$1)) {
      var target_fn = temp__3971__auto____$1;
      return target_fn
    }else {
      return cljs.core.deref.call(null, self__.method_table).call(null, self__.default_dispatch_val)
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  if(cljs.core.truth_(cljs.core.prefers_STAR_.call(null, dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  }else {
  }
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(old) {
    return cljs.core.assoc.call(null, old, dispatch_val_x, cljs.core.conj.call(null, cljs.core._lookup.call(null, old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y))
  });
  return cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy)
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  return cljs.core.deref.call(null, self__.method_table)
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  return cljs.core.deref.call(null, self__.prefer_table)
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch$arity$2 = function(mf, args) {
  var self__ = this;
  return cljs.core.do_dispatch.call(null, mf, self__.dispatch_fn, args)
};
cljs.core.MultiFn;
cljs.core.MultiFn.prototype.call = function() {
  var G__4265__delegate = function(_, args) {
    var self = this;
    return cljs.core._dispatch.call(null, self, args)
  };
  var G__4265 = function(_, var_args) {
    var args = null;
    if(goog.isDef(var_args)) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return G__4265__delegate.call(this, _, args)
  };
  G__4265.cljs$lang$maxFixedArity = 1;
  G__4265.cljs$lang$applyTo = function(arglist__4266) {
    var _ = cljs.core.first(arglist__4266);
    var args = cljs.core.rest(arglist__4266);
    return G__4265__delegate(_, args)
  };
  G__4265.cljs$lang$arity$variadic = G__4265__delegate;
  return G__4265
}();
cljs.core.MultiFn.prototype.apply = function(_, args) {
  var self = this;
  return cljs.core._dispatch.call(null, self, args)
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset.call(null, multifn)
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method.call(null, multifn, dispatch_val)
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method.call(null, multifn, dispatch_val_x, dispatch_val_y)
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods.call(null, multifn)
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method.call(null, multifn, dispatch_val)
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers.call(null, multifn)
};
goog.provide("cljs.core.UUID");
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2690646016
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/UUID")
};
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/UUID")
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  return goog.string.hashCode(cljs.core.pr_str.call(null, this$))
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  return cljs.core._write.call(null, writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""))
};
cljs.core.UUID.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(_, ___$1) {
  var self__ = this;
  return cljs.core.list.call(null, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""))
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var and__3822__auto__ = cljs.core.instance_QMARK_.call(null, cljs.core.UUID, other);
  if(and__3822__auto__) {
    return self__.uuid === other.uuid
  }else {
    return and__3822__auto__
  }
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.UUID;
goog.provide("clojure.set");
goog.require("cljs.core");
clojure.set.bubble_max_key = function bubble_max_key(k, coll) {
  var max = cljs.core.apply.call(null, cljs.core.max_key, k, coll);
  return cljs.core.cons.call(null, max, cljs.core.remove.call(null, function(p1__4303_SHARP_) {
    return max === p1__4303_SHARP_
  }, coll))
};
clojure.set.union = function() {
  var union = null;
  var union__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY
  };
  var union__1 = function(s1) {
    return s1
  };
  var union__2 = function(s1, s2) {
    if(cljs.core.count.call(null, s1) < cljs.core.count.call(null, s2)) {
      return cljs.core.reduce.call(null, cljs.core.conj, s2, s1)
    }else {
      return cljs.core.reduce.call(null, cljs.core.conj, s1, s2)
    }
  };
  var union__3 = function() {
    var G__4305__delegate = function(s1, s2, sets) {
      var bubbled_sets = clojure.set.bubble_max_key.call(null, cljs.core.count, cljs.core.conj.call(null, sets, s2, s1));
      return cljs.core.reduce.call(null, cljs.core.into, cljs.core.first.call(null, bubbled_sets), cljs.core.rest.call(null, bubbled_sets))
    };
    var G__4305 = function(s1, s2, var_args) {
      var sets = null;
      if(goog.isDef(var_args)) {
        sets = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__4305__delegate.call(this, s1, s2, sets)
    };
    G__4305.cljs$lang$maxFixedArity = 2;
    G__4305.cljs$lang$applyTo = function(arglist__4306) {
      var s1 = cljs.core.first(arglist__4306);
      var s2 = cljs.core.first(cljs.core.next(arglist__4306));
      var sets = cljs.core.rest(cljs.core.next(arglist__4306));
      return G__4305__delegate(s1, s2, sets)
    };
    G__4305.cljs$lang$arity$variadic = G__4305__delegate;
    return G__4305
  }();
  union = function(s1, s2, var_args) {
    var sets = var_args;
    switch(arguments.length) {
      case 0:
        return union__0.call(this);
      case 1:
        return union__1.call(this, s1);
      case 2:
        return union__2.call(this, s1, s2);
      default:
        return union__3.cljs$lang$arity$variadic(s1, s2, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  union.cljs$lang$maxFixedArity = 2;
  union.cljs$lang$applyTo = union__3.cljs$lang$applyTo;
  union.cljs$lang$arity$0 = union__0;
  union.cljs$lang$arity$1 = union__1;
  union.cljs$lang$arity$2 = union__2;
  union.cljs$lang$arity$variadic = union__3.cljs$lang$arity$variadic;
  return union
}();
clojure.set.intersection = function() {
  var intersection = null;
  var intersection__1 = function(s1) {
    return s1
  };
  var intersection__2 = function(s1, s2) {
    while(true) {
      if(cljs.core.count.call(null, s2) < cljs.core.count.call(null, s1)) {
        var G__4307 = s2;
        var G__4308 = s1;
        s1 = G__4307;
        s2 = G__4308;
        continue
      }else {
        return cljs.core.reduce.call(null, function(s1, s2) {
          return function(result, item) {
            if(cljs.core.contains_QMARK_.call(null, s2, item)) {
              return result
            }else {
              return cljs.core.disj.call(null, result, item)
            }
          }
        }(s1, s2), s1, s1)
      }
      break
    }
  };
  var intersection__3 = function() {
    var G__4309__delegate = function(s1, s2, sets) {
      var bubbled_sets = clojure.set.bubble_max_key.call(null, function(p1__4304_SHARP_) {
        return-cljs.core.count.call(null, p1__4304_SHARP_)
      }, cljs.core.conj.call(null, sets, s2, s1));
      return cljs.core.reduce.call(null, intersection, cljs.core.first.call(null, bubbled_sets), cljs.core.rest.call(null, bubbled_sets))
    };
    var G__4309 = function(s1, s2, var_args) {
      var sets = null;
      if(goog.isDef(var_args)) {
        sets = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__4309__delegate.call(this, s1, s2, sets)
    };
    G__4309.cljs$lang$maxFixedArity = 2;
    G__4309.cljs$lang$applyTo = function(arglist__4310) {
      var s1 = cljs.core.first(arglist__4310);
      var s2 = cljs.core.first(cljs.core.next(arglist__4310));
      var sets = cljs.core.rest(cljs.core.next(arglist__4310));
      return G__4309__delegate(s1, s2, sets)
    };
    G__4309.cljs$lang$arity$variadic = G__4309__delegate;
    return G__4309
  }();
  intersection = function(s1, s2, var_args) {
    var sets = var_args;
    switch(arguments.length) {
      case 1:
        return intersection__1.call(this, s1);
      case 2:
        return intersection__2.call(this, s1, s2);
      default:
        return intersection__3.cljs$lang$arity$variadic(s1, s2, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  intersection.cljs$lang$maxFixedArity = 2;
  intersection.cljs$lang$applyTo = intersection__3.cljs$lang$applyTo;
  intersection.cljs$lang$arity$1 = intersection__1;
  intersection.cljs$lang$arity$2 = intersection__2;
  intersection.cljs$lang$arity$variadic = intersection__3.cljs$lang$arity$variadic;
  return intersection
}();
clojure.set.difference = function() {
  var difference = null;
  var difference__1 = function(s1) {
    return s1
  };
  var difference__2 = function(s1, s2) {
    if(cljs.core.count.call(null, s1) < cljs.core.count.call(null, s2)) {
      return cljs.core.reduce.call(null, function(result, item) {
        if(cljs.core.contains_QMARK_.call(null, s2, item)) {
          return cljs.core.disj.call(null, result, item)
        }else {
          return result
        }
      }, s1, s1)
    }else {
      return cljs.core.reduce.call(null, cljs.core.disj, s1, s2)
    }
  };
  var difference__3 = function() {
    var G__4311__delegate = function(s1, s2, sets) {
      return cljs.core.reduce.call(null, difference, s1, cljs.core.conj.call(null, sets, s2))
    };
    var G__4311 = function(s1, s2, var_args) {
      var sets = null;
      if(goog.isDef(var_args)) {
        sets = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__4311__delegate.call(this, s1, s2, sets)
    };
    G__4311.cljs$lang$maxFixedArity = 2;
    G__4311.cljs$lang$applyTo = function(arglist__4312) {
      var s1 = cljs.core.first(arglist__4312);
      var s2 = cljs.core.first(cljs.core.next(arglist__4312));
      var sets = cljs.core.rest(cljs.core.next(arglist__4312));
      return G__4311__delegate(s1, s2, sets)
    };
    G__4311.cljs$lang$arity$variadic = G__4311__delegate;
    return G__4311
  }();
  difference = function(s1, s2, var_args) {
    var sets = var_args;
    switch(arguments.length) {
      case 1:
        return difference__1.call(this, s1);
      case 2:
        return difference__2.call(this, s1, s2);
      default:
        return difference__3.cljs$lang$arity$variadic(s1, s2, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  difference.cljs$lang$maxFixedArity = 2;
  difference.cljs$lang$applyTo = difference__3.cljs$lang$applyTo;
  difference.cljs$lang$arity$1 = difference__1;
  difference.cljs$lang$arity$2 = difference__2;
  difference.cljs$lang$arity$variadic = difference__3.cljs$lang$arity$variadic;
  return difference
}();
clojure.set.select = function select(pred, xset) {
  return cljs.core.reduce.call(null, function(s, k) {
    if(cljs.core.truth_(pred.call(null, k))) {
      return s
    }else {
      return cljs.core.disj.call(null, s, k)
    }
  }, xset, xset)
};
clojure.set.project = function project(xrel, ks) {
  return cljs.core.set.call(null, cljs.core.map.call(null, function(p1__4313_SHARP_) {
    return cljs.core.select_keys.call(null, p1__4313_SHARP_, ks)
  }, xrel))
};
clojure.set.rename_keys = function rename_keys(map, kmap) {
  return cljs.core.reduce.call(null, function(m, p__4317) {
    var vec__4318 = p__4317;
    var old = cljs.core.nth.call(null, vec__4318, 0, null);
    var new$ = cljs.core.nth.call(null, vec__4318, 1, null);
    if(function() {
      var and__3822__auto__ = cljs.core.not_EQ_.call(null, old, new$);
      if(and__3822__auto__) {
        return cljs.core.contains_QMARK_.call(null, m, old)
      }else {
        return and__3822__auto__
      }
    }()) {
      return cljs.core.dissoc.call(null, cljs.core.assoc.call(null, m, new$, cljs.core._lookup.call(null, m, old, null)), old)
    }else {
      return m
    }
  }, map, kmap)
};
clojure.set.rename = function rename(xrel, kmap) {
  return cljs.core.set.call(null, cljs.core.map.call(null, function(p1__4314_SHARP_) {
    return clojure.set.rename_keys.call(null, p1__4314_SHARP_, kmap)
  }, xrel))
};
clojure.set.index = function index(xrel, ks) {
  return cljs.core.reduce.call(null, function(m, x) {
    var ik = cljs.core.select_keys.call(null, x, ks);
    return cljs.core.assoc.call(null, m, ik, cljs.core.conj.call(null, cljs.core._lookup.call(null, m, ik, cljs.core.PersistentHashSet.EMPTY), x))
  }, cljs.core.ObjMap.EMPTY, xrel)
};
clojure.set.map_invert = function map_invert(m) {
  return cljs.core.reduce.call(null, function(m__$1, p__4325) {
    var vec__4326 = p__4325;
    var k = cljs.core.nth.call(null, vec__4326, 0, null);
    var v = cljs.core.nth.call(null, vec__4326, 1, null);
    return cljs.core.assoc.call(null, m__$1, v, k)
  }, cljs.core.ObjMap.EMPTY, m)
};
clojure.set.join = function() {
  var join = null;
  var join__2 = function(xrel, yrel) {
    if(function() {
      var and__3822__auto__ = cljs.core.seq.call(null, xrel);
      if(and__3822__auto__) {
        return cljs.core.seq.call(null, yrel)
      }else {
        return and__3822__auto__
      }
    }()) {
      var ks = clojure.set.intersection.call(null, cljs.core.set.call(null, cljs.core.keys.call(null, cljs.core.first.call(null, xrel))), cljs.core.set.call(null, cljs.core.keys.call(null, cljs.core.first.call(null, yrel))));
      var vec__4330 = cljs.core.count.call(null, xrel) <= cljs.core.count.call(null, yrel) ? cljs.core.PersistentVector.fromArray([xrel, yrel], true) : cljs.core.PersistentVector.fromArray([yrel, xrel], true);
      var r = cljs.core.nth.call(null, vec__4330, 0, null);
      var s = cljs.core.nth.call(null, vec__4330, 1, null);
      var idx = clojure.set.index.call(null, r, ks);
      return cljs.core.reduce.call(null, function(ret, x) {
        var found = idx.call(null, cljs.core.select_keys.call(null, x, ks));
        if(cljs.core.truth_(found)) {
          return cljs.core.reduce.call(null, function(p1__4319_SHARP_, p2__4320_SHARP_) {
            return cljs.core.conj.call(null, p1__4319_SHARP_, cljs.core.merge.call(null, p2__4320_SHARP_, x))
          }, ret, found)
        }else {
          return ret
        }
      }, cljs.core.PersistentHashSet.EMPTY, s)
    }else {
      return cljs.core.PersistentHashSet.EMPTY
    }
  };
  var join__3 = function(xrel, yrel, km) {
    var vec__4331 = cljs.core.count.call(null, xrel) <= cljs.core.count.call(null, yrel) ? cljs.core.PersistentVector.fromArray([xrel, yrel, clojure.set.map_invert.call(null, km)], true) : cljs.core.PersistentVector.fromArray([yrel, xrel, km], true);
    var r = cljs.core.nth.call(null, vec__4331, 0, null);
    var s = cljs.core.nth.call(null, vec__4331, 1, null);
    var k = cljs.core.nth.call(null, vec__4331, 2, null);
    var idx = clojure.set.index.call(null, r, cljs.core.vals.call(null, k));
    return cljs.core.reduce.call(null, function(ret, x) {
      var found = idx.call(null, clojure.set.rename_keys.call(null, cljs.core.select_keys.call(null, x, cljs.core.keys.call(null, k)), k));
      if(cljs.core.truth_(found)) {
        return cljs.core.reduce.call(null, function(p1__4321_SHARP_, p2__4322_SHARP_) {
          return cljs.core.conj.call(null, p1__4321_SHARP_, cljs.core.merge.call(null, p2__4322_SHARP_, x))
        }, ret, found)
      }else {
        return ret
      }
    }, cljs.core.PersistentHashSet.EMPTY, s)
  };
  join = function(xrel, yrel, km) {
    switch(arguments.length) {
      case 2:
        return join__2.call(this, xrel, yrel);
      case 3:
        return join__3.call(this, xrel, yrel, km)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$lang$arity$2 = join__2;
  join.cljs$lang$arity$3 = join__3;
  return join
}();
clojure.set.subset_QMARK_ = function subset_QMARK_(set1, set2) {
  var and__3822__auto__ = cljs.core.count.call(null, set1) <= cljs.core.count.call(null, set2);
  if(and__3822__auto__) {
    return cljs.core.every_QMARK_.call(null, function(p1__4327_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, set2, p1__4327_SHARP_)
    }, set1)
  }else {
    return and__3822__auto__
  }
};
clojure.set.superset_QMARK_ = function superset_QMARK_(set1, set2) {
  var and__3822__auto__ = cljs.core.count.call(null, set1) >= cljs.core.count.call(null, set2);
  if(and__3822__auto__) {
    return cljs.core.every_QMARK_.call(null, function(p1__4332_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, set1, p1__4332_SHARP_)
    }, set2)
  }else {
    return and__3822__auto__
  }
};
goog.provide("clojure.walk");
goog.require("cljs.core");
clojure.walk.walk = function walk(inner, outer, form) {
  if(cljs.core.seq_QMARK_.call(null, form)) {
    return outer.call(null, cljs.core.doall.call(null, cljs.core.map.call(null, inner, form)))
  }else {
    if(cljs.core.coll_QMARK_.call(null, form)) {
      return outer.call(null, cljs.core.into.call(null, cljs.core.empty.call(null, form), cljs.core.map.call(null, inner, form)))
    }else {
      if("\ufdd0'else") {
        return outer.call(null, form)
      }else {
        return null
      }
    }
  }
};
clojure.walk.postwalk = function postwalk(f, form) {
  return clojure.walk.walk.call(null, cljs.core.partial.call(null, postwalk, f), f, form)
};
clojure.walk.prewalk = function prewalk(f, form) {
  return clojure.walk.walk.call(null, cljs.core.partial.call(null, prewalk, f), cljs.core.identity, f.call(null, form))
};
clojure.walk.keywordize_keys = function keywordize_keys(m) {
  var f = function(p__4335) {
    var vec__4336 = p__4335;
    var k = cljs.core.nth.call(null, vec__4336, 0, null);
    var v = cljs.core.nth.call(null, vec__4336, 1, null);
    if(cljs.core.string_QMARK_.call(null, k)) {
      return cljs.core.PersistentVector.fromArray([cljs.core.keyword.call(null, k), v], true)
    }else {
      return cljs.core.PersistentVector.fromArray([k, v], true)
    }
  };
  return clojure.walk.postwalk.call(null, function(x) {
    if(cljs.core.map_QMARK_.call(null, x)) {
      return cljs.core.into.call(null, cljs.core.ObjMap.EMPTY, cljs.core.map.call(null, f, x))
    }else {
      return x
    }
  }, m)
};
clojure.walk.stringify_keys = function stringify_keys(m) {
  var f = function(p__4339) {
    var vec__4340 = p__4339;
    var k = cljs.core.nth.call(null, vec__4340, 0, null);
    var v = cljs.core.nth.call(null, vec__4340, 1, null);
    if(cljs.core.keyword_QMARK_.call(null, k)) {
      return cljs.core.PersistentVector.fromArray([cljs.core.name.call(null, k), v], true)
    }else {
      return cljs.core.PersistentVector.fromArray([k, v], true)
    }
  };
  return clojure.walk.postwalk.call(null, function(x) {
    if(cljs.core.map_QMARK_.call(null, x)) {
      return cljs.core.into.call(null, cljs.core.ObjMap.EMPTY, cljs.core.map.call(null, f, x))
    }else {
      return x
    }
  }, m)
};
clojure.walk.prewalk_replace = function prewalk_replace(smap, form) {
  return clojure.walk.prewalk.call(null, function(x) {
    if(cljs.core.contains_QMARK_.call(null, smap, x)) {
      return smap.call(null, x)
    }else {
      return x
    }
  }, form)
};
clojure.walk.postwalk_replace = function postwalk_replace(smap, form) {
  return clojure.walk.postwalk.call(null, function(x) {
    if(cljs.core.contains_QMARK_.call(null, smap, x)) {
      return smap.call(null, x)
    }else {
      return x
    }
  }, form)
};
goog.provide("cljs.core.logic");
goog.require("cljs.core");
goog.require("clojure.walk");
goog.require("clojure.walk");
goog.require("clojure.set");
cljs.core.logic._STAR_occurs_check_STAR_ = true;
cljs.core.logic.IUnifyTerms = {};
cljs.core.logic._unify_terms = function _unify_terms(u, v, s) {
  if(function() {
    var and__3822__auto__ = u;
    if(and__3822__auto__) {
      return u.cljs$core$logic$IUnifyTerms$_unify_terms$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return u.cljs$core$logic$IUnifyTerms$_unify_terms$arity$3(u, v, s)
  }else {
    var x__2373__auto__ = u == null ? null : u;
    return function() {
      var or__3824__auto__ = cljs.core.logic._unify_terms[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._unify_terms["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IUnifyTerms.-unify-terms", u);
        }
      }
    }().call(null, u, v, s)
  }
};
cljs.core.logic.IUnifyWithNil = {};
cljs.core.logic._unify_with_nil = function _unify_with_nil(v, u, s) {
  if(function() {
    var and__3822__auto__ = v;
    if(and__3822__auto__) {
      return v.cljs$core$logic$IUnifyWithNil$_unify_with_nil$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return v.cljs$core$logic$IUnifyWithNil$_unify_with_nil$arity$3(v, u, s)
  }else {
    var x__2373__auto__ = v == null ? null : v;
    return function() {
      var or__3824__auto__ = cljs.core.logic._unify_with_nil[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._unify_with_nil["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IUnifyWithNil.-unify-with-nil", v);
        }
      }
    }().call(null, v, u, s)
  }
};
cljs.core.logic.IUnifyWithObject = {};
cljs.core.logic._unify_with_object = function _unify_with_object(v, u, s) {
  if(function() {
    var and__3822__auto__ = v;
    if(and__3822__auto__) {
      return v.cljs$core$logic$IUnifyWithObject$_unify_with_object$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return v.cljs$core$logic$IUnifyWithObject$_unify_with_object$arity$3(v, u, s)
  }else {
    var x__2373__auto__ = v == null ? null : v;
    return function() {
      var or__3824__auto__ = cljs.core.logic._unify_with_object[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._unify_with_object["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IUnifyWithObject.-unify-with-object", v);
        }
      }
    }().call(null, v, u, s)
  }
};
cljs.core.logic.IUnifyWithLVar = {};
cljs.core.logic._unify_with_lvar = function _unify_with_lvar(v, u, s) {
  if(function() {
    var and__3822__auto__ = v;
    if(and__3822__auto__) {
      return v.cljs$core$logic$IUnifyWithLVar$_unify_with_lvar$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return v.cljs$core$logic$IUnifyWithLVar$_unify_with_lvar$arity$3(v, u, s)
  }else {
    var x__2373__auto__ = v == null ? null : v;
    return function() {
      var or__3824__auto__ = cljs.core.logic._unify_with_lvar[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._unify_with_lvar["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IUnifyWithLVar.-unify-with-lvar", v);
        }
      }
    }().call(null, v, u, s)
  }
};
cljs.core.logic.IUnifyWithLSeq = {};
cljs.core.logic._unify_with_lseq = function _unify_with_lseq(v, u, s) {
  if(function() {
    var and__3822__auto__ = v;
    if(and__3822__auto__) {
      return v.cljs$core$logic$IUnifyWithLSeq$_unify_with_lseq$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return v.cljs$core$logic$IUnifyWithLSeq$_unify_with_lseq$arity$3(v, u, s)
  }else {
    var x__2373__auto__ = v == null ? null : v;
    return function() {
      var or__3824__auto__ = cljs.core.logic._unify_with_lseq[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._unify_with_lseq["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IUnifyWithLSeq.-unify-with-lseq", v);
        }
      }
    }().call(null, v, u, s)
  }
};
cljs.core.logic.IUnifyWithSequential = {};
cljs.core.logic._unify_with_seq = function _unify_with_seq(v, u, s) {
  if(function() {
    var and__3822__auto__ = v;
    if(and__3822__auto__) {
      return v.cljs$core$logic$IUnifyWithSequential$_unify_with_seq$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return v.cljs$core$logic$IUnifyWithSequential$_unify_with_seq$arity$3(v, u, s)
  }else {
    var x__2373__auto__ = v == null ? null : v;
    return function() {
      var or__3824__auto__ = cljs.core.logic._unify_with_seq[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._unify_with_seq["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IUnifyWithSequential.-unify-with-seq", v);
        }
      }
    }().call(null, v, u, s)
  }
};
cljs.core.logic.IUnifyWithMap = {};
cljs.core.logic._unify_with_map = function _unify_with_map(v, u, s) {
  if(function() {
    var and__3822__auto__ = v;
    if(and__3822__auto__) {
      return v.cljs$core$logic$IUnifyWithMap$_unify_with_map$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return v.cljs$core$logic$IUnifyWithMap$_unify_with_map$arity$3(v, u, s)
  }else {
    var x__2373__auto__ = v == null ? null : v;
    return function() {
      var or__3824__auto__ = cljs.core.logic._unify_with_map[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._unify_with_map["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IUnifyWithMap.-unify-with-map", v);
        }
      }
    }().call(null, v, u, s)
  }
};
cljs.core.logic.IUnifyWithSet = {};
cljs.core.logic._unify_with_set = function _unify_with_set(v, u, s) {
  if(function() {
    var and__3822__auto__ = v;
    if(and__3822__auto__) {
      return v.cljs$core$logic$IUnifyWithSet$_unify_with_set$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return v.cljs$core$logic$IUnifyWithSet$_unify_with_set$arity$3(v, u, s)
  }else {
    var x__2373__auto__ = v == null ? null : v;
    return function() {
      var or__3824__auto__ = cljs.core.logic._unify_with_set[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._unify_with_set["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IUnifyWithSet.-unify-with-set", v);
        }
      }
    }().call(null, v, u, s)
  }
};
cljs.core.logic.IReifyTerm = {};
cljs.core.logic._reify_term = function _reify_term(v, s) {
  if(function() {
    var and__3822__auto__ = v;
    if(and__3822__auto__) {
      return v.cljs$core$logic$IReifyTerm$_reify_term$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return v.cljs$core$logic$IReifyTerm$_reify_term$arity$2(v, s)
  }else {
    var x__2373__auto__ = v == null ? null : v;
    return function() {
      var or__3824__auto__ = cljs.core.logic._reify_term[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._reify_term["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IReifyTerm.-reify-term", v);
        }
      }
    }().call(null, v, s)
  }
};
cljs.core.logic.IWalkTerm = {};
cljs.core.logic._walk_term = function _walk_term(v, s) {
  if(function() {
    var and__3822__auto__ = v;
    if(and__3822__auto__) {
      return v.cljs$core$logic$IWalkTerm$_walk_term$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return v.cljs$core$logic$IWalkTerm$_walk_term$arity$2(v, s)
  }else {
    var x__2373__auto__ = v == null ? null : v;
    return function() {
      var or__3824__auto__ = cljs.core.logic._walk_term[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._walk_term["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IWalkTerm.-walk-term", v);
        }
      }
    }().call(null, v, s)
  }
};
cljs.core.logic.IOccursCheckTerm = {};
cljs.core.logic._occurs_check_term = function _occurs_check_term(v, x, s) {
  if(function() {
    var and__3822__auto__ = v;
    if(and__3822__auto__) {
      return v.cljs$core$logic$IOccursCheckTerm$_occurs_check_term$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return v.cljs$core$logic$IOccursCheckTerm$_occurs_check_term$arity$3(v, x, s)
  }else {
    var x__2373__auto__ = v == null ? null : v;
    return function() {
      var or__3824__auto__ = cljs.core.logic._occurs_check_term[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._occurs_check_term["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IOccursCheckTerm.-occurs-check-term", v);
        }
      }
    }().call(null, v, x, s)
  }
};
cljs.core.logic.IBuildTerm = {};
cljs.core.logic._build_term = function _build_term(u, s) {
  if(function() {
    var and__3822__auto__ = u;
    if(and__3822__auto__) {
      return u.cljs$core$logic$IBuildTerm$_build_term$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return u.cljs$core$logic$IBuildTerm$_build_term$arity$2(u, s)
  }else {
    var x__2373__auto__ = u == null ? null : u;
    return function() {
      var or__3824__auto__ = cljs.core.logic._build_term[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._build_term["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IBuildTerm.-build-term", u);
        }
      }
    }().call(null, u, s)
  }
};
cljs.core.logic.IBind = {};
cljs.core.logic._bind = function _bind(this$, g) {
  if(function() {
    var and__3822__auto__ = this$;
    if(and__3822__auto__) {
      return this$.cljs$core$logic$IBind$_bind$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return this$.cljs$core$logic$IBind$_bind$arity$2(this$, g)
  }else {
    var x__2373__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3824__auto__ = cljs.core.logic._bind[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._bind["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IBind.-bind", this$);
        }
      }
    }().call(null, this$, g)
  }
};
cljs.core.logic.IMPlus = {};
cljs.core.logic._mplus = function _mplus(a, f) {
  if(function() {
    var and__3822__auto__ = a;
    if(and__3822__auto__) {
      return a.cljs$core$logic$IMPlus$_mplus$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return a.cljs$core$logic$IMPlus$_mplus$arity$2(a, f)
  }else {
    var x__2373__auto__ = a == null ? null : a;
    return function() {
      var or__3824__auto__ = cljs.core.logic._mplus[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._mplus["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMPlus.-mplus", a);
        }
      }
    }().call(null, a, f)
  }
};
cljs.core.logic.ITake = {};
cljs.core.logic._take_STAR_ = function _take_STAR_(a) {
  if(function() {
    var and__3822__auto__ = a;
    if(and__3822__auto__) {
      return a.cljs$core$logic$ITake$_take_STAR_$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return a.cljs$core$logic$ITake$_take_STAR_$arity$1(a)
  }else {
    var x__2373__auto__ = a == null ? null : a;
    return function() {
      var or__3824__auto__ = cljs.core.logic._take_STAR_[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._take_STAR_["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITake.-take*", a);
        }
      }
    }().call(null, a)
  }
};
cljs.core.logic.IPair = {};
cljs.core.logic._lhs = function _lhs(this$) {
  if(function() {
    var and__3822__auto__ = this$;
    if(and__3822__auto__) {
      return this$.cljs$core$logic$IPair$_lhs$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return this$.cljs$core$logic$IPair$_lhs$arity$1(this$)
  }else {
    var x__2373__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3824__auto__ = cljs.core.logic._lhs[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._lhs["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IPair.-lhs", this$);
        }
      }
    }().call(null, this$)
  }
};
cljs.core.logic._rhs = function _rhs(this$) {
  if(function() {
    var and__3822__auto__ = this$;
    if(and__3822__auto__) {
      return this$.cljs$core$logic$IPair$_rhs$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return this$.cljs$core$logic$IPair$_rhs$arity$1(this$)
  }else {
    var x__2373__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3824__auto__ = cljs.core.logic._rhs[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._rhs["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IPair.-rhs", this$);
        }
      }
    }().call(null, this$)
  }
};
goog.provide("cljs.core.logic.Pair");
cljs.core.logic.Pair = function(lhs, rhs) {
  this.lhs = lhs;
  this.rhs = rhs;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2149580818
};
cljs.core.logic.Pair.cljs$lang$type = true;
cljs.core.logic.Pair.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core.logic/Pair")
};
cljs.core.logic.Pair.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core.logic/Pair")
};
cljs.core.logic.Pair.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  return cljs.core._write.call(null, writer, [cljs.core.str("("), cljs.core.str(self__.lhs), cljs.core.str(" . "), cljs.core.str(self__.rhs), cljs.core.str(")")].join(""))
};
cljs.core.logic.Pair.prototype.cljs$core$logic$IPair$ = true;
cljs.core.logic.Pair.prototype.cljs$core$logic$IPair$_lhs$arity$1 = function(_) {
  var self__ = this;
  return self__.lhs
};
cljs.core.logic.Pair.prototype.cljs$core$logic$IPair$_rhs$arity$1 = function(_) {
  var self__ = this;
  return self__.rhs
};
cljs.core.logic.Pair.prototype.cljs$core$IIndexed$_nth$arity$2 = function(_, i) {
  var self__ = this;
  var pred__4341 = cljs.core._EQ_;
  var expr__4342 = i;
  if(pred__4341.call(null, 0, expr__4342)) {
    return self__.lhs
  }else {
    if(pred__4341.call(null, 1, expr__4342)) {
      return self__.rhs
    }else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.logic.Pair.prototype.cljs$core$IIndexed$_nth$arity$3 = function(_, i, not_found) {
  var self__ = this;
  var pred__4344 = cljs.core._EQ_;
  var expr__4345 = i;
  if(pred__4344.call(null, 0, expr__4345)) {
    return self__.lhs
  }else {
    if(pred__4344.call(null, 1, expr__4345)) {
      return self__.rhs
    }else {
      return not_found
    }
  }
};
cljs.core.logic.Pair.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  return 2
};
cljs.core.logic.Pair.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var and__3822__auto__ = cljs.core._EQ_.call(null, self__.lhs, other.lhs);
  if(and__3822__auto__) {
    return cljs.core._EQ_.call(null, self__.rhs, other.rhs)
  }else {
    return and__3822__auto__
  }
};
cljs.core.logic.Pair;
cljs.core.logic.pair = function pair(lhs, rhs) {
  return new cljs.core.logic.Pair(lhs, rhs)
};
cljs.core.logic.ISubstitutions = {};
cljs.core.logic._occurs_check = function _occurs_check(this$, u, v) {
  if(function() {
    var and__3822__auto__ = this$;
    if(and__3822__auto__) {
      return this$.cljs$core$logic$ISubstitutions$_occurs_check$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return this$.cljs$core$logic$ISubstitutions$_occurs_check$arity$3(this$, u, v)
  }else {
    var x__2373__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3824__auto__ = cljs.core.logic._occurs_check[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._occurs_check["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISubstitutions.-occurs-check", this$);
        }
      }
    }().call(null, this$, u, v)
  }
};
cljs.core.logic._ext = function _ext(this$, u, v) {
  if(function() {
    var and__3822__auto__ = this$;
    if(and__3822__auto__) {
      return this$.cljs$core$logic$ISubstitutions$_ext$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return this$.cljs$core$logic$ISubstitutions$_ext$arity$3(this$, u, v)
  }else {
    var x__2373__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3824__auto__ = cljs.core.logic._ext[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._ext["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISubstitutions.-ext", this$);
        }
      }
    }().call(null, this$, u, v)
  }
};
cljs.core.logic._ext_no_check = function _ext_no_check(this$, u, v) {
  if(function() {
    var and__3822__auto__ = this$;
    if(and__3822__auto__) {
      return this$.cljs$core$logic$ISubstitutions$_ext_no_check$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return this$.cljs$core$logic$ISubstitutions$_ext_no_check$arity$3(this$, u, v)
  }else {
    var x__2373__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3824__auto__ = cljs.core.logic._ext_no_check[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._ext_no_check["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISubstitutions.-ext-no-check", this$);
        }
      }
    }().call(null, this$, u, v)
  }
};
cljs.core.logic._walk = function _walk(this$, v) {
  if(function() {
    var and__3822__auto__ = this$;
    if(and__3822__auto__) {
      return this$.cljs$core$logic$ISubstitutions$_walk$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return this$.cljs$core$logic$ISubstitutions$_walk$arity$2(this$, v)
  }else {
    var x__2373__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3824__auto__ = cljs.core.logic._walk[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._walk["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISubstitutions.-walk", this$);
        }
      }
    }().call(null, this$, v)
  }
};
cljs.core.logic._walk_STAR_ = function _walk_STAR_(this$, v) {
  if(function() {
    var and__3822__auto__ = this$;
    if(and__3822__auto__) {
      return this$.cljs$core$logic$ISubstitutions$_walk_STAR_$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return this$.cljs$core$logic$ISubstitutions$_walk_STAR_$arity$2(this$, v)
  }else {
    var x__2373__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3824__auto__ = cljs.core.logic._walk_STAR_[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._walk_STAR_["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISubstitutions.-walk*", this$);
        }
      }
    }().call(null, this$, v)
  }
};
cljs.core.logic._unify = function _unify(this$, u, v) {
  if(function() {
    var and__3822__auto__ = this$;
    if(and__3822__auto__) {
      return this$.cljs$core$logic$ISubstitutions$_unify$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return this$.cljs$core$logic$ISubstitutions$_unify$arity$3(this$, u, v)
  }else {
    var x__2373__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3824__auto__ = cljs.core.logic._unify[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._unify["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISubstitutions.-unify", this$);
        }
      }
    }().call(null, this$, u, v)
  }
};
cljs.core.logic._reify_lvar_name = function _reify_lvar_name(_) {
  if(function() {
    var and__3822__auto__ = _;
    if(and__3822__auto__) {
      return _.cljs$core$logic$ISubstitutions$_reify_lvar_name$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return _.cljs$core$logic$ISubstitutions$_reify_lvar_name$arity$1(_)
  }else {
    var x__2373__auto__ = _ == null ? null : _;
    return function() {
      var or__3824__auto__ = cljs.core.logic._reify_lvar_name[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._reify_lvar_name["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISubstitutions.-reify-lvar-name", _);
        }
      }
    }().call(null, _)
  }
};
cljs.core.logic._reify_STAR_ = function _reify_STAR_(this$, v) {
  if(function() {
    var and__3822__auto__ = this$;
    if(and__3822__auto__) {
      return this$.cljs$core$logic$ISubstitutions$_reify_STAR_$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return this$.cljs$core$logic$ISubstitutions$_reify_STAR_$arity$2(this$, v)
  }else {
    var x__2373__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3824__auto__ = cljs.core.logic._reify_STAR_[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._reify_STAR_["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISubstitutions.-reify*", this$);
        }
      }
    }().call(null, this$, v)
  }
};
cljs.core.logic._reify = function _reify(this$, v) {
  if(function() {
    var and__3822__auto__ = this$;
    if(and__3822__auto__) {
      return this$.cljs$core$logic$ISubstitutions$_reify$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return this$.cljs$core$logic$ISubstitutions$_reify$arity$2(this$, v)
  }else {
    var x__2373__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3824__auto__ = cljs.core.logic._reify[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._reify["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISubstitutions.-reify", this$);
        }
      }
    }().call(null, this$, v)
  }
};
cljs.core.logic.not_found = {};
cljs.core.logic.assq = function assq(k, xs) {
  var xs__$1 = cljs.core._seq.call(null, xs);
  while(true) {
    if(xs__$1 == null) {
      return cljs.core.logic.not_found
    }else {
      var xs__$2 = xs__$1;
      var x = cljs.core._first.call(null, xs__$2);
      var lhs = x.lhs;
      if(k === lhs) {
        return x.rhs
      }else {
        var G__4347 = cljs.core._next.call(null, xs__$2);
        xs__$1 = G__4347;
        continue
      }
    }
    break
  }
};
goog.provide("cljs.core.logic.Substitutions");
cljs.core.logic.Substitutions = function(s) {
  this.s = s;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2149580800
};
cljs.core.logic.Substitutions.cljs$lang$type = true;
cljs.core.logic.Substitutions.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core.logic/Substitutions")
};
cljs.core.logic.Substitutions.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core.logic/Substitutions")
};
cljs.core.logic.Substitutions.prototype.cljs$core$logic$ITake$ = true;
cljs.core.logic.Substitutions.prototype.cljs$core$logic$ITake$_take_STAR_$arity$1 = function(this$) {
  var self__ = this;
  return this$
};
cljs.core.logic.Substitutions.prototype.cljs$core$logic$IMPlus$ = true;
cljs.core.logic.Substitutions.prototype.cljs$core$logic$IMPlus$_mplus$arity$2 = function(this$, f) {
  var self__ = this;
  return cljs.core.logic.choice.call(null, this$, f)
};
cljs.core.logic.Substitutions.prototype.cljs$core$logic$IBind$ = true;
cljs.core.logic.Substitutions.prototype.cljs$core$logic$IBind$_bind$arity$2 = function(this$, g) {
  var self__ = this;
  return g.call(null, this$)
};
cljs.core.logic.Substitutions.prototype.cljs$core$logic$ISubstitutions$ = true;
cljs.core.logic.Substitutions.prototype.cljs$core$logic$ISubstitutions$_walk$arity$2 = function(this$, v) {
  var self__ = this;
  if(cljs.core.truth_(cljs.core.logic.lvar_QMARK_.call(null, v))) {
    var rhs = cljs.core.logic.assq.call(null, v, self__.s);
    var vp = this$.cljs$core$logic$ISubstitutions$_walk$arity$2(this$, rhs);
    if(cljs.core.logic.not_found === vp) {
      return v
    }else {
      return vp
    }
  }else {
    if("\ufdd0'else") {
      return v
    }else {
      return null
    }
  }
};
cljs.core.logic.Substitutions.prototype.cljs$core$logic$ISubstitutions$_reify_STAR_$arity$2 = function(this$, v) {
  var self__ = this;
  var v__$1 = this$.cljs$core$logic$ISubstitutions$_walk$arity$2(this$, v);
  return cljs.core.logic._reify_term.call(null, v__$1, this$)
};
cljs.core.logic.Substitutions.prototype.cljs$core$logic$ISubstitutions$_walk_STAR_$arity$2 = function(this$, v) {
  var self__ = this;
  var v__$1 = this$.cljs$core$logic$ISubstitutions$_walk$arity$2(this$, v);
  return cljs.core.logic._walk_term.call(null, v__$1, this$)
};
cljs.core.logic.Substitutions.prototype.cljs$core$logic$ISubstitutions$_reify_lvar_name$arity$1 = function(this$) {
  var self__ = this;
  return cljs.core.symbol.call(null, [cljs.core.str("_."), cljs.core.str(cljs.core.count.call(null, self__.s))].join(""))
};
cljs.core.logic.Substitutions.prototype.cljs$core$logic$ISubstitutions$_reify$arity$2 = function(this$, v) {
  var self__ = this;
  var v__$1 = this$.cljs$core$logic$ISubstitutions$_walk_STAR_$arity$2(this$, v);
  return cljs.core.logic._walk_STAR_.call(null, cljs.core.logic._reify_STAR_.call(null, cljs.core.logic.empty_s, v__$1), v__$1)
};
cljs.core.logic.Substitutions.prototype.cljs$core$logic$ISubstitutions$_unify$arity$3 = function(this$, u, v) {
  var self__ = this;
  if(u === v) {
    return this$
  }else {
    var u__$1 = this$.cljs$core$logic$ISubstitutions$_walk$arity$2(this$, u);
    var v__$1 = this$.cljs$core$logic$ISubstitutions$_walk$arity$2(this$, v);
    if(u__$1 === v__$1) {
      return this$
    }else {
      return cljs.core.logic._unify_terms.call(null, u__$1, v__$1, this$)
    }
  }
};
cljs.core.logic.Substitutions.prototype.cljs$core$logic$ISubstitutions$_ext$arity$3 = function(this$, u, v) {
  var self__ = this;
  if(cljs.core.truth_(function() {
    var and__3822__auto__ = cljs.core.logic._STAR_occurs_check_STAR_;
    if(cljs.core.truth_(and__3822__auto__)) {
      return this$.cljs$core$logic$ISubstitutions$_occurs_check$arity$3(this$, u, v)
    }else {
      return and__3822__auto__
    }
  }())) {
    return null
  }else {
    return this$.cljs$core$logic$ISubstitutions$_ext_no_check$arity$3(this$, u, v)
  }
};
cljs.core.logic.Substitutions.prototype.cljs$core$logic$ISubstitutions$_ext_no_check$arity$3 = function(this$, u, v) {
  var self__ = this;
  return new cljs.core.logic.Substitutions(cljs.core.conj.call(null, self__.s, new cljs.core.logic.Pair(u, v)))
};
cljs.core.logic.Substitutions.prototype.cljs$core$logic$ISubstitutions$_occurs_check$arity$3 = function(this$, u, v) {
  var self__ = this;
  var v__$1 = this$.cljs$core$logic$ISubstitutions$_walk$arity$2(this$, v);
  return cljs.core.logic._occurs_check_term.call(null, v__$1, u, this$)
};
cljs.core.logic.Substitutions.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this$, writer, opts) {
  var self__ = this;
  return cljs.core._pr_writer.call(null, self__.s, writer, opts)
};
cljs.core.logic.Substitutions.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, o) {
  var self__ = this;
  var or__3824__auto__ = this$ === o;
  if(or__3824__auto__) {
    return or__3824__auto__
  }else {
    var and__3822__auto__ = cljs.core.instance_QMARK_.call(null, cljs.core.logic.Substitutions, o);
    if(and__3822__auto__) {
      return cljs.core._EQ_.call(null, self__.s, o.s)
    }else {
      return and__3822__auto__
    }
  }
};
cljs.core.logic.Substitutions;
cljs.core.logic.make_s = function make_s(s) {
  return new cljs.core.logic.Substitutions(s)
};
cljs.core.logic.empty_s = cljs.core.logic.make_s.call(null, cljs.core.List.EMPTY);
cljs.core.logic.subst_QMARK_ = function subst_QMARK_(x) {
  return cljs.core.instance_QMARK_.call(null, cljs.core.logic.Substitutions, x)
};
cljs.core.logic.to_s = function to_s(v) {
  var s = cljs.core.reduce.call(null, function(l, p__4350) {
    var vec__4351 = p__4350;
    var k = cljs.core.nth.call(null, vec__4351, 0, null);
    var v__$1 = cljs.core.nth.call(null, vec__4351, 1, null);
    return cljs.core.conj.call(null, l, cljs.core.logic.pair.call(null, k, v__$1))
  }, cljs.core.List.EMPTY, v);
  return cljs.core.logic.make_s.call(null, s)
};
goog.provide("cljs.core.logic.LVar");
cljs.core.logic.LVar = function(name, meta) {
  this.name = name;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2154168320
};
cljs.core.logic.LVar.cljs$lang$type = true;
cljs.core.logic.LVar.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core.logic/LVar")
};
cljs.core.logic.LVar.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core.logic/LVar")
};
cljs.core.logic.LVar.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  return cljs.core._hash.call(null, self__.name)
};
cljs.core.logic.LVar.prototype.cljs$core$logic$IUnifyWithLVar$ = true;
cljs.core.logic.LVar.prototype.cljs$core$logic$IUnifyWithLVar$_unify_with_lvar$arity$3 = function(v, u, s) {
  var self__ = this;
  return cljs.core.logic._ext_no_check.call(null, s, u, v)
};
cljs.core.logic.LVar.prototype.cljs$core$logic$IUnifyWithSequential$ = true;
cljs.core.logic.LVar.prototype.cljs$core$logic$IUnifyWithSequential$_unify_with_seq$arity$3 = function(v, u, s) {
  var self__ = this;
  return cljs.core.logic._ext.call(null, s, v, u)
};
cljs.core.logic.LVar.prototype.cljs$core$logic$IReifyTerm$ = true;
cljs.core.logic.LVar.prototype.cljs$core$logic$IReifyTerm$_reify_term$arity$2 = function(v, s) {
  var self__ = this;
  return cljs.core.logic._ext.call(null, s, v, cljs.core.logic._reify_lvar_name.call(null, s))
};
cljs.core.logic.LVar.prototype.cljs$core$logic$IUnifyTerms$ = true;
cljs.core.logic.LVar.prototype.cljs$core$logic$IUnifyTerms$_unify_terms$arity$3 = function(u, v, s) {
  var self__ = this;
  return cljs.core.logic._unify_with_lvar.call(null, v, u, s)
};
cljs.core.logic.LVar.prototype.cljs$core$logic$IUnifyWithNil$ = true;
cljs.core.logic.LVar.prototype.cljs$core$logic$IUnifyWithNil$_unify_with_nil$arity$3 = function(v, u, s) {
  var self__ = this;
  return cljs.core.logic._ext_no_check.call(null, s, v, u)
};
cljs.core.logic.LVar.prototype.cljs$core$logic$IUnifyWithMap$ = true;
cljs.core.logic.LVar.prototype.cljs$core$logic$IUnifyWithMap$_unify_with_map$arity$3 = function(v, u, s) {
  var self__ = this;
  return cljs.core.logic._ext.call(null, s, v, u)
};
cljs.core.logic.LVar.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, opts) {
  var self__ = this;
  return cljs.core._write.call(null, writer, [cljs.core.str("<lvar:"), cljs.core.str(self__.name), cljs.core.str(">")].join(""))
};
cljs.core.logic.LVar.prototype.cljs$core$logic$IOccursCheckTerm$ = true;
cljs.core.logic.LVar.prototype.cljs$core$logic$IOccursCheckTerm$_occurs_check_term$arity$3 = function(v, x, s) {
  var self__ = this;
  return cljs.core._EQ_.call(null, cljs.core.logic._walk.call(null, s, v), x)
};
cljs.core.logic.LVar.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.logic.LVar.prototype.cljs$core$logic$IUnifyWithSet$ = true;
cljs.core.logic.LVar.prototype.cljs$core$logic$IUnifyWithSet$_unify_with_set$arity$3 = function(v, u, s) {
  var self__ = this;
  return cljs.core.logic._ext.call(null, s, v, u)
};
cljs.core.logic.LVar.prototype.cljs$core$logic$IWalkTerm$ = true;
cljs.core.logic.LVar.prototype.cljs$core$logic$IWalkTerm$_walk_term$arity$2 = function(v, s) {
  var self__ = this;
  return v
};
cljs.core.logic.LVar.prototype.cljs$core$logic$IUnifyWithObject$ = true;
cljs.core.logic.LVar.prototype.cljs$core$logic$IUnifyWithObject$_unify_with_object$arity$3 = function(v, u, s) {
  var self__ = this;
  return cljs.core.logic._ext.call(null, s, v, u)
};
cljs.core.logic.LVar.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, o) {
  var self__ = this;
  var and__3822__auto__ = cljs.core.instance_QMARK_.call(null, cljs.core.logic.LVar, o);
  if(and__3822__auto__) {
    var o__$1 = o;
    return self__.name === o__$1.name
  }else {
    return and__3822__auto__
  }
};
cljs.core.logic.LVar.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this$, new_meta) {
  var self__ = this;
  return new cljs.core.logic.LVar(self__.name, self__.meta)
};
cljs.core.logic.LVar.prototype.cljs$core$IMeta$_meta$arity$1 = function(this$) {
  var self__ = this;
  return self__.meta
};
cljs.core.logic.LVar.prototype.cljs$core$logic$IUnifyWithLSeq$ = true;
cljs.core.logic.LVar.prototype.cljs$core$logic$IUnifyWithLSeq$_unify_with_lseq$arity$3 = function(v, u, s) {
  var self__ = this;
  return cljs.core.logic._ext.call(null, s, v, u)
};
cljs.core.logic.LVar;
cljs.core.logic.lvar_sym_counter = cljs.core.atom.call(null, 0);
cljs.core.logic.lvar = function() {
  var lvar = null;
  var lvar__0 = function() {
    return lvar.call(null, "\ufdd1'gen")
  };
  var lvar__1 = function(name) {
    var name__$1 = name.substring(2, name.length) + "_" + cljs.core.swap_BANG_.call(null, cljs.core.logic.lvar_sym_counter, cljs.core.inc);
    return new cljs.core.logic.LVar(name__$1, null)
  };
  lvar = function(name) {
    switch(arguments.length) {
      case 0:
        return lvar__0.call(this);
      case 1:
        return lvar__1.call(this, name)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  lvar.cljs$lang$arity$0 = lvar__0;
  lvar.cljs$lang$arity$1 = lvar__1;
  return lvar
}();
cljs.core.logic.lvar_QMARK_ = function lvar_QMARK_(x) {
  return cljs.core.instance_QMARK_.call(null, cljs.core.logic.LVar, x)
};
cljs.core.logic.LConsSeq = {};
cljs.core.logic._lfirst = function _lfirst(this$) {
  if(function() {
    var and__3822__auto__ = this$;
    if(and__3822__auto__) {
      return this$.cljs$core$logic$LConsSeq$_lfirst$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return this$.cljs$core$logic$LConsSeq$_lfirst$arity$1(this$)
  }else {
    var x__2373__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3824__auto__ = cljs.core.logic._lfirst[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._lfirst["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "LConsSeq.-lfirst", this$);
        }
      }
    }().call(null, this$)
  }
};
cljs.core.logic._lnext = function _lnext(this$) {
  if(function() {
    var and__3822__auto__ = this$;
    if(and__3822__auto__) {
      return this$.cljs$core$logic$LConsSeq$_lnext$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return this$.cljs$core$logic$LConsSeq$_lnext$arity$1(this$)
  }else {
    var x__2373__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3824__auto__ = cljs.core.logic._lnext[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._lnext["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "LConsSeq.-lnext", this$);
        }
      }
    }().call(null, this$)
  }
};
cljs.core.logic.lcons_pr_seq = function lcons_pr_seq(x) {
  if(cljs.core.truth_(cljs.core.logic.lcons_QMARK_.call(null, x))) {
    return new cljs.core.LazySeq(null, false, function() {
      return cljs.core.cons.call(null, cljs.core.logic._lfirst.call(null, x), lcons_pr_seq.call(null, cljs.core.logic._lnext.call(null, x)))
    }, null)
  }else {
    if("\ufdd0'else") {
      return cljs.core.list.call(null, "\ufdd1'.", x)
    }else {
      return null
    }
  }
};
goog.provide("cljs.core.logic.LCons");
cljs.core.logic.LCons = function(a, d, meta) {
  this.a = a;
  this.d = d;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2149974016
};
cljs.core.logic.LCons.cljs$lang$type = true;
cljs.core.logic.LCons.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core.logic/LCons")
};
cljs.core.logic.LCons.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core.logic/LCons")
};
cljs.core.logic.LCons.prototype.cljs$core$logic$IUnifyWithSequential$ = true;
cljs.core.logic.LCons.prototype.cljs$core$logic$IUnifyWithSequential$_unify_with_seq$arity$3 = function(v, u, s) {
  var self__ = this;
  return cljs.core.logic._unify_with_lseq.call(null, u, v, s)
};
cljs.core.logic.LCons.prototype.cljs$core$logic$IReifyTerm$ = true;
cljs.core.logic.LCons.prototype.cljs$core$logic$IReifyTerm$_reify_term$arity$2 = function(v, s) {
  var self__ = this;
  var v__$1 = v;
  var s__$1 = s;
  while(true) {
    if(cljs.core.truth_(cljs.core.logic.lcons_QMARK_.call(null, v__$1))) {
      var G__4352 = v__$1.cljs$core$logic$LConsSeq$_lnext$arity$1(v__$1);
      var G__4353 = cljs.core.logic._reify_STAR_.call(null, s__$1, v__$1.cljs$core$logic$LConsSeq$_lfirst$arity$1(v__$1));
      v__$1 = G__4352;
      s__$1 = G__4353;
      continue
    }else {
      return cljs.core.logic._reify_STAR_.call(null, s__$1, v__$1)
    }
    break
  }
};
cljs.core.logic.LCons.prototype.cljs$core$logic$IUnifyTerms$ = true;
cljs.core.logic.LCons.prototype.cljs$core$logic$IUnifyTerms$_unify_terms$arity$3 = function(u, v, s) {
  var self__ = this;
  return cljs.core.logic._unify_with_lseq.call(null, v, u, s)
};
cljs.core.logic.LCons.prototype.cljs$core$logic$IUnifyWithNil$ = true;
cljs.core.logic.LCons.prototype.cljs$core$logic$IUnifyWithNil$_unify_with_nil$arity$3 = function(v, u, s) {
  var self__ = this;
  return false
};
cljs.core.logic.LCons.prototype.cljs$core$logic$IUnifyWithMap$ = true;
cljs.core.logic.LCons.prototype.cljs$core$logic$IUnifyWithMap$_unify_with_map$arity$3 = function(v, u, s) {
  var self__ = this;
  return false
};
cljs.core.logic.LCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this$, writer, opts) {
  var self__ = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, cljs.core.logic.lcons_pr_seq.call(null, this$))
};
cljs.core.logic.LCons.prototype.cljs$core$logic$IOccursCheckTerm$ = true;
cljs.core.logic.LCons.prototype.cljs$core$logic$IOccursCheckTerm$_occurs_check_term$arity$3 = function(v, x, s) {
  var self__ = this;
  var v__$1 = v;
  var x__$1 = x;
  var s__$1 = s;
  while(true) {
    if(cljs.core.truth_(cljs.core.logic.lcons_QMARK_.call(null, v__$1))) {
      var or__3824__auto__ = cljs.core.logic._occurs_check.call(null, s__$1, x__$1, v__$1.cljs$core$logic$LConsSeq$_lfirst$arity$1(v__$1));
      if(cljs.core.truth_(or__3824__auto__)) {
        return or__3824__auto__
      }else {
        var G__4354 = v__$1.cljs$core$logic$LConsSeq$_lnext$arity$1(v__$1);
        var G__4355 = x__$1;
        var G__4356 = s__$1;
        v__$1 = G__4354;
        x__$1 = G__4355;
        s__$1 = G__4356;
        continue
      }
    }else {
      return cljs.core.logic._occurs_check.call(null, s__$1, x__$1, v__$1)
    }
    break
  }
};
cljs.core.logic.LCons.prototype.cljs$core$logic$IUnifyWithSet$ = true;
cljs.core.logic.LCons.prototype.cljs$core$logic$IUnifyWithSet$_unify_with_set$arity$3 = function(v, u, s) {
  var self__ = this;
  return false
};
cljs.core.logic.LCons.prototype.cljs$core$logic$IWalkTerm$ = true;
cljs.core.logic.LCons.prototype.cljs$core$logic$IWalkTerm$_walk_term$arity$2 = function(v, s) {
  var self__ = this;
  return cljs.core.logic.lcons.call(null, cljs.core.logic._walk_STAR_.call(null, s, v.cljs$core$logic$LConsSeq$_lfirst$arity$1(v)), cljs.core.logic._walk_STAR_.call(null, s, v.cljs$core$logic$LConsSeq$_lnext$arity$1(v)))
};
cljs.core.logic.LCons.prototype.cljs$core$logic$IUnifyWithObject$ = true;
cljs.core.logic.LCons.prototype.cljs$core$logic$IUnifyWithObject$_unify_with_object$arity$3 = function(v, u, s) {
  var self__ = this;
  return false
};
cljs.core.logic.LCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, o) {
  var self__ = this;
  var or__3824__auto__ = this$ === o;
  if(or__3824__auto__) {
    return or__3824__auto__
  }else {
    var and__3822__auto__ = cljs.core.instance_QMARK_.call(null, cljs.core.logic.LCons, o);
    if(and__3822__auto__) {
      var me = this$;
      var you = o;
      while(true) {
        if(me == null) {
          return you == null
        }else {
          if(cljs.core.logic.lvar_QMARK_.call(null, me)) {
            return true
          }else {
            if(cljs.core.logic.lvar_QMARK_.call(null, you)) {
              return true
            }else {
              if(cljs.core.truth_(function() {
                var and__3822__auto____$1 = cljs.core.logic.lcons_QMARK_.call(null, me);
                if(cljs.core.truth_(and__3822__auto____$1)) {
                  return cljs.core.logic.lcons_QMARK_.call(null, you)
                }else {
                  return and__3822__auto____$1
                }
              }())) {
                var mef = me.cljs$core$logic$LConsSeq$_lfirst$arity$1(me);
                var youf = cljs.core.logic._lfirst.call(null, you);
                var and__3822__auto____$1 = function() {
                  var or__3824__auto____$1 = cljs.core._EQ_.call(null, mef, youf);
                  if(or__3824__auto____$1) {
                    return or__3824__auto____$1
                  }else {
                    var or__3824__auto____$2 = cljs.core.logic.lvar_QMARK_.call(null, mef);
                    if(or__3824__auto____$2) {
                      return or__3824__auto____$2
                    }else {
                      return cljs.core.logic.lvar_QMARK_.call(null, youf)
                    }
                  }
                }();
                if(cljs.core.truth_(and__3822__auto____$1)) {
                  var G__4357 = me.cljs$core$logic$LConsSeq$_lnext$arity$1(me);
                  var G__4358 = cljs.core.logic._lnext.call(null, you);
                  me = G__4357;
                  you = G__4358;
                  continue
                }else {
                  return and__3822__auto____$1
                }
              }else {
                if("\ufdd0'else") {
                  return cljs.core._EQ_.call(null, me, you)
                }else {
                  return null
                }
              }
            }
          }
        }
        break
      }
    }else {
      return and__3822__auto__
    }
  }
};
cljs.core.logic.LCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this$, new_meta) {
  var self__ = this;
  return new cljs.core.logic.LCons(self__.a, self__.d, new_meta)
};
cljs.core.logic.LCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(this$) {
  var self__ = this;
  return self__.meta
};
cljs.core.logic.LCons.prototype.cljs$core$logic$LConsSeq$ = true;
cljs.core.logic.LCons.prototype.cljs$core$logic$LConsSeq$_lfirst$arity$1 = function(_) {
  var self__ = this;
  return self__.a
};
cljs.core.logic.LCons.prototype.cljs$core$logic$LConsSeq$_lnext$arity$1 = function(_) {
  var self__ = this;
  return self__.d
};
cljs.core.logic.LCons.prototype.cljs$core$logic$IUnifyWithLSeq$ = true;
cljs.core.logic.LCons.prototype.cljs$core$logic$IUnifyWithLSeq$_unify_with_lseq$arity$3 = function(v, u, s) {
  var self__ = this;
  var u__$1 = u;
  var v__$1 = v;
  var s__$1 = s;
  while(true) {
    if(cljs.core.logic.lvar_QMARK_.call(null, u__$1)) {
      return cljs.core.logic._unify.call(null, s__$1, u__$1, v__$1)
    }else {
      if(cljs.core.logic.lvar_QMARK_.call(null, v__$1)) {
        return cljs.core.logic._unify.call(null, s__$1, v__$1, u__$1)
      }else {
        if(cljs.core.truth_(function() {
          var and__3822__auto__ = cljs.core.logic.lcons_QMARK_.call(null, u__$1);
          if(cljs.core.truth_(and__3822__auto__)) {
            return cljs.core.logic.lcons_QMARK_.call(null, v__$1)
          }else {
            return and__3822__auto__
          }
        }())) {
          var temp__3971__auto__ = cljs.core.logic._unify.call(null, s__$1, cljs.core.logic._lfirst.call(null, u__$1), v__$1.cljs$core$logic$LConsSeq$_lfirst$arity$1(v__$1));
          if(cljs.core.truth_(temp__3971__auto__)) {
            var s__$2 = temp__3971__auto__;
            var G__4359 = cljs.core.logic._lnext.call(null, u__$1);
            var G__4360 = v__$1.cljs$core$logic$LConsSeq$_lnext$arity$1(v__$1);
            var G__4361 = s__$2;
            u__$1 = G__4359;
            v__$1 = G__4360;
            s__$1 = G__4361;
            continue
          }else {
            return false
          }
        }else {
          if("\ufdd0'else") {
            return cljs.core.logic._unify.call(null, s__$1, u__$1, v__$1)
          }else {
            return null
          }
        }
      }
    }
    break
  }
};
cljs.core.logic.LCons;
cljs.core.logic.lcons = function lcons(a, d) {
  if(function() {
    var or__3824__auto__ = cljs.core.coll_QMARK_.call(null, d);
    if(or__3824__auto__) {
      return or__3824__auto__
    }else {
      return d == null
    }
  }()) {
    return cljs.core.cons.call(null, a, cljs.core.seq.call(null, d))
  }else {
    return new cljs.core.logic.LCons(a, d, null)
  }
};
cljs.core.logic.lcons_QMARK_ = function lcons_QMARK_(x) {
  return cljs.core.instance_QMARK_.call(null, cljs.core.logic.LCons, x)
};
cljs.core.PersistentHashSet.prototype.cljs$core$logic$IUnifyTerms$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$logic$IUnifyTerms$_unify_terms$arity$3 = function(u, v, s) {
  return cljs.core.logic._unify_with_set.call(null, v, u, s)
};
cljs.core.PersistentHashMap.prototype.cljs$core$logic$IUnifyTerms$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$logic$IUnifyTerms$_unify_terms$arity$3 = function(u, v, s) {
  return cljs.core.logic._unify_with_map.call(null, v, u, s)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$logic$IUnifyTerms$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$logic$IUnifyTerms$_unify_terms$arity$3 = function(u, v, s) {
  return cljs.core.logic._unify_with_map.call(null, v, u, s)
};
cljs.core.ObjMap.prototype.cljs$core$logic$IUnifyTerms$ = true;
cljs.core.ObjMap.prototype.cljs$core$logic$IUnifyTerms$_unify_terms$arity$3 = function(u, v, s) {
  return cljs.core.logic._unify_with_map.call(null, v, u, s)
};
cljs.core.logic.IUnifyTerms["_"] = true;
cljs.core.logic._unify_terms["_"] = function(u, v, s) {
  if(cljs.core.sequential_QMARK_.call(null, u)) {
    return cljs.core.logic._unify_with_seq.call(null, v, u, s)
  }else {
    return cljs.core.logic._unify_with_object.call(null, v, u, s)
  }
};
cljs.core.logic.IUnifyTerms["null"] = true;
cljs.core.logic._unify_terms["null"] = function(u, v, s) {
  return cljs.core.logic._unify_with_nil.call(null, v, u, s)
};
cljs.core.logic.IUnifyWithNil["_"] = true;
cljs.core.logic._unify_with_nil["_"] = function(v, u, s) {
  return false
};
cljs.core.logic.IUnifyWithNil["null"] = true;
cljs.core.logic._unify_with_nil["null"] = function(v, u, s) {
  return s
};
cljs.core.logic.IUnifyWithObject["_"] = true;
cljs.core.logic._unify_with_object["_"] = function(v, u, s) {
  if(cljs.core._EQ_.call(null, u, v)) {
    return s
  }else {
    return false
  }
};
cljs.core.logic.IUnifyWithObject["null"] = true;
cljs.core.logic._unify_with_object["null"] = function(v, u, s) {
  return false
};
cljs.core.logic.IUnifyWithLVar["_"] = true;
cljs.core.logic._unify_with_lvar["_"] = function(v, u, s) {
  return cljs.core.logic._ext.call(null, s, u, v)
};
cljs.core.logic.IUnifyWithLVar["null"] = true;
cljs.core.logic._unify_with_lvar["null"] = function(v, u, s) {
  return cljs.core.logic._ext_no_check.call(null, s, u, v)
};
cljs.core.logic.IUnifyWithLSeq["_"] = true;
cljs.core.logic._unify_with_lseq["_"] = function(v, u, s) {
  if(cljs.core.sequential_QMARK_.call(null, v)) {
    var u__$1 = u;
    var v__$1 = v;
    var s__$1 = s;
    while(true) {
      if(cljs.core.seq.call(null, v__$1)) {
        if(cljs.core.logic.lcons_QMARK_.call(null, u__$1)) {
          var temp__3971__auto__ = cljs.core.logic._unify.call(null, s__$1, cljs.core.logic._lfirst.call(null, u__$1), cljs.core.first.call(null, v__$1));
          if(cljs.core.truth_(temp__3971__auto__)) {
            var s__$2 = temp__3971__auto__;
            var G__4362 = cljs.core.logic._lnext.call(null, u__$1);
            var G__4363 = cljs.core.next.call(null, v__$1);
            var G__4364 = s__$2;
            u__$1 = G__4362;
            v__$1 = G__4363;
            s__$1 = G__4364;
            continue
          }else {
            return false
          }
        }else {
          return cljs.core.logic._unify.call(null, s__$1, u__$1, v__$1)
        }
      }else {
        if(cljs.core.logic.lvar_QMARK_.call(null, u__$1)) {
          return cljs.core.logic._unify.call(null, s__$1, u__$1, cljs.core.List.EMPTY)
        }else {
          return false
        }
      }
      break
    }
  }else {
    return false
  }
};
cljs.core.logic.IUnifyWithLSeq["null"] = true;
cljs.core.logic._unify_with_lseq["null"] = function(v, u, s) {
  return false
};
cljs.core.logic.IUnifyWithSequential["_"] = true;
cljs.core.logic._unify_with_seq["_"] = function(v, u, s) {
  if(cljs.core.sequential_QMARK_.call(null, v)) {
    var u__$1 = u;
    var v__$1 = v;
    var s__$1 = s;
    while(true) {
      if(cljs.core.seq.call(null, u__$1)) {
        if(cljs.core.seq.call(null, v__$1)) {
          var temp__3971__auto__ = cljs.core.logic._unify.call(null, s__$1, cljs.core.first.call(null, u__$1), cljs.core.first.call(null, v__$1));
          if(cljs.core.truth_(temp__3971__auto__)) {
            var s__$2 = temp__3971__auto__;
            var G__4365 = cljs.core.next.call(null, u__$1);
            var G__4366 = cljs.core.next.call(null, v__$1);
            var G__4367 = s__$2;
            u__$1 = G__4365;
            v__$1 = G__4366;
            s__$1 = G__4367;
            continue
          }else {
            return false
          }
        }else {
          return false
        }
      }else {
        if(cljs.core.seq.call(null, v__$1)) {
          return false
        }else {
          return s__$1
        }
      }
      break
    }
  }else {
    return false
  }
};
cljs.core.logic.IUnifyWithSequential["null"] = true;
cljs.core.logic._unify_with_seq["null"] = function(v, u, s) {
  return false
};
cljs.core.logic.not_found = {};
cljs.core.logic.unify_with_map_STAR_ = function unify_with_map_STAR_(v, u, s) {
  if(!(cljs.core.count.call(null, v) === cljs.core.count.call(null, u))) {
    return false
  }else {
    var ks = cljs.core.seq.call(null, cljs.core.keys.call(null, u));
    var s__$1 = s;
    while(true) {
      if(ks) {
        var kf = cljs.core.first.call(null, ks);
        var vf = cljs.core._lookup.call(null, v, kf, cljs.core.logic.not_found);
        if(vf === cljs.core.logic.not_found) {
          return false
        }else {
          var temp__3971__auto__ = cljs.core.logic._unify.call(null, s__$1, cljs.core._lookup.call(null, u, kf, null), vf);
          if(cljs.core.truth_(temp__3971__auto__)) {
            var s__$2 = temp__3971__auto__;
            var G__4368 = cljs.core.next.call(null, ks);
            var G__4369 = s__$2;
            ks = G__4368;
            s__$1 = G__4369;
            continue
          }else {
            return false
          }
        }
      }else {
        return s__$1
      }
      break
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$logic$IUnifyWithMap$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$logic$IUnifyWithMap$_unify_with_map$arity$3 = function(v, u, s) {
  return cljs.core.logic.unify_with_map_STAR_.call(null, v, u, s)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$logic$IUnifyWithMap$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$logic$IUnifyWithMap$_unify_with_map$arity$3 = function(v, u, s) {
  return cljs.core.logic.unify_with_map_STAR_.call(null, v, u, s)
};
cljs.core.ObjMap.prototype.cljs$core$logic$IUnifyWithMap$ = true;
cljs.core.ObjMap.prototype.cljs$core$logic$IUnifyWithMap$_unify_with_map$arity$3 = function(v, u, s) {
  return cljs.core.logic.unify_with_map_STAR_.call(null, v, u, s)
};
cljs.core.logic.IUnifyWithMap["_"] = true;
cljs.core.logic._unify_with_map["_"] = function(v, u, s) {
  return false
};
cljs.core.logic.IUnifyWithMap["null"] = true;
cljs.core.logic._unify_with_map["null"] = function(v, u, s) {
  return false
};
cljs.core.PersistentHashSet.prototype.cljs$core$logic$IUnifyWithSet$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$logic$IUnifyWithSet$_unify_with_set$arity$3 = function(v, u, s) {
  var u__$1 = u;
  var v__$1 = v;
  var ulvars = cljs.core.PersistentVector.EMPTY;
  var umissing = cljs.core.PersistentVector.EMPTY;
  while(true) {
    if(cljs.core.seq.call(null, u__$1)) {
      if(cljs.core.seq.call(null, v__$1)) {
        var uf = cljs.core.first.call(null, u__$1);
        if(cljs.core.logic.lvar_QMARK_.call(null, uf)) {
          var G__4370 = cljs.core.disj.call(null, u__$1, uf);
          var G__4371 = v__$1;
          var G__4372 = cljs.core.conj.call(null, ulvars, uf);
          var G__4373 = umissing;
          u__$1 = G__4370;
          v__$1 = G__4371;
          ulvars = G__4372;
          umissing = G__4373;
          continue
        }else {
          if(cljs.core.contains_QMARK_.call(null, v__$1, uf)) {
            var G__4374 = cljs.core.disj.call(null, u__$1, uf);
            var G__4375 = cljs.core.disj.call(null, v__$1, uf);
            var G__4376 = ulvars;
            var G__4377 = umissing;
            u__$1 = G__4374;
            v__$1 = G__4375;
            ulvars = G__4376;
            umissing = G__4377;
            continue
          }else {
            var G__4378 = cljs.core.disj.call(null, u__$1, uf);
            var G__4379 = v__$1;
            var G__4380 = ulvars;
            var G__4381 = cljs.core.conj.call(null, umissing, uf);
            u__$1 = G__4378;
            v__$1 = G__4379;
            ulvars = G__4380;
            umissing = G__4381;
            continue
          }
        }
      }else {
        return false
      }
    }else {
      if(cljs.core.seq.call(null, v__$1)) {
        if(cljs.core.seq.call(null, ulvars)) {
          var v__$2 = v__$1;
          var vlvars = cljs.core.PersistentVector.EMPTY;
          var vmissing = cljs.core.PersistentVector.EMPTY;
          while(true) {
            if(cljs.core.seq.call(null, v__$2)) {
              var vf = cljs.core.first.call(null, v__$2);
              if(cljs.core.logic.lvar_QMARK_.call(null, vf)) {
                var G__4382 = cljs.core.disj.call(null, v__$2, vf);
                var G__4383 = cljs.core.conj.call(null, vlvars, vf);
                var G__4384 = vmissing;
                v__$2 = G__4382;
                vlvars = G__4383;
                vmissing = G__4384;
                continue
              }else {
                var G__4385 = cljs.core.disj.call(null, v__$2, vf);
                var G__4386 = vlvars;
                var G__4387 = cljs.core.conj.call(null, vmissing, vf);
                v__$2 = G__4385;
                vlvars = G__4386;
                vmissing = G__4387;
                continue
              }
            }else {
              return cljs.core.logic._unify.call(null, s, cljs.core.concat.call(null, ulvars, umissing), cljs.core.concat.call(null, vmissing, vlvars))
            }
            break
          }
        }else {
          return false
        }
      }else {
        return s
      }
    }
    break
  }
};
cljs.core.logic.IUnifyWithSet["_"] = true;
cljs.core.logic._unify_with_set["_"] = function(v, u, s) {
  return false
};
cljs.core.logic.IUnifyWithSet["null"] = true;
cljs.core.logic._unify_with_set["null"] = function(v, u, s) {
  return false
};
cljs.core.logic.IReifyTerm["_"] = true;
cljs.core.logic._reify_term["_"] = function(v, s) {
  if(cljs.core.sequential_QMARK_.call(null, v)) {
    var v__$1 = v;
    var s__$1 = s;
    while(true) {
      if(cljs.core.seq.call(null, v__$1)) {
        var G__4388 = cljs.core.next.call(null, v__$1);
        var G__4389 = cljs.core.logic._reify_STAR_.call(null, s__$1, cljs.core.first.call(null, v__$1));
        v__$1 = G__4388;
        s__$1 = G__4389;
        continue
      }else {
        return s__$1
      }
      break
    }
  }else {
    return s
  }
};
cljs.core.logic.IReifyTerm["null"] = true;
cljs.core.logic._reify_term["null"] = function(v, s) {
  return s
};
cljs.core.logic.walk_term_map_STAR_ = function walk_term_map_STAR_(v, s) {
  var v__$1 = v;
  var r = cljs.core.ObjMap.EMPTY;
  while(true) {
    if(cljs.core.seq.call(null, v__$1)) {
      var vec__4392 = cljs.core.first.call(null, v__$1);
      var vfk = cljs.core.nth.call(null, vec__4392, 0, null);
      var vfv = cljs.core.nth.call(null, vec__4392, 1, null);
      var G__4393 = cljs.core.next.call(null, v__$1);
      var G__4394 = cljs.core.assoc.call(null, r, vfk, cljs.core.logic._walk_STAR_.call(null, s, vfv));
      v__$1 = G__4393;
      r = G__4394;
      continue
    }else {
      return r
    }
    break
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$logic$IWalkTerm$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$logic$IWalkTerm$_walk_term$arity$2 = function(v, s) {
  var v__$1 = v;
  var r = cljs.core.ObjMap.EMPTY;
  while(true) {
    if(cljs.core.seq.call(null, v__$1)) {
      var G__4395 = cljs.core.next.call(null, v__$1);
      var G__4396 = cljs.core.conj.call(null, r, cljs.core.logic._walk_STAR_.call(null, s, cljs.core.first.call(null, v__$1)));
      v__$1 = G__4395;
      r = G__4396;
      continue
    }else {
      return r
    }
    break
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$logic$IWalkTerm$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$logic$IWalkTerm$_walk_term$arity$2 = function(v, s) {
  return cljs.core.logic.walk_term_map_STAR_.call(null, v, s)
};
cljs.core.ObjMap.prototype.cljs$core$logic$IWalkTerm$ = true;
cljs.core.ObjMap.prototype.cljs$core$logic$IWalkTerm$_walk_term$arity$2 = function(v, s) {
  return cljs.core.logic.walk_term_map_STAR_.call(null, v, s)
};
cljs.core.PersistentVector.prototype.cljs$core$logic$IWalkTerm$ = true;
cljs.core.PersistentVector.prototype.cljs$core$logic$IWalkTerm$_walk_term$arity$2 = function(v, s) {
  var v__$1 = v;
  var r = cljs.core.PersistentVector.EMPTY;
  while(true) {
    if(cljs.core.seq.call(null, v__$1)) {
      var G__4397 = cljs.core.next.call(null, v__$1);
      var G__4398 = cljs.core.conj.call(null, r, cljs.core.logic._walk_STAR_.call(null, s, cljs.core.first.call(null, v__$1)));
      v__$1 = G__4397;
      r = G__4398;
      continue
    }else {
      return r
    }
    break
  }
};
cljs.core.logic.IWalkTerm["_"] = true;
cljs.core.logic._walk_term["_"] = function(v, s) {
  if(cljs.core.sequential_QMARK_.call(null, v)) {
    return cljs.core.map.call(null, function(p1__4390_SHARP_) {
      return cljs.core.logic._walk_STAR_.call(null, s, p1__4390_SHARP_)
    }, v)
  }else {
    return v
  }
};
cljs.core.logic.IWalkTerm["null"] = true;
cljs.core.logic._walk_term["null"] = function(v, s) {
  return null
};
cljs.core.logic.IOccursCheckTerm["_"] = true;
cljs.core.logic._occurs_check_term["_"] = function(v, x, s) {
  if(cljs.core.sequential_QMARK_.call(null, v)) {
    var v__$1 = v;
    var x__$1 = x;
    var s__$1 = s;
    while(true) {
      if(cljs.core.seq.call(null, v__$1)) {
        var or__3824__auto__ = cljs.core.logic._occurs_check.call(null, s__$1, x__$1, cljs.core.first.call(null, v__$1));
        if(cljs.core.truth_(or__3824__auto__)) {
          return or__3824__auto__
        }else {
          var G__4399 = cljs.core.next.call(null, v__$1);
          var G__4400 = x__$1;
          var G__4401 = s__$1;
          v__$1 = G__4399;
          x__$1 = G__4400;
          s__$1 = G__4401;
          continue
        }
      }else {
        return false
      }
      break
    }
  }else {
    return false
  }
};
cljs.core.logic.IOccursCheckTerm["null"] = true;
cljs.core.logic._occurs_check_term["null"] = function(v, x, s) {
  return false
};
cljs.core.logic.ITake["_"] = true;
cljs.core.logic._take_STAR_["_"] = function(this$) {
  return this$
};
goog.provide("cljs.core.logic.Choice");
cljs.core.logic.Choice = function(a, f) {
  this.a = a;
  this.f = f
};
cljs.core.logic.Choice.cljs$lang$type = true;
cljs.core.logic.Choice.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core.logic/Choice")
};
cljs.core.logic.Choice.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core.logic/Choice")
};
cljs.core.logic.Choice.prototype.cljs$core$logic$ITake$ = true;
cljs.core.logic.Choice.prototype.cljs$core$logic$ITake$_take_STAR_$arity$1 = function(this$) {
  var self__ = this;
  return new cljs.core.LazySeq(null, false, function() {
    return cljs.core.cons.call(null, cljs.core.first.call(null, self__.a), new cljs.core.LazySeq(null, false, function() {
      return cljs.core.logic._take_STAR_.call(null, self__.f)
    }, null))
  }, null)
};
cljs.core.logic.Choice.prototype.cljs$core$logic$IMPlus$ = true;
cljs.core.logic.Choice.prototype.cljs$core$logic$IMPlus$_mplus$arity$2 = function(this$, fp) {
  var self__ = this;
  return new cljs.core.logic.Choice(self__.a, new cljs.core.logic.Inc(function() {
    return cljs.core.logic._mplus.call(null, fp.call(null), self__.f)
  }))
};
cljs.core.logic.Choice.prototype.cljs$core$logic$IBind$ = true;
cljs.core.logic.Choice.prototype.cljs$core$logic$IBind$_bind$arity$2 = function(this$, g) {
  var self__ = this;
  return cljs.core.logic._mplus.call(null, g.call(null, self__.a), new cljs.core.logic.Inc(function() {
    return cljs.core.logic._bind.call(null, self__.f, g)
  }))
};
cljs.core.logic.Choice;
cljs.core.logic.choice = function choice(a, f) {
  return new cljs.core.logic.Choice(a, f)
};
cljs.core.logic.IBind["null"] = true;
cljs.core.logic._bind["null"] = function(_, g) {
  return null
};
cljs.core.logic.IMPlus["null"] = true;
cljs.core.logic._mplus["null"] = function(_, b) {
  return b
};
cljs.core.logic.ITake["null"] = true;
cljs.core.logic._take_STAR_["null"] = function(_) {
  return cljs.core.List.EMPTY
};
cljs.core.logic.IMPlus["_"] = true;
cljs.core.logic._mplus["_"] = function(this$, f) {
  return new cljs.core.logic.Choice(this$, f)
};
goog.provide("cljs.core.logic.Inc");
cljs.core.logic.Inc = function(f) {
  this.f = f;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1
};
cljs.core.logic.Inc.cljs$lang$type = true;
cljs.core.logic.Inc.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core.logic/Inc")
};
cljs.core.logic.Inc.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core.logic/Inc")
};
cljs.core.logic.Inc.prototype.cljs$core$logic$ITake$ = true;
cljs.core.logic.Inc.prototype.cljs$core$logic$ITake$_take_STAR_$arity$1 = function(this$) {
  var self__ = this;
  return new cljs.core.LazySeq(null, false, function() {
    return cljs.core.logic._take_STAR_.call(null, self__.f.call(null))
  }, null)
};
cljs.core.logic.Inc.prototype.cljs$core$logic$IMPlus$ = true;
cljs.core.logic.Inc.prototype.cljs$core$logic$IMPlus$_mplus$arity$2 = function(this$, fp) {
  var self__ = this;
  return new cljs.core.logic.Inc(function() {
    return cljs.core.logic._mplus.call(null, fp.call(null), this$)
  })
};
cljs.core.logic.Inc.prototype.cljs$core$logic$IBind$ = true;
cljs.core.logic.Inc.prototype.cljs$core$logic$IBind$_bind$arity$2 = function(this$, g) {
  var self__ = this;
  return new cljs.core.logic.Inc(function() {
    return cljs.core.logic._bind.call(null, self__.f.call(null), g)
  })
};
cljs.core.logic.Inc.prototype.call = function(this_sym4404) {
  var self__ = this;
  var this_sym4404__$1 = this;
  var _ = this_sym4404__$1;
  return self__.f.call(null)
};
cljs.core.logic.Inc.prototype.apply = function(this_sym4402, args4403) {
  var self__ = this;
  return this_sym4402.call.apply(this_sym4402, [this_sym4402].concat(args4403.slice()))
};
cljs.core.logic.Inc;
cljs.core.logic.succeed = function succeed(a) {
  return a
};
cljs.core.logic.fail = function fail(a) {
  return null
};
cljs.core.logic.s_SHARP_ = cljs.core.logic.succeed;
cljs.core.logic.u_SHARP_ = cljs.core.logic.fail;
cljs.core.logic.IIfA = {};
cljs.core.logic._ifa = function _ifa(b, gs, c) {
  if(function() {
    var and__3822__auto__ = b;
    if(and__3822__auto__) {
      return b.cljs$core$logic$IIfA$_ifa$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return b.cljs$core$logic$IIfA$_ifa$arity$3(b, gs, c)
  }else {
    var x__2373__auto__ = b == null ? null : b;
    return function() {
      var or__3824__auto__ = cljs.core.logic._ifa[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._ifa["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IIfA.-ifa", b);
        }
      }
    }().call(null, b, gs, c)
  }
};
cljs.core.logic.IIfU = {};
cljs.core.logic._ifu = function _ifu(b, gs, c) {
  if(function() {
    var and__3822__auto__ = b;
    if(and__3822__auto__) {
      return b.cljs$core$logic$IIfU$_ifu$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return b.cljs$core$logic$IIfU$_ifu$arity$3(b, gs, c)
  }else {
    var x__2373__auto__ = b == null ? null : b;
    return function() {
      var or__3824__auto__ = cljs.core.logic._ifu[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._ifu["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IIfU.-ifu", b);
        }
      }
    }().call(null, b, gs, c)
  }
};
cljs.core.logic.IIfA["null"] = true;
cljs.core.logic._ifa["null"] = function(b, gs, c) {
  if(cljs.core.truth_(c)) {
    return cljs.core.force.call(null, c)
  }else {
    return null
  }
};
cljs.core.logic.IIfU["null"] = true;
cljs.core.logic._ifu["null"] = function(b, gs, c) {
  if(cljs.core.truth_(c)) {
    return cljs.core.force.call(null, c)
  }else {
    return null
  }
};
cljs.core.logic.Substitutions.prototype.cljs$core$logic$IIfA$ = true;
cljs.core.logic.Substitutions.prototype.cljs$core$logic$IIfA$_ifa$arity$3 = function(b, gs, c) {
  var b__$1 = b;
  var G__4406 = gs;
  var vec__4407 = G__4406;
  var g0 = cljs.core.nth.call(null, vec__4407, 0, null);
  var gr = cljs.core.nthnext.call(null, vec__4407, 1);
  var b__$2 = b__$1;
  var G__4406__$1 = G__4406;
  while(true) {
    var b__$3 = b__$2;
    var vec__4408 = G__4406__$1;
    var g0__$1 = cljs.core.nth.call(null, vec__4408, 0, null);
    var gr__$1 = cljs.core.nthnext.call(null, vec__4408, 1);
    if(cljs.core.truth_(g0__$1)) {
      var temp__3974__auto__ = g0__$1.call(null, b__$3);
      if(cljs.core.truth_(temp__3974__auto__)) {
        var b__$4 = temp__3974__auto__;
        var G__4409 = b__$4;
        var G__4410 = gr__$1;
        b__$2 = G__4409;
        G__4406__$1 = G__4410;
        continue
      }else {
        return null
      }
    }else {
      return b__$3
    }
    break
  }
};
cljs.core.logic.Substitutions.prototype.cljs$core$logic$IIfU$ = true;
cljs.core.logic.Substitutions.prototype.cljs$core$logic$IIfU$_ifu$arity$3 = function(b, gs, c) {
  var b__$1 = b;
  var G__4412 = gs;
  var vec__4413 = G__4412;
  var g0 = cljs.core.nth.call(null, vec__4413, 0, null);
  var gr = cljs.core.nthnext.call(null, vec__4413, 1);
  var b__$2 = b__$1;
  var G__4412__$1 = G__4412;
  while(true) {
    var b__$3 = b__$2;
    var vec__4414 = G__4412__$1;
    var g0__$1 = cljs.core.nth.call(null, vec__4414, 0, null);
    var gr__$1 = cljs.core.nthnext.call(null, vec__4414, 1);
    if(cljs.core.truth_(g0__$1)) {
      var temp__3974__auto__ = g0__$1.call(null, b__$3);
      if(cljs.core.truth_(temp__3974__auto__)) {
        var b__$4 = temp__3974__auto__;
        var G__4415 = b__$4;
        var G__4416 = gr__$1;
        b__$2 = G__4415;
        G__4412__$1 = G__4416;
        continue
      }else {
        return null
      }
    }else {
      return b__$3
    }
    break
  }
};
cljs.core.logic.Inc.prototype.cljs$core$logic$IIfU$ = true;
cljs.core.logic.Inc.prototype.cljs$core$logic$IIfU$_ifu$arity$3 = function(b, gs, c) {
  return new cljs.core.logic.Inc(function() {
    return cljs.core.logic._ifu.call(null, b.call(null), gs, c)
  })
};
cljs.core.logic.Inc.prototype.cljs$core$logic$IIfA$ = true;
cljs.core.logic.Inc.prototype.cljs$core$logic$IIfA$_ifa$arity$3 = function(b, gs, c) {
  return new cljs.core.logic.Inc(function() {
    return cljs.core.logic._ifa.call(null, b.call(null), gs, c)
  })
};
cljs.core.logic.Choice.prototype.cljs$core$logic$IIfA$ = true;
cljs.core.logic.Choice.prototype.cljs$core$logic$IIfA$_ifa$arity$3 = function(b, gs, c) {
  return cljs.core.reduce.call(null, cljs.core.logic._bind, b, gs)
};
cljs.core.logic.Choice.prototype.cljs$core$logic$IIfU$ = true;
cljs.core.logic.Choice.prototype.cljs$core$logic$IIfU$_ifu$arity$3 = function(b, gs, c) {
  return cljs.core.reduce.call(null, cljs.core.logic._bind, b.a, gs)
};
cljs.core.logic.nilo = function nilo(a) {
  return function(a__2885__auto__) {
    var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, null, a);
    if(cljs.core.truth_(temp__3971__auto__)) {
      var b__2886__auto__ = temp__3971__auto__;
      return b__2886__auto__
    }else {
      return null
    }
  }
};
cljs.core.logic.emptyo = function emptyo(a) {
  return function(a__2885__auto__) {
    var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, cljs.core.List.EMPTY, a);
    if(cljs.core.truth_(temp__3971__auto__)) {
      var b__2886__auto__ = temp__3971__auto__;
      return b__2886__auto__
    }else {
      return null
    }
  }
};
cljs.core.logic.conso = function conso(a, d, l) {
  return function(a__2885__auto__) {
    var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, cljs.core.logic.lcons.call(null, a, d), l);
    if(cljs.core.truth_(temp__3971__auto__)) {
      var b__2886__auto__ = temp__3971__auto__;
      return b__2886__auto__
    }else {
      return null
    }
  }
};
cljs.core.logic.firsto = function firsto(l, a) {
  return function(a__2897__auto__) {
    return new cljs.core.logic.Inc(function() {
      var d = cljs.core.logic.lvar.call(null, "\ufdd1'd");
      return cljs.core.logic._bind.call(null, a__2897__auto__, cljs.core.logic.conso.call(null, a, d, l))
    })
  }
};
cljs.core.logic.resto = function resto(l, d) {
  return function(a__2897__auto__) {
    return new cljs.core.logic.Inc(function() {
      var a = cljs.core.logic.lvar.call(null, "\ufdd1'a");
      return cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2885__auto__) {
        var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, cljs.core.logic.lcons.call(null, a, d), l);
        if(cljs.core.truth_(temp__3971__auto__)) {
          var b__2886__auto__ = temp__3971__auto__;
          return b__2886__auto__
        }else {
          return null
        }
      })
    })
  }
};
cljs.core.logic.membero = function membero(x, l) {
  return function(a4418) {
    return new cljs.core.logic.Inc(function() {
      return cljs.core.logic._mplus.call(null, cljs.core.logic._bind.call(null, a4418, function(a__2897__auto__) {
        return new cljs.core.logic.Inc(function() {
          var tail = cljs.core.logic.lvar.call(null, "\ufdd1'tail");
          return cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2885__auto__) {
            var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, cljs.core.logic.lcons.call(null, x, tail), l);
            if(cljs.core.truth_(temp__3971__auto__)) {
              var b__2886__auto__ = temp__3971__auto__;
              return b__2886__auto__
            }else {
              return null
            }
          })
        })
      }), new cljs.core.logic.Inc(function() {
        return cljs.core.logic._bind.call(null, a4418, function(a__2897__auto__) {
          return new cljs.core.logic.Inc(function() {
            var head = cljs.core.logic.lvar.call(null, "\ufdd1'head");
            var tail = cljs.core.logic.lvar.call(null, "\ufdd1'tail");
            return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2885__auto__) {
              var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, cljs.core.logic.lcons.call(null, head, tail), l);
              if(cljs.core.truth_(temp__3971__auto__)) {
                var b__2886__auto__ = temp__3971__auto__;
                return b__2886__auto__
              }else {
                return null
              }
            }), membero.call(null, x, tail))
          })
        })
      }))
    })
  }
};
cljs.core.logic.appendo = function appendo(x, y, z) {
  return function(a4420) {
    return new cljs.core.logic.Inc(function() {
      return cljs.core.logic._mplus.call(null, cljs.core.logic._bind.call(null, a4420, function(a__2897__auto__) {
        return new cljs.core.logic.Inc(function() {
          return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2885__auto__) {
            var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, cljs.core.List.EMPTY, x);
            if(cljs.core.truth_(temp__3971__auto__)) {
              var b__2886__auto__ = temp__3971__auto__;
              return b__2886__auto__
            }else {
              return null
            }
          }), function(a__2897__auto____$1) {
            return new cljs.core.logic.Inc(function() {
              return cljs.core.logic._bind.call(null, a__2897__auto____$1, function(a__2885__auto__) {
                var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, y, z);
                if(cljs.core.truth_(temp__3971__auto__)) {
                  var b__2886__auto__ = temp__3971__auto__;
                  return b__2886__auto__
                }else {
                  return null
                }
              })
            })
          })
        })
      }), new cljs.core.logic.Inc(function() {
        return cljs.core.logic._bind.call(null, a4420, function(a__2897__auto__) {
          return new cljs.core.logic.Inc(function() {
            var a = cljs.core.logic.lvar.call(null, "\ufdd1'a");
            var d = cljs.core.logic.lvar.call(null, "\ufdd1'd");
            return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2885__auto__) {
              var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, cljs.core.logic.lcons.call(null, a, d), x);
              if(cljs.core.truth_(temp__3971__auto__)) {
                var b__2886__auto__ = temp__3971__auto__;
                return b__2886__auto__
              }else {
                return null
              }
            }), function(a__2897__auto____$1) {
              return new cljs.core.logic.Inc(function() {
                var r = cljs.core.logic.lvar.call(null, "\ufdd1'r");
                return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto____$1, function(a__2885__auto__) {
                  var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, cljs.core.logic.lcons.call(null, a, r), z);
                  if(cljs.core.truth_(temp__3971__auto__)) {
                    var b__2886__auto__ = temp__3971__auto__;
                    return b__2886__auto__
                  }else {
                    return null
                  }
                }), appendo.call(null, d, y, r))
              })
            })
          })
        })
      }))
    })
  }
};
cljs.core.logic.prefix = function prefix(s, _LT_s) {
  if(cljs.core._EQ_.call(null, s, _LT_s)) {
    return cljs.core.List.EMPTY
  }else {
    return cljs.core.conj.call(null, prefix.call(null, cljs.core.rest.call(null, s), _LT_s), cljs.core.first.call(null, s))
  }
};
cljs.core.logic.IUnifyWithPMap = {};
cljs.core.logic.unify_with_pmap = function unify_with_pmap(pmap, u, s) {
  if(function() {
    var and__3822__auto__ = pmap;
    if(and__3822__auto__) {
      return pmap.cljs$core$logic$IUnifyWithPMap$unify_with_pmap$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return pmap.cljs$core$logic$IUnifyWithPMap$unify_with_pmap$arity$3(pmap, u, s)
  }else {
    var x__2373__auto__ = pmap == null ? null : pmap;
    return function() {
      var or__3824__auto__ = cljs.core.logic.unify_with_pmap[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic.unify_with_pmap["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IUnifyWithPMap.unify-with-pmap", pmap);
        }
      }
    }().call(null, pmap, u, s)
  }
};
goog.provide("cljs.core.logic.PMap");
cljs.core.logic.PMap = function(__meta, __extmap) {
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  if(arguments.length > 0) {
    this.__meta = __meta;
    this.__extmap = __extmap
  }else {
    this.__meta = null;
    this.__extmap = null
  }
};
cljs.core.logic.PMap.prototype.cljs$core$logic$IUnifyWithPMap$ = true;
cljs.core.logic.PMap.prototype.cljs$core$logic$IUnifyWithPMap$unify_with_pmap$arity$3 = function(v, u, s) {
  var self__ = this;
  return v.cljs$core$logic$IUnifyWithMap$_unify_with_map$arity$3(v, u, s)
};
cljs.core.logic.PMap.prototype.cljs$core$IHash$_hash$arity$1 = function(this__2326__auto__) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_imap.call(null, this__2326__auto__);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.logic.PMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__2331__auto__, k__2332__auto__) {
  var self__ = this;
  return this__2331__auto__.cljs$core$ILookup$_lookup$arity$3(this__2331__auto__, k__2332__auto__, null)
};
cljs.core.logic.PMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__2333__auto__, k4422, else__2334__auto__) {
  var self__ = this;
  if("\ufdd0'else") {
    return cljs.core._lookup.call(null, self__.__extmap, k4422, else__2334__auto__)
  }else {
    return null
  }
};
cljs.core.logic.PMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__2338__auto__, k__2339__auto__, G__4421) {
  var self__ = this;
  var pred__4424 = cljs.core.identical_QMARK_;
  var expr__4425 = k__2339__auto__;
  return new cljs.core.logic.PMap(self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__2339__auto__, G__4421), null)
};
cljs.core.logic.PMap.prototype.cljs$core$logic$IUnifyWithLVar$ = true;
cljs.core.logic.PMap.prototype.cljs$core$logic$IUnifyWithLVar$_unify_with_lvar$arity$3 = function(v, u, s) {
  var self__ = this;
  return cljs.core.logic._ext_no_check.call(null, s, u, v)
};
cljs.core.logic.PMap.prototype.cljs$core$logic$IUnifyTerms$ = true;
cljs.core.logic.PMap.prototype.cljs$core$logic$IUnifyTerms$_unify_terms$arity$3 = function(u, v, s) {
  var self__ = this;
  return cljs.core.logic.unify_with_pmap.call(null, v, u, s)
};
cljs.core.logic.PMap.prototype.cljs$core$logic$IUnifyWithMap$ = true;
cljs.core.logic.PMap.prototype.cljs$core$logic$IUnifyWithMap$_unify_with_map$arity$3 = function(v, u, s) {
  var self__ = this;
  var ks = cljs.core.keys.call(null, v);
  var s__$1 = s;
  while(true) {
    if(cljs.core.seq.call(null, ks)) {
      var kf = cljs.core.first.call(null, ks);
      var uf = cljs.core._lookup.call(null, u, kf, "\ufdd0'cljs.core.logic/not-found");
      if(cljs.core._EQ_.call(null, uf, "\ufdd0'cljs.core.logic/not-found")) {
        return null
      }else {
        var temp__3971__auto__ = cljs.core.logic._unify.call(null, s__$1, v.cljs$core$ILookup$_lookup$arity$3(v, kf, null), uf);
        if(cljs.core.truth_(temp__3971__auto__)) {
          var s__$2 = temp__3971__auto__;
          var G__4427 = cljs.core.next.call(null, ks);
          var G__4428 = s__$2;
          ks = G__4427;
          s__$1 = G__4428;
          continue
        }else {
          return null
        }
      }
    }else {
      return s__$1
    }
    break
  }
};
cljs.core.logic.PMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__2345__auto__, writer__2346__auto__, opts__2347__auto__) {
  var self__ = this;
  var pr_pair__2348__auto__ = function(keyval__2349__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__2346__auto__, cljs.core.pr_writer, "", " ", "", opts__2347__auto__, keyval__2349__auto__)
  };
  return cljs.core.pr_sequential_writer.call(null, writer__2346__auto__, pr_pair__2348__auto__, [cljs.core.str("#"), cljs.core.str("PMap"), cljs.core.str("{")].join(""), ", ", "}", opts__2347__auto__, cljs.core.concat.call(null, cljs.core.PersistentVector.EMPTY, self__.__extmap))
};
cljs.core.logic.PMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__2336__auto__, entry__2337__auto__) {
  var self__ = this;
  if(cljs.core.vector_QMARK_.call(null, entry__2337__auto__)) {
    return this__2336__auto__.cljs$core$IAssociative$_assoc$arity$3(this__2336__auto__, cljs.core._nth.call(null, entry__2337__auto__, 0), cljs.core._nth.call(null, entry__2337__auto__, 1))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__2336__auto__, entry__2337__auto__)
  }
};
cljs.core.logic.PMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__2343__auto__) {
  var self__ = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core.PersistentVector.EMPTY, self__.__extmap))
};
cljs.core.logic.PMap.prototype.cljs$core$logic$IWalkTerm$ = true;
cljs.core.logic.PMap.prototype.cljs$core$logic$IWalkTerm$_walk_term$arity$2 = function(v, s) {
  var self__ = this;
  return cljs.core.logic.walk_term_map_STAR_.call(null, v, s)
};
cljs.core.logic.PMap.prototype.cljs$core$ICounted$_count$arity$1 = function(this__2335__auto__) {
  var self__ = this;
  return 0 + cljs.core.count.call(null, self__.__extmap)
};
cljs.core.logic.PMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__2327__auto__, other__2328__auto__) {
  var self__ = this;
  if(cljs.core.truth_(function() {
    var and__3822__auto__ = other__2328__auto__;
    if(cljs.core.truth_(and__3822__auto__)) {
      var and__3822__auto____$1 = this__2327__auto__.constructor === other__2328__auto__.constructor;
      if(and__3822__auto____$1) {
        return cljs.core.equiv_map.call(null, this__2327__auto__, other__2328__auto__)
      }else {
        return and__3822__auto____$1
      }
    }else {
      return and__3822__auto__
    }
  }())) {
    return true
  }else {
    return false
  }
};
cljs.core.logic.PMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__2330__auto__, G__4421) {
  var self__ = this;
  return new cljs.core.logic.PMap(G__4421, self__.__extmap, self__.__hash)
};
cljs.core.logic.PMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__2329__auto__) {
  var self__ = this;
  return self__.__meta
};
cljs.core.logic.PMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__2340__auto__, k__2341__auto__) {
  var self__ = this;
  if(cljs.core.contains_QMARK_.call(null, cljs.core.PersistentHashSet.EMPTY, k__2341__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.ObjMap.EMPTY, this__2340__auto__), self__.__meta), k__2341__auto__)
  }else {
    return new cljs.core.logic.PMap(self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__2341__auto__)), null)
  }
};
cljs.core.logic.PMap.cljs$lang$type = true;
cljs.core.logic.PMap.cljs$lang$ctorPrSeq = function(this__2366__auto__) {
  return cljs.core.list.call(null, "cljs.core.logic/PMap")
};
cljs.core.logic.PMap.cljs$lang$ctorPrWriter = function(this__2366__auto__, writer__2367__auto__) {
  return cljs.core._write.call(null, writer__2367__auto__, "cljs.core.logic/PMap")
};
cljs.core.logic.__GT_PMap = function __GT_PMap() {
  return new cljs.core.logic.PMap
};
cljs.core.logic.map__GT_PMap = function map__GT_PMap(G__4423) {
  return new cljs.core.logic.PMap(null, cljs.core.dissoc.call(null, G__4423))
};
cljs.core.logic.PMap;
cljs.core.PersistentHashMap.prototype.cljs$core$logic$IUnifyWithPMap$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$logic$IUnifyWithPMap$unify_with_pmap$arity$3 = function(v, u, s) {
  return cljs.core.logic._unify_with_map.call(null, u, v, s)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$logic$IUnifyWithPMap$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$logic$IUnifyWithPMap$unify_with_pmap$arity$3 = function(v, u, s) {
  return cljs.core.logic._unify_with_map.call(null, u, v, s)
};
cljs.core.ObjMap.prototype.cljs$core$logic$IUnifyWithPMap$ = true;
cljs.core.ObjMap.prototype.cljs$core$logic$IUnifyWithPMap$unify_with_pmap$arity$3 = function(v, u, s) {
  return cljs.core.logic._unify_with_map.call(null, u, v, s)
};
cljs.core.logic.LVar.prototype.cljs$core$logic$IUnifyWithPMap$ = true;
cljs.core.logic.LVar.prototype.cljs$core$logic$IUnifyWithPMap$unify_with_pmap$arity$3 = function(v, u, s) {
  return cljs.core.logic._ext.call(null, s, v, u)
};
Object.prototype.cljs$core$logic$IUnifyWithPMap$ = true;
Object.prototype.cljs$core$logic$IUnifyWithPMap$unify_with_pmap$arity$3 = function(v, u, s) {
  return null
};
cljs.core.logic.IUnifyWithPMap["null"] = true;
cljs.core.logic.unify_with_pmap["null"] = function(v, u, s) {
  return null
};
cljs.core.logic.partial_map = function partial_map(m) {
  return cljs.core.logic.map__GT_PMap.call(null, m)
};
cljs.core.logic.lvarq_sym_QMARK_ = function lvarq_sym_QMARK_(s) {
  var and__3822__auto__ = cljs.core.symbol_QMARK_.call(null, s);
  if(and__3822__auto__) {
    return cljs.core._EQ_.call(null, cljs.core.first.call(null, [cljs.core.str(s)].join("")), "?")
  }else {
    return and__3822__auto__
  }
};
cljs.core.logic.proc_lvar = function proc_lvar(lvar_expr, store) {
  var v = function() {
    var temp__3971__auto__ = cljs.core.deref.call(null, store).call(null, lvar_expr);
    if(cljs.core.truth_(temp__3971__auto__)) {
      var u = temp__3971__auto__;
      return u
    }else {
      return cljs.core.logic.lvar.call(null, lvar_expr)
    }
  }();
  cljs.core.swap_BANG_.call(null, store, cljs.core.conj, cljs.core.PersistentVector.fromArray([lvar_expr, v], true));
  return v
};
cljs.core.logic.lcons_expr_QMARK_ = function lcons_expr_QMARK_(expr) {
  var and__3822__auto__ = cljs.core.seq_QMARK_.call(null, expr);
  if(and__3822__auto__) {
    return cljs.core.some.call(null, cljs.core.set(["\ufdd1'."]), cljs.core.set.call(null, expr))
  }else {
    return and__3822__auto__
  }
};
cljs.core.logic.replace_lvar = function replace_lvar(store) {
  return function(expr) {
    if(cljs.core.truth_(cljs.core.logic.lvarq_sym_QMARK_.call(null, expr))) {
      return cljs.core.logic.proc_lvar.call(null, expr, store)
    }else {
      if(cljs.core.truth_(cljs.core.logic.lcons_expr_QMARK_.call(null, expr))) {
        return cljs.core.logic.prep_STAR_.call(null, expr, store)
      }else {
        return expr
      }
    }
  }
};
cljs.core.logic.prep_STAR_ = function() {
  var prep_STAR_ = null;
  var prep_STAR___2 = function(expr, store) {
    return prep_STAR_.call(null, expr, store, false, false)
  };
  var prep_STAR___3 = function(expr, store, lcons_QMARK_) {
    return prep_STAR_.call(null, expr, store, lcons_QMARK_, false)
  };
  var prep_STAR___4 = function(expr, store, lcons_QMARK_, last_QMARK_) {
    var expr__$1 = cljs.core.truth_(function() {
      var and__3822__auto__ = last_QMARK_;
      if(cljs.core.truth_(and__3822__auto__)) {
        return cljs.core.seq.call(null, expr)
      }else {
        return and__3822__auto__
      }
    }()) ? cljs.core.first.call(null, expr) : expr;
    if(cljs.core.truth_(cljs.core.logic.lvarq_sym_QMARK_.call(null, expr__$1))) {
      return cljs.core.logic.proc_lvar.call(null, expr__$1, store)
    }else {
      if(cljs.core.seq_QMARK_.call(null, expr__$1)) {
        if(cljs.core.truth_(function() {
          var or__3824__auto__ = lcons_QMARK_;
          if(cljs.core.truth_(or__3824__auto__)) {
            return or__3824__auto__
          }else {
            return cljs.core.logic.lcons_expr_QMARK_.call(null, expr__$1)
          }
        }())) {
          var vec__4430 = expr__$1;
          var f = cljs.core.nth.call(null, vec__4430, 0, null);
          var n = cljs.core.nthnext.call(null, vec__4430, 1);
          var skip = cljs.core._EQ_.call(null, f, "\ufdd1'.");
          var tail = prep_STAR_.call(null, n, store, lcons_QMARK_, skip);
          if(skip) {
            return tail
          }else {
            return cljs.core.logic.lcons.call(null, prep_STAR_.call(null, f, store), tail)
          }
        }else {
          return clojure.walk.postwalk.call(null, cljs.core.logic.replace_lvar.call(null, store), expr__$1)
        }
      }else {
        if("\ufdd0'else") {
          return expr__$1
        }else {
          return null
        }
      }
    }
  };
  prep_STAR_ = function(expr, store, lcons_QMARK_, last_QMARK_) {
    switch(arguments.length) {
      case 2:
        return prep_STAR___2.call(this, expr, store);
      case 3:
        return prep_STAR___3.call(this, expr, store, lcons_QMARK_);
      case 4:
        return prep_STAR___4.call(this, expr, store, lcons_QMARK_, last_QMARK_)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prep_STAR_.cljs$lang$arity$2 = prep_STAR___2;
  prep_STAR_.cljs$lang$arity$3 = prep_STAR___3;
  prep_STAR_.cljs$lang$arity$4 = prep_STAR___4;
  return prep_STAR_
}();
cljs.core.logic.prep = function prep(expr) {
  var lvars = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var prepped = cljs.core.truth_(cljs.core.logic.lcons_expr_QMARK_.call(null, expr)) ? cljs.core.logic.prep_STAR_.call(null, expr, lvars, true) : clojure.walk.postwalk.call(null, cljs.core.logic.replace_lvar.call(null, lvars), expr);
  return cljs.core.with_meta.call(null, prepped, cljs.core.ObjMap.fromObject(["\ufdd0'lvars"], {"\ufdd0'lvars":cljs.core.deref.call(null, lvars)}))
};
cljs.core.logic.unify = function unify(s, u, v) {
  if(u === v) {
    return s
  }else {
    var u__$1 = cljs.core.logic._walk.call(null, s, u);
    var v__$1 = cljs.core.logic._walk.call(null, s, v);
    if(u__$1 === v__$1) {
      return s
    }else {
      return cljs.core.logic._unify_terms.call(null, u__$1, v__$1, s)
    }
  }
};
cljs.core.logic.unifier_STAR_ = function() {
  var unifier_STAR_ = null;
  var unifier_STAR___2 = function(u, w) {
    return cljs.core.first.call(null, cljs.core.doall.call(null, function() {
      var xs__2905__auto__ = cljs.core.logic._take_STAR_.call(null, new cljs.core.logic.Inc(function() {
        return function(a__2897__auto__) {
          return new cljs.core.logic.Inc(function() {
            var q = cljs.core.logic.lvar.call(null, "\ufdd1'q");
            return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2885__auto__) {
              var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, u, w);
              if(cljs.core.truth_(temp__3971__auto__)) {
                var b__2886__auto__ = temp__3971__auto__;
                return b__2886__auto__
              }else {
                return null
              }
            }), function(a__2885__auto__) {
              var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, u, q);
              if(cljs.core.truth_(temp__3971__auto__)) {
                var b__2886__auto__ = temp__3971__auto__;
                return b__2886__auto__
              }else {
                return null
              }
            }), function(a__2906__auto__) {
              return cljs.core.cons.call(null, cljs.core.logic._reify.call(null, a__2906__auto__, q), cljs.core.List.EMPTY)
            })
          })
        }.call(null, cljs.core.logic.empty_s)
      }));
      if(false) {
        return cljs.core.take.call(null, false, xs__2905__auto__)
      }else {
        return xs__2905__auto__
      }
    }()))
  };
  var unifier_STAR___3 = function() {
    var G__4431__delegate = function(u, w, ts) {
      return cljs.core.apply.call(null, unifier_STAR_, unifier_STAR_.call(null, u, w), ts)
    };
    var G__4431 = function(u, w, var_args) {
      var ts = null;
      if(goog.isDef(var_args)) {
        ts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__4431__delegate.call(this, u, w, ts)
    };
    G__4431.cljs$lang$maxFixedArity = 2;
    G__4431.cljs$lang$applyTo = function(arglist__4432) {
      var u = cljs.core.first(arglist__4432);
      var w = cljs.core.first(cljs.core.next(arglist__4432));
      var ts = cljs.core.rest(cljs.core.next(arglist__4432));
      return G__4431__delegate(u, w, ts)
    };
    G__4431.cljs$lang$arity$variadic = G__4431__delegate;
    return G__4431
  }();
  unifier_STAR_ = function(u, w, var_args) {
    var ts = var_args;
    switch(arguments.length) {
      case 2:
        return unifier_STAR___2.call(this, u, w);
      default:
        return unifier_STAR___3.cljs$lang$arity$variadic(u, w, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unifier_STAR_.cljs$lang$maxFixedArity = 2;
  unifier_STAR_.cljs$lang$applyTo = unifier_STAR___3.cljs$lang$applyTo;
  unifier_STAR_.cljs$lang$arity$2 = unifier_STAR___2;
  unifier_STAR_.cljs$lang$arity$variadic = unifier_STAR___3.cljs$lang$arity$variadic;
  return unifier_STAR_
}();
cljs.core.logic.binding_map_STAR_ = function() {
  var binding_map_STAR_ = null;
  var binding_map_STAR___2 = function(u, w) {
    var lvars = cljs.core.merge.call(null, (new cljs.core.Keyword("\ufdd0'lvars")).call(null, cljs.core.meta.call(null, u)), (new cljs.core.Keyword("\ufdd0'lvars")).call(null, cljs.core.meta.call(null, w)));
    var s = cljs.core.logic.unify.call(null, cljs.core.logic.empty_s, u, w);
    if(cljs.core.truth_(s)) {
      return cljs.core.into.call(null, cljs.core.ObjMap.EMPTY, cljs.core.map.call(null, function(p__4435) {
        var vec__4436 = p__4435;
        var k = cljs.core.nth.call(null, vec__4436, 0, null);
        var v = cljs.core.nth.call(null, vec__4436, 1, null);
        return cljs.core.PersistentVector.fromArray([k, cljs.core.logic._reify.call(null, s, v)], true)
      }, lvars))
    }else {
      return null
    }
  };
  var binding_map_STAR___3 = function() {
    var G__4437__delegate = function(u, w, ts) {
      return cljs.core.apply.call(null, binding_map_STAR_, binding_map_STAR_.call(null, u, w), ts)
    };
    var G__4437 = function(u, w, var_args) {
      var ts = null;
      if(goog.isDef(var_args)) {
        ts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__4437__delegate.call(this, u, w, ts)
    };
    G__4437.cljs$lang$maxFixedArity = 2;
    G__4437.cljs$lang$applyTo = function(arglist__4438) {
      var u = cljs.core.first(arglist__4438);
      var w = cljs.core.first(cljs.core.next(arglist__4438));
      var ts = cljs.core.rest(cljs.core.next(arglist__4438));
      return G__4437__delegate(u, w, ts)
    };
    G__4437.cljs$lang$arity$variadic = G__4437__delegate;
    return G__4437
  }();
  binding_map_STAR_ = function(u, w, var_args) {
    var ts = var_args;
    switch(arguments.length) {
      case 2:
        return binding_map_STAR___2.call(this, u, w);
      default:
        return binding_map_STAR___3.cljs$lang$arity$variadic(u, w, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  binding_map_STAR_.cljs$lang$maxFixedArity = 2;
  binding_map_STAR_.cljs$lang$applyTo = binding_map_STAR___3.cljs$lang$applyTo;
  binding_map_STAR_.cljs$lang$arity$2 = binding_map_STAR___2;
  binding_map_STAR_.cljs$lang$arity$variadic = binding_map_STAR___3.cljs$lang$arity$variadic;
  return binding_map_STAR_
}();
cljs.core.logic.unifier = function() {
  var unifier = null;
  var unifier__2 = function(u, w) {
    if(!cljs.core.logic.lcons_QMARK_.call(null, u)) {
    }else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list("\ufdd1'lcons?", "\ufdd1'u"), cljs.core.hash_map("\ufdd0'line", 980))), cljs.core.hash_map("\ufdd0'line", 980))))].join(""));
    }
    if(!cljs.core.logic.lcons_QMARK_.call(null, w)) {
    }else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list("\ufdd1'lcons?", "\ufdd1'w"), cljs.core.hash_map("\ufdd0'line", 981))), cljs.core.hash_map("\ufdd0'line", 981))))].join(""));
    }
    var up = cljs.core.logic.prep.call(null, u);
    var wp = cljs.core.logic.prep.call(null, w);
    return cljs.core.logic.unifier_STAR_.call(null, up, wp)
  };
  var unifier__3 = function() {
    var G__4439__delegate = function(u, w, ts) {
      return cljs.core.apply.call(null, unifier, unifier.call(null, u, w), ts)
    };
    var G__4439 = function(u, w, var_args) {
      var ts = null;
      if(goog.isDef(var_args)) {
        ts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__4439__delegate.call(this, u, w, ts)
    };
    G__4439.cljs$lang$maxFixedArity = 2;
    G__4439.cljs$lang$applyTo = function(arglist__4440) {
      var u = cljs.core.first(arglist__4440);
      var w = cljs.core.first(cljs.core.next(arglist__4440));
      var ts = cljs.core.rest(cljs.core.next(arglist__4440));
      return G__4439__delegate(u, w, ts)
    };
    G__4439.cljs$lang$arity$variadic = G__4439__delegate;
    return G__4439
  }();
  unifier = function(u, w, var_args) {
    var ts = var_args;
    switch(arguments.length) {
      case 2:
        return unifier__2.call(this, u, w);
      default:
        return unifier__3.cljs$lang$arity$variadic(u, w, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unifier.cljs$lang$maxFixedArity = 2;
  unifier.cljs$lang$applyTo = unifier__3.cljs$lang$applyTo;
  unifier.cljs$lang$arity$2 = unifier__2;
  unifier.cljs$lang$arity$variadic = unifier__3.cljs$lang$arity$variadic;
  return unifier
}();
cljs.core.logic.binding_map = function() {
  var binding_map = null;
  var binding_map__2 = function(u, w) {
    if(!cljs.core.logic.lcons_QMARK_.call(null, u)) {
    }else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list("\ufdd1'lcons?", "\ufdd1'u"), cljs.core.hash_map("\ufdd0'line", 992))), cljs.core.hash_map("\ufdd0'line", 992))))].join(""));
    }
    if(!cljs.core.logic.lcons_QMARK_.call(null, w)) {
    }else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list("\ufdd1'lcons?", "\ufdd1'w"), cljs.core.hash_map("\ufdd0'line", 993))), cljs.core.hash_map("\ufdd0'line", 993))))].join(""));
    }
    var up = cljs.core.logic.prep.call(null, u);
    var wp = cljs.core.logic.prep.call(null, w);
    return cljs.core.logic.binding_map_STAR_.call(null, up, wp)
  };
  var binding_map__3 = function() {
    var G__4441__delegate = function(u, w, ts) {
      return cljs.core.apply.call(null, binding_map, binding_map.call(null, u, w), ts)
    };
    var G__4441 = function(u, w, var_args) {
      var ts = null;
      if(goog.isDef(var_args)) {
        ts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__4441__delegate.call(this, u, w, ts)
    };
    G__4441.cljs$lang$maxFixedArity = 2;
    G__4441.cljs$lang$applyTo = function(arglist__4442) {
      var u = cljs.core.first(arglist__4442);
      var w = cljs.core.first(cljs.core.next(arglist__4442));
      var ts = cljs.core.rest(cljs.core.next(arglist__4442));
      return G__4441__delegate(u, w, ts)
    };
    G__4441.cljs$lang$arity$variadic = G__4441__delegate;
    return G__4441
  }();
  binding_map = function(u, w, var_args) {
    var ts = var_args;
    switch(arguments.length) {
      case 2:
        return binding_map__2.call(this, u, w);
      default:
        return binding_map__3.cljs$lang$arity$variadic(u, w, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  binding_map.cljs$lang$maxFixedArity = 2;
  binding_map.cljs$lang$applyTo = binding_map__3.cljs$lang$applyTo;
  binding_map.cljs$lang$arity$2 = binding_map__2;
  binding_map.cljs$lang$arity$variadic = binding_map__3.cljs$lang$arity$variadic;
  return binding_map
}();
goog.provide("jipdaast");
function nodeToString(node) {
  if(node === null) {
    return""
  }
  switch(node.type) {
    case "Literal":
      return"" + node.value;
    case "Identifier":
      return node.name;
    case "BinaryExpression":
    ;
    case "LogicalExpression":
      return nodeToString(node.left) + node.operator + nodeToString(node.right);
    case "CallExpression":
      return nodeToString(node.callee) + "(" + node.arguments.map(nodeToString).join() + ")";
    case "FunctionExpression":
      return"function (" + node.params.map(nodeToString).join() + ") " + nodeToString(node.body);
    case "LetExpression":
      return"let (" + node.head.map(nodeToString).join() + ") " + nodeToString(node.body);
    case "AssignmentExpression":
      return nodeToString(node.left) + node.operator + nodeToString(node.right);
    case "ArrayExpression":
      return"[" + node.elements.map(nodeToString).join(",") + "]";
    case "MemberExpression":
      if(node.computed) {
        return nodeToString(node.object) + "[" + nodeToString(node.property) + "]"
      }else {
        return nodeToString(node.object) + "." + nodeToString(node.property)
      }
    ;
    case "ObjectExpression":
      return"{" + node.properties.map(nodeToString).join(",") + "}";
    case "ThisExpression":
      return"this";
    case "NewExpression":
      return"new " + nodeToString(node.callee) + "(" + node.arguments.map(nodeToString).join() + ")";
    case "UpdateExpression":
      return node.prefix ? node.operator + nodeToString(node.argument) : nodeToString(node.argument) + node.operator;
    case "UnaryExpression":
      return node.operator + nodeToString(node.argument);
    case "ExpressionStatement":
      return nodeToString(node.expression) + ";";
    case "ReturnStatement":
      if(node.argument === null) {
        return"return;"
      }
      return"return " + nodeToString(node.argument) + ";";
    case "BreakStatement":
      if(node.label) {
        return"break " + nodeToString(node.label) + ";"
      }
      return"break;";
    case "LabeledStatement":
      return nodeToString(node.label) + ":" + nodeToString(node.body);
    case "IfStatement":
      if(node.alternate === null) {
        return"if (" + nodeToString(node.test) + ") " + nodeToString(node.consequent)
      }else {
        return"if (" + nodeToString(node.test) + ") " + nodeToString(node.consequent) + " " + nodeToString(node.alternate)
      }
    ;
    case "ConditionalExpression":
      return nodeToString(node.test) + " ? " + nodeToString(node.consequent) + " " + nodeToString(node.alternate);
    case "SwitchStatement":
      return"switch (" + nodeToString(node.discriminant) + ") {" + (node.cases ? node.cases.map(nodeToString).join("") : "") + "}";
    case "SwitchCase":
      if(node.test === null) {
        return"default: " + node.consequent.map(nodeToString).join(" ")
      }
      return"case " + nodeToString(node.test) + ": " + node.consequent.map(nodeToString).join(" ");
    case "WhileStatement":
      return"while (" + nodeToString(node.test) + ") " + nodeToString(node.body);
    case "DoWhileStatement":
      return"do " + nodeToString(node.body) + " while (" + nodeToString(node.test) + ")";
    case "ForStatement":
      return"for (" + nodeToString(node.init) + ";" + nodeToString(node.test) + ";" + nodeToString(node.update) + ") " + nodeToString(node.body) + ";";
    case "FunctionDeclaration":
      return"function " + nodeToString(node.id) + "(" + node.params.map(nodeToString).join() + ") " + nodeToString(node.body) + ";";
    case "VariableDeclaration":
      return node.kind + " " + node.declarations.map(nodeToString).join() + ";";
    case "VariableDeclarator":
      return nodeToString(node.id) + (node.init ? "=" + nodeToString(node.init) : "");
    case "Property":
      return nodeToString(node.key) + ":" + nodeToString(node.value);
    case "Program":
      return node.body.map(nodeToString).join(" ");
    case "BlockStatement":
      return"{" + node.body.map(nodeToString).join(" ") + "}";
    case "TryStatement":
      return"try " + nodeToString(node.block) + " " + node.handlers.map(nodeToString).join(" ");
    case "CatchClause":
      return"catch (" + nodeToString(node.param) + ") " + nodeToString(node.body);
    case "ThrowStatement":
      return"throw " + nodeToString(node.argument);
    case "EmptyStatement":
      return";";
    default:
      throw new Error("nodeToString: cannot handle " + node.type);
  }
}
function isIdentifier(n) {
  return n.type === "Identifier"
}
function isObjectExpression(n) {
  return n.type === "ObjectExpression"
}
function isReturnStatement(n) {
  return n.type === "ReturnStatement"
}
function isBreakStatement(n) {
  return n.type === "BreakStatement"
}
function isLabeledStatement(n) {
  return n.type === "LabeledStatement"
}
function isCallExpression(n) {
  return n.type === "CallExpression"
}
function isVariableDeclaration(n) {
  return n.type === "VariableDeclaration"
}
function isVariableDeclarator(n) {
  return n.type === "VariableDeclarator"
}
function isAssignmentExpression(n) {
  return n.type === "AssignmentExpression"
}
function isBinaryExpression(n) {
  return n.type === "BinaryExpression"
}
function isLogicalExpression(n) {
  return n.type === "BinaryExpression"
}
function isUnaryExpression(n) {
  return n.type === "UnaryExpression"
}
function isFunctionExpression(n) {
  return n.type === "FunctionExpression"
}
function isNewExpression(n) {
  return n.type === "NewExpression"
}
function isFunctionDeclaration(n) {
  return n.type === "FunctionDeclaration"
}
function isProgram(n) {
  return n.type === "Program"
}
function isBlockStatement(n) {
  return n.type === "BlockStatement"
}
function isThisExpression(n) {
  return n.type === "ThisExpression"
}
function isMemberExpression(n) {
  return n.type === "MemberExpression"
}
function isUpdateExpression(n) {
  return n.type === "UpdateExpression"
}
function isTryStatement(n) {
  return n.type === "TryStatement"
}
function isCatchClause(n) {
  return n.type === "CatchClause"
}
function isIfStatement(n) {
  return n.type === "IfStatement"
}
function isConditionalExpression(n) {
  return n.type === "ConditionalExpression"
}
function isSwitchStatement(n) {
  return n.type === "SwitchStatement"
}
function children(node) {
  switch(node.type) {
    case "Literal":
    ;
    case "Identifier":
      return[];
    case "BinaryExpression":
    ;
    case "LogicalExpression":
      return[node.left, node.right];
    case "CallExpression":
      return[node.callee].concat(node.arguments);
    case "FunctionExpression":
      return node.params.concat([node.body]);
    case "LetExpression":
      return node.head.concat([node.body]);
    case "AssignmentExpression":
      return[node.left, node.right];
    case "ArrayExpression":
      return node.elements;
    case "MemberExpression":
      return[node.object, node.property];
    case "ObjectExpression":
      return node.properties;
    case "ExpressionStatement":
      return[node.expression];
    case "ThisExpression":
      return[];
    case "NewExpression":
      return[node.callee].concat(node.arguments);
    case "UpdateExpression":
      return[node.argument];
    case "UnaryExpression":
      return[node.argument];
    case "ReturnStatement":
      if(node.argument === null) {
        return[]
      }
      return[node.argument];
    case "BreakStatement":
      if(node.label === null) {
        return[]
      }
      return[node.label];
    case "LabeledStatement":
      return[node.label, node.body];
    case "IfStatement":
      if(node.alternate === null) {
        return[node.test, node.consequent]
      }
      return[node.test, node.consequent, node.alternate];
    case "ConditionalExpression":
      return[node.test, node.consequent, node.alternate];
    case "SwitchStatement":
      if(node.cases) {
        return[node.discriminant].concat(node.cases.flatMap(children))
      }
      return[node.discriminant];
    case "SwitchCase":
      if(node.test) {
        return[node.test].concat(node.consequent)
      }
      return node.consequent;
    case "WhileStatement":
      return[node.test, node.body];
    case "DoWhileStatement":
      return[node.body, node.test];
    case "ForStatement":
      return[node.init, node.test, node.update, node.body];
    case "FunctionDeclaration":
      return[node.id].concat(node.params).concat([node.body]);
    case "VariableDeclaration":
      return node.declarations;
    case "VariableDeclarator":
      if(node.init === null) {
        return[node.id]
      }
      return[node.id, node.init];
    case "Property":
      return[node.key, node.value];
    case "Program":
    ;
    case "BlockStatement":
      return node.body;
    case "TryStatement":
      return[node.block].concat(node.handlers);
    case "CatchClause":
      return[node.param, node.body];
    case "ThrowStatement":
      return[node.argument];
    case "EmptyStatement":
      return[];
    default:
      throw new Error("children: cannot handle " + node);
  }
}
function descendants(n) {
  if(Array.isArray(n)) {
    return n.flatMap(descendants)
  }else {
    var cs = children(n);
    return cs.concat(descendants(cs))
  }
}
function nodes(n) {
  if(Array.isArray(n)) {
    return n.flatMap(nodes)
  }else {
    return[n].concat(nodes(children(n)))
  }
}
function printTree(n) {
  nodes(n).forEach(function(n) {
    var props = [];
    for(var name in n) {
      if(n.hasOwnProperty(name) && name !== "loc" && name != "tag" && name != "toString") {
        props = props.addLast(name)
      }
    }
    print(nodeToString(n) + "\t#" + n.tag)
  })
}
var __nodeCounter__ = 0;
function tagNode(node) {
  node.tag = ++__nodeCounter__
}
var __symCounter__ = 0;
function gensym(prefix) {
  return prefix + ++__symCounter__
}
function createAst(source, context) {
  function visitNode(node) {
    function toString() {
      return nodeToString(this)
    }
    function nodify(x) {
      tagNode(x);
      x.toString = toString
    }
    function doVisit(node) {
      if(node === null) {
        return
      }
      nodify(node);
      var cs = children(node);
      cs.forEach(function(child) {
        doVisit(child, node)
      })
    }
    doVisit(node)
  }
  var ast = esprima.parse(source, {loc:false});
  if(context === "Expression") {
    if(ast.body.length !== 1) {
      throw new Error("createAst: expected single expression, got " + ast.body);
    }
    if(!ast.body[0].hasOwnProperty("expression")) {
      throw new Error("createAst: expected expression, got " + ast.body[0].type);
    }
    ast = ast.body[0].expression
  }else {
    if(context === "Statement") {
      if(ast.body.length !== 1) {
        throw new Error("createAst: expected single statement, got " + ast.body);
      }
      ast = ast.body[0]
    }
  }
  visitNode(ast);
  return ast
}
function tagToNode(tag, ast) {
  var ns = nodes(ast).filter(function(node) {
    return node.tag === tag
  });
  if(ns.length === 1) {
    return ns[0]
  }
  throw new Error("for tag " + tag + " got " + ns);
}
function isChild(node, parent) {
  return children(parent).indexOf(node) > -1
}
function parent(node, ast) {
  var cs = children(ast);
  if(cs.indexOf(node) > -1) {
    return ast
  }
  for(var i = 0;i < cs.length;i++) {
    if(p = parent(node, cs[i])) {
      return p
    }
  }
  return false
}
function isDeclarationIdentifier(n, ast) {
  if(isIdentifier(n)) {
    var p = parent(n, ast);
    return isVariableDeclarator(p) || isFunctionExpression(p) || isFunctionDeclaration(p) || isCatchClause(p)
  }
  return false
}
function isVarDeclarationIdentifier(n, ast) {
  if(isIdentifier(n)) {
    var p = parent(n, ast);
    if(isVariableDeclarator(p)) {
      var pp = parent(p, ast);
      return pp.kind === "var"
    }
    return isFunctionExpression(p) || isFunctionDeclaration(p)
  }
  return false
}
function isConstDeclarationIdentifier(n, ast) {
  if(isIdentifier(n)) {
    var p = parent(n, ast);
    if(isVariableDeclarator(p)) {
      var pp = parent(p, ast);
      return pp.kind === "const"
    }
  }
  return false
}
function isAssignedIdentifier(n, ast) {
  if(isIdentifier(n)) {
    var p = parent(n, ast);
    if(isAssignmentExpression(p)) {
      return p.left === n
    }
  }
  return false
}
function isReferenceIdentifier(n, ast) {
  if(isIdentifier(n)) {
    var p = parent(n, ast);
    if(isAssignmentExpression(p)) {
      return p.left !== n
    }
    return!(isVariableDeclarator(p) || isFunctionExpression(p) || isFunctionDeclaration(p) || isCatchClause(p))
  }
  return false
}
function enclosingBlock(node, ast) {
  var p = parent(node, ast);
  while(p) {
    if(isBlockStatement(p) || isProgram(p)) {
      return p
    }
    p = parent(p, ast)
  }
  return false
}
function enclosingFunction(node, ast) {
  var p = parent(node, ast);
  while(p) {
    if(isFunctionExpression(p) || isFunctionDeclaration(p)) {
      return p
    }
    p = parent(p, ast)
  }
  return false
}
function scopeChain(node, ast) {
  function varsInFunctionScope(node, vars) {
    switch(node.type) {
      case "VariableDeclaration":
        if(node.kind === "var") {
          node.declarations.forEach(function(declaration) {
            vars = vars.addLast(declaration.id)
          })
        }
        break;
      case "FunctionExpression":
        return vars;
      case "FunctionDeclaration":
        return vars.addLast(node.id)
    }
    var cs = children(node);
    for(var i = 0;i < cs.length;i++) {
      vars = varsInFunctionScope(cs[i], vars)
    }
    return vars
  }
  function varsInBlockScope(blockStatement) {
    var vars = [];
    var cs = children(blockStatement);
    for(var i = 0;i < cs.length;i++) {
      var node = cs[i];
      if(isVariableDeclaration(node) && (node.kind === "let" || node.kind === "const")) {
        node.declarations.forEach(function(declaration) {
          vars = vars.addLast(declaration.id)
        })
      }
    }
    return vars
  }
  function upVars(node, vars) {
    var p = parent(node, ast);
    if(!p) {
      return vars
    }
    switch(p.type) {
      case "ForStatement":
        var init1 = p.init;
        var letVars1 = [];
        if(isVariableDeclaration(init1) && init1.kind === "let") {
          init1.declarations.forEach(function(declaration) {
            letVars1 = letVars1.addLast(declaration.id)
          })
        }
        vars = vars.addLast(letVars1);
        break;
      case "BlockStatement":
        var blockScopeVars2 = varsInBlockScope(p);
        blockScopeVars2.kind = "block";
        vars = vars.addLast(blockScopeVars2);
        break;
      case "FunctionExpression":
      ;
      case "FunctionDeclaration":
        var funScopeVars3 = varsInFunctionScope(p.body, p.params.slice(0));
        funScopeVars3.kind = "fun";
        vars = vars.addLast(funScopeVars3);
        break;
      case "CatchClause":
        var catchClauseVars = varsInFunctionScope(p.body, [p.param]);
        catchClauseVars.kind = "catch";
        vars = vars.addLast(catchClauseVars);
        break;
      case "LetExpression":
        if(!isVariableDeclarator(node)) {
          var letScopeVars4 = p.head.map(function(decl) {
            return decl.id
          });
          letScopeVars4.kind = "let";
          vars = vars.addLast(letScopeVars4)
        }
        break;
      case "Program":
        var funScopeVars5 = varsInFunctionScope(p, []);
        funScopeVars5 = funScopeVars5.concat(varsInBlockScope(p));
        funScopeVars5.kind = "fun";
        vars = vars.addLast(funScopeVars5);
        break
    }
    return upVars(p, vars)
  }
  return upVars(node, [])
}
function lookupDeclarationIdentifier(name, node, ast) {
  var vars = scopeChain(node, ast).flatten().filter(function(n) {
    return name === n.name
  });
  if(vars.length == 0) {
    return false
  }else {
    return vars[0]
  }
}
function lookupNodeDeclarationIdentifier(node, ast) {
  return lookupDeclarationIdentifier(node.name, node, ast)
}
function declarationIdentifierKind(n, ast) {
  var p = parent(n, ast);
  if(isVariableDeclarator(p)) {
    var pp = parent(p, ast);
    return pp.kind
  }
  if(isFunctionDeclaration(p) || isFunctionExpression(p)) {
    return"var"
  }
  throw new Error("expected declaration identifier, got " + n);
}
function isConstReferenceIdentifier(n, ast) {
  if(isReferenceIdentifier(n, ast)) {
    var id = lookupDeclarationIdentifier(n.name, n, ast);
    return"const" === declarationIdentifierKind(id, ast)
  }
  return false
}
function isVarReferenceIdentifier(n, ast) {
  if(isReferenceIdentifier(n, ast)) {
    var id = lookupDeclarationIdentifier(n.name, n, ast);
    return"var" === declarationIdentifierKind(id, ast)
  }
  return false
}
function lookupRefVars(n, ast) {
  function doLookupRefVars(n) {
    if(isReferenceIdentifier(n, ast)) {
      var vr = lookupDeclarationIdentifier(n.name, n, ast);
      if(vr) {
        return[vr]
      }
      return[]
    }else {
      if(n.type === "FunctionDeclaration") {
        var vr = lookupDeclarationIdentifier(n.id.name, n, ast);
        if(vr) {
          return[vr]
        }
        return[]
      }
    }
    var cs = children(n).filter(function(c) {
      return c.type !== "FunctionExpression" && c.type !== "FunctionDeclaration"
    });
    return cs.flatMap(doLookupRefVars)
  }
  return doLookupRefVars(n)
}
function lookupAssignmentVars(n, ast) {
  function doLookupAssignmentVars(n) {
    if(isAssignmentExpression(n) && isIdentifier(n.left)) {
      var vr = lookupDeclarationIdentifier(n.left.name, n, ast);
      if(vr) {
        return doLookupAssignmentVars(n.right).addFirst(vr)
      }
      return doLookupAssignmentVars(n.right)
    }else {
      if(isUpdateExpression(n) && isIdentifier(n.argument)) {
        var vr = lookupDeclarationIdentifier(n.argument.name, n, ast);
        if(vr) {
          return[vr]
        }
        return doLookupAssignmentVars(n.argument)
      }
    }
    var cs = children(n).filter(function(c) {
      return c.type !== "FunctionExpression" && c.type !== "FunctionDeclaration"
    });
    return cs.flatMap(doLookupAssignmentVars)
  }
  return doLookupAssignmentVars(n)
}
function filterNodesParse(ns, text, context) {
  text = text.trim();
  var target = createAst(text, context).toString();
  var result = [];
  for(var i = 0;i < ns.length;i++) {
    var nsi = ns[i];
    if(target.equals(nsi.toString())) {
      result = result.addLast(nsi)
    }
  }
  return result
}
function filterNodesText(ns, text) {
  var target = text.trim();
  var result = [];
  for(var i = 0;i < ns.length;i++) {
    var nsi = ns[i];
    if(nsi.toString().startsWith(target)) {
      result = result.addLast(nsi)
    }
  }
  return result
}
function $$$(ns, ast) {
  return new AstQuery(ns, ast)
}
function AstQuery(ns, ast) {
  if(Array.isArray(ns)) {
    this.ns = ns;
    if(!ast) {
      throw new Error("ast required when passing array of nodes");
    }
    this.ast = ast
  }else {
    this.ns = [ns];
    this.ast = ast || ns
  }
}
AstQuery.prototype.toArray = function() {
  return this.ns.slice(0)
};
AstQuery.prototype.toNode = function() {
  if(this.ns.length !== 1) {
    throw new Error("AstQuery.toNode: expected 1 node, got " + this.ns.length);
  }
  return this.ns[0]
};
AstQuery.prototype.toString = function() {
  return this.ns.toString()
};
AstQuery.prototype.children = function() {
  return $$$(this.ns.flatMap(children), this.ast)
};
AstQuery.prototype.descendants = function() {
  return $$$(descendants(this.ns), this.ast)
};
AstQuery.prototype.nodes = function() {
  return $$$(nodes(this.ns), this.ast)
};
AstQuery.prototype.filter = function(pred_n, name) {
  var result = this.ns.filter(pred_n(this.ast));
  if(name) {
    result = result.filter(hasName_n(name))
  }
  return $$$(result, this.ast)
};
function isFunctionExpression_n(ast) {
  return function(n) {
    return isFunctionExpression(n, ast)
  }
}
function isDeclarationIdentifier_n(ast) {
  return function(n) {
    return isDeclarationIdentifier(n, ast)
  }
}
function isVarDeclarationIdentifier_n(ast) {
  return function(n) {
    return isVarDeclarationIdentifier(n, ast)
  }
}
function isConstDeclarationIdentifier_n(ast) {
  return function(n) {
    return isConstDeclarationIdentifier(n, ast)
  }
}
function isReferenceIdentifier_n(ast) {
  return function(n) {
    return isReferenceIdentifier(n, ast)
  }
}
function isConstReferenceIdentifier_n(ast) {
  return function(n) {
    return isConstReferenceIdentifier(n, ast)
  }
}
function isVarReferenceIdentifier_n(ast) {
  return function(n) {
    return isConstReferenceIdentifier(n, ast)
  }
}
function hasName_n(name) {
  return function(n) {
    return name.equals(n.name)
  }
}
AstQuery.prototype.filterDeclarationIdentifiers = function(name) {
  return this.filter(isDeclarationIdentifier_n, name)
};
AstQuery.prototype.findDeclarationIdentifiers = function(name) {
  return this.nodes().filterDeclarationIdentifiers(name)
};
AstQuery.prototype.filterConstDeclarationIdentifiers = function(name) {
  return this.filter(isConstDeclarationIdentifier_n, name)
};
AstQuery.prototype.findConstDeclarationIdentifiers = function(name) {
  return this.nodes().filterConstDeclarationIdentifiers(name)
};
AstQuery.prototype.filterVarDeclarationIdentifiers = function(name) {
  return this.filter(isVarDeclarationIdentifier_n, name)
};
AstQuery.prototype.findVarDeclarationIdentifiers = function(name) {
  return this.nodes().filterVarDeclarationIdentifiers(name)
};
AstQuery.prototype.filterReferenceIdentifiers = function(name) {
  return this.filter(isReferenceIdentifier_n, name)
};
AstQuery.prototype.findReferenceIdentifiers = function(name) {
  return this.nodes().filterReferenceIdentifiers(name)
};
AstQuery.prototype.filterConstReferenceIdentifiers = function(name) {
  return this.filter(isConstReferenceIdentifier_n, name)
};
AstQuery.prototype.findConstReferenceIdentifiers = function(name) {
  return this.nodes().filterConstReferenceIdentifiers(name)
};
AstQuery.prototype.filterVarReferenceIdentifiers = function(name) {
  return this.filter(isVarReferenceIdentifier_n, name)
};
AstQuery.prototype.findVarReferenceIdentifiers = function(name) {
  return this.nodes().filterVarReferenceIdentifiers(name)
};
AstQuery.prototype.withName = function(name) {
  return $$$(this.ns.filter(hasName_n(name)), this.ast)
};
AstQuery.prototype.findExpression = function(text) {
  return $$$(filterNodesParse(nodes(this.ns), text, "Expression"), this.ast)
};
AstQuery.prototype.findText = function(text) {
  return $$$(filterNodesText(nodes(this.ns), text), this.ast)
};
AstQuery.prototype.varsWithName = function(name) {
  return $$$(nodes(this.ns).filter(isVarDeclarationIdentifier_n(this.ast)).filter(hasName_n(name)), this.ast)
};
AstQuery.prototype.functionDeclarationsWithName = function(name) {
  return $$$(nodes(this.ns).filter(isFunctionDeclaration).filter(function(n) {
    return n.id.name === name
  }), this.ast)
};
AstQuery.prototype.functionExpressions = function() {
  return $$$(nodes(this.ns).filter(isFunctionExpression), this.ast)
};
AstQuery.prototype.newExpressions = function() {
  return $$$(nodes(this.ns).filter(isNewExpression), this.ast)
};
goog.provide("lattice");
function Lattice() {
}
function LatticeValue() {
}
Lattice.join = function(x, y) {
  if(x === BOT) {
    return y
  }
  return x.join(y)
};
Lattice.joinCompareResults = function(x, y) {
  if(x === y) {
    return x
  }
  if(x === 0) {
    return y
  }
  if(y === 0) {
    return x
  }
  return undefined
};
Lattice.subsumeComparison = function(x1, x2) {
  var s1 = x1.subsumes(x2);
  var s2 = x2.subsumes(x1);
  return s1 ? s2 ? 0 : 1 : s2 ? -1 : undefined
};
LatticeValue.prototype.equals = function(x) {
  return this.compareTo(x) === 0
};
LatticeValue.prototype.subsumes = function(x) {
  return this.compareTo(x) >= 0
};
LatticeValue.ToNumber = function(x) {
  if(x === undefined) {
    return NaN
  }
  if(x === null) {
    return 0
  }
  if(x === true) {
    return 1
  }
  if(x === false) {
    return 0
  }
  if(typeof x === "number") {
    return x
  }
  if(typeof x === "string") {
    x = x.trim();
    if(x === "Infinity" || x === "+Infinity") {
      return Infinity
    }
    if(x === "-Infinity") {
      return Infinity
    }
    if(x.startsWith("0x") || x.startsWith("0X")) {
      return parseInt(x, 16)
    }
    if(x.indexOf(".") > -1) {
      return parseFloat(x)
    }
    return parseInt(x, 10)
  }
  throw new Error(x);
};
LatticeValue.ToUInt32 = function(x) {
  var n = LatticeValue.ToNumber(x);
  if(isNaN(n) || n === 0 || n === Infinity || n === -Infinity) {
    return 0
  }
  var p = Ecma.sign(n) * Math.floor(Math.abs(n));
  var i = p % Ecma.POW_2_32;
  return i
};
LatticeValue.ToString = function(x) {
  if(x === undefined) {
    return"undefined"
  }
  if(x === null) {
    return"null"
  }
  if(x === true) {
    return"true"
  }
  if(x === false) {
    return"false"
  }
  if(typeof x === "number") {
    return x.toString()
  }
  if(typeof x === "string") {
    return x
  }
  throw new Error(x);
};
LatticeValue.ToBoolean = function(x) {
  return x ? true : false
};
LatticeValue.ToInt32 = function(x) {
  var n = LatticeValue.ToNumber(x);
  if(isNaN(n) || n === 0 || n === Infinity || n === -Infinity) {
    return 0
  }
  var p = Ecma.sign(n) * Math.floor(Math.abs(n));
  var i = p % Ecma.POW_2_32;
  if(i >= Ecma.POW_2_31) {
    return i - Ecma.POW_2_32
  }
  return i
};
LatticeValue.isArrayIndex = function(s) {
  if(typeof s === "string") {
    var n = LatticeValue.ToUInt32(s);
    return LatticeValue.ToString(n) == s && n !== Ecma.POW_2_32 - 1
  }
  return false
};
var BOT = Object.create(new LatticeValue);
BOT.join = function(other) {
  return other
};
BOT.compareTo = function(other) {
  return other === BOT ? 0 : -1
};
BOT.isAddress = function() {
  return false
};
BOT.addresses = function() {
  return false
};
BOT.conc = function() {
  return[]
};
BOT.toString = function() {
  return"_"
};
BOT.nice = function() {
  return"_"
};
BOT.ToBoolean = function() {
  return BOT
};
BOT.ToString = function() {
  return BOT
};
BOT.ToUInt32 = function() {
  return BOT
};
BOT.ToInt32 = function() {
  return BOT
};
BOT.ToNumber = function() {
  return BOT
};
BOT.accept = function(visitor) {
  return visitor.visitBOT(this)
};
var identityLattice = Object.create(new LatticeValue);
identityLattice.join = function() {
  return this
};
identityLattice.compareTo = function() {
  return 0
};
goog.provide("jipda");
function Time(time) {
  this.time = time || []
}
Time.prototype.toString = function() {
  return this.time.toString()
};
Time.prototype.equals = function(object) {
  if(this === object) {
    return true
  }
  return this.time.equals(object.time)
};
Time.prototype.tick = function(value, k) {
  var newTime = this.time.slice(0);
  newTime.push(value);
  if(newTime.length > k) {
    newTime.shift()
  }
  return new Time(newTime)
};
function StoreValue(aval, fresh) {
  assertDefinedNotNull(aval);
  assertDefinedNotNull(aval.join);
  assertDefinedNotNull(aval.equals);
  assertDefinedNotNull(aval.compareTo);
  this.aval = aval;
  this.fresh = fresh === undefined ? 1 : fresh
}
StoreValue.aval = function(storeValue) {
  return storeValue.aval
};
StoreValue.prototype.equals = function(x) {
  if(this === x) {
    return true
  }
  return this.aval.equals(x.aval)
};
StoreValue.prototype.compareTo = function(x) {
  return this.aval.compareTo(x.aval)
};
StoreValue.prototype.toString = function() {
  return this.aval.toString()
};
StoreValue.prototype.update = function(aval) {
  if(this.fresh === 1) {
    return this.strongUpdate(aval)
  }
  return this.weakUpdate(aval)
};
StoreValue.prototype.strongUpdate = function(aval) {
  return new StoreValue(aval, 1)
};
StoreValue.prototype.weakUpdate = function(aval) {
  return new StoreValue(this.aval.join(aval), 2)
};
StoreValue.prototype.reset = function() {
  return new StoreValue(BOT, 0)
};
function Store(entries) {
  this.entries = entries || []
}
Store.prototype.equals = function(x) {
  return this.compareTo(x) === 0
};
Store.prototype.compareTo = function(x) {
  return Lattice.subsumeComparison(this, x)
};
Store.prototype.subsumes = function(x) {
  for(var i = 0;i < x.entries.length;i++) {
    var xentry = x.entries[i];
    var address = xentry[0];
    var thisEntry = this.entries.getEntry(address);
    if(!thisEntry) {
      return false
    }
    var xStoreValue = xentry[1];
    var xThisValue = thisEntry[1];
    var c = xStoreValue.compareTo(xThisValue);
    if(c === undefined || c > 0) {
      return false
    }
  }
  return true
};
Store.prototype.diff = function(x) {
  var diff = [];
  for(var i = 0;i < this.entries.length;i++) {
    var entry = this.entries[i];
    var address = entry[0];
    var value = entry[1];
    var xentry = x.entries.getEntry(address);
    if(xentry) {
      var xvalue = xentry[1];
      if(!value.equals(xvalue)) {
        diff.push(address + ":\n\t" + value + " (" + value.fresh + ")\n\t" + xvalue + " (" + xvalue.fresh + ")")
      }
    }else {
      diff.push(address + ":\n\t" + value + " (" + value.fresh + ")\n\t<undefined>")
    }
  }
  for(i = 0;i < x.entries.length;i++) {
    xentry = x.entries[i];
    address = xentry[0];
    xvalue = xentry[1];
    var entry = this.entries.getEntry(address);
    if(!entry) {
      diff.push(address + ":\n\t<undefined>\n\t" + xvalue + " (" + xvalue.fresh + ")")
    }
  }
  return diff.join("\n")
};
Store.prototype.toString = function() {
  return"{" + this.entries.map(function(entry) {
    return entry[0] + " =" + entry[1].fresh + "=> " + entry[1]
  }).join(",") + "}"
};
Store.prototype.nice = function() {
  return"\n{\n" + this.entries.map(function(entry) {
    return entry[0] + " =" + entry[1].fresh + "=> " + entry[1]
  }).join("\n") + "\n}"
};
Store.prototype.getValue = function(address) {
  var entry = this.entries.getEntry(address);
  return entry ? entry[1] : BOT
};
Store.prototype.lookupAval = function(address) {
  var entry = this.entries.getEntry(address);
  if(entry) {
    return entry[1].aval
  }
  throw new Error("Store.lookupAval: no abstract value for address " + address + "\n" + this.nice());
};
Store.prototype.allocAval = function(address, aval) {
  assertDefinedNotNull(address);
  assertTrue(aval instanceof JipdaValue || aval.isBenv, "need JipdaValue or Benv");
  var entry = this.entries.getEntry(address);
  if(entry && entry.fresh !== 0) {
    var weaklyUpdatedValue = entry[1].weakUpdate(aval);
    var store = new Store(this.entries.updateEntry(address, weaklyUpdatedValue));
    store.weak = true;
    return store
  }
  var newValue = new StoreValue(aval);
  return new Store(this.entries.updateEntry(address, newValue))
};
Store.prototype.updateAval = function(address, aval, msg) {
  assertTrue(aval instanceof JipdaValue || aval.isBenv, "need JipdaValue or Benv");
  var entry = this.entries.getEntry(address);
  if(entry) {
    var updatedValue = entry[1].update(aval);
    return new Store(this.entries.updateEntry(address, updatedValue))
  }
  throw new Error("Store.updateAval: no abstract value at address " + address);
};
Store.prototype.join = function(store) {
  if(store === BOT) {
    return this
  }
  var result = [];
  var addresses = this.entries.entryKeys().concat(store.entries.entryKeys()).toSet();
  var that = this;
  addresses.forEach(function(address) {
    var thisValue = that.getValue(address);
    var otherValue = store.getValue(address);
    if(thisValue === BOT) {
      result = result.addEntry(address, otherValue)
    }else {
      if(otherValue === BOT) {
        result = result.addEntry(address, thisValue)
      }else {
        if(thisValue.equals(otherValue)) {
          result = result.addEntry(address, thisValue)
        }else {
          var joinedValue = new StoreValue(thisValue.aval.join(otherValue.aval), Math.min(thisValue.fresh + otherValue.fresh, 2));
          result = result.addEntry(address, joinedValue)
        }
      }
    }
  });
  return new Store(result)
};
Store.prototype.narrow = function(addresses) {
  var entries = this.entries.flatMap(function(entry) {
    var address = entry[0];
    if(addresses.memberAt(address) > -1) {
      return[entry]
    }
    if(address instanceof Addr) {
      return[]
    }
    return[]
  });
  return new Store(entries)
};
function Cont(memento, benva, proc, applications, handler) {
  this.memento = memento;
  this.benva = benva;
  this.proc = proc;
  this.applications = applications || [];
  this.handler = handler
}
Cont.prototype.equals = function(other) {
  return this.memento.equals(other.memento) && this.benva.equals(other.benva)
};
Cont.prototype.toString = function() {
  return this.memento
};
Cont.prototype.execute = function(stack, store, time, state) {
  if(!(store instanceof Store)) {
    throw new Error("no or wrong store:" + store);
  }
  if(!(time instanceof Time)) {
    throw new Error("no or wrong time:" + time);
  }
  if(!(state instanceof State)) {
    throw new Error("no or wrong state:" + state);
  }
  return this.proc(stack, store, time, state)
};
Cont.prototype.addApplication = function(application) {
  var newApplications = this.applications.remove(application).addFirst(application);
  var cont = new Cont(this.memento, this.benva, this.proc, newApplications, this.handler);
  return cont
};
Cont.prototype.setHandler = function(handler) {
  var cont = new Cont(this.memento, this.benva, this.proc, this.applications, handler);
  return cont
};
function Task(msg, proc) {
  this.msg = msg;
  this.proc = proc
}
Task.prototype.toString = function() {
  return this.msg
};
Task.prototype.execute = function() {
  return this.proc()
};
function gc(store, stack, benva) {
  function benvReachable(benv, reachable) {
    if(benv.isFunction()) {
      benv.Call.forEach(function(Call) {
        reachable = addressesReachable(Call.addresses(), reachable)
      })
    }
    if(benv.isObject()) {
      reachable = valueReachable(benv.Prototype, reachable)
    }
    reachable = addressesReachable(benv.parents, reachable);
    return addressesReachable(benv.addresses(), reachable)
  }
  function contReachable(cont, reachable) {
    return addressReachable(cont.benva, reachable)
  }
  function valueReachable(value, reachable) {
    if(value instanceof JipdaValue) {
      return addressesReachable(value.addresses(), reachable)
    }
    if(value instanceof Addr) {
      return addressReachable(value, reachable)
    }
    if(value.isBenv) {
      return benvReachable(value, reachable)
    }
    if(value instanceof Cont) {
      return contReachable(value, reachable)
    }
    if(Array.isArray(value)) {
      return valuesReachable(value, reachable)
    }
    return reachable
  }
  function valuesReachable(values, reachable) {
    for(var i = 0;i < values.length;i++) {
      reachable = valueReachable(values[i], reachable)
    }
    return reachable
  }
  function addressReachable(address, reachable) {
    if(address === null) {
      return reachable
    }
    if(reachable.memberAt(address) > -1) {
      return reachable
    }
    var aval = store.lookupAval(address);
    assertDefinedNotNull(aval);
    return valueReachable(aval, reachable.addLast(address))
  }
  function addressesReachable(addresses, reachable) {
    for(var i = 0;i < addresses.length;i++) {
      reachable = addressReachable(addresses[i], reachable)
    }
    return reachable
  }
  var reachable = addressReachable(benva, valuesReachable(stack, []));
  return store.narrow(reachable)
}
function JipdaLattice(userLattice) {
  assertDefinedNotNull(userLattice);
  this.userLattice = userLattice
}
JipdaLattice.prototype = new Lattice;
JipdaLattice.prototype.toString = function() {
  return"[JipdaLattice (" + this.userLattice + ")]"
};
JipdaLattice.prototype.abst = function(cvalues) {
  return cvalues.map(JipdaLattice.prototype.abst1, this).reduce(Lattice.join)
};
JipdaLattice.prototype.abst1 = function(cvalue) {
  if(cvalue instanceof Addr) {
    return new JipdaValue(BOT, [cvalue])
  }
  return new JipdaValue(this.userLattice.abst1(cvalue), [])
};
JipdaLattice.prototype.isFalse = function(value) {
  throw new Error;
};
JipdaLattice.prototype.isTrue = function(value) {
  throw new Error;
};
function JipdaValue(user, as) {
  assertDefinedNotNull(user);
  assertDefinedNotNull(as);
  this.user = user;
  this.as = as
}
JipdaValue.prototype = new LatticeValue;
JipdaValue.prototype.accept = function(visitor) {
  return visitor.visitJipdaValue(this)
};
JipdaValue.prototype.addresses = function() {
  return this.as.slice(0)
};
JipdaValue.prototype.isAddress = function() {
  return this.user === BOT
};
JipdaValue.prototype.toString = function(printer) {
  return"[" + this.user.toString(printer) + ", " + (printer ? this.as.map(printer) : this.as) + "]"
};
JipdaValue.prototype.join = function(x) {
  if(x === BOT) {
    return this
  }
  return new JipdaValue(this.user.join(x.user), this.as.concat(x.as).toSet())
};
JipdaValue.prototype.compareTo = function(x) {
  if(x === BOT) {
    return 1
  }
  if(x === this) {
    return 0
  }
  var c1 = this.user.compareTo(x.user);
  if(c1 === undefined) {
    return undefined
  }
  var c2 = Lattice.subsumeComparison(this.as, x.as);
  return Lattice.joinCompareResults(c1, c2)
};
function toUserString(j, store) {
  var objs = j.as.map(Store.prototype.lookupAval, store);
  var vals = objs.map(function(o) {
    return o.DefaultValue("string")
  });
  var u = j.user.join(vals.reduce(Lattice.join, BOT)).ToString();
  return u
}
function toUserNumber(j, store) {
  var objs = j.as.map(Store.prototype.lookupAval, store);
  var vals = objs.map(function(o) {
    return o.DefaultValue("number")
  });
  var u = j.user.join(vals.reduce(Lattice.join, BOT)).ToNumber();
  return u
}
function toUserInt32(j, store) {
  var objs = j.as.map(Store.prototype.lookupAval, store);
  var vals = objs.map(function(o) {
    return o.DefaultValue("number")
  });
  var r = j.user.join(vals.reduce(Lattice.join, BOT));
  var u = j.user.join(vals.reduce(Lattice.join, BOT)).ToInt32();
  return u
}
function toUserBoolean(j) {
  return j.user.ToBoolean().join(j.as.length === 0 ? BOT : userLattice.abst1(true))
}
function ipdaEval(node0, state0, config) {
  var performGc = config.performGc === undefined ? true : config.performGc;
  var k = config.k === undefined ? 1 : config.k;
  var userLattice = config.lattice;
  var lattice = new JipdaLattice(userLattice);
  var ag = config.ag;
  var visited = config.visited || new DefaultVisitedStrategy(performGc ? gc : function(store) {
    return store
  });
  var benvFactory = config.benv || new DefaultBenv;
  assertDefinedNotNull(k);
  assertDefinedNotNull(userLattice);
  assertDefinedNotNull(ag);
  assertDefinedNotNull(visited);
  var J_UNDEFINED = lattice.abst1(undefined);
  var J_NULL = lattice.abst1(null);
  var J_0 = lattice.abst1(0);
  var J_1 = lattice.abst1(1);
  var U_0 = userLattice.abst1(0);
  var U_1 = userLattice.abst1(1);
  var U_TRUE = userLattice.abst1(true);
  var U_FALSE = userLattice.abst1(false);
  var U_THIS = userLattice.abst1("this");
  var U_PROTOTYPE = userLattice.abst1("prototype");
  var U_LENGTH = userLattice.abst1("length");
  var result = BOT;
  var tasks = false;
  function createEnvironment(parenta, sourceNode, declarationNode, state) {
    var benv = benvFactory.createEnvironment(parenta, sourceNode, declarationNode);
    state2 = state.createsEnvironment(sourceNode, declarationNode, benv);
    return{benv:benv, state:state2}
  }
  function createObject(Prototype) {
    var benv = benvFactory.createObject(Prototype);
    return benv
  }
  function createArray() {
    var benv = benvFactory.createArray(ARRAYPA);
    return benv
  }
  function createClosure(node, scope) {
    var benv = benvFactory.createFunction(new BenvClosureCall(node, scope), FUNCTIONPA);
    return benv
  }
  function createPrimitive(applyFunction) {
    var benv = benvFactory.createFunction(new BenvPrimitiveCall(applyFunction), FUNCTIONPA);
    return benv
  }
  function allocAval(address, value, stack, store, state) {
    var store2 = store.allocAval(address, value);
    var state2 = state.allocsAddress(address, value, store2.weak, stack);
    return{store:store2, state:state2}
  }
  function lookupAval(address, stack, store, state) {
    var result = store.lookupAval(address);
    var state2 = state.readsAddress(address, result, stack);
    return{value:result, state:state2}
  }
  function updateAval(address, value, stack, store, state) {
    var store2 = store.updateAval(address, value);
    var state2 = state.writesAddress(address, value, stack);
    return{store:store2, state:state2}
  }
  function sideEffectAval(address, value, stack, store, state) {
    var store2 = store.updateAval(address, value);
    var state2 = state.writesAddress(address, value, stack);
    return{store:store2, state:state2}
  }
  function doLookupAddresses(addresses, stack, store, state) {
    var result = BOT;
    addresses.forEach(function(address) {
      var lookupResult = lookupAval(address, stack, store, state);
      var aval = lookupResult.value;
      result = result.join(aval);
      state = lookupResult.state
    });
    return{value:result, state:state}
  }
  function doScopeLookup(name, stack, benva, store, state) {
    var resultas = [];
    var benvas = [benva];
    while(benvas.length !== 0) {
      var a = benvas[0];
      benvas = benvas.slice(1);
      var lookupResult = lookupAval(a, stack, store, state);
      var benv = lookupResult.value;
      state = lookupResult.state;
      var lookup = benv.lookup(name);
      resultas = resultas.concat(lookup.addresses);
      if(lookup.directMatch) {
        break
      }
      benvas = benvas.concat(benv.parents)
    }
    return{as:resultas.toSet(), state:state}
  }
  function doProtoLookup(object, propertyName, stack, store, state, fcont) {
    var objects = [object];
    var result = BOT;
    while(objects.length > 0) {
      var object = objects[0];
      objects = objects.slice(1);
      var lookup = object.lookup(propertyName);
      var propertyAddresses = lookup.addresses;
      if(propertyAddresses.length === 0) {
        if(object.Prototype.equals(J_NULL)) {
          result = result.join(J_UNDEFINED)
        }else {
          var cprotoAddresses = object.Prototype.addresses();
          if(!cprotoAddresses) {
            throw new Error("doProtoLookup: no addresses for " + object.Prototype);
          }
          cprotoAddresses.forEach(function(protoAddress) {
            var lookupResult = lookupAval(protoAddress, stack, store, state);
            var protoObject = lookupResult.value;
            state = lookupResult.state;
            objects = objects.addLast(protoObject)
          })
        }
      }else {
        var laResult = doLookupAddresses(propertyAddresses, stack, store, state);
        result = result.join(laResult.value);
        state = laResult.state;
        if(lookup.directMatch) {
          break
        }
      }
    }
    return fcont(result, state)
  }
  function hoist(nodes) {
    function varsAndDecls(nodes) {
      return nodes.flatMap(function(node) {
        if(isVariableDeclaration(node)) {
          if(node.kind === "var") {
            return node.declarations
          }
        }else {
          if(isFunctionDeclaration(node)) {
            return[node]
          }else {
            if(isFunctionExpression(node)) {
              return[]
            }else {
              var cs = children(node);
              return varsAndDecls(cs)
            }
          }
        }
      })
    }
    var vds = varsAndDecls(nodes);
    var decls = [];
    var vars = [];
    vds.reverse().forEach(function(vd) {
      var name = vd.id.name;
      var exists = false;
      if(isFunctionDeclaration(vd)) {
        decls.forEach(function(d) {
          if(d.id.name === name) {
            exists = true
          }
        });
        if(!exists) {
          decls = decls.addLast(vd)
        }
      }else {
        if(isVariableDeclarator(vd)) {
          vars.forEach(function(v) {
            if(v.id.name === name) {
              exists = true
            }
          });
          if(!exists) {
            decls.forEach(function(d) {
              if(d.id.name === name) {
                exists = true
              }
            })
          }
          if(!exists) {
            vars = vars.addLast(vd)
          }
        }
      }
    });
    return{funs:decls, vars:vars}
  }
  function DefaultValue(objectAddresses, primPostProcessor, node, stack, benva, store, time, state) {
    return DefaultValueNumber(objectAddresses, primPostProcessor, node, stack, benva, store, time, state)
  }
  function DefaultValueString(objectAddresses, primPostProcessor, node, stack, benva, store, time, state) {
    return defaultValue("toString", "valueOf", objectAddresses, primPostProcessor, node, stack, benva, store, time, state)
  }
  function DefaultValueNumber(objectAddresses, primPostProcessor, node, stack, benva, store, time, state) {
    return defaultValue("valueOf", "toString", objectAddresses, primPostProcessor, node, stack, benva, store, time, state)
  }
  function defaultValue(methodName1, methodName2, objectAddresses, primPostProcessor, node, stack, benva, store, time, state) {
    var throwTypeError = methodName1 === null;
    var propertyName = userLattice.abst1(throwTypeError ? methodName2 : methodName1);
    var application = node;
    return objectAddresses.flatMap(function(objectAddress) {
      var lookupResult = lookupAval(objectAddress, stack, store, state);
      var objectAval = lookupResult.value;
      state = lookupResult.state;
      return doProtoLookup(objectAval, propertyName, stack, store, state, function(method, state) {
        if(method === null) {
          throw new Error("TODO");
        }
        var methodFuns = method.as.map(function(a) {
          var lookupResult = lookupAval(a, stack, store, state);
          state = lookupResult.state;
          return lookupResult.value
        });
        var allCallable = method.user === BOT && methodFuns.map(function(benv) {
          return benv.Call.length > 0
        }).reduce(function(a, b) {
          return a && b
        });
        var Callables = methodFuns.flatMap(function(benv) {
          return benv.Call
        });
        var cont = defaultValueCont();
        var markedCont = cont.addApplication(application);
        markedCont.toString = cont.toString;
        var tasks = Callables.map(function(Callable) {
          return new Task("default value " + application, function() {
            return Callable.applyFunction(application, [], objectAddress, stack.addFirst(markedCont), benva, store, time, state)
          })
        });
        if(!allCallable) {
          if(throwTypeError) {
            throw new Error("TODO: non-callable second-chance object-to-value coercion must throw type error");
          }
          tasks = tasks.addLast(new Task("not all callable", function() {
            return defaultValue(null, methodName2, objectAddresses, primPostProcessor, application, stack.addFirst(BOT), benva, store, time, state)
          }))
        }
        return tasks;
        function defaultValueCont() {
          return new Cont("defval-" + node.tag, benva, function(stack, store, time, state) {
            var aval = stack[0];
            var cont;
            var stack2;
            if(throwTypeError) {
              var aval2 = stack[1];
              aval = aval.join(aval2);
              cont = stack[2];
              stack2 = stack.slice(3);
              if(aval.as.length === 0) {
                return cont.execute(stack2.addFirst(primPostProcessor ? primPostProcessor(aval) : aval), store, time, state)
              }
              if(aval.user === BOT) {
                throw new Error("TODO: non-primitive second-chance object-to-value coercion must throw type error");
              }
              return[new Task("blah1", function() {
                return cont.execute(stack2.addFirst(primPostProcessor ? primPostProcessor(aval) : aval), store, time, state)
              }), new Task("blah2", function() {
                throw new Error("TODO: non-primitive second-chance object-to-value coercion must throw type error");
              })]
            }
            cont = stack[1];
            stack2 = stack.slice(2);
            if(aval.as.length === 0) {
              return cont.execute(stack2.addFirst(primPostProcessor ? primPostProcessor(aval) : aval), store, time, state)
            }
            if(allCallable) {
              return defaultValue(application, methodName2, objectAddresses, primPostProcessor, application, stack, benva, store, time, state)
            }
            return[]
          })
        }
      })
    })
  }
  function ToNumber(value, node, stack, benva, store, time, state) {
    if(value.addresses().length === 0) {
      var cont = stack[0];
      var stack2 = stack.slice(1);
      return cont.execute(stack2.addFirst(new JipdaValue(value.user.ToNumber(), [])), store, time, state)
    }
    var tasks = DefaultValue(value.addresses(), function(primValue) {
      return primValue.ToNumber()
    }, node, stack, benva, store, time, state);
    if(value.user === BOT) {
      return tasks
    }
    return tasks.addFirst(new Task("primitive part ToNumber", function() {
      var cont = stack[0];
      var stack2 = stack.slice(1);
      return cont.execute(stack2.addFirst(new JipdaValue(value.user.ToNumber(), [])), store, time, state)
    }))
  }
  function ToUInt32(value, node, stack, benva, store, time, state) {
    if(value.addresses().length === 0) {
      var cont = stack[0];
      var stack2 = stack.slice(1);
      return cont.execute(stack2.addFirst(new JipdaValue(value.user.ToUInt32(), [])), store, time, state)
    }
    var tasks = DefaultValue(value.addresses(), function(primValue) {
      return primValue.ToUInt32()
    }, node, stack, benva, store, time, state);
    if(value.user === BOT) {
      return tasks
    }
    return tasks.addFirst(new Task("primitive part ToNumber", function() {
      var cont = stack[0];
      var stack2 = stack.slice(1);
      return cont.execute(stack2.addFirst(new JipdaValue(value.user.ToUInt32(), [])), store, time, state)
    }))
  }
  function ToString(value, node, stack, benva, store, time, state) {
    if(value.addresses().length === 0) {
      var cont = stack[0];
      var stack2 = stack.slice(1);
      return cont.execute(stack2.addFirst(new JipdaValue(value.user.ToString(), [])), store, time, state)
    }
    var tasks = DefaultValueString(value.addresses(), node, function(primValue) {
      return primValue.ToString()
    }, stack, benva, store, time, state);
    if(value.user === BOT) {
      return tasks
    }
    return tasks.addFirst(new Task("primitive part ToString", function() {
      var cont = stack[0];
      var stack2 = stack.slice(1);
      return cont.execute(stack2.addFirst(new JipdaValue(value.user.ToString(), [])), store, time, state)
    }))
  }
  function stackElementsSubsume(s1, s2) {
    if(s1.length < s2.length) {
      return false
    }
    return true
  }
  function evalLiteral(node, stack, benva, store, time, state) {
    var cont = stack[0];
    var stack2 = stack.slice(1);
    return cont.execute(stack2.addFirst(lattice.abst1(node.value)), store, time, state)
  }
  function evalIdentifier(node, stack, benva, store, time, state) {
    var cont = stack[0];
    var stack2 = stack.slice(1);
    var scopeResult = doScopeLookup(userLattice.abst1(node.name), stack, benva, store, state);
    var as = scopeResult.as;
    state = scopeResult.state;
    if(as.length === 0) {
      throw new Error("no addresses for " + node);
    }
    var result = BOT;
    var laResult = doLookupAddresses(as, stack, store, state);
    return cont.execute(stack2.addFirst(laResult.value), store, time, laResult.state)
  }
  function evalBinaryExpression(node, stack, benva, store, time, state) {
    var leftNode = node.left;
    var rightNode = node.right;
    function leftCont() {
      function rightCont() {
        function mul(stack, store, time, state) {
          var right = stack[0];
          var left = stack[1];
          var cont = stack[2];
          var stack2 = stack.slice(3);
          var result = userLattice.mul(left.user, right.user);
          return cont.execute(stack2.addFirst(new JipdaValue(result, [])), store, time, state)
        }
        function sub(stack, store, time, state) {
          var right = stack[0];
          var left = stack[1];
          var cont = stack[2];
          var stack2 = stack.slice(3);
          var result = userLattice.sub(left.user, right.user);
          return cont.execute(stack2.addFirst(new JipdaValue(result, [])), store, time, state)
        }
        function div(stack, store, time, state) {
          var right = stack[0];
          var left = stack[1];
          var cont = stack[2];
          var stack2 = stack.slice(3);
          var result = userLattice.div(left.user, right.user);
          return cont.execute(stack2.addFirst(new JipdaValue(result, [])), store, time, state)
        }
        function lt(stack, store, time, state) {
          var right = stack[0];
          var left = stack[1];
          var cont = stack[2];
          var stack2 = stack.slice(3);
          var result = userLattice.lt(left.user, right.user);
          return cont.execute(stack2.addFirst(new JipdaValue(result, [])), store, time, state)
        }
        function lte(stack, store, time, state) {
          var right = stack[0];
          var left = stack[1];
          var cont = stack[2];
          var stack2 = stack.slice(3);
          var result = userLattice.lte(left.user, right.user);
          return cont.execute(stack2.addFirst(new JipdaValue(result, [])), store, time, state)
        }
        function gt(stack, store, time, state) {
          var right = stack[0];
          var left = stack[1];
          var cont = stack[2];
          var stack2 = stack.slice(3);
          var result = userLattice.gt(left.user, right.user);
          return cont.execute(stack2.addFirst(new JipdaValue(result, [])), store, time, state)
        }
        function gte(stack, store, time, state) {
          var right = stack[0];
          var left = stack[1];
          var cont = stack[2];
          var stack2 = stack.slice(3);
          var result = userLattice.gte(left.user, right.user);
          return cont.execute(stack2.addFirst(new JipdaValue(result, [])), store, time, state)
        }
        function eq(eqFlag, stack, store, time, state) {
          var rightAval = stack[0];
          var leftAval = stack[1];
          var eqResult = BOT;
          var lasl = leftAval.as.length;
          var rasl = rightAval.as.length;
          if(leftAval.user !== BOT && rightAval.user !== BOT) {
            eqResult = eqResult.join(eqFlag ? userLattice.eq(leftAval.user, rightAval.user) : userLattice.neq(leftAval.user, rightAval.user))
          }
          if(lasl === 0 && rasl === 0) {
            var cont = stack[2];
            var stack2 = stack.slice(3);
            return cont.execute(stack2.addFirst(new JipdaValue(eqResult, [])), store, time, state)
          }else {
            if(lasl === 1 && rasl === 1) {
              if(leftAval.as[0].equals(rightAval.as[0])) {
                eqResult = eqResult.join(eqFlag ? U_TRUE : U_FALSE)
              }else {
                eqResult = eqResult.join(eqFlag ? U_FALSE : U_TRUE)
              }
            }else {
              if(lasl > 0 && rasl > 0) {
                eqResult = eqResult.join(eqFlag ? U_FALSE : U_TRUE);
                var intersection = leftAval.as.keepAll(rightAval.as);
                if(intersection.length > 0) {
                  eqResult = eqResult.join(eqFlag ? U_TRUE : U_FALSE)
                }
              }
            }
          }
          if(leftAval.user === BOT && rightAval.user === BOT) {
            var cont = stack[2];
            var stack2 = stack.slice(3);
            return cont.execute(stack2.addFirst(new JipdaValue(eqResult, [])), store, time, state)
          }
          function eqLeftRightCont(leftStrNum, eqResult) {
            return new Cont("eqLeftRight-" + node.tag, benva, function(stack, store, time, state) {
              var rightPrim = stack[0];
              var cont = stack[3];
              var stack2 = stack.slice(4);
              eqResult = eqResult.join(eqFlag ? userLattice.eq(leftStrNum, rightPrim.user) : userLattice.neq(leftStrNum, rightPrim.user));
              return cont.execute(stack2.addFirst(new JipdaValue(eqResult, [])), store, time, state)
            })
          }
          if(leftAval.as.length !== 0) {
            function eqRightCont(rightStrNum, eqResult) {
              return new Cont("eqRight-" + rightNode.tag, benva, function(stack, store, time, state) {
                var leftPrim = stack[0];
                eqResult = eqResult.join(eqFlag ? userLattice.eq(leftPrim.user, rightStrNum) : userLattice.neq(leftPrim.user, rightStrNum));
                if(rightAval.as.length !== 0) {
                  var leftStrNum = leftAval.user.limitStringNumber();
                  if(leftStrNum !== BOT) {
                    var isOnlyStrNum = leftStrNum.equals(leftAval.user);
                    if(!isOnlyStrNum) {
                      eqResult = eqResult.join(eqFlag ? U_FALSE : U_TRUE)
                    }
                    var stack2 = stack.slice(1);
                    return DefaultValue(rightAval.as, undefined, rightNode, stack2.addFirst(eqLeftRightCont(eqResult, leftStrNum)), benv, store, time, state)
                  }else {
                    eqResult = eqResult.join(eqFlag ? U_FALSE : U_TRUE)
                  }
                }
                var cont = stack[3];
                var stack2 = stack.slice(4);
                return cont.execute(stack2.addFirst(new JipdaValue(eqResult, [])), store, time, state)
              })
            }
            var rightStrNum = rightAval.user.limitStringNumber();
            if(rightStrNum !== BOT) {
              var isOnlyStrNum = rightStrNum.equals(rightAval.user);
              if(!isOnlyStrNum) {
                eqResult = eqResult.join(eqFlag ? U_FALSE : U_TRUE)
              }
              return DefaultValue(leftAval.as, undefined, leftNode, stack.addFirst(eqRightCont(rightStrNum, eqResult)), benva, store, time, state)
            }else {
              eqResult = eqResult.join(eqFlag ? U_FALSE : U_TRUE)
            }
          }
          if(rightAval.as.length !== 0) {
            var leftStrNum = leftAval.user.limitStringNumber();
            if(leftStrNum !== BOT) {
              var isOnlyStrNum = leftStrNum.equals(leftAval.user);
              if(!isOnlyStrNum) {
                eqResult = eqResult.join(eqFlag ? U_FALSE : U_TRUE)
              }
              return DefaultValue(rightAval.as, undefined, rightNode, stack.addFirst(eqLeftRightCont(leftStrNum, eqResult)), benva, store, time, state)
            }else {
              eqResult = eqResult.join(eqFlag ? U_FALSE : U_TRUE)
            }
          }
          var cont = stack[2];
          var stack2 = stack.slice(3);
          return cont.execute(stack2.addFirst(new JipdaValue(eqResult, [])), store, time, state)
        }
        return new Cont("binr-" + rightNode.tag, benva, function(stack, store, time, state) {
          var rightAval = stack[0];
          var leftAval = stack[1];
          switch(node.operator) {
            case "+":
              var rightAval = stack[0];
              var leftAval = stack[1];
              var result = BOT;
              var lasl = leftAval.as.length;
              var rasl = rightAval.as.length;
              if(leftAval.user !== BOT && rightAval.user !== BOT) {
                result = result.join(userLattice.add(leftAval.user, rightAval.user))
              }
              if(lasl === 0 && rasl === 0) {
                var cont = stack[2];
                var stack2 = stack.slice(3);
                return cont.execute(stack2.addFirst(new JipdaValue(result, [])), store, time, state)
              }
              if(lasl > 0) {
                function addLeftCont(result) {
                  return new Cont("addl-" + leftNode.tag, benva, function(stack, store, time, state) {
                    var lprim = stack[0].user;
                    if(rightAval.user !== BOT) {
                      result = result.join(userLattice.add(lprim, rightAval.user))
                    }
                    if(rasl > 0) {
                      function addLeftRightCont(result) {
                        return new Cont("addlr-" + rightNode.tag, benva, function(stack, store, time, state) {
                          var rprim = stack[0].user;
                          if(leftAval.user !== BOT) {
                            result = result.join(userLattice.add(leftAval.user, rprim))
                          }
                          result = result.join(userLattice.add(lprim, rprim));
                          var cont = stack[4];
                          var stack2 = stack.slice(5);
                          return cont.execute(stack2.addFirst(new JipdaValue(result, [])), store, time, state)
                        })
                      }
                      return DefaultValue(rightAval.as, undefined, leftNode, stack.addFirst(addLeftRightCont(result)), benva, store, time, state)
                    }
                    var cont = stack[3];
                    var stack2 = stack.slice(4);
                    return cont.execute(stack2.addFirst(new JipdaValue(result, [])), store, time, state)
                  })
                }
                return DefaultValue(leftAval.as, undefined, leftNode, stack.addFirst(addLeftCont(result)), benva, store, time, state)
              }
              if(rasl > 0) {
                function addRightCont(result) {
                  return new Cont("addr-" + rightNode.tag, benva, function(stack, store, time, state) {
                    var rprim = stack[0].user;
                    result = result.join(userLattice.add(leftAval.user, rprim));
                    var cont = stack[3];
                    var stack2 = stack.slice(4);
                    return cont.execute(stack2.addFirst(new JipdaValue(result, [])), store, time, state)
                  })
                }
                return DefaultValue(rightAval.as, undefined, leftNode, stack.addFirst(addRightCont(result)), benva, store, time, state)
              }
              var cont = stack[2];
              var stack2 = stack.slice(3);
              return cont.execute(stack2.addFirst(new JipdaValue(result, [])), store, time, state);
            case "*":
              if(leftAval.as.length + rightAval.as.length === 0) {
                return mul(stack, store, time, state)
              }
              throw new Error("TODO");;
            case "-":
              if(leftAval.as.length + rightAval.as.length === 0) {
                return sub(stack, store, time, state)
              }
              throw new Error("TODO");;
            case "/":
              if(leftAval.as.length + rightAval.as.length === 0) {
                return div(stack, store, time, state)
              }
              throw new Error("TODO");;
            case "===":
              var rightAval = stack[0];
              var leftAval = stack[1];
              var result = BOT;
              var lasl = leftAval.as.length;
              var rasl = rightAval.as.length;
              if(leftAval.user !== BOT && rightAval.user !== BOT) {
                result = result.join(userLattice.eqq(leftAval.user, rightAval.user))
              }
              if(lasl === 0 && rasl === 0) {
                var cont = stack[2];
                var stack2 = stack.slice(3);
                return cont.execute(stack2.addFirst(new JipdaValue(result, [])), store, time, state)
              }
              if(lasl === 1 && rasl === 1) {
                if(leftAval.as[0].equals(rightAval.as[0])) {
                  result = result.join(U_TRUE)
                }else {
                  result = result.join(U_FALSE)
                }
              }else {
                if(lasl > 0 && rasl > 0) {
                  result = result.join(U_FALSE);
                  if(leftAval.as.intersect(rightAval.as).length > 0) {
                    result = result.join(U_TRUE)
                  }
                }
              }
              if(leftAval.user === BOT && rightAval.user === BOT) {
                var cont = stack[2];
                var stack2 = stack.slice(3);
                return cont.execute(stack2.addFirst(new JipdaValue(result, [])), store, time, state)
              }
              result = result.join(U_FALSE);
              var cont = stack[2];
              var stack2 = stack.slice(3);
              return cont.execute(stack2.addFirst(new JipdaValue(result, [])), store, time, state);
            case "!==":
              var rightAval = stack[0];
              var leftAval = stack[1];
              var result = BOT;
              var lasl = leftAval.as.length;
              var rasl = rightAval.as.length;
              if(leftAval.user !== BOT && rightAval.user !== BOT) {
                result = result.join(userLattice.neqq(leftAval.user, rightAval.user))
              }
              if(lasl === 0 && rasl === 0) {
                var cont = stack[2];
                var stack2 = stack.slice(3);
                return cont.execute(stack2.addFirst(new JipdaValue(result, [])), store, time, state)
              }
              if(lasl === 1 && rasl === 1) {
                if(leftAval.as[0].equals(rightAval.as[0])) {
                  result = result.join(U_FALSE)
                }else {
                  result = result.join(U_TRUE)
                }
              }else {
                if(lasl > 0 && rasl > 0) {
                  result = result.join(U_TRUE);
                  if(leftAval.as.intersect(rightAval.as).length > 0) {
                    result = result.join(U_FALSE)
                  }
                }
              }
              if(leftAval.user === BOT && rightAval.user === BOT) {
                var cont = stack[2];
                var stack2 = stack.slice(3);
                return cont.execute(stack2.addFirst(new JipdaValue(result, [])), store, time, state)
              }
              result = result.join(U_TRUE);
              var cont = stack[2];
              var stack2 = stack.slice(3);
              return cont.execute(stack2.addFirst(new JipdaValue(result, [])), store, time, state);
            case "==":
              return eq(true, stack, store, time, state);
            case "!=":
              return eq(false, stack, store, time, state);
            case "<":
              if(leftAval.as.length + rightAval.as.length === 0) {
                return lt(stack, store, time, state)
              }
              throw new Error("TODO");;
            case "<=":
              if(leftAval.as.length + rightAval.as.length === 0) {
                return lte(stack, store, time, state)
              }
              throw new Error("TODO");;
            case ">":
              if(leftAval.as.length + rightAval.as.length === 0) {
                return gt(stack, store, time, state)
              }
              throw new Error("TODO");;
            case ">=":
              if(leftAval.as.length + rightAval.as.length === 0) {
                return gte(stack, store, time, state)
              }
              throw new Error("TODO");;
            case "&":
              var lu = toUserInt32(leftAval);
              var ru = toUserInt32(rightAval);
              var result = userLattice.binand(lu, ru);
              var cont = stack[2];
              var stack2 = stack.slice(3);
              return cont.execute(stack2.addFirst(new JipdaValue(result, [])), store, time, state);
            case "|":
              var lu = toUserInt32(leftAval);
              var ru = toUserInt32(rightAval);
              var result = userLattice.binor(lu, ru);
              var cont = stack[2];
              var stack2 = stack.slice(3);
              return cont.execute(stack2.addFirst(new JipdaValue(result, [])), store, time, state);
            default:
              throw new Error("cannot handle binary operator " + node.operator);
          }
        })
      }
      return new Cont("binl-" + leftNode.tag, benva, function(stack, store, time, state) {
        return evalNode(rightNode, stack.addFirst(rightCont()), benva, store, time, state)
      })
    }
    return evalNode(leftNode, stack.addFirst(leftCont()), benva, store, time, state)
  }
  function evalUnaryExpression(node, stack, benva, store, time, state) {
    var argumentNode = node.argument;
    function rightCont() {
      return new Cont("unr-" + argumentNode.tag, benva, function(stack, store, time, state) {
        var rightAval = stack[0];
        var cont = stack[1];
        var stack2 = stack.slice(2);
        var robjs = rightAval.as.map(function(a) {
          var lookupResult = lookupAval(a, stack, store, state);
          state = lookupResult.state;
          return lookupResult.value
        });
        var result;
        switch(node.operator) {
          case "-":
            var robjvals = robjs.map(function(o) {
              return o.DefaultValue()
            }).reduce(Lattice.join, BOT);
            var rprim = rightAval.user.join(robjvals);
            result = userLattice.neg(rprim);
            break;
          case "!":
            var robjvals = robjs.map(function(o) {
              return o.DefaultValue()
            }).reduce(Lattice.join, BOT);
            var rprim = rightAval.user.join(robjvals);
            result = userLattice.not(rprim);
            break;
          case "~":
            var robjvals = robjs.map(function(o) {
              return o.DefaultValue()
            }).reduce(Lattice.join, BOT);
            var rprim = rightAval.user.join(robjvals);
            result = userLattice.binnot(rprim);
            break;
          case "+":
            var robjvals = robjs.map(function(o) {
              return o.DefaultValue()
            }).reduce(Lattice.join, BOT);
            var rprim = rightAval.user.join(robjvals);
            result = userLattice.pos(rprim);
            break;
          default:
            throw new Error("cannot handle unary operator " + node.operator);
        }
        return cont.execute(stack2.addFirst(new JipdaValue(result, [])), store, time, state)
      })
    }
    return evalNode(argumentNode, stack.addFirst(rightCont()), benva, store, time, state)
  }
  function evalLogicalExpression(node, stack, benva, store, time, state) {
    var leftNode = node.left;
    var rightNode = node.right;
    var operator = node.operator;
    function leftCont() {
      function rightCont() {
        return new Cont("logr-" + rightNode.tag, benva, function(stack, store, time, state) {
          var right = stack[0];
          var cont = stack[1];
          var stack2 = stack.slice(2);
          return cont.execute(stack2.addFirst(right), store, time, state)
        })
      }
      return new Cont("logl-" + leftNode.tag, benva, function(stack, store, time, state) {
        var left = stack[0];
        switch(operator) {
          case "&&":
            if(userLattice.isFalse(toUserBoolean(left))) {
              var cont1 = stack[1];
              var stack2 = stack.slice(2);
              return cont1.execute(stack2.addFirst(left), store, time, state)
            }
            break;
          case "||":
            if(userLattice.isTrue(toUserBoolean(left))) {
              var cont2 = stack[1];
              var stack3 = stack.slice(2);
              return cont2.execute(stack3.addFirst(left), store, time, state)
            }
            break;
          default:
            throw new Error("cannot handle logical operator " + operator);
        }
        var stack4 = stack.slice(1);
        return evalNode(rightNode, stack4.addFirst(rightCont()), benva, store, time, state)
      })
    }
    return evalNode(leftNode, stack.addFirst(leftCont()), benva, store, time, state)
  }
  function evalCallExpression(node, stack, benva, store, time, state) {
    var calleeNode = node.callee;
    var operands = node.arguments;
    function operandsCont(i) {
      return new Cont("rand-" + operands[i - 1].tag, benva, function(stack, store, time, state) {
        if(operands.length === i) {
          return applyProc(node, stack, benva, store, time, state)
        }
        return evalNode(operands[i], stack.addFirst(operandsCont(i + 1)), benva, store, time, state)
      })
    }
    function operatorCont() {
      return new Cont("rator-" + calleeNode.tag, benva, function(stack, store, time, state) {
        if(operands.length === 0) {
          return applyProc(node, stack, benva, store, time, state)
        }
        return evalNode(operands[0], stack.addFirst(operandsCont(1)), benva, store, time, state)
      })
    }
    function methodOperatorCont() {
      return new Cont("meth-" + calleeNode.object.tag, benva, function(stack, store, time, state) {
        var objectAddresses = stack[0].addresses();
        assertTrue(Array.isArray(objectAddresses), "no addresses for " + stack[0]);
        var propertyName = calleeNode.property.name;
        var stack2 = stack.slice(1);
        return objectAddresses.flatMap(function(objectAddress) {
          var stack3 = stack2.addFirst(lattice.abst1(objectAddress));
          var lookupResult = lookupAval(objectAddress, stack, store, state);
          var objectAval = lookupResult.value;
          state = lookupResult.state;
          return doProtoLookup(objectAval, userLattice.abst1(propertyName), stack, store, state, function(memberAval, state) {
            if(memberAval === null) {
              throw new Error("doProtoLookup: no addresses for " + propertyName + " on " + objectAval);
            }
            var stack4 = stack3.addFirst(memberAval);
            if(operands.length === 0) {
              return applyProc(node, stack4, benva, store, time, state)
            }
            return evalNode(operands[0], stack4.addFirst(operandsCont(1)), benva, store, time, state)
          })
        })
      })
    }
    if(isMemberExpression(calleeNode)) {
      return evalNode(calleeNode.object, stack.addFirst(methodOperatorCont()), benva, store, time, state)
    }
    var stack2 = stack.addFirst(lattice.abst1(GLOBALA));
    return evalNode(calleeNode, stack2.addFirst(operatorCont()), benva, store, time, state)
  }
  function evalNewExpression(node, stack, benva, store, time, state) {
    var calleeNode = node.callee;
    function constructorCont() {
      var operands = node.arguments;
      function operandsCont(i) {
        return new Cont("rand-" + operands[i - 1].tag, benva, function(stack, store, time, state) {
          if(operands.length === i) {
            return applyConstructor(node, stack, benva, store, time, state)
          }
          return evalNode(operands[i], stack.addFirst(operandsCont(i + 1)), benva, store, time, state)
        })
      }
      return new Cont("cons-" + calleeNode.tag, benva, function(stack, store, time, state) {
        if(operands.length === 0) {
          return applyConstructor(node, stack, benva, store, time, state)
        }
        return evalNode(operands[0], stack.addFirst(operandsCont(1)), benva, store, time, state)
      })
    }
    return evalNode(calleeNode, stack.addFirst(constructorCont()), benva, store, time, state)
  }
  function evalThisExpression(node, stack, benva, store, time, state) {
    var cont = stack[0];
    var stack2 = stack.slice(1);
    var scopeResult = doScopeLookup(U_THIS, stack, benva, store, state);
    var as = scopeResult.as;
    state = scopeResult.state;
    if(as.length !== 1) {
      throw new Error(as.length + " addresses (!== 1) for this: " + as);
    }
    return cont.execute(stack2.addFirst(lattice.abst1(as[0])), store, time, state)
  }
  function evalFunctionExpression(node, stack, benva, store, time, state) {
    var cont = stack[0];
    var stack2 = stack.slice(1);
    var closure = createClosure(node, benva);
    var closureAddress = ag.closure(node, time);
    var prototype = createObject(OBJECTPA);
    var prototypeObjectAddress = ag.closureProtoObject(node, time);
    var constructorPropertyAddress = ag.objectProperty(prototypeObjectAddress, userLattice.abst1("constructor"));
    var allocResult = allocAval(constructorPropertyAddress, lattice.abst1(closureAddress), stack, store, state, "constructor");
    store = allocResult.store;
    state = allocResult.state;
    prototype = prototype.add(userLattice.abst1("constructor"), constructorPropertyAddress);
    allocResult = allocAval(prototypeObjectAddress, prototype, stack, store, state, "prototype object");
    store = allocResult.store;
    state = allocResult.state;
    var prototypePropertyAddress = ag.objectProperty(closureAddress, "prototype");
    closure = closure.add(U_PROTOTYPE, prototypePropertyAddress);
    allocResult = allocAval(prototypePropertyAddress, lattice.abst1(prototypeObjectAddress), stack, store, state, "prototype property");
    store = allocResult.store;
    state = allocResult.state;
    allocResult = allocAval(closureAddress, closure, stack, store, state, "closure for " + node);
    store = allocResult.store;
    state = allocResult.state;
    return cont.execute(stack2.addFirst(lattice.abst1(closureAddress)), store, time, state)
  }
  function evalAssignmentExpression(node, stack, benva, store, time, state) {
    var left = node.left;
    var right = node.right;
    switch(left.type) {
      case "Identifier":
        function varAssignmentCont() {
          return new Cont("=id-" + right.tag, benva, function(stack, store, time, state) {
            var rvalues = stack[0];
            var cont = stack[1];
            var stack2 = stack.slice(2);
            var scopeResult = doScopeLookup(userLattice.abst1(left.name), stack, benva, store, state);
            var as = scopeResult.as;
            state = scopeResult.state;
            if(as.length === 0) {
              throw new Error("no addresses for left-hand side " + left);
            }
            as.forEach(function(address) {
              var updateResult = updateAval(address, rvalues, stack, store, state);
              store = updateResult.store;
              state = updateResult.state
            });
            return cont.execute(stack2.addFirst(rvalues), store, time, state)
          })
        }
        return evalNode(right, stack.addFirst(varAssignmentCont()), benva, store, time, state);
      case "MemberExpression":
        function rightCont() {
          function memberAssignmentCont() {
            return new Cont("=mem-" + right.tag, benva, function(stack, store, time, state) {
              var rvalues = stack[0];
              var propertyName = stack[1];
              var spn = toUserString(propertyName, store);
              var uspn = spn.ToUInt32();
              var suspn = uspn.ToString();
              var length;
              if(suspn.equals(spn) && userLattice.isTrue(userLattice.lt(uspn, userLattice.abst1(Ecma.POW_2_32)))) {
                length = userLattice.add(uspn, U_1)
              }
              var objectAddresses = stack[2].addresses();
              var cont = stack[3];
              var stack2 = stack.slice(4);
              if(!objectAddresses) {
                throw new Error("cannot determine object addresses for lhs in " + node);
              }
              objectAddresses.forEach(function(objectAddress) {
                var lookupResult = lookupAval(objectAddress, stack, store, state);
                var object = lookupResult.value;
                state = lookupResult.state;
                assertDefinedNotNull(object.lookup, "not a benv at " + objectAddress + ": " + object + " " + object.constructor);
                var propertyAddresses = object.lookup(spn).addresses;
                if(propertyAddresses.length === 0) {
                  var propertyAddress = ag.objectProperty(objectAddress, spn);
                  object = object.add(spn, propertyAddress);
                  var allocResult = allocAval(propertyAddress, rvalues, stack, store, state);
                  store = allocResult.store;
                  state = allocResult.state;
                  var updateResult = sideEffectAval(objectAddress, object, stack, store, state);
                  store = updateResult.store;
                  state = updateResult.state
                }else {
                  propertyAddresses.forEach(function(propertyAddress) {
                    var updateResult = updateAval(propertyAddress, rvalues, stack, store, state);
                    store = updateResult.store;
                    state = updateResult.state
                  })
                }
                if(length && object.isArray()) {
                  var lengthPropertyAs = object.lookup(U_LENGTH).addresses;
                  var laResult = doLookupAddresses(lengthPropertyAs, stack, store, state);
                  state = laResult.state;
                  if(userLattice.isTrue(userLattice.lt(laResult.value.user, length))) {
                    lengthPropertyAs.forEach(function(lengthPropertyAddress) {
                      var updateResult = updateAval(lengthPropertyAddress, new JipdaValue(length, []), stack, store, state);
                      store = updateResult.store;
                      state = updateResult.state
                    })
                  }
                }
              });
              return cont.execute(stack2.addFirst(rvalues), store, time, state)
            })
          }
          return new Cont("=right-" + left.tag, benva, function(stack, store, time, state) {
            return evalNode(right, stack.addFirst(memberAssignmentCont()), benva, store, time, state)
          })
        }
        return evalMemberAddressProperty(left, stack.addFirst(rightCont()), benva, store, time, state);
      default:
        throw new Error("evalAssignment: cannot handle left hand side " + left);
    }
  }
  function evalArrayExpression(node, stack, benv, store, time, state) {
    var elements = node.elements;
    function arrayCont(i) {
      return new Cont("array-" + elements[i - 1].tag, benv, function(stack, store, time, state) {
        if(i === elements.length) {
          var exps = stack.slice(0, elements.length).reverse();
          var cont = stack[elements.length];
          var stack2 = stack.slice(elements.length + 1);
          var arr = createArray();
          var objectAddress = ag.array(node, time);
          exps.forEach(function(exp, ind) {
            var propertyName = userLattice.abst1(ind).ToString();
            var propertyAddress = ag.objectProperty(objectAddress, propertyName);
            arr = arr.add(propertyName, propertyAddress);
            var allocResult = allocAval(propertyAddress, exp, stack, store, state);
            store = allocResult.store;
            state = allocResult.state
          });
          var lengthPropertyAddress = ag.objectProperty(objectAddress, U_LENGTH);
          arr = arr.add(U_LENGTH, lengthPropertyAddress);
          var allocResult = allocAval(lengthPropertyAddress, lattice.abst1(exps.length), stack, store, state);
          allocResult = allocAval(objectAddress, arr, stack, allocResult.store, allocResult.state);
          store = allocResult.store;
          state = allocResult.state;
          return cont.execute(stack2.addFirst(lattice.abst1(objectAddress)), store, time, state)
        }
        return evalNode(elements[i], stack.addFirst(arrayCont(i + 1)), benv, store, time, state)
      })
    }
    if(elements.length === 0) {
      var cont = stack[0];
      var stack2 = stack.slice(1);
      var arr = createArray();
      var objectAddress = ag.array(node, time);
      var lengthPropertyAddress = ag.objectProperty(objectAddress, U_LENGTH);
      arr = arr.add(U_LENGTH, lengthPropertyAddress);
      var allocResult = allocAval(lengthPropertyAddress, J_0, stack, store, state);
      allocResult = allocAval(objectAddress, arr, stack, allocResult.store, allocResult.state);
      store = allocResult.store;
      state = allocResult.state;
      return cont.execute(stack2.addFirst(lattice.abst1(objectAddress)), store, time, state)
    }
    return evalNode(elements[0], stack.addFirst(arrayCont(1)), benv, store, time, state)
  }
  function evalMemberAddressProperty(node, stack, benva, store, time, state) {
    var object = node.object;
    function baseCont() {
      return new Cont("base-" + object.tag, benva, function(stack, store, time, state) {
        var objectAddresses = stack[0];
        var cont = stack[1];
        var stack2 = stack.slice(2);
        var property = node.property;
        if(node.computed) {
          return evalNode(property, stack2.addFirst(objectAddresses).addFirst(cont), benva, store, time, state)
        }
        return cont.execute(stack2.addFirst(objectAddresses).addFirst(lattice.abst1(property.name)), store, time, state)
      })
    }
    return evalNode(object, stack.addFirst(baseCont()), benva, store, time, state)
  }
  function evalMemberExpression(node, stack, benva, store, time, state) {
    function memberCont() {
      return new Cont("member-" + node.tag, benva, function(stack, store, time, state) {
        var propertyName = stack[0];
        var stringPropertyName = toUserString(propertyName, store);
        var objectAddresses = stack[1].addresses();
        var cont = stack[2];
        var stack2 = stack.slice(3);
        var vals = objectAddresses.map(function(objectAddress) {
          var lookupResult = lookupAval(objectAddress, stack, store, state);
          var objectAval = lookupResult.value;
          state = lookupResult.state;
          return doProtoLookup(objectAval, stringPropertyName, stack, store, state, function(memberAval, state2) {
            if(memberAval === null) {
              throw new Error("doProtoLookup: no addresses for " + propertyName + " on " + objectAval);
            }
            state = state2;
            return memberAval
          })
        });
        var val = vals.reduce(Lattice.join, BOT);
        return cont.execute(stack2.addFirst(val), store, time, state)
      })
    }
    return evalMemberAddressProperty(node, stack.addFirst(memberCont()), benva, store, time, state)
  }
  function evalObjectExpression(node, stack, benv, store, time, state) {
    var properties = node.properties;
    function objectCont(i) {
      return new Cont("obj-" + properties[i - 1].value.tag, benv, function(stack, store, time, state) {
        if(i === properties.length) {
          var rexps = stack.slice(0, properties.length);
          var cont = stack[properties.length];
          var stack2 = stack.slice(properties.length + 1);
          var obj = createObject(OBJECTPA);
          var objectAddress = ag.object(node, time);
          for(var k = properties.length - 1;k > -1;k--) {
            var propertyName = userLattice.abst1(properties[properties.length - k - 1].key.name);
            var propertyAddress = ag.objectProperty(objectAddress, propertyName);
            obj = obj.add(propertyName, propertyAddress);
            var allocResult = allocAval(propertyAddress, rexps[k], stack, store, state);
            store = allocResult.store;
            state = allocResult.state
          }
          var allocResult = allocAval(objectAddress, obj, stack, store, state);
          store = allocResult.store;
          state = allocResult.state;
          return cont.execute(stack2.addFirst(lattice.abst1(objectAddress)), store, time, state)
        }
        return evalNode(properties[i].value, stack.addFirst(objectCont(i + 1)), benv, store, time, state)
      })
    }
    if(properties.length === 0) {
      var cont = stack[0];
      var stack2 = stack.slice(1);
      var obj = createObject(OBJECTPA);
      var objectAddress = ag.object(node, time);
      var allocResult = allocAval(objectAddress, obj, stack, store, state);
      store = allocResult.store;
      state = allocResult.state;
      return cont.execute(stack2.addFirst(lattice.abst1(objectAddress)), store, time, state)
    }
    return evalNode(properties[0].value, stack.addFirst(objectCont(1)), benv, store, time, state)
  }
  function evalFunctionDeclaration(node, stack, benva, store, time, state) {
    var cont = stack[0];
    var stack2 = stack.slice(1);
    return cont.execute(stack2.addFirst(J_UNDEFINED), store, time, state)
  }
  function evalHoistedFunctionDeclaration(node, stack, benva, benv, store, time, state) {
    var vr = node.id;
    var closure = createClosure(node, benva);
    var closureAddress = ag.closure(node, time);
    var prototype = createObject(OBJECTPA);
    var prototypeObjectAddress = ag.closureProtoObject(node, time);
    var constructorPropertyAddress = ag.objectProperty(prototypeObjectAddress, userLattice.abst1("constructor"));
    var allocResult = allocAval(constructorPropertyAddress, lattice.abst1(closureAddress), stack, store, state, "constructor");
    store = allocResult.store;
    state = allocResult.state;
    prototype = prototype.add(userLattice.abst1("constructor"), constructorPropertyAddress);
    allocResult = allocAval(prototypeObjectAddress, prototype, stack, store, state, "prototype object");
    store = allocResult.store;
    state = allocResult.state;
    var prototypePropertyAddress = ag.objectProperty(closureAddress, "prototype");
    closure = closure.add(U_PROTOTYPE, prototypePropertyAddress);
    allocResult = allocAval(prototypePropertyAddress, lattice.abst1(prototypeObjectAddress), stack, store, state, "prototype property");
    allocResult = allocAval(closureAddress, closure, stack, allocResult.store, allocResult.state, "closure for " + node);
    store = allocResult.store;
    state = allocResult.state;
    var vr = node.id;
    var declarationAddress = ag.variable(vr, time);
    benv = benv.add(userLattice.abst1(vr.name), declarationAddress);
    allocResult = allocAval(declarationAddress, lattice.abst1(closureAddress), stack, store, state, "variable " + vr);
    store = allocResult.store;
    state = allocResult.state;
    return{benv:benv, store:store, state:state}
  }
  function evalVariableDeclarator(node, stack, benva, store, time, state, mode) {
    var vr = node.id;
    function variableDeclaratorCont() {
      return new Cont("decl-" + node.init.tag, benva, function(stack, store, time, state) {
        var value = stack[0];
        var cont = stack[1];
        var stack2 = stack.slice(2);
        var scopeResult = doScopeLookup(userLattice.abst1(vr.name), stack, benva, store, state);
        var as = scopeResult.as;
        state = scopeResult.state;
        if(as.length === 0) {
          throw new Error("no addresses for " + node);
        }
        as.forEach(function(address) {
          var updateResult = updateAval(address, value, stack, store, state);
          store = updateResult.store;
          state = updateResult.state
        });
        return cont.execute(stack2.addFirst(J_UNDEFINED), store, time, state)
      })
    }
    if(node.init === null) {
      var cont = stack[0];
      var stack2 = stack.slice(1);
      return cont.execute(stack2.addFirst(J_UNDEFINED), store, time, state)
    }
    return evalNode(node.init, stack.addFirst(variableDeclaratorCont()), benva, store, time, state)
  }
  function evalHoistedVariableDeclarator(node, stack, benv, store, time, state) {
    var vr = node.id;
    var address = ag.variable(vr, time);
    benv = benv.add(userLattice.abst1(vr.name), address);
    var allocResult = allocAval(address, J_UNDEFINED, stack, store, state);
    store = allocResult.store;
    state = allocResult.state;
    return{benv:benv, store:store, state:state}
  }
  function evalStatementList(nodes, stack, benva, store, time, state, mode) {
    function statementListCont(i) {
      return new Cont("slist-" + nodes[i - 1].tag, benva, function(stack, store, time, state) {
        var statementValue = stack[0];
        var value = stack[1];
        if(!statementValue.equals(J_UNDEFINED)) {
          value = statementValue
        }
        if(i === nodes.length) {
          var cont = stack[2];
          var stack2 = stack.slice(3);
          return cont.execute(stack2.addFirst(value), store, time, state)
        }
        var stack2 = stack.slice(2);
        return evalNode(nodes[i], stack2.addFirst(value).addFirst(statementListCont(i + 1)), benva, store, time, state, mode)
      })
    }
    if(nodes.length === 0) {
      var cont = stack[0];
      var stack2 = stack.slice(1);
      return cont.execute(stack2.addFirst(J_UNDEFINED), store, time, state)
    }
    if(nodes.length === 1) {
      return evalNode(nodes[0], stack, benva, store, time, state, mode)
    }
    return evalNode(nodes[0], stack.addFirst(J_UNDEFINED).addFirst(statementListCont(1)), benva, store, time, state, mode)
  }
  function evalStatementListTC(nodes, stack, benva, store, time, state, mode) {
    var value;
    function statementListCont(i) {
      return new Cont("slist-" + nodes[i - 1].tag, benva, function(stack, store, time, state) {
        var statementValue = stack[0];
        if(!statementValue.equals(J_UNDEFINED) || !value) {
          value = statementValue
        }
        if(i === nodes.length) {
          var cont = stack[1];
          var stack2 = stack.slice(2);
          return cont.execute(stack2.addFirst(value), store, time, state)
        }
        var stack2 = stack.slice(1);
        return evalNode(nodes[i], stack2.addFirst(statementListCont(i + 1)), benva, store, time, state, mode)
      })
    }
    if(nodes.length === 0) {
      var cont = stack[0];
      var stack2 = stack.slice(1);
      return cont.execute(stack2.addFirst(J_UNDEFINED), store, time, state)
    }
    if(nodes.length === 1) {
      return evalNode(nodes[0], stack, benva, store, time, state, mode)
    }
    return evalNode(nodes[0], stack.addFirst(statementListCont(1)), benva, store, time, state, mode)
  }
  function evalReturnStatement(node, stack, benva, store, time, state) {
    function doReturn(value, stack, store, time, state) {
      for(var i = 0;i < stack.length;i++) {
        var stackValue = stack[i];
        if(stackValue instanceof Cont) {
          if(stackValue.applications.length > 0) {
            var stack2 = stack.slice(i + 1);
            state = state.returns(value, stackValue.applications[0]);
            return stackValue.execute(stack2.addFirst(value), store, time, state)
          }
        }
      }
      throw new Error("return not in function: " + node);
    }
    function returnCont() {
      return new Cont("ret-" + node.tag, benva, function(stack, store, time, state) {
        var value = stack[0];
        var stack2 = stack.slice(1);
        return doReturn(value, stack2, store, time, state)
      })
    }
    if(node.argument === null) {
      return doReturn(J_UNDEFINED, stack, store, time, state)
    }
    return evalNode(node.argument, stack.addFirst(returnCont()), benva, store, time, state)
  }
  function evalBreakStatement(node, stack, benva, store, time, state) {
    var breakValue = J_UNDEFINED;
    for(var j = 0;j < stack.length;j++) {
      var value = stack[j];
      if(value instanceof JipdaValue) {
        breakValue = value;
        break
      }
    }
    print("breakValue", breakValue, stack);
    if(node.label === null) {
      for(var i = 0;i < stack.length;i++) {
        var value = stack[i];
        if(value instanceof Cont) {
          if(value.handler) {
            var handler = value.handler;
            if(isSwitchStatement(handler)) {
              var stack2 = stack.slice(i);
              return value.execute(stack2.addFirst(breakValue), store, time, state)
            }
          }
        }
      }
      throw new Error("no handler for " + node);
    }
    for(var i = 0;i < stack.length;i++) {
      var value = stack[i];
      if(value instanceof Cont) {
        if(value.handler) {
          var handler = value.handler;
          if(isLabeledStatement(handler) && handler.label.name === node.label.name) {
            var stack2 = stack.slice(i);
            return value.execute(stack2.addFirst(breakValue), store, time, state)
          }
        }
      }
    }
    throw new Error("no handler for " + node);
  }
  function evalLabeledStatement(node, stack, benva, store, time, state) {
    var cont = stack[0];
    var stack2 = stack.slice(1);
    var handlerCont = cont.setHandler(node);
    return evalNode(node.body, stack2.addFirst(handlerCont), benva, store, time, state)
  }
  function evalThrowStatement(node, stack, benva, store, time, state) {
    function argumentCont() {
      return new Cont("throw-" + node.argument.tag, benva, function(stack, store, time, state) {
        var throwValue = stack[0];
        for(var i = 1;i < stack.length;i++) {
          var value = stack[i];
          if(value instanceof Cont) {
            if(value.handler) {
              var handler = value.handler;
              if(isCatchClause(handler)) {
                var stack2 = stack.slice(i);
                var createResult = createEnvironment(benva, node, handler, state);
                var extendedBenv = createResult.benv;
                state = createResult.state;
                var param = handler.param;
                var address = ag.variable(param, time);
                extendedBenv = extendedBenv.add(userLattice.abst1(param.name), address);
                var allocResult = allocAval(address, throwValue, stack, store, state);
                var extendedBenva = ag.benv(handler, time);
                allocResult = allocAval(extendedBenva, extendedBenv, stack, allocResult.store, allocResult.state, "extended static env for handler with root " + benva);
                store = allocResult.store;
                state = allocResult.state;
                var block = handler.body;
                return evalStatementList(block.body, stack2, extendedBenva, store, time, state)
              }
            }
          }
        }
        throw new Error("no handler for " + node);
      })
    }
    return evalNode(node.argument, stack.addFirst(argumentCont()), benva, store, time, state)
  }
  function evalTryStatement(node, stack, benva, store, time, state) {
    var cont = stack[0];
    var stack2 = stack.slice(1);
    var handlerCont = cont.setHandler(node.handlers[0]);
    return evalNode(node.block, stack2.addFirst(handlerCont), benva, store, time, state)
  }
  function evalIfStatement(node, stack, benva, store, time, state) {
    var testNode = node.test;
    function ifCont() {
      return new Cont("if-" + testNode.tag, benva, function(stack, store, time, state) {
        var value = stack[0];
        var booleanValue = toUserBoolean(value);
        var stack2 = stack.slice(1);
        var consequent = node.consequent;
        var alternate = node.alternate;
        if(userLattice.isFalse(booleanValue)) {
          if(alternate === null) {
            var cont = stack2[0];
            var stack3 = stack2.slice(1);
            return cont.execute(stack3.addFirst(J_UNDEFINED), store, time, state)
          }
          return evalNode(alternate, stack2, benva, store, time, state)
        }
        if(userLattice.isTrue(booleanValue)) {
          return evalNode(consequent, stack2, benva, store, time, state)
        }
        var tasks = [new Task("eval consequent of " + testNode.tag, function() {
          var time2 = time.tick(consequent.tag, k);
          return evalNode(consequent, stack2, benva, store, time2, state)
        })];
        if(alternate === null) {
          tasks = tasks.addLast(new Task("eval empty alternate of " + testNode.tag, function() {
            var cont = stack2[0];
            var stack3 = stack2.slice(1);
            return cont.execute(stack3.addFirst(J_UNDEFINED), store, time, state)
          }))
        }else {
          tasks = tasks.addLast(new Task("eval non-empty alternate of " + testNode.tag, function() {
            var time2 = time.tick(alternate.tag, k);
            return evalNode(alternate, stack2, benva, store, time2, state)
          }))
        }
        return tasks
      })
    }
    return evalNode(testNode, stack.addFirst(ifCont()), benva, store, time, state)
  }
  function evalConditionalExpression(node, stack, benva, store, time, state) {
    var testNode = node.test;
    function condCont() {
      return new Cont("cond-" + testNode.tag, benva, function(stack, store, time, state) {
        var value = stack[0];
        var booleanValue = toUserBoolean(value);
        var stack2 = stack.slice(1);
        var consequent = node.consequent;
        var alternate = node.alternate;
        if(userLattice.isFalse(booleanValue)) {
          return evalNode(alternate, stack2, benva, store, time, state)
        }
        if(userLattice.isTrue(booleanValue)) {
          return evalNode(consequent, stack2, benva, store, time, state)
        }
        var tasks = [new Task("eval consequent of " + testNode.tag, function() {
          var time2 = time.tick(consequent.tag, k);
          return evalNode(consequent, stack2, benva, store, time2, state)
        })];
        tasks = tasks.addLast(new Task("eval alternate of " + testNode.tag, function() {
          var time2 = time.tick(alternate.tag, k);
          return evalNode(alternate, stack2, benva, store, time2, state)
        }));
        return tasks
      })
    }
    return evalNode(testNode, stack.addFirst(condCont()), benva, store, time, state)
  }
  function evalSwitchStatement(node, stack, benva, store, time, state) {
    var discriminantNode = node.discriminant;
    function switchCont() {
      return new Cont("switch-" + node.tag, benva, function(stack, store, time, state) {
        var discr = stack[0].user;
        function execCase(i, stack, store, time, state) {
          function execCaseCont() {
            return new Cont("checkcase-" + node.cases[i].tag, benva, function(stack, store, time, state) {
              return execCase(i + 1, stack, store, time, state)
            })
          }
          var statements = [];
          for(var j = i;j < node.cases.length;j++) {
            statements = statements.concat(node.cases[j].consequent)
          }
          var stack2 = stack.slice(1);
          return evalStatementList(statements, stack2, benva, store, time, state)
        }
        function scanCase(i, defaultI, stack, store, time, state) {
          function checkCaseCont() {
            return new Cont("checkcase-" + node.cases[i].tag, benva, function(stack, store, time, state) {
              var selector = stack[0].user;
              var stack2 = stack.slice(1);
              if(userLattice.isTrue(userLattice.eqq(discr, selector))) {
                return execCase(i, stack2, store, time, state)
              }
              if(userLattice.isFalse(userLattice.eqq(discr, selector))) {
                return scanCase(i + 1, defaultI, stack2, store, time, state)
              }
              return[new Task("execute case " + i), function() {
                return execCase(i, stack2, store, time, state)
              }, new Task("scan case " + i), function() {
                return scanCase(i + 1, stack2, store, time, state)
              }]
            })
          }
          if(i === node.cases.length) {
            if(defaultI === null) {
              var cont = stack[1];
              var stack2 = stack.slice(2);
              return cont.execute(stack2.addFirst(J_UNDEFINED), store, time, state)
            }
            var statements = [];
            for(var j = defaultI;j < node.cases.length;j++) {
              statements = statements.concat(node.cases[j].consequent)
            }
            var stack2 = stack.slice(1);
            return evalStatementList(statements, stack2, benva, store, time, state)
          }
          var nodeTest = node.cases[i].test;
          if(nodeTest === null) {
            if(i + 1 === node.cases.length) {
              return execCase(i, stack, store, time, state)
            }
            return scanCase(i + 1, i, stack, store, time, state)
          }
          return evalNode(nodeTest, stack.addFirst(checkCaseCont()), benva, store, time, state)
        }
        if(node.cases) {
          return scanCase(0, null, stack, store, time, state)
        }
        var cont = stack[1];
        var stack2 = stack.slice(2);
        return cont.execute(stack2.addFirst(J_UNDEFINED), store, time, state)
      })
    }
    var cont = stack[0];
    var stack2 = stack.slice(1);
    var handlerCont = cont.setHandler(node);
    return evalNode(discriminantNode, stack2.addFirst(handlerCont).addFirst(switchCont()), benva, store, time, state)
  }
  function evalEmptyStatement(node, stack, benv, store, time, state) {
    var cont = stack[0];
    var stack2 = stack.slice(1);
    return cont.execute(stack2.addFirst(J_UNDEFINED), store, time, state)
  }
  function evalUpdateExpression(node, stack, benva, store, time, state) {
    var argument = node.argument;
    if(isIdentifier(argument)) {
      var cont = stack[0];
      var stack2 = stack.slice(1);
      var scopeResult = doScopeLookup(userLattice.abst1(argument.name), stack, benva, store, state);
      var as = scopeResult.as;
      state = scopeResult.state;
      if(as.length === 0) {
        throw new Error("no addresses for " + argument);
      }
      var result = BOT;
      as.forEach(function(address) {
        var lookupResult = lookupAval(address, stack, store, state);
        var aval = lookupResult.value;
        state = lookupResult.state;
        var uold = aval.user.ToNumber();
        var jold = new JipdaValue(uold, []);
        var jnew = new JipdaValue(node.operator === "++" ? userLattice.add(uold, U_1) : userLattice.sub(uold, U_1), []);
        var updateResult = updateAval(address, jnew, stack, store, state);
        store = updateResult.store;
        state = updateResult.state;
        result = result.join(node.prefix ? jnew : jold)
      });
      return cont.execute(stack2.addFirst(result), store, time, state)
    }else {
      if(isMemberExpression(argument)) {
        function updateMemberCont() {
          return new Cont("updMem-" + argument.tag, benva, function(stack, store, time, state) {
            var propertyName = toUserString(stack[0], store);
            var objectAddresses = stack[1].addresses();
            var cont = stack[2];
            var stack2 = stack.slice(3);
            var result = BOT;
            objectAddresses.forEach(function(objectAddress) {
              var lookupResult = lookupAval(objectAddress, stack, store, state);
              var object = lookupResult.value;
              state = lookupResult.state;
              return doProtoLookup(object, propertyName, stack, store, state, function(aval, state) {
                if(aval === null) {
                  throw new Error("doProtoLookup: no addresses for " + propertyName + " on " + object);
                }
                var uold = toUserNumber(aval, store);
                var jold = new JipdaValue(uold, []);
                var jnew = new JipdaValue(node.operator === "++" ? userLattice.add(uold, U_1) : userLattice.sub(uold, U_1), []);
                var pas = object.lookup(propertyName).addresses;
                if(pas.length === 0) {
                  object = object.add(propertyName, propertyAddress);
                  var allocResult = allocAval(propertyAddress, jnew, stack, store, state);
                  store = allocResult.store;
                  state = allocResult.state;
                  var updateResult = sideEffectAval(objectAddress, object, stack, store, state);
                  store = updateResult.store;
                  state = updateResult.state
                }else {
                  pas.forEach(function(propertyAddress) {
                    var updateResult = updateAval(propertyAddress, jnew, stack, store, state);
                    store = updateResult.store;
                    state = updateResult.state
                  })
                }
                result = result.join(node.prefix ? jnew : jold)
              })
            });
            return cont.execute(stack2.addFirst(result), store, time, state)
          })
        }
        return evalMemberAddressProperty(argument, stack.addFirst(updateMemberCont()), benva, store, time, state)
      }else {
        throw new Error("evalUpdateExpression: cannot handle " + argument);
      }
    }
  }
  function evalForStatement(node, stack, benva, store, time, state) {
    var init = node.init;
    var test = node.test;
    var update = node.update;
    var body = node.body;
    function initCont() {
      function testCont() {
        function bodyCont() {
          function updateCont() {
            return new Cont("foru-" + update.tag, benva, function(stack, store, time, state) {
              var stack2 = stack.slice(1);
              return evalNode(test, stack2.addFirst(testCont()), benva, store, time, state)
            })
          }
          return new Cont("forb-" + body.tag, benva, function(stack, store, time, state) {
            return evalNode(update, stack.addFirst(updateCont()), benva, store, time, state)
          })
        }
        return new Cont("fort-" + test.tag, benva, function(stack, store, time, state) {
          var testAval = stack[0];
          if(userLattice.isFalse(toUserBoolean(testAval))) {
            var bodyAval = stack[1];
            var cont = stack[2];
            var stack2 = stack.slice(3);
            return cont.execute(stack2.addFirst(bodyAval), store, time, state)
          }
          var time2 = time.tick(node.tag, k);
          if(userLattice.isTrue(toUserBoolean(testAval))) {
            var store2 = visited.visited(body, stack, benva, store, time);
            if(store2 === null) {
              return[]
            }
            var stack2 = stack.slice(2);
            return evalNode(body, stack2.addFirst(bodyCont()), benva, store2, time2, state)
          }
          var tasks = [new Task("exit for-loop " + node.tag, function() {
            var bodyAval = stack[1];
            var cont = stack[2];
            var stack2 = stack.slice(3);
            return cont.execute(stack2.addFirst(bodyAval), store, time2, state)
          }), new Task("eval body of for-loop " + node.tag, function() {
            var store2 = visited.visited(body, stack, benva, store, time2);
            if(store2 === null) {
              return[]
            }
            var stack2 = stack.slice(2);
            return evalNode(body, stack2.addFirst(bodyCont()), benva, store2, time2, state)
          })];
          return tasks
        })
      }
      return new Cont("fori-" + init.tag, benva, function(stack, store, time, state) {
        var stack2 = stack.slice(1);
        return evalNode(test, stack2.addFirst(J_UNDEFINED).addFirst(testCont()), benva, store, time, state)
      })
    }
    return evalNode(init, stack.addFirst(initCont()), benva, store, time, state)
  }
  function evalWhileStatement(node, stack, benva, store, time, state) {
    var test = node.test;
    var body = node.body;
    function testCont() {
      function bodyCont() {
        return new Cont("whileb-" + body.tag, benva, function(stack, store, time, state) {
          return evalNode(test, stack.addFirst(testCont()), benva, store, time, state)
        })
      }
      return new Cont("whilet-" + test.tag, benva, function(stack, store, time, state) {
        var testAval = stack[0];
        if(userLattice.isFalse(toUserBoolean(testAval))) {
          var bodyAval = stack[1];
          var cont = stack[2];
          var stack2 = stack.slice(3);
          return cont.execute(stack2.addFirst(bodyAval), store, time, state)
        }
        var time2 = time.tick(node.tag, k);
        if(userLattice.isTrue(toUserBoolean(testAval))) {
          var store2 = visited.visited(body, stack, benva, store, time);
          if(store2 === null) {
            return[]
          }
          var stack2 = stack.slice(2);
          return evalNode(body, stack2.addFirst(bodyCont()), benva, store2, time2, state)
        }
        var tasks = [new Task("exit while-loop " + node.tag, function() {
          var bodyAval = stack[1];
          var cont = stack[2];
          var stack2 = stack.slice(3);
          return cont.execute(stack2.addFirst(bodyAval), store, time2, state)
        }), new Task("eval body of while-loop " + node.tag, function() {
          var store2 = visited.visited(body, stack, benva, store, time2);
          if(store2 === null) {
            return[]
          }
          var stack2 = stack.slice(2);
          return evalNode(body, stack2.addFirst(bodyCont()), benva, store2, time2, state)
        })];
        return tasks
      })
    }
    return evalNode(test, stack.addFirst(J_UNDEFINED).addFirst(testCont()), benva, store, time, state)
  }
  function evalProgram(node, stack, benva, store, time, state) {
    var bodyNodes = node.body;
    var hoisted = hoist(bodyNodes);
    if(hoisted.funs.length > 0 || hoisted.vars.length > 0) {
      var benv = store.lookupAval(benva);
      hoisted.funs.forEach(function(funDecl) {
        var result = evalHoistedFunctionDeclaration(funDecl, stack, benva, benv, store, time, state);
        benv = result.benv;
        store = result.store;
        state = result.state
      });
      hoisted.vars.forEach(function(varDecl) {
        var result = evalHoistedVariableDeclarator(varDecl, stack, benv, store, time, state);
        benv = result.benv;
        store = result.store;
        state = result.state
      });
      var updateResult = sideEffectAval(benva, benv, stack, store, state);
      store = updateResult.store;
      state = updateResult.state
    }
    return evalStatementList(bodyNodes, stack, benva, store, time, state)
  }
  function evalNode(node, stack, benva, store, time, state) {
    assertTrue(benva instanceof Addr);
    assertTrue(store instanceof Store);
    assertTrue(state instanceof State, "not a State: " + state + " " + state.constructor);
    switch(node.type) {
      case "Literal":
        return evalLiteral(node, stack, benva, store, time, state);
      case "Identifier":
        return evalIdentifier(node, stack, benva, store, time, state);
      case "BinaryExpression":
        return evalBinaryExpression(node, stack, benva, store, time, state);
      case "LogicalExpression":
        return evalLogicalExpression(node, stack, benva, store, time, state);
      case "CallExpression":
        return evalCallExpression(node, stack, benva, store, time, state);
      case "FunctionExpression":
        return evalFunctionExpression(node, stack, benva, store, time, state);
      case "AssignmentExpression":
        return evalAssignmentExpression(node, stack, benva, store, time, state);
      case "ArrayExpression":
        return evalArrayExpression(node, stack, benva, store, time, state);
      case "MemberExpression":
        return evalMemberExpression(node, stack, benva, store, time, state);
      case "ObjectExpression":
        return evalObjectExpression(node, stack, benva, store, time, state);
      case "ThisExpression":
        return evalThisExpression(node, stack, benva, store, time, state);
      case "NewExpression":
        return evalNewExpression(node, stack, benva, store, time, state);
      case "UpdateExpression":
        return evalUpdateExpression(node, stack, benva, store, time, state);
      case "UnaryExpression":
        return evalUnaryExpression(node, stack, benva, store, time, state);
      case "ExpressionStatement":
        return evalNode(node.expression, stack, benva, store, time, state);
      case "ReturnStatement":
        return evalReturnStatement(node, stack, benva, store, time, state);
      case "BreakStatement":
        return evalBreakStatement(node, stack, benva, store, time, state);
      case "LabeledStatement":
        return evalLabeledStatement(node, stack, benva, store, time, state);
      case "IfStatement":
        return evalIfStatement(node, stack, benva, store, time, state);
      case "ConditionalExpression":
        return evalConditionalExpression(node, stack, benva, store, time, state);
      case "SwitchStatement":
        return evalSwitchStatement(node, stack, benva, store, time, state);
      case "ForStatement":
        return evalForStatement(node, stack, benva, store, time, state);
      case "WhileStatement":
        return evalWhileStatement(node, stack, benva, store, time, state);
      case "FunctionDeclaration":
        return evalFunctionDeclaration(node, stack, benva, store, time, state);
      case "VariableDeclaration":
        return evalStatementList(node.declarations, stack, benva, store, time, state, node.kind);
      case "VariableDeclarator":
        return evalVariableDeclarator(node, stack, benva, store, time, state);
      case "BlockStatement":
        return evalStatementList(node.body, stack, benva, store, time, state);
      case "EmptyStatement":
        return evalEmptyStatement(node, stack, benva, store, time, state);
      case "TryStatement":
        return evalTryStatement(node, stack, benva, store, time, state);
      case "ThrowStatement":
        return evalThrowStatement(node, stack, benva, store, time, state);
      case "Program":
        return evalProgram(node, stack, benva, store, time, state);
      default:
        throw"ipdaEval: cannot handle node " + node.type;
    }
  }
  function applyProc(application, stack, benva, store, time, state) {
    if(stack.length > 64) {
      throw new Error("stack overflow");
    }
    var applicationLength = application.arguments.length + 2;
    var applicationValues = stack.slice(0, applicationLength).reverse();
    var ths = applicationValues[0];
    var operatorValues = applicationValues[1].addresses();
    var operandsValues = applicationValues.slice(2);
    var stack2 = stack.slice(applicationLength);
    var cont = stack2[0];
    var stack3 = stack2.slice(1);
    var time2 = time.tick(application.tag, k);
    var store2 = visited.visited(application, stack, benva, store, time);
    if(store2 === null) {
      return[]
    }
    operatorValues = operatorValues.map(function(operatorValue) {
      assertTrue(operatorValue instanceof Addr);
      var lookupResult = lookupAval(operatorValue, stack, store2, state);
      var benv = lookupResult.value;
      state = lookupResult.state;
      return benv
    });
    return operatorValues.flatMap(function(operator) {
      var callConc = operator.Call;
      assertTrue(callConc.length > 0);
      assertTrue(ths.as.length > 0, "'this'");
      return callConc.map(function(Call) {
        return new Task("#" + application.tag + " " + application + " stack length " + stack.length + " store size " + store.entries.length, function() {
          var markedCont = Call.mark(cont, application);
          return Call.applyFunction(application, operandsValues, ths.as[0], stack3.addFirst(markedCont), benva, store2, time2, state)
        })
      })
    })
  }
  function applyProc2(node, operatorValues, operands, thisa, stack, benva, store, time, state) {
    var cont = stack[0];
    var stack2 = stack.slice(1);
    var time2 = time.tick(node.tag, k);
    var store2 = visited.visited(node, stack, benva, store, time);
    if(store2 === null) {
      return[]
    }
    operatorValues = operatorValues.map(function(operatorValue) {
      assertTrue(operatorValue instanceof Addr);
      var lookupResult = lookupAval(operatorValue, stack, store2, state);
      var benv = lookupResult.value;
      state = lookupResult.state;
      return benv
    });
    return operatorValues.flatMap(function(operator) {
      var callConc = operator.Call;
      assertTrue(callConc.length > 0);
      return callConc.map(function(Call) {
        return new Task("#" + node.tag + " " + node + " stack length " + stack.length + " store size " + store.entries.length, function() {
          var markedCont = Call.mark(cont, node);
          return Call.applyFunction(node, operands, thisa, stack2.addFirst(markedCont), benva, store2, time2, state)
        })
      })
    })
  }
  function applyConstructor(application, stack, benva, store, time, state) {
    if(stack.length > 128) {
      throw new Error("stack explosion");
    }
    var applicationLength = application.arguments.length + 1;
    var applicationValues = stack.slice(0, applicationLength).reverse();
    var constructorValues = applicationValues[0].addresses();
    var operandsValues = applicationValues.slice(1);
    var stack2 = stack.slice(applicationLength);
    var time2 = time.tick(application.tag, k);
    constructorValues = constructorValues.map(function(operatorValue) {
      var lookupResult = lookupAval(operatorValue, stack, store, state);
      var benv = lookupResult.value;
      state = lookupResult.state;
      return benv
    });
    return constructorValues.flatMap(function(constructor) {
      var objectAddress = ag.constructor(application, time);
      function constructorObjectCont() {
        return new Cont("consObj-" + application.tag, benva, function(stack, store, time, state) {
          var objectAval = stack[0];
          var cont = stack[1];
          var stack2 = stack.slice(2);
          if(objectAval.isAddress()) {
            return cont.execute(stack2.addFirst(objectAval), store, time, state)
          }
          var caddresses = objectAval.addresses();
          return cont.execute(stack2.addFirst(lattice.abst([objectAddress].concat(caddresses))), store, time, state)
        })
      }
      var cont = constructorObjectCont();
      var markedCont = cont.addApplication(application);
      var prototypePropertyAs = constructor.lookup(U_PROTOTYPE).addresses;
      var laResult = doLookupAddresses(prototypePropertyAs, stack, store, state);
      var ths = createObject(laResult.value);
      var allocResult = allocAval(objectAddress, ths, stack, store, laResult.state, "'this' object for " + application);
      store = allocResult.store;
      state = allocResult.state;
      return constructor.Call.map(function(Call) {
        return new Task("#" + application.tag + " " + application + " stack length " + stack.length + " store size " + store.entries.length, function() {
          return Call.applyFunction(application, operandsValues, objectAddress, stack2.addFirst(markedCont), benva, store, time2, state)
        })
      })
    })
  }
  function BenvClosureCall(node, scope) {
    this.node = node;
    this.scope = scope
  }
  BenvClosureCall.prototype.toString = function() {
    return"<BenvClosureCall " + this.node.tag + ">"
  };
  BenvClosureCall.prototype.equals = function(other) {
    if(this === other) {
      return true
    }
    if(!(this instanceof BenvClosureCall)) {
      return false
    }
    return this.node === other.node && this.scope.equals(other.scope)
  };
  BenvClosureCall.prototype.mark = function(cont, application) {
    var markedCont = cont.addApplication(application);
    markedCont.toString = cont.toString;
    return markedCont
  };
  BenvClosureCall.prototype.applyFunction = function(application, operandsValues, ths, stack, benva, store, time, state) {
    var funNode = this.node;
    var funScope = this.scope;
    var bodyNodes = funNode.body.body;
    if(bodyNodes.length === 0) {
      var cont = stack[0];
      var stack2 = stack.slice(1);
      state = state.appliesFunction(application, funNode, funScope, ths);
      state = state.leavesFunction(application, funNode, funScope, ths);
      return cont.execute(stack2.addFirst(J_UNDEFINED), store, time, state)
    }
    var formalParameters = funNode.params;
    var createResult = createEnvironment(funScope, application, funNode, state);
    var extendedBenv = createResult.benv;
    state = createResult.state;
    if(ths === null || ths === undefined) {
      ths = GLOBALA
    }
    extendedBenv = extendedBenv.add(U_THIS, ths);
    for(var i = 0;i < formalParameters.length;i++) {
      var param = formalParameters[i];
      var address = ag.variable(param, time);
      extendedBenv = extendedBenv.add(userLattice.abst1(param.name), address);
      var allocResult = allocAval(address, operandsValues[i], stack, store, state);
      store = allocResult.store;
      state = allocResult.state
    }
    var extendedBenva = ag.benv(application, time);
    var hoisted = hoist(bodyNodes);
    if(hoisted.funs.length > 0 || hoisted.vars.length > 0) {
      hoisted.funs.forEach(function(funDecl) {
        var result = evalHoistedFunctionDeclaration(funDecl, stack, extendedBenva, extendedBenv, store, time, state);
        extendedBenv = result.benv;
        store = result.store;
        state = result.state
      });
      hoisted.vars.forEach(function(varDecl) {
        var result = evalHoistedVariableDeclarator(varDecl, stack, extendedBenv, store, time, state);
        extendedBenv = result.benv;
        store = result.store;
        state = result.state
      })
    }
    var allocResult = allocAval(extendedBenva, extendedBenv, stack, store, state, "extended static env for closure call with root " + funScope);
    store = allocResult.store;
    state = allocResult.state;
    state = state.appliesFunction(application, funNode, extendedBenva, ths);
    function fbodyCont(i) {
      return new Cont("fbody-" + bodyNodes[i - 1].tag, extendedBenva, function(stack, store, time, state) {
        if(i === bodyNodes.length) {
          var cont = stack[1];
          var stack2 = stack.slice(2);
          state = state.leavesFunction(application, funNode, funScope, ths);
          return cont.execute(stack2.addFirst(J_UNDEFINED), store, time, state)
        }
        var stack3 = stack.slice(1);
        return evalNode(bodyNodes[i], stack3.addFirst(fbodyCont(i + 1)), extendedBenva, store, time, state)
      })
    }
    return evalNode(bodyNodes[0], stack.addFirst(fbodyCont(1)), extendedBenva, store, time, state)
  };
  BenvClosureCall.prototype.addresses = function() {
    return[this.scope]
  };
  function BenvPrimitiveCall(applyFunction) {
    this.applyFunction = applyFunction
  }
  BenvPrimitiveCall.prototype.toString = function() {
    return"<BenvPrimitiveCall>"
  };
  BenvPrimitiveCall.prototype.equals = function(other) {
    if(this === other) {
      return true
    }
    if(!(this instanceof BenvPrimitiveCall)) {
      return false
    }
    return this.applyFunction === other.applyFunction
  };
  BenvPrimitiveCall.prototype.mark = function(cont, application) {
    var markedCont = cont.addApplication(application);
    markedCont.toString = cont.toString;
    return markedCont
  };
  BenvPrimitiveCall.prototype.addresses = function() {
    return[]
  };
  var totalNumTasks = 0;
  function taskRunner() {
    while(tasks.length > 0) {
      if(tasks.length > 128) {
        throw new Error("task overflow");
      }
      if(totalNumTasks > 1024) {
        throw new Error("state space overflow");
      }
      var task = tasks[0];
      print("\nSTART", task, "-- length", tasks.length);
      var taskResult = task.execute();
      assertDefinedNotNull(taskResult);
      print("END", task, "-- result", taskResult, "-- total", ++totalNumTasks);
      tasks = tasks.slice(1).concat(taskResult)
    }
  }
  var GLOBALA = new ContextAddr("this", 0);
  var OBJECTPA;
  var FUNCTIONPA;
  var ARRAYPA;
  function createGlobal(store) {
    function registerProperty(object, objectAddress, propertyName, value) {
      var propertyAddress = ag.objectProperty(objectAddress, propertyName);
      object = object.add(userLattice.abst1(propertyName), propertyAddress);
      store = store.allocAval(propertyAddress, value);
      return object
    }
    function registerPrimitiveFunction(object, objectAddress, propertyName, fun) {
      var primFunObject = createPrimitive(fun);
      var primFunObjectAddress = new ContextAddr(objectAddress, "<" + propertyName + ">");
      store = store.allocAval(primFunObjectAddress, primFunObject);
      return registerProperty(object, objectAddress, propertyName, lattice.abst1(primFunObjectAddress))
    }
    var objectPa = new ContextAddr("Object.prototype", 0);
    OBJECTPA = lattice.abst1(objectPa);
    var objectP = createObject(J_NULL);
    objectP.toString = function() {
      return"<Object.prototype>"
    };
    var functionPa = new ContextAddr("Function.prototype", 0);
    FUNCTIONPA = lattice.abst1(functionPa);
    var functionP = createObject(OBJECTPA);
    functionP.toString = function() {
      return"<Function.prototype>"
    };
    var arrayPa = new ContextAddr("Array.prototype", 0);
    ARRAYPA = lattice.abst1(arrayPa);
    var arrayP = createObject(OBJECTPA);
    arrayP.toString = function() {
      return"<Array.prototype>"
    };
    var global = createObject(OBJECTPA);
    var objecta = new ContextAddr("<Object>", 0);
    objectP = registerProperty(objectP, objectPa, "constructor", lattice.abst1(objecta));
    var object = createPrimitive(objectConstructor);
    var objectppa = new ContextAddr(objecta, "prototype");
    object = object.add(U_PROTOTYPE, objectppa);
    store = store.allocAval(objectppa, OBJECTPA);
    var objectNa = new ContextAddr("Object", 0);
    global = global.add(userLattice.abst1("Object"), objectNa);
    store = store.allocAval(objectNa, lattice.abst1(objecta));
    object = registerPrimitiveFunction(object, objecta, "getPrototypeOf", objectGetPrototypeOf);
    object = registerPrimitiveFunction(object, objecta, "create", objectCreate);
    store = store.allocAval(objecta, object);
    store = store.allocAval(objectPa, objectP);
    var functiona = new ContextAddr("<Function>", 0);
    var functionP = registerProperty(functionP, functionPa, "constructor", lattice.abst1(functiona));
    var fun = createPrimitive(function() {
    });
    var funppa = new ContextAddr(functiona, "prototype");
    fun = fun.add(U_PROTOTYPE, funppa);
    store = store.allocAval(funppa, FUNCTIONPA);
    var functionNa = new ContextAddr("Function", 0);
    global = global.add(userLattice.abst1("Function"), functionNa);
    store = store.allocAval(functiona, fun);
    store = store.allocAval(functionNa, lattice.abst1(functiona));
    store = store.allocAval(functionPa, functionP);
    var arraya = new ContextAddr("<Array>", 0);
    var arrayP = registerProperty(arrayP, arrayPa, "constructor", lattice.abst1(arraya));
    var array = createPrimitive(arrayConstructor);
    var arrayppa = new ContextAddr(arraya, "prototype");
    array = array.add(U_PROTOTYPE, arrayppa);
    store = store.allocAval(arrayppa, ARRAYPA);
    var arrayNa = new ContextAddr("Array", 0);
    global = global.add(userLattice.abst1("Array"), arrayNa);
    store = store.allocAval(arraya, array);
    store = store.allocAval(arrayNa, lattice.abst1(arraya));
    arrayP = registerPrimitiveFunction(arrayP, arrayPa, "concat", arrayConcat);
    arrayP = registerPrimitiveFunction(arrayP, arrayPa, "push", arrayPush);
    arrayP = registerPrimitiveFunction(arrayP, arrayPa, "map", arrayMap);
    store = store.allocAval(arrayPa, arrayP);
    var mathap = new ContextAddr("Math", 0);
    global = global.add(userLattice.abst1("Math"), mathap);
    var matha = new ContextAddr("<Math>", 0);
    store = store.allocAval(mathap, lattice.abst1(matha));
    var math = createObject(OBJECTPA);
    math = registerPrimitiveFunction(math, matha, "sqrt", mathSqrt);
    store = store.allocAval(matha, math);
    global = global.add(U_THIS, GLOBALA);
    global = registerProperty(global, GLOBALA, "undefined", J_UNDEFINED);
    global = registerProperty(global, GLOBALA, "NaN", lattice.abst1(NaN));
    global = registerProperty(global, GLOBALA, "Infinity", lattice.abst1(Infinity));
    var metaFun = createPrimitive(meta);
    var metaa = new ContextAddr("$meta", 0);
    global = global.add(userLattice.abst1("$meta"), metaa);
    var metaFuna = new ContextAddr("metaFun", 0);
    store = store.allocAval(metaa, lattice.abst1(metaFuna));
    store = store.allocAval(metaFuna, metaFun);
    var avalFun = createPrimitive(aval);
    var avala = new ContextAddr("$aval", 0);
    global = global.add(userLattice.abst1("$aval"), avala);
    var avalFuna = new ContextAddr("avalFun", 0);
    store = store.allocAval(avala, lattice.abst1(avalFuna));
    store = store.allocAval(avalFuna, avalFun);
    store = store.allocAval(GLOBALA, global);
    function objectConstructor(application, operands, objectAddress, stack, benva, store, time, state) {
      var cont = stack[0];
      var stack2 = stack.slice(1);
      var obj = createObject(OBJECTPA);
      var allocResult = allocAval(objectAddress, obj, stack, store, state);
      store = allocResult.store;
      state = allocResult.state;
      return cont.execute(stack2.addFirst(lattice.abst1(objectAddress)), store, time, state)
    }
    function objectCreate(application, operands, objectAddress, stack, benva, store, time, state) {
      if(operands.length !== 1) {
        throw new Error("TODO");
      }
      var cont = stack[0];
      var stack2 = stack.slice(1);
      var obj = createObject(operands[0]);
      var address = ag.object(application, time);
      var allocResult = allocAval(address, obj, stack, store, state);
      store = allocResult.store;
      state = allocResult.state;
      return cont.execute(stack2.addFirst(lattice.abst1(address)), store, time, state)
    }
    function objectGetPrototypeOf(application, operands, objectAddress, stack, benva, store, time, state) {
      var cont = stack[0];
      var stack2 = stack.slice(1);
      var operand = operands[0];
      if(operand.user === BOT) {
        var addresses = operand.addresses();
        var object = addresses.map(store.lookupAval, store).reduce(Lattice.join);
        return cont.execute(stack2.addFirst(object.Prototype), store, time, state)
      }
      throw new Error("TODO");
    }
    function arrayConstructor(application, operands, objectAddress, stack, benva, store, time, state) {
      var cont = stack[0];
      var stack2 = stack.slice(1);
      var arrayBenv = createArray();
      var arrayAddress = ag.array(application, time);
      var l = operands[0];
      var lengthAddress = ag.objectProperty(arrayAddress, "length");
      arrayBenv = arrayBenv.add(U_LENGTH, lengthAddress);
      var allocResult = allocAval(lengthAddress, l, stack, store, state);
      allocResult = allocAval(arrayAddress, arrayBenv, stack, allocResult.store, allocResult.state);
      store = allocResult.store;
      state = allocResult.state;
      return cont.execute(stack2.addFirst(lattice.abst1(arrayAddress)), store, time, state)
    }
    function arrayPush(application, operands, objectAddress, stack, benva, store, time, state) {
      var cont = stack[0];
      var stack2 = stack.slice(1);
      var arg0aa = operands[0];
      var lookupResult = lookupAval(objectAddress, stack, store, state);
      var receiver = lookupResult.value;
      state = lookupResult.state;
      var lreceiveraa = receiver.lookup(U_LENGTH).addresses;
      if(lreceiveraa.length === 0) {
        var newPropertyAddress = ag.objectProperty(objectAddress, U_0.ToString());
        receiver = receiver.add(U_0.ToString(), newPropertyAddress);
        var allocResult = allocAval(newPropertyAddress, arg0aa, stack, store, state);
        store = allocResult.store;
        state = allocResult.state;
        var lengthPropertyAddress = ag.objectPropery(objectAddress, U_LENGTH);
        receiver = receiver.add(U_LENGTH, lengthPropertyAddress);
        allocResult = allocAval(lengthPropertyAddress, J_0, stack, store, state);
        store = allocResult.store;
        state = allocResult.state;
        var updateResult = sideEffectAval(objectAddress, receiver, stack, store, state);
        store = updateResult.store;
        state = updateResult.state;
        return cont.execute(stack2.addFirst(arg0aa), store, time, state)
      }else {
        var laResult = doLookupAddresses(lreceiveraa, stack, store, state);
        var lreceiveru = laResult.value.user;
        var newPropertyAddress = ag.objectProperty(objectAddress, lreceiveru.ToString());
        receiver = receiver.add(lreceiveru.ToString(), newPropertyAddress);
        var allocResult = allocAval(newPropertyAddress, arg0aa, stack, store, laResult.state);
        store = allocResult.store;
        state = allocResult.state;
        var updateResult = sideEffectAval(objectAddress, receiver, stack, store, state);
        store = updateResult.store;
        state = updateResult.state;
        var newLength = userLattice.add(lreceiveru, U_1);
        lreceiveraa.forEach(function(lengthAddress) {
          var updateResult = updateAval(lengthAddress, new JipdaValue(newLength, []), stack, store, state);
          store = updateResult.store;
          state = updateResult.state
        });
        return cont.execute(stack2.addFirst(arg0aa), store, time, state)
      }
    }
    function arrayConcat(application, operands, objectAddress, stack, benva, store, time, state) {
      var cont = stack[0];
      var stack2 = stack.slice(1);
      var arg0aa = operands[0];
      var lookupResult = lookupAval(objectAddress, stack, store, state);
      var receiver = lookupResult.value;
      state = lookupResult.state;
      var lreceiveraa = receiver.lookup(U_LENGTH).addresses;
      var laResult = doLookupAddresses(arg0aa.addresses(), stack, store, state);
      var arg0 = laResult.value;
      laResult = doLookupAddresses(lreceiveraa, stack, store, laResult.state);
      var lreceiveru = laResult.value.user;
      var larg0aa = arg0.lookup(U_LENGTH).addresses;
      laResult = doLookupAddresses(larg0aa, stack, store, laResult.state);
      var larg0 = laResult.value;
      var larg0u = larg0.user;
      var result = createArray();
      var resulta = ag.array(application, time);
      return arrayCopy(receiver, U_0, result, resulta, U_0, lreceiveru, stack, store, laResult.state, function(result, index, store, state) {
        return arrayCopy(arg0, U_0, result, resulta, index, larg0u, stack, store, state, function(result, index, store, state) {
          var lengthPropertya = ag.objectProperty(resulta, U_LENGTH);
          result = result.add(U_LENGTH, lengthPropertya);
          var allocResult = allocAval(lengthPropertya, new JipdaValue(index, []), stack, store, state);
          allocResult = allocAval(resulta, result, stack, allocResult.store, allocResult.state);
          store = allocResult.store;
          state = allocResult.state;
          return cont.execute(stack2.addFirst(lattice.abst1(resulta)), store, time, state)
        })
      })
    }
    function arrayMap(application, operands, thisa, stack, benva, store, time, state) {
      var lookupResult = lookupAval(thisa, stack, store, state);
      var receiver = lookupResult.value;
      state = lookupResult.state;
      var lena = receiver.lookup(U_LENGTH).addresses;
      var laResult = doLookupAddresses(lena, stack, store, state);
      var lenValue = laResult.value;
      state = laResult.state;
      function arrayMapToUInt32Cont() {
        return new Cont("arrayMapToUInt32-" + application.tag, benva, function(stack, store, time, state) {
          var lenPrim = stack[0].user;
          var t;
          if(operands[1]) {
            var thisas = operands[1].addresses();
            assertTrue(thisas.length === 1);
            t = thisas[0]
          }
          var arr = createArray();
          var arrAddr = ag.array(application, time);
          var lenPropAddr = ag.objectProperty(arrAddr, U_LENGTH);
          arr = arr.add(U_LENGTH, lenPropAddr);
          var allocResult = allocAval(lenPropAddr, new JipdaValue(lenPrim, []), stack, store, state);
          store = allocResult.store;
          state = allocResult.state;
          var k = U_0;
          function arrayMapCont(k, arr, arrAddr) {
            return new Cont("arrayMap-" + application.tag, benva, function(stack, store, time, state) {
              var value = stack[0];
              var valuePropAddr = ag.objectProperty(arrAddr, k.ToString());
              arr = arr.add(k.ToString(), valuePropAddr);
              var allocResult = allocAval(valuePropAddr, value, stack, store, state);
              store = allocResult.store;
              state = allocResult.state;
              k = userLattice.add(k, U_1);
              while(userLattice.isTrue(userLattice.lt(k, lenPrim))) {
                var indexAs = receiver.lookup(k.ToString()).addresses;
                if(indexAs.length > 0) {
                  var laResult = doLookupAddresses(indexAs, stack, store, state);
                  var indexValue = laResult.value;
                  state = laResult.state;
                  var stack2 = stack.slice(1);
                  return applyProc2(application, operands[0].addresses(), [indexValue, k, thisa], t, stack2.addFirst(arrayMapCont(k, arr, arrAddr)), benva, store, time, state)
                }
                k = userLattice.add(k, U_1)
              }
              var cont = stack[1];
              var stack2 = stack.slice(2);
              allocResult = allocAval(arrAddr, arr, stack, store, state);
              return cont.execute(stack2.addFirst(new JipdaValue(BOT, [arrAddr])), allocResult.store, time, allocResult.state)
            })
          }
          while(userLattice.isTrue(userLattice.lt(k, lenPrim))) {
            var indexAs = receiver.lookup(k.ToString()).addresses;
            if(indexAs.length > 0) {
              var laResult = doLookupAddresses(indexAs, stack, store, state);
              var indexValue = laResult.value;
              state = laResult.state;
              var stack2 = stack.slice(1);
              return applyProc2(application, operands[0].addresses(), [indexValue, k, thisa], t, stack2.addFirst(arrayMapCont(k, arr, arrAddr)), benva, store, time, state)
            }
            k = userLattice.add(k, U_1)
          }
          var cont = stack[1];
          var stack2 = stack.slice(2);
          allocResult = allocAval(arrAddr, arr, stack, store, state);
          return cont.execute(stack2.addFirst(new JipdaValue(BOT, [arrAddr])), allocResult.store, time, allocResult.state)
        })
      }
      return ToUInt32(lenValue, application, stack.addFirst(arrayMapToUInt32Cont()), benva, store, time, state)
    }
    function mathSqrt(application, operands, objectAddress, stack, benva, store, time, state) {
      var cont = stack[0];
      var stack2 = stack.slice(1);
      var u = toUserNumber(operands[0], store);
      var r = userLattice.sqrt(u);
      var j = new JipdaValue(r, []);
      return cont.execute(stack2.addFirst(j), store, time, state)
    }
    function meta(application, operands, objectAddress, stack, benva, store, time, state) {
      var cont = stack[0];
      var stack2 = stack.slice(1);
      var str = operands[0].conc()[0];
      var value = lattice.abst1(eval(str));
      return cont.execute(stack2.addFirst(value), store, time, state)
    }
    function aval(application, operands, objectAddress, stack, benva, store, time, state) {
      var cont = stack[0];
      var stack2 = stack.slice(1);
      var value = operands.reduce(Lattice.join, BOT);
      return cont.execute(stack2.addFirst(value), store, time, state)
    }
    function arrayCopy(srcBenv, srcPos, dstBenv, dsta, dstPos, l, stack, store, state, fcont) {
      var i = U_0;
      while(userLattice.isTrue(userLattice.lt(i, l))) {
        var srcvalueaa = srcBenv.lookup(userLattice.add(i, srcPos).ToString()).addresses;
        var laResult = doLookupAddresses(srcvalueaa, stack, store, state);
        var srcvalue = laResult.value;
        var dstName = userLattice.add(i, dstPos).ToString();
        var dstindexa = ag.objectProperty(dsta, dstName);
        dstBenv = dstBenv.add(dstName, dstindexa);
        var allocResult = allocAval(dstindexa, srcvalue, stack, store, laResult.state);
        store = allocResult.store;
        state = allocResult.state;
        i = userLattice.add(i, U_1)
      }
      return fcont(dstBenv, userLattice.add(i, dstPos), store, state)
    }
    return store
  }
  function init() {
    var store0 = new Store;
    store0 = createGlobal(store0);
    var replCont = new Cont("repl", GLOBALA, function(stack, store, time, state) {
      var value = stack[0];
      var stack2 = stack.slice(1);
      var printer = new ConcretePrinter(userLattice, store);
      print(value.accept(printer));
      putstr("> ");
      var src = readline();
      if(":q".equals(src)) {
        print("Bye!");
        return[]
      }
      try {
        var node = createAst(src);
        return evalNode(node, stack2.addFirst(replCont), GLOBALA, store, time, state)
      }catch(e) {
        print(e);
        print(e.stack);
        return replCont.execute(stack2.addFirst(BOT), store, time, state)
      }
    });
    var time0 = new Time;
    if(node0) {
      var exitCont = new Cont("exit-" + node0.tag, GLOBALA, function(stack, store, time, state) {
        var state2 = state.returnsResult(stack[0], store);
        result = result.join(state2);
        return[]
      });
      tasks = [new Task("eval", function() {
        return evalNode(node0, [exitCont], GLOBALA, store0, time0, state0)
      })]
    }else {
      tasks = [new Task("repl", function() {
        return evalNode(createAst("'I am JIPDA'"), [replCont], GLOBALA, store0, time0, state0)
      })]
    }
    return store0
  }
  var store0 = init();
  taskRunner();
  return{result:result, lattice:lattice, globala:GLOBALA, globalStore:store0}
}
function jipdaRepl(k, n) {
  var lat = new LatN(n === undefined ? 1 : n);
  try {
    ipdaEval(null, new State, {k:k || 4, lattice:lat, ag:timeDefaultAg})
  }catch(e) {
    print(e);
    print(e.stack)
  }
}
function concRepl(k, n) {
  var lat = new CpLattice;
  var concreteVisited = {};
  concreteVisited.visited = function(node, stack, benva, store, time) {
    return store
  };
  try {
    ipdaEval(null, new State, {k:0, lattice:lat, ag:concreteAg, visited:concreteVisited})
  }catch(e) {
    print(e);
    print(e.stack)
  }
}
function createJipdaPrinter(lattice, store) {
  return function jipdaPrinter(el) {
    if(el === undefined) {
      return"undefined"
    }
    if(el === null) {
      return"null"
    }
    if(el instanceof Addr) {
      var aval = store.lookupAval(el);
      if(aval.isBenv) {
        if(aval.isArray()) {
          var i = lattice.abst1(0);
          var las = aval.lookup(lattice.abst1("length")).addresses;
          var l = las.map(store.lookupAval, store).reduce(Lattice.join, BOT).user;
          var result = [];
          while(lattice.isTrue(lattice.lt(i, l))) {
            var ias = aval.lookup(i.ToString()).addresses;
            var v = ias.map(store.lookupAval, store).reduce(Lattice.join, BOT);
            result = result.addLast(v.toString(jipdaPrinter));
            i = lattice.add(i, lattice.abst1(1))
          }
          return result.toString()
        }
        return"<" + aval.Class + ">"
      }
      return aval.toString(jipdaPrinter)
    }
    return el.toString()
  }
}
;goog.provide("esco");
var escodegen = {};
var Syntax, Precedence, BinaryPrecedence, Regex, VisitorKeys, VisitorOption, SourceNode, isArray, base, indent, json, renumber, hexadecimal, quotes, escapeless, newline, space, parentheses, semicolons, safeConcatenation, directive, extra, parse, sourceMap;
Syntax = {AssignmentExpression:"AssignmentExpression", ArrayExpression:"ArrayExpression", ArrayPattern:"ArrayPattern", BlockStatement:"BlockStatement", BinaryExpression:"BinaryExpression", BreakStatement:"BreakStatement", CallExpression:"CallExpression", CatchClause:"CatchClause", ComprehensionBlock:"ComprehensionBlock", ComprehensionExpression:"ComprehensionExpression", ConditionalExpression:"ConditionalExpression", ContinueStatement:"ContinueStatement", DirectiveStatement:"DirectiveStatement", 
DoWhileStatement:"DoWhileStatement", DebuggerStatement:"DebuggerStatement", EmptyStatement:"EmptyStatement", ExpressionStatement:"ExpressionStatement", ForStatement:"ForStatement", ForInStatement:"ForInStatement", FunctionDeclaration:"FunctionDeclaration", FunctionExpression:"FunctionExpression", Identifier:"Identifier", IfStatement:"IfStatement", Literal:"Literal", LabeledStatement:"LabeledStatement", LogicalExpression:"LogicalExpression", MemberExpression:"MemberExpression", NewExpression:"NewExpression", 
ObjectExpression:"ObjectExpression", ObjectPattern:"ObjectPattern", Program:"Program", Property:"Property", ReturnStatement:"ReturnStatement", SequenceExpression:"SequenceExpression", SwitchStatement:"SwitchStatement", SwitchCase:"SwitchCase", ThisExpression:"ThisExpression", ThrowStatement:"ThrowStatement", TryStatement:"TryStatement", UnaryExpression:"UnaryExpression", UpdateExpression:"UpdateExpression", VariableDeclaration:"VariableDeclaration", VariableDeclarator:"VariableDeclarator", WhileStatement:"WhileStatement", 
WithStatement:"WithStatement", YieldExpression:"YieldExpression"};
Precedence = {Sequence:0, Assignment:1, Conditional:2, LogicalOR:3, LogicalAND:4, BitwiseOR:5, BitwiseXOR:6, BitwiseAND:7, Equality:8, Relational:9, BitwiseSHIFT:10, Additive:11, Multiplicative:12, Unary:13, Postfix:14, Call:15, New:16, Member:17, Primary:18};
BinaryPrecedence = {"||":Precedence.LogicalOR, "&&":Precedence.LogicalAND, "|":Precedence.BitwiseOR, "^":Precedence.BitwiseXOR, "&":Precedence.BitwiseAND, "==":Precedence.Equality, "!=":Precedence.Equality, "===":Precedence.Equality, "!==":Precedence.Equality, "is":Precedence.Equality, "isnt":Precedence.Equality, "<":Precedence.Relational, ">":Precedence.Relational, "<=":Precedence.Relational, ">=":Precedence.Relational, "in":Precedence.Relational, "instanceof":Precedence.Relational, "<<":Precedence.BitwiseSHIFT, 
">>":Precedence.BitwiseSHIFT, ">>>":Precedence.BitwiseSHIFT, "+":Precedence.Additive, "-":Precedence.Additive, "*":Precedence.Multiplicative, "%":Precedence.Multiplicative, "/":Precedence.Multiplicative};
Regex = {NonAsciiIdentifierPart:new RegExp("[\u00aa\u00b5\u00ba\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0300-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u0483-\u0487\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u05d0-\u05ea\u05f0-\u05f2\u0610-\u061a\u0620-\u0669\u066e-\u06d3\u06d5-\u06dc\u06df-\u06e8\u06ea-\u06fc\u06ff\u0710-\u074a\u074d-\u07b1\u07c0-\u07f5\u07fa\u0800-\u082d\u0840-\u085b\u08a0\u08a2-\u08ac\u08e4-\u08fe\u0900-\u0963\u0966-\u096f\u0971-\u0977\u0979-\u097f\u0981-\u0983\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bc-\u09c4\u09c7\u09c8\u09cb-\u09ce\u09d7\u09dc\u09dd\u09df-\u09e3\u09e6-\u09f1\u0a01-\u0a03\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a59-\u0a5c\u0a5e\u0a66-\u0a75\u0a81-\u0a83\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abc-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ad0\u0ae0-\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3c-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b5c\u0b5d\u0b5f-\u0b63\u0b66-\u0b6f\u0b71\u0b82\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd0\u0bd7\u0be6-\u0bef\u0c01-\u0c03\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c58\u0c59\u0c60-\u0c63\u0c66-\u0c6f\u0c82\u0c83\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbc-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0cde\u0ce0-\u0ce3\u0ce6-\u0cef\u0cf1\u0cf2\u0d02\u0d03\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d-\u0d44\u0d46-\u0d48\u0d4a-\u0d4e\u0d57\u0d60-\u0d63\u0d66-\u0d6f\u0d7a-\u0d7f\u0d82\u0d83\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0df2\u0df3\u0e01-\u0e3a\u0e40-\u0e4e\u0e50-\u0e59\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb9\u0ebb-\u0ebd\u0ec0-\u0ec4\u0ec6\u0ec8-\u0ecd\u0ed0-\u0ed9\u0edc-\u0edf\u0f00\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e-\u0f47\u0f49-\u0f6c\u0f71-\u0f84\u0f86-\u0f97\u0f99-\u0fbc\u0fc6\u1000-\u1049\u1050-\u109d\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u135d-\u135f\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176c\u176e-\u1770\u1772\u1773\u1780-\u17d3\u17d7\u17dc\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u1820-\u1877\u1880-\u18aa\u18b0-\u18f5\u1900-\u191c\u1920-\u192b\u1930-\u193b\u1946-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u19d0-\u19d9\u1a00-\u1a1b\u1a20-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1aa7\u1b00-\u1b4b\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1bf3\u1c00-\u1c37\u1c40-\u1c49\u1c4d-\u1c7d\u1cd0-\u1cd2\u1cd4-\u1cf6\u1d00-\u1de6\u1dfc-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u200c\u200d\u203f\u2040\u2054\u2071\u207f\u2090-\u209c\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d7f-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2de0-\u2dff\u2e2f\u3005-\u3007\u3021-\u302f\u3031-\u3035\u3038-\u303c\u3041-\u3096\u3099\u309a\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua62b\ua640-\ua66f\ua674-\ua67d\ua67f-\ua697\ua69f-\ua6f1\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua827\ua840-\ua873\ua880-\ua8c4\ua8d0-\ua8d9\ua8e0-\ua8f7\ua8fb\ua900-\ua92d\ua930-\ua953\ua960-\ua97c\ua980-\ua9c0\ua9cf-\ua9d9\uaa00-\uaa36\uaa40-\uaa4d\uaa50-\uaa59\uaa60-\uaa76\uaa7a\uaa7b\uaa80-\uaac2\uaadb-\uaadd\uaae0-\uaaef\uaaf2-\uaaf6\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabea\uabec\uabed\uabf0-\uabf9\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe00-\ufe0f\ufe20-\ufe26\ufe33\ufe34\ufe4d-\ufe4f\ufe70-\ufe74\ufe76-\ufefc\uff10-\uff19\uff21-\uff3a\uff3f\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc]")};
function getDefaultOptions() {
  return{indent:null, base:null, parse:null, comment:false, format:{indent:{style:"    ", base:0, adjustMultilineComment:false}, json:false, renumber:false, hexadecimal:false, quotes:"single", escapeless:false, compact:false, parentheses:true, semicolons:true, safeConcatenation:false}, moz:{starlessGenerator:false, parenthesizedComprehensionBlock:false}, sourceMap:null, sourceMapWithCode:false, directive:false, verbatim:null}
}
function stringToArray(str) {
  var length = str.length, result = [], i;
  for(i = 0;i < length;i += 1) {
    result[i] = str.charAt(i)
  }
  return result
}
function stringRepeat(str, num) {
  var result = "";
  for(num |= 0;num > 0;num >>>= 1, str += str) {
    if(num & 1) {
      result += str
    }
  }
  return result
}
isArray = Array.isArray;
if(!isArray) {
  isArray = function isArray(array) {
    return Object.prototype.toString.call(array) === "[object Array]"
  }
}
function SourceNodeMock(line, column, filename, chunk) {
  var result = [];
  function flatten(input) {
    var i, iz;
    if(isArray(input)) {
      for(i = 0, iz = input.length;i < iz;++i) {
        flatten(input[i])
      }
    }else {
      if(input instanceof SourceNodeMock) {
        result.push(input)
      }else {
        if(typeof input === "string" && input) {
          result.push(input)
        }
      }
    }
  }
  flatten(chunk);
  this.children = result
}
SourceNodeMock.prototype.toString = function toString() {
  var res = "", i, iz, node;
  for(i = 0, iz = this.children.length;i < iz;++i) {
    node = this.children[i];
    if(node instanceof SourceNodeMock) {
      res += node.toString()
    }else {
      res += node
    }
  }
  return res
};
SourceNodeMock.prototype.replaceRight = function replaceRight(pattern, replacement) {
  var last = this.children[this.children.length - 1];
  if(last instanceof SourceNodeMock) {
    last.replaceRight(pattern, replacement)
  }else {
    if(typeof last === "string") {
      this.children[this.children.length - 1] = last.replace(pattern, replacement)
    }else {
      this.children.push("".replace(pattern, replacement))
    }
  }
  return this
};
SourceNodeMock.prototype.join = function join(sep) {
  var i, iz, result;
  result = [];
  iz = this.children.length;
  if(iz > 0) {
    for(i = 0, iz -= 1;i < iz;++i) {
      result.push(this.children[i], sep)
    }
    result.push(this.children[iz]);
    this.children = result
  }
  return this
};
function hasLineTerminator(str) {
  return/[\r\n]/g.test(str)
}
function endsWithLineTerminator(str) {
  var ch = str.charAt(str.length - 1);
  return ch === "\r" || ch === "\n"
}
function shallowCopy(obj) {
  var ret = {}, key;
  for(key in obj) {
    if(obj.hasOwnProperty(key)) {
      ret[key] = obj[key]
    }
  }
  return ret
}
function deepCopy(obj) {
  var ret = {}, key, val;
  for(key in obj) {
    if(obj.hasOwnProperty(key)) {
      val = obj[key];
      if(typeof val === "object" && val !== null) {
        ret[key] = deepCopy(val)
      }else {
        ret[key] = val
      }
    }
  }
  return ret
}
function updateDeeply(target, override) {
  var key, val;
  function isHashObject(target) {
    return typeof target === "object" && target instanceof Object && !(target instanceof RegExp)
  }
  for(key in override) {
    if(override.hasOwnProperty(key)) {
      val = override[key];
      if(isHashObject(val)) {
        if(isHashObject(target[key])) {
          updateDeeply(target[key], val)
        }else {
          target[key] = updateDeeply({}, val)
        }
      }else {
        target[key] = val
      }
    }
  }
  return target
}
function generateNumber(value) {
  var result, point, temp, exponent, pos;
  if(value !== value) {
    throw new Error("Numeric literal whose value is NaN");
  }
  if(value < 0 || value === 0 && 1 / value < 0) {
    throw new Error("Numeric literal whose value is negative");
  }
  if(value === 1 / 0) {
    return json ? "null" : renumber ? "1e400" : "1e+400"
  }
  result = "" + value;
  if(!renumber || result.length < 3) {
    return result
  }
  point = result.indexOf(".");
  if(!json && result.charAt(0) === "0" && point === 1) {
    point = 0;
    result = result.slice(1)
  }
  temp = result;
  result = result.replace("e+", "e");
  exponent = 0;
  if((pos = temp.indexOf("e")) > 0) {
    exponent = +temp.slice(pos + 1);
    temp = temp.slice(0, pos)
  }
  if(point >= 0) {
    exponent -= temp.length - point - 1;
    temp = +(temp.slice(0, point) + temp.slice(point + 1)) + ""
  }
  pos = 0;
  while(temp.charAt(temp.length + pos - 1) === "0") {
    pos -= 1
  }
  if(pos !== 0) {
    exponent -= pos;
    temp = temp.slice(0, pos)
  }
  if(exponent !== 0) {
    temp += "e" + exponent
  }
  if((temp.length < result.length || hexadecimal && value > 1E12 && Math.floor(value) === value && (temp = "0x" + value.toString(16)).length < result.length) && +temp === value) {
    result = temp
  }
  return result
}
function escapeAllowedCharacter(ch, next) {
  var code = ch.charCodeAt(0), hex = code.toString(16), result = "\\";
  switch(ch) {
    case "\u0008":
      result += "b";
      break;
    case "\u000c":
      result += "f";
      break;
    case "\t":
      result += "t";
      break;
    default:
      if(json || code > 255) {
        result += "u" + "0000".slice(hex.length) + hex
      }else {
        if(ch === "\x00" && "0123456789".indexOf(next) < 0) {
          result += "0"
        }else {
          if(ch === "\v") {
            result += "v"
          }else {
            result += "x" + "00".slice(hex.length) + hex
          }
        }
      }
      break
  }
  return result
}
function escapeDisallowedCharacter(ch) {
  var result = "\\";
  switch(ch) {
    case "\\":
      result += "\\";
      break;
    case "\n":
      result += "n";
      break;
    case "\r":
      result += "r";
      break;
    case "\u2028":
      result += "u2028";
      break;
    case "\u2029":
      result += "u2029";
      break;
    default:
      throw new Error("Incorrectly classified character");
  }
  return result
}
function escapeDirective(str) {
  var i, iz, ch, single, buf, quote;
  buf = str;
  if(typeof buf[0] === "undefined") {
    buf = stringToArray(buf)
  }
  quote = quotes === "double" ? '"' : "'";
  for(i = 0, iz = buf.length;i < iz;i += 1) {
    ch = buf[i];
    if(ch === "'") {
      quote = '"';
      break
    }else {
      if(ch === '"') {
        quote = "'";
        break
      }else {
        if(ch === "\\") {
          i += 1
        }
      }
    }
  }
  return quote + str + quote
}
function escapeString(str) {
  var result = "", i, len, ch, next, singleQuotes = 0, doubleQuotes = 0, single;
  if(typeof str[0] === "undefined") {
    str = stringToArray(str)
  }
  for(i = 0, len = str.length;i < len;i += 1) {
    ch = str[i];
    if(ch === "'") {
      singleQuotes += 1
    }else {
      if(ch === '"') {
        doubleQuotes += 1
      }else {
        if(ch === "/" && json) {
          result += "\\"
        }else {
          if("\\\n\r\u2028\u2029".indexOf(ch) >= 0) {
            result += escapeDisallowedCharacter(ch);
            continue
          }else {
            if(json && ch < " " || !(json || escapeless || ch >= " " && ch <= "~")) {
              result += escapeAllowedCharacter(ch, str[i + 1]);
              continue
            }
          }
        }
      }
    }
    result += ch
  }
  single = !(quotes === "double" || quotes === "auto" && doubleQuotes < singleQuotes);
  str = result;
  result = single ? "'" : '"';
  if(typeof str[0] === "undefined") {
    str = stringToArray(str)
  }
  for(i = 0, len = str.length;i < len;i += 1) {
    ch = str[i];
    if(ch === "'" && single || ch === '"' && !single) {
      result += "\\"
    }
    result += ch
  }
  return result + (single ? "'" : '"')
}
function isWhiteSpace(ch) {
  return"\t\v\u000c \u00a0".indexOf(ch) >= 0 || ch.charCodeAt(0) >= 5760 && "\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\ufeff".indexOf(ch) >= 0
}
function isLineTerminator(ch) {
  return"\n\r\u2028\u2029".indexOf(ch) >= 0
}
function isIdentifierPart(ch) {
  return ch === "$" || ch === "_" || ch === "\\" || ch >= "a" && ch <= "z" || ch >= "A" && ch <= "Z" || ch >= "0" && ch <= "9" || ch.charCodeAt(0) >= 128 && Regex.NonAsciiIdentifierPart.test(ch)
}
function toSourceNode(generated, node) {
  if(node == null) {
    if(generated instanceof SourceNode) {
      return generated
    }else {
      node = {}
    }
  }
  if(node.loc == null) {
    return new SourceNode(null, null, sourceMap, generated)
  }
  return new SourceNode(node.loc.start.line, node.loc.start.column, sourceMap === true ? node.loc.source || null : sourceMap, generated)
}
function join(left, right) {
  var leftSource = toSourceNode(left).toString(), rightSource = toSourceNode(right).toString(), leftChar = leftSource.charAt(leftSource.length - 1), rightChar = rightSource.charAt(0);
  if((leftChar === "+" || leftChar === "-") && leftChar === rightChar || isIdentifierPart(leftChar) && isIdentifierPart(rightChar)) {
    return[left, " ", right]
  }else {
    if(isWhiteSpace(leftChar) || isLineTerminator(leftChar) || isWhiteSpace(rightChar) || isLineTerminator(rightChar)) {
      return[left, right]
    }
  }
  return[left, space, right]
}
function addIndent(stmt) {
  return[base, stmt]
}
function withIndent(fn) {
  var previousBase, result;
  previousBase = base;
  base += indent;
  result = fn.call(this, base);
  base = previousBase;
  return result
}
function calculateSpaces(str) {
  var i;
  for(i = str.length - 1;i >= 0;i -= 1) {
    if(isLineTerminator(str.charAt(i))) {
      break
    }
  }
  return str.length - 1 - i
}
function adjustMultilineComment(value, specialBase) {
  var array, i, len, line, j, ch, spaces, previousBase;
  array = value.split(/\r\n|[\r\n]/);
  spaces = Number.MAX_VALUE;
  for(i = 1, len = array.length;i < len;i += 1) {
    line = array[i];
    j = 0;
    while(j < line.length && isWhiteSpace(line[j])) {
      j += 1
    }
    if(spaces > j) {
      spaces = j
    }
  }
  if(typeof specialBase !== "undefined") {
    previousBase = base;
    if(array[1][spaces] === "*") {
      specialBase += " "
    }
    base = specialBase
  }else {
    if(spaces & 1) {
      spaces -= 1
    }
    previousBase = base
  }
  for(i = 1, len = array.length;i < len;i += 1) {
    array[i] = toSourceNode(addIndent(array[i].slice(spaces))).join("")
  }
  base = previousBase;
  return array.join("\n")
}
function generateComment(comment, specialBase) {
  if(comment.type === "Line") {
    if(endsWithLineTerminator(comment.value)) {
      return"//" + comment.value
    }else {
      return"//" + comment.value + "\n"
    }
  }
  if(extra.format.indent.adjustMultilineComment && /[\n\r]/.test(comment.value)) {
    return adjustMultilineComment("/*" + comment.value + "*/", specialBase)
  }
  return"/*" + comment.value + "*/"
}
function addCommentsToStatement(stmt, result) {
  var i, len, comment, save, node, tailingToStatement, specialBase, fragment;
  if(stmt.leadingComments && stmt.leadingComments.length > 0) {
    save = result;
    comment = stmt.leadingComments[0];
    result = [];
    if(safeConcatenation && stmt.type === Syntax.Program && stmt.body.length === 0) {
      result.push("\n")
    }
    result.push(generateComment(comment));
    if(!endsWithLineTerminator(toSourceNode(result).toString())) {
      result.push("\n")
    }
    for(i = 1, len = stmt.leadingComments.length;i < len;i += 1) {
      comment = stmt.leadingComments[i];
      fragment = [generateComment(comment)];
      if(!endsWithLineTerminator(toSourceNode(fragment).toString())) {
        fragment.push("\n")
      }
      result.push(addIndent(fragment))
    }
    result.push(addIndent(save))
  }
  if(stmt.trailingComments) {
    tailingToStatement = !endsWithLineTerminator(toSourceNode(result).toString());
    specialBase = stringRepeat(" ", calculateSpaces(toSourceNode([base, result, indent]).toString()));
    for(i = 0, len = stmt.trailingComments.length;i < len;i += 1) {
      comment = stmt.trailingComments[i];
      if(tailingToStatement) {
        if(i === 0) {
          result = [result, indent]
        }else {
          result = [result, specialBase]
        }
        result.push(generateComment(comment, specialBase))
      }else {
        result = [result, addIndent(generateComment(comment))]
      }
      if(i !== len - 1 && !endsWithLineTerminator(toSourceNode(result).toString())) {
        result = [result, "\n"]
      }
    }
  }
  return result
}
function parenthesize(text, current, should) {
  if(current < should) {
    return["(", text, ")"]
  }
  return text
}
function maybeBlock(stmt, semicolonOptional, functionBody) {
  var result, noLeadingComment;
  noLeadingComment = !extra.comment || !stmt.leadingComments;
  if(stmt.type === Syntax.BlockStatement && noLeadingComment) {
    return[space, generateStatement(stmt, {functionBody:functionBody})]
  }
  if(stmt.type === Syntax.EmptyStatement && noLeadingComment) {
    return";"
  }
  withIndent(function() {
    result = [newline, addIndent(generateStatement(stmt, {semicolonOptional:semicolonOptional, functionBody:functionBody}))]
  });
  return result
}
function maybeBlockSuffix(stmt, result) {
  var ends = endsWithLineTerminator(toSourceNode(result).toString());
  if(stmt.type === Syntax.BlockStatement && (!extra.comment || !stmt.leadingComments) && !ends) {
    return[result, space]
  }
  if(ends) {
    return[result, base]
  }
  return[result, newline, base]
}
function generateVerbatim(expr, option) {
  var i, result;
  result = expr[extra.verbatim].split(/\r\n|\n/);
  for(i = 1;i < result.length;i++) {
    result[i] = newline + base + result[i]
  }
  result = parenthesize(result, Precedence.Sequence, option.precedence);
  return toSourceNode(result, expr)
}
function generateFunctionBody(node) {
  var result, i, len, expr;
  result = ["("];
  for(i = 0, len = node.params.length;i < len;i += 1) {
    result.push(node.params[i].name);
    if(i + 1 < len) {
      result.push("," + space)
    }
  }
  result.push(")");
  if(node.expression) {
    result.push(space);
    expr = generateExpression(node.body, {precedence:Precedence.Assignment, allowIn:true, allowCall:true});
    if(expr.toString().charAt(0) === "{") {
      expr = ["(", expr, ")"]
    }
    result.push(expr)
  }else {
    result.push(maybeBlock(node.body, false, true))
  }
  return result
}
function generateExpression(expr, option) {
  var result, precedence, currentPrecedence, i, len, raw, fragment, multiline, leftChar, leftSource, rightChar, rightSource, allowIn, allowCall, allowUnparenthesizedNew, property, key, value;
  precedence = option.precedence;
  allowIn = option.allowIn;
  allowCall = option.allowCall;
  if(extra.verbatim && expr.hasOwnProperty(extra.verbatim)) {
    return generateVerbatim(expr, option)
  }
  switch(expr.type) {
    case Syntax.SequenceExpression:
      result = [];
      allowIn |= Precedence.Sequence < precedence;
      for(i = 0, len = expr.expressions.length;i < len;i += 1) {
        result.push(generateExpression(expr.expressions[i], {precedence:Precedence.Assignment, allowIn:allowIn, allowCall:true}));
        if(i + 1 < len) {
          result.push("," + space)
        }
      }
      result = parenthesize(result, Precedence.Sequence, precedence);
      break;
    case Syntax.AssignmentExpression:
      allowIn |= Precedence.Assignment < precedence;
      result = parenthesize([generateExpression(expr.left, {precedence:Precedence.Call, allowIn:allowIn, allowCall:true}), space + expr.operator + space, generateExpression(expr.right, {precedence:Precedence.Assignment, allowIn:allowIn, allowCall:true})], Precedence.Assignment, precedence);
      break;
    case Syntax.ConditionalExpression:
      allowIn |= Precedence.Conditional < precedence;
      result = parenthesize([generateExpression(expr.test, {precedence:Precedence.LogicalOR, allowIn:allowIn, allowCall:true}), space + "?" + space, generateExpression(expr.consequent, {precedence:Precedence.Assignment, allowIn:allowIn, allowCall:true}), space + ":" + space, generateExpression(expr.alternate, {precedence:Precedence.Assignment, allowIn:allowIn, allowCall:true})], Precedence.Conditional, precedence);
      break;
    case Syntax.LogicalExpression:
    ;
    case Syntax.BinaryExpression:
      currentPrecedence = BinaryPrecedence[expr.operator];
      allowIn |= currentPrecedence < precedence;
      result = join(generateExpression(expr.left, {precedence:currentPrecedence, allowIn:allowIn, allowCall:true}), expr.operator);
      fragment = generateExpression(expr.right, {precedence:currentPrecedence + 1, allowIn:allowIn, allowCall:true});
      if(expr.operator === "/" && fragment.toString().charAt(0) === "/") {
        result.push(" ", fragment)
      }else {
        result = join(result, fragment)
      }
      if(expr.operator === "in" && !allowIn) {
        result = ["(", result, ")"]
      }else {
        result = parenthesize(result, currentPrecedence, precedence)
      }
      break;
    case Syntax.CallExpression:
      result = [generateExpression(expr.callee, {precedence:Precedence.Call, allowIn:true, allowCall:true, allowUnparenthesizedNew:false})];
      result.push("(");
      for(i = 0, len = expr["arguments"].length;i < len;i += 1) {
        result.push(generateExpression(expr["arguments"][i], {precedence:Precedence.Assignment, allowIn:true, allowCall:true}));
        if(i + 1 < len) {
          result.push("," + space)
        }
      }
      result.push(")");
      if(!allowCall) {
        result = ["(", result, ")"]
      }else {
        result = parenthesize(result, Precedence.Call, precedence)
      }
      break;
    case Syntax.NewExpression:
      len = expr["arguments"].length;
      allowUnparenthesizedNew = option.allowUnparenthesizedNew === undefined || option.allowUnparenthesizedNew;
      result = join("new", generateExpression(expr.callee, {precedence:Precedence.New, allowIn:true, allowCall:false, allowUnparenthesizedNew:allowUnparenthesizedNew && !parentheses && len === 0}));
      if(!allowUnparenthesizedNew || parentheses || len > 0) {
        result.push("(");
        for(i = 0;i < len;i += 1) {
          result.push(generateExpression(expr["arguments"][i], {precedence:Precedence.Assignment, allowIn:true, allowCall:true}));
          if(i + 1 < len) {
            result.push("," + space)
          }
        }
        result.push(")")
      }
      result = parenthesize(result, Precedence.New, precedence);
      break;
    case Syntax.MemberExpression:
      result = [generateExpression(expr.object, {precedence:Precedence.Call, allowIn:true, allowCall:allowCall, allowUnparenthesizedNew:false})];
      if(expr.computed) {
        result.push("[", generateExpression(expr.property, {precedence:Precedence.Sequence, allowIn:true, allowCall:allowCall}), "]")
      }else {
        if(expr.object.type === Syntax.Literal && typeof expr.object.value === "number") {
          if(result.indexOf(".") < 0) {
            if(!/[eExX]/.test(result) && !(result.length >= 2 && result[0] === "0")) {
              result.push(".")
            }
          }
        }
        result.push("." + expr.property.name)
      }
      result = parenthesize(result, Precedence.Member, precedence);
      break;
    case Syntax.UnaryExpression:
      fragment = generateExpression(expr.argument, {precedence:Precedence.Unary, allowIn:true, allowCall:true});
      if(space === "") {
        result = join(expr.operator, fragment)
      }else {
        result = [expr.operator];
        if(expr.operator.length > 2) {
          result = join(result, fragment)
        }else {
          leftSource = toSourceNode(result).toString();
          leftChar = leftSource.charAt(leftSource.length - 1);
          rightChar = fragment.toString().charAt(0);
          if((leftChar === "+" || leftChar === "-") && leftChar === rightChar || isIdentifierPart(leftChar) && isIdentifierPart(rightChar)) {
            result.push(" ", fragment)
          }else {
            result.push(fragment)
          }
        }
      }
      result = parenthesize(result, Precedence.Unary, precedence);
      break;
    case Syntax.YieldExpression:
      if(expr.delegate) {
        result = "yield*"
      }else {
        result = "yield"
      }
      if(expr.argument) {
        result = join(result, generateExpression(expr.argument, {precedence:Precedence.Assignment, allowIn:true, allowCall:true}))
      }
      break;
    case Syntax.UpdateExpression:
      if(expr.prefix) {
        result = parenthesize([expr.operator, generateExpression(expr.argument, {precedence:Precedence.Unary, allowIn:true, allowCall:true})], Precedence.Unary, precedence)
      }else {
        result = parenthesize([generateExpression(expr.argument, {precedence:Precedence.Postfix, allowIn:true, allowCall:true}), expr.operator], Precedence.Postfix, precedence)
      }
      break;
    case Syntax.FunctionExpression:
      result = "function";
      if(expr.id) {
        result += " " + expr.id.name
      }else {
        result += space
      }
      result = [result, generateFunctionBody(expr)];
      break;
    case Syntax.ArrayPattern:
    ;
    case Syntax.ArrayExpression:
      if(!expr.elements.length) {
        result = "[]";
        break
      }
      multiline = expr.elements.length > 1;
      result = ["[", multiline ? newline : ""];
      withIndent(function(indent) {
        for(i = 0, len = expr.elements.length;i < len;i += 1) {
          if(!expr.elements[i]) {
            if(multiline) {
              result.push(indent)
            }
            if(i + 1 === len) {
              result.push(",")
            }
          }else {
            result.push(multiline ? indent : "", generateExpression(expr.elements[i], {precedence:Precedence.Assignment, allowIn:true, allowCall:true}))
          }
          if(i + 1 < len) {
            result.push("," + (multiline ? newline : space))
          }
        }
      });
      if(multiline && !endsWithLineTerminator(toSourceNode(result).toString())) {
        result.push(newline)
      }
      result.push(multiline ? base : "", "]");
      break;
    case Syntax.Property:
      if(expr.kind === "get" || expr.kind === "set") {
        result = [expr.kind + " ", generateExpression(expr.key, {precedence:Precedence.Sequence, allowIn:true, allowCall:true}), generateFunctionBody(expr.value)]
      }else {
        if(expr.shorthand) {
          result = generateExpression(expr.key, {precedence:Precedence.Sequence, allowIn:true, allowCall:true})
        }else {
          if(expr.method) {
            result = [];
            if(expr.value.generator) {
              result.push("*")
            }
            result.push(generateExpression(expr.key, {precedence:Precedence.Sequence, allowIn:true, allowCall:true}), generateFunctionBody(expr.value))
          }else {
            result = [generateExpression(expr.key, {precedence:Precedence.Sequence, allowIn:true, allowCall:true}), ":" + space, generateExpression(expr.value, {precedence:Precedence.Assignment, allowIn:true, allowCall:true})]
          }
        }
      }
      break;
    case Syntax.ObjectExpression:
      if(!expr.properties.length) {
        result = "{}";
        break
      }
      multiline = expr.properties.length > 1;
      withIndent(function(indent) {
        fragment = generateExpression(expr.properties[0], {precedence:Precedence.Sequence, allowIn:true, allowCall:true})
      });
      if(!multiline) {
        if(!hasLineTerminator(toSourceNode(fragment).toString())) {
          result = ["{", space, fragment, space, "}"];
          break
        }
      }
      withIndent(function(indent) {
        result = ["{", newline, indent, fragment];
        if(multiline) {
          result.push("," + newline);
          for(i = 1, len = expr.properties.length;i < len;i += 1) {
            result.push(indent, generateExpression(expr.properties[i], {precedence:Precedence.Sequence, allowIn:true, allowCall:true}));
            if(i + 1 < len) {
              result.push("," + newline)
            }
          }
        }
      });
      if(!endsWithLineTerminator(toSourceNode(result).toString())) {
        result.push(newline)
      }
      result.push(base, "}");
      break;
    case Syntax.ObjectPattern:
      if(!expr.properties.length) {
        result = "{}";
        break
      }
      multiline = false;
      if(expr.properties.length === 1) {
        property = expr.properties[0];
        if(property.value.type !== Syntax.Identifier) {
          multiline = true
        }
      }else {
        for(i = 0, len = expr.properties.length;i < len;i += 1) {
          property = expr.properties[i];
          if(!property.shorthand) {
            multiline = true;
            break
          }
        }
      }
      result = ["{", multiline ? newline : ""];
      withIndent(function(indent) {
        for(i = 0, len = expr.properties.length;i < len;i += 1) {
          result.push(multiline ? indent : "", generateExpression(expr.properties[i], {precedence:Precedence.Sequence, allowIn:true, allowCall:true}));
          if(i + 1 < len) {
            result.push("," + (multiline ? newline : space))
          }
        }
      });
      if(multiline && !endsWithLineTerminator(toSourceNode(result).toString())) {
        result.push(newline)
      }
      result.push(multiline ? base : "", "}");
      break;
    case Syntax.ThisExpression:
      result = "this";
      break;
    case Syntax.Identifier:
      result = expr.name;
      break;
    case Syntax.Literal:
      if(expr.hasOwnProperty("raw") && parse) {
        try {
          raw = parse(expr.raw).body[0].expression;
          if(raw.type === Syntax.Literal) {
            if(raw.value === expr.value) {
              result = expr.raw;
              break
            }
          }
        }catch(e) {
        }
      }
      if(expr.value === null) {
        result = "null";
        break
      }
      if(typeof expr.value === "string") {
        result = escapeString(expr.value);
        break
      }
      if(typeof expr.value === "number") {
        result = generateNumber(expr.value);
        break
      }
      result = expr.value.toString();
      break;
    case Syntax.ComprehensionExpression:
      result = ["[", generateExpression(expr.body, {precedence:Precedence.Assignment, allowIn:true, allowCall:true})];
      if(expr.blocks) {
        for(i = 0, len = expr.blocks.length;i < len;i += 1) {
          fragment = generateExpression(expr.blocks[i], {precedence:Precedence.Sequence, allowIn:true, allowCall:true});
          result = join(result, fragment)
        }
      }
      if(expr.filter) {
        result = join(result, "if" + space);
        fragment = generateExpression(expr.filter, {precedence:Precedence.Sequence, allowIn:true, allowCall:true});
        if(extra.moz.parenthesizedComprehensionBlock) {
          result = join(result, ["(", fragment, ")"])
        }else {
          result = join(result, fragment)
        }
      }
      result.push("]");
      break;
    case Syntax.ComprehensionBlock:
      if(expr.left.type === Syntax.VariableDeclaration) {
        fragment = [expr.left.kind + " ", generateStatement(expr.left.declarations[0], {allowIn:false})]
      }else {
        fragment = generateExpression(expr.left, {precedence:Precedence.Call, allowIn:true, allowCall:true})
      }
      fragment = join(fragment, expr.of ? "of" : "in");
      fragment = join(fragment, generateExpression(expr.right, {precedence:Precedence.Sequence, allowIn:true, allowCall:true}));
      if(extra.moz.parenthesizedComprehensionBlock) {
        result = ["for" + space + "(", fragment, ")"]
      }else {
        result = join("for" + space, fragment)
      }
      break;
    default:
      throw new Error("Unknown expression type: " + expr.type);
  }
  return toSourceNode(result, expr)
}
function generateStatement(stmt, option) {
  var i, len, result, node, allowIn, functionBody, directiveContext, fragment, semicolon;
  allowIn = true;
  semicolon = ";";
  functionBody = false;
  directiveContext = false;
  if(option) {
    allowIn = option.allowIn === undefined || option.allowIn;
    if(!semicolons && option.semicolonOptional === true) {
      semicolon = ""
    }
    functionBody = option.functionBody;
    directiveContext = option.directiveContext
  }
  switch(stmt.type) {
    case Syntax.BlockStatement:
      result = ["{", newline];
      withIndent(function() {
        for(i = 0, len = stmt.body.length;i < len;i += 1) {
          fragment = addIndent(generateStatement(stmt.body[i], {semicolonOptional:i === len - 1, directiveContext:functionBody}));
          result.push(fragment);
          if(!endsWithLineTerminator(toSourceNode(fragment).toString())) {
            result.push(newline)
          }
        }
      });
      result.push(addIndent("}"));
      break;
    case Syntax.BreakStatement:
      if(stmt.label) {
        result = "break " + stmt.label.name + semicolon
      }else {
        result = "break" + semicolon
      }
      break;
    case Syntax.ContinueStatement:
      if(stmt.label) {
        result = "continue " + stmt.label.name + semicolon
      }else {
        result = "continue" + semicolon
      }
      break;
    case Syntax.DirectiveStatement:
      if(stmt.raw) {
        result = stmt.raw + semicolon
      }else {
        result = escapeDirective(stmt.directive) + semicolon
      }
      break;
    case Syntax.DoWhileStatement:
      result = join("do", maybeBlock(stmt.body));
      result = maybeBlockSuffix(stmt.body, result);
      result = join(result, ["while" + space + "(", generateExpression(stmt.test, {precedence:Precedence.Sequence, allowIn:true, allowCall:true}), ")" + semicolon]);
      break;
    case Syntax.CatchClause:
      withIndent(function() {
        result = ["catch" + space + "(", generateExpression(stmt.param, {precedence:Precedence.Sequence, allowIn:true, allowCall:true}), ")"]
      });
      result.push(maybeBlock(stmt.body));
      break;
    case Syntax.DebuggerStatement:
      result = "debugger" + semicolon;
      break;
    case Syntax.EmptyStatement:
      result = ";";
      break;
    case Syntax.ExpressionStatement:
      result = [generateExpression(stmt.expression, {precedence:Precedence.Sequence, allowIn:true, allowCall:true})];
      if(result.toString().charAt(0) === "{" || result.toString().slice(0, 8) === "function" && " (".indexOf(result.toString().charAt(8)) >= 0 || directive && directiveContext && stmt.expression.type === Syntax.Literal && typeof stmt.expression.value === "string") {
        result = ["(", result, ")" + semicolon]
      }else {
        result.push(semicolon)
      }
      break;
    case Syntax.VariableDeclarator:
      if(stmt.init) {
        result = [generateExpression(stmt.id, {precedence:Precedence.Assignment, allowIn:allowIn, allowCall:true}) + space + "=" + space, generateExpression(stmt.init, {precedence:Precedence.Assignment, allowIn:allowIn, allowCall:true})]
      }else {
        result = stmt.id.name
      }
      break;
    case Syntax.VariableDeclaration:
      result = [stmt.kind];
      if(stmt.declarations.length === 1 && stmt.declarations[0].init && stmt.declarations[0].init.type === Syntax.FunctionExpression) {
        result.push(" ", generateStatement(stmt.declarations[0], {allowIn:allowIn}))
      }else {
        withIndent(function() {
          node = stmt.declarations[0];
          if(extra.comment && node.leadingComments) {
            result.push("\n", addIndent(generateStatement(node, {allowIn:allowIn})))
          }else {
            result.push(" ", generateStatement(node, {allowIn:allowIn}))
          }
          for(i = 1, len = stmt.declarations.length;i < len;i += 1) {
            node = stmt.declarations[i];
            if(extra.comment && node.leadingComments) {
              result.push("," + newline, addIndent(generateStatement(node, {allowIn:allowIn})))
            }else {
              result.push("," + space, generateStatement(node, {allowIn:allowIn}))
            }
          }
        })
      }
      result.push(semicolon);
      break;
    case Syntax.ThrowStatement:
      result = [join("throw", generateExpression(stmt.argument, {precedence:Precedence.Sequence, allowIn:true, allowCall:true})), semicolon];
      break;
    case Syntax.TryStatement:
      result = ["try", maybeBlock(stmt.block)];
      result = maybeBlockSuffix(stmt.block, result);
      for(i = 0, len = stmt.handlers.length;i < len;i += 1) {
        result = join(result, generateStatement(stmt.handlers[i]));
        if(stmt.finalizer || i + 1 !== len) {
          result = maybeBlockSuffix(stmt.handlers[i].body, result)
        }
      }
      if(stmt.finalizer) {
        result = join(result, ["finally", maybeBlock(stmt.finalizer)])
      }
      break;
    case Syntax.SwitchStatement:
      withIndent(function() {
        result = ["switch" + space + "(", generateExpression(stmt.discriminant, {precedence:Precedence.Sequence, allowIn:true, allowCall:true}), ")" + space + "{" + newline]
      });
      if(stmt.cases) {
        for(i = 0, len = stmt.cases.length;i < len;i += 1) {
          fragment = addIndent(generateStatement(stmt.cases[i], {semicolonOptional:i === len - 1}));
          result.push(fragment);
          if(!endsWithLineTerminator(toSourceNode(fragment).toString())) {
            result.push(newline)
          }
        }
      }
      result.push(addIndent("}"));
      break;
    case Syntax.SwitchCase:
      withIndent(function() {
        if(stmt.test) {
          result = [join("case", generateExpression(stmt.test, {precedence:Precedence.Sequence, allowIn:true, allowCall:true})), ":"]
        }else {
          result = ["default:"]
        }
        i = 0;
        len = stmt.consequent.length;
        if(len && stmt.consequent[0].type === Syntax.BlockStatement) {
          fragment = maybeBlock(stmt.consequent[0]);
          result.push(fragment);
          i = 1
        }
        if(i !== len && !endsWithLineTerminator(toSourceNode(result).toString())) {
          result.push(newline)
        }
        for(;i < len;i += 1) {
          fragment = addIndent(generateStatement(stmt.consequent[i], {semicolonOptional:i === len - 1 && semicolon === ""}));
          result.push(fragment);
          if(i + 1 !== len && !endsWithLineTerminator(toSourceNode(fragment).toString())) {
            result.push(newline)
          }
        }
      });
      break;
    case Syntax.IfStatement:
      withIndent(function() {
        result = ["if" + space + "(", generateExpression(stmt.test, {precedence:Precedence.Sequence, allowIn:true, allowCall:true}), ")"]
      });
      if(stmt.alternate) {
        result.push(maybeBlock(stmt.consequent));
        result = maybeBlockSuffix(stmt.consequent, result);
        if(stmt.alternate.type === Syntax.IfStatement) {
          result = join(result, ["else ", generateStatement(stmt.alternate, {semicolonOptional:semicolon === ""})])
        }else {
          result = join(result, join("else", maybeBlock(stmt.alternate, semicolon === "")))
        }
      }else {
        result.push(maybeBlock(stmt.consequent, semicolon === ""))
      }
      break;
    case Syntax.ForStatement:
      withIndent(function() {
        result = ["for" + space + "("];
        if(stmt.init) {
          if(stmt.init.type === Syntax.VariableDeclaration) {
            result.push(generateStatement(stmt.init, {allowIn:false}))
          }else {
            result.push(generateExpression(stmt.init, {precedence:Precedence.Sequence, allowIn:false, allowCall:true}), ";")
          }
        }else {
          result.push(";")
        }
        if(stmt.test) {
          result.push(space, generateExpression(stmt.test, {precedence:Precedence.Sequence, allowIn:true, allowCall:true}), ";")
        }else {
          result.push(";")
        }
        if(stmt.update) {
          result.push(space, generateExpression(stmt.update, {precedence:Precedence.Sequence, allowIn:true, allowCall:true}), ")")
        }else {
          result.push(")")
        }
      });
      result.push(maybeBlock(stmt.body, semicolon === ""));
      break;
    case Syntax.ForInStatement:
      result = ["for" + space + "("];
      withIndent(function() {
        if(stmt.left.type === Syntax.VariableDeclaration) {
          withIndent(function() {
            result.push(stmt.left.kind + " ", generateStatement(stmt.left.declarations[0], {allowIn:false}))
          })
        }else {
          result.push(generateExpression(stmt.left, {precedence:Precedence.Call, allowIn:true, allowCall:true}))
        }
        result = join(result, "in");
        result = [join(result, generateExpression(stmt.right, {precedence:Precedence.Sequence, allowIn:true, allowCall:true})), ")"]
      });
      result.push(maybeBlock(stmt.body, semicolon === ""));
      break;
    case Syntax.LabeledStatement:
      result = [stmt.label.name + ":", maybeBlock(stmt.body, semicolon === "")];
      break;
    case Syntax.Program:
      len = stmt.body.length;
      result = [safeConcatenation && len > 0 ? "\n" : ""];
      for(i = 0;i < len;i += 1) {
        fragment = addIndent(generateStatement(stmt.body[i], {semicolonOptional:!safeConcatenation && i === len - 1, directiveContext:true}));
        result.push(fragment);
        if(i + 1 < len && !endsWithLineTerminator(toSourceNode(fragment).toString())) {
          result.push(newline)
        }
      }
      break;
    case Syntax.FunctionDeclaration:
      result = [(stmt.generator && !extra.moz.starlessGenerator ? "function* " : "function ") + stmt.id.name, generateFunctionBody(stmt)];
      break;
    case Syntax.ReturnStatement:
      if(stmt.argument) {
        result = [join("return", generateExpression(stmt.argument, {precedence:Precedence.Sequence, allowIn:true, allowCall:true})), semicolon]
      }else {
        result = ["return" + semicolon]
      }
      break;
    case Syntax.WhileStatement:
      withIndent(function() {
        result = ["while" + space + "(", generateExpression(stmt.test, {precedence:Precedence.Sequence, allowIn:true, allowCall:true}), ")"]
      });
      result.push(maybeBlock(stmt.body, semicolon === ""));
      break;
    case Syntax.WithStatement:
      withIndent(function() {
        result = ["with" + space + "(", generateExpression(stmt.object, {precedence:Precedence.Sequence, allowIn:true, allowCall:true}), ")"]
      });
      result.push(maybeBlock(stmt.body, semicolon === ""));
      break;
    default:
      throw new Error("Unknown statement type: " + stmt.type);
  }
  if(extra.comment) {
    result = addCommentsToStatement(stmt, result)
  }
  fragment = toSourceNode(result).toString();
  if(stmt.type === Syntax.Program && !safeConcatenation && newline === "" && fragment.charAt(fragment.length - 1) === "\n") {
    result = toSourceNode(result).replaceRight(/\s+$/, "")
  }
  return toSourceNode(result, stmt)
}
function generate(node, options) {
  var defaultOptions = getDefaultOptions(), result, pair;
  if(options != null) {
    if(typeof options.indent === "string") {
      defaultOptions.format.indent.style = options.indent
    }
    if(typeof options.base === "number") {
      defaultOptions.format.indent.base = options.base
    }
    options = updateDeeply(defaultOptions, options);
    indent = options.format.indent.style;
    if(typeof options.base === "string") {
      base = options.base
    }else {
      base = stringRepeat(indent, options.format.indent.base)
    }
  }else {
    options = defaultOptions;
    indent = options.format.indent.style;
    base = stringRepeat(indent, options.format.indent.base)
  }
  json = options.format.json;
  renumber = options.format.renumber;
  hexadecimal = json ? false : options.format.hexadecimal;
  quotes = json ? "double" : options.format.quotes;
  escapeless = options.format.escapeless;
  if(options.format.compact) {
    newline = space = indent = base = ""
  }else {
    newline = "\n";
    space = " "
  }
  parentheses = options.format.parentheses;
  semicolons = options.format.semicolons;
  safeConcatenation = options.format.safeConcatenation;
  directive = options.directive;
  parse = json ? null : options.parse;
  sourceMap = options.sourceMap;
  extra = options;
  if(sourceMap) {
    if(typeof process !== "undefined") {
      SourceNode = require("source-map").SourceNode
    }else {
      SourceNode = global.sourceMap.SourceNode
    }
  }else {
    SourceNode = SourceNodeMock
  }
  switch(node.type) {
    case Syntax.BlockStatement:
    ;
    case Syntax.BreakStatement:
    ;
    case Syntax.CatchClause:
    ;
    case Syntax.ContinueStatement:
    ;
    case Syntax.DirectiveStatement:
    ;
    case Syntax.DoWhileStatement:
    ;
    case Syntax.DebuggerStatement:
    ;
    case Syntax.EmptyStatement:
    ;
    case Syntax.ExpressionStatement:
    ;
    case Syntax.ForStatement:
    ;
    case Syntax.ForInStatement:
    ;
    case Syntax.FunctionDeclaration:
    ;
    case Syntax.IfStatement:
    ;
    case Syntax.LabeledStatement:
    ;
    case Syntax.Program:
    ;
    case Syntax.ReturnStatement:
    ;
    case Syntax.SwitchStatement:
    ;
    case Syntax.SwitchCase:
    ;
    case Syntax.ThrowStatement:
    ;
    case Syntax.TryStatement:
    ;
    case Syntax.VariableDeclaration:
    ;
    case Syntax.VariableDeclarator:
    ;
    case Syntax.WhileStatement:
    ;
    case Syntax.WithStatement:
      result = generateStatement(node);
      break;
    case Syntax.AssignmentExpression:
    ;
    case Syntax.ArrayExpression:
    ;
    case Syntax.ArrayPattern:
    ;
    case Syntax.BinaryExpression:
    ;
    case Syntax.CallExpression:
    ;
    case Syntax.ConditionalExpression:
    ;
    case Syntax.FunctionExpression:
    ;
    case Syntax.Identifier:
    ;
    case Syntax.Literal:
    ;
    case Syntax.LogicalExpression:
    ;
    case Syntax.MemberExpression:
    ;
    case Syntax.NewExpression:
    ;
    case Syntax.ObjectExpression:
    ;
    case Syntax.ObjectPattern:
    ;
    case Syntax.Property:
    ;
    case Syntax.SequenceExpression:
    ;
    case Syntax.ThisExpression:
    ;
    case Syntax.UnaryExpression:
    ;
    case Syntax.UpdateExpression:
    ;
    case Syntax.YieldExpression:
      result = generateExpression(node, {precedence:Precedence.Sequence, allowIn:true, allowCall:true});
      break;
    default:
      throw new Error("Unknown node type: " + node.type);
  }
  if(!sourceMap) {
    return result.toString()
  }
  pair = result.toStringWithSourceMap({file:options.sourceMap});
  if(options.sourceMapWithCode) {
    return pair
  }
  return pair.map.toString()
}
VisitorKeys = {AssignmentExpression:["left", "right"], ArrayExpression:["elements"], ArrayPattern:["elements"], BlockStatement:["body"], BinaryExpression:["left", "right"], BreakStatement:["label"], CallExpression:["callee", "arguments"], CatchClause:["param", "body"], ConditionalExpression:["test", "consequent", "alternate"], ContinueStatement:["label"], DirectiveStatement:[], DoWhileStatement:["body", "test"], DebuggerStatement:[], EmptyStatement:[], ExpressionStatement:["expression"], ForStatement:["init", 
"test", "update", "body"], ForInStatement:["left", "right", "body"], FunctionDeclaration:["id", "params", "body"], FunctionExpression:["id", "params", "body"], Identifier:[], IfStatement:["test", "consequent", "alternate"], Literal:[], LabeledStatement:["label", "body"], LogicalExpression:["left", "right"], MemberExpression:["object", "property"], NewExpression:["callee", "arguments"], ObjectExpression:["properties"], ObjectPattern:["properties"], Program:["body"], Property:["key", "value"], ReturnStatement:["argument"], 
SequenceExpression:["expressions"], SwitchStatement:["discriminant", "cases"], SwitchCase:["test", "consequent"], ThisExpression:[], ThrowStatement:["argument"], TryStatement:["block", "handlers", "finalizer"], UnaryExpression:["argument"], UpdateExpression:["argument"], VariableDeclaration:["declarations"], VariableDeclarator:["id", "init"], WhileStatement:["test", "body"], WithStatement:["object", "body"], YieldExpression:["argument"]};
VisitorOption = {Break:1, Skip:2};
function traverse(top, visitor) {
  var worklist, leavelist, node, ret, current, current2, candidates, candidate, marker = {};
  worklist = [top];
  leavelist = [null];
  while(worklist.length) {
    node = worklist.pop();
    if(node === marker) {
      node = leavelist.pop();
      if(visitor.leave) {
        ret = visitor.leave(node, leavelist[leavelist.length - 1])
      }else {
        ret = undefined
      }
      if(ret === VisitorOption.Break) {
        return
      }
    }else {
      if(node) {
        if(visitor.enter) {
          ret = visitor.enter(node, leavelist[leavelist.length - 1])
        }else {
          ret = undefined
        }
        if(ret === VisitorOption.Break) {
          return
        }
        worklist.push(marker);
        leavelist.push(node);
        if(ret !== VisitorOption.Skip) {
          candidates = VisitorKeys[node.type];
          current = candidates.length;
          while((current -= 1) >= 0) {
            candidate = node[candidates[current]];
            if(candidate) {
              if(isArray(candidate)) {
                current2 = candidate.length;
                while((current2 -= 1) >= 0) {
                  if(candidate[current2]) {
                    worklist.push(candidate[current2])
                  }
                }
              }else {
                worklist.push(candidate)
              }
            }
          }
        }
      }
    }
  }
}
function upperBound(array, func) {
  var diff, len, i, current;
  len = array.length;
  i = 0;
  while(len) {
    diff = len >>> 1;
    current = i + diff;
    if(func(array[current])) {
      len = diff
    }else {
      i = current + 1;
      len -= diff + 1
    }
  }
  return i
}
function lowerBound(array, func) {
  var diff, len, i, current;
  len = array.length;
  i = 0;
  while(len) {
    diff = len >>> 1;
    current = i + diff;
    if(func(array[current])) {
      i = current + 1;
      len -= diff + 1
    }else {
      len = diff
    }
  }
  return i
}
function extendCommentRange(comment, tokens) {
  var target, token;
  target = upperBound(tokens, function search(token) {
    return token.range[0] > comment.range[0]
  });
  comment.extendedRange = [comment.range[0], comment.range[1]];
  if(target !== tokens.length) {
    comment.extendedRange[1] = tokens[target].range[0]
  }
  target -= 1;
  if(target >= 0) {
    if(target < tokens.length) {
      comment.extendedRange[0] = tokens[target].range[1]
    }else {
      if(token.length) {
        comment.extendedRange[1] = tokens[tokens.length - 1].range[0]
      }
    }
  }
  return comment
}
function attachComments(tree, providedComments, tokens) {
  var comments = [], comment, len, i;
  if(!tree.range) {
    throw new Error("attachComments needs range information");
  }
  if(!tokens.length) {
    if(providedComments.length) {
      for(i = 0, len = providedComments.length;i < len;i += 1) {
        comment = deepCopy(providedComments[i]);
        comment.extendedRange = [0, tree.range[0]];
        comments.push(comment)
      }
      tree.leadingComments = comments
    }
    return tree
  }
  for(i = 0, len = providedComments.length;i < len;i += 1) {
    comments.push(extendCommentRange(deepCopy(providedComments[i]), tokens))
  }
  traverse(tree, {cursor:0, enter:function(node) {
    var comment;
    while(this.cursor < comments.length) {
      comment = comments[this.cursor];
      if(comment.extendedRange[1] > node.range[0]) {
        break
      }
      if(comment.extendedRange[1] === node.range[0]) {
        if(!node.leadingComments) {
          node.leadingComments = []
        }
        node.leadingComments.push(comment);
        comments.splice(this.cursor, 1)
      }else {
        this.cursor += 1
      }
    }
    if(this.cursor === comments.length) {
      return VisitorOption.Break
    }
    if(comments[this.cursor].extendedRange[0] > node.range[1]) {
      return VisitorOption.Skip
    }
  }});
  traverse(tree, {cursor:0, leave:function(node) {
    var comment;
    while(this.cursor < comments.length) {
      comment = comments[this.cursor];
      if(node.range[1] < comment.extendedRange[0]) {
        break
      }
      if(node.range[1] === comment.extendedRange[0]) {
        if(!node.trailingComments) {
          node.trailingComments = []
        }
        node.trailingComments.push(comment);
        comments.splice(this.cursor, 1)
      }else {
        this.cursor += 1
      }
    }
    if(this.cursor === comments.length) {
      return VisitorOption.Break
    }
    if(comments[this.cursor].extendedRange[0] > node.range[1]) {
      return VisitorOption.Skip
    }
  }});
  return tree
}
escodegen.version = "0.0.16-dev";
escodegen.generate = generate;
escodegen.traverse = traverse;
escodegen.attachComments = attachComments;
goog.provide("esp");
esprima = {};
var Token, TokenName, Syntax, PropertyKind, Messages, Regex, SyntaxTreeDelegate, source, strict, index, lineNumber, lineStart, length, delegate, buffer, state, extra;
Token = {BooleanLiteral:1, EOF:2, Identifier:3, Keyword:4, NullLiteral:5, NumericLiteral:6, Punctuator:7, StringLiteral:8};
TokenName = {};
TokenName[Token.BooleanLiteral] = "Boolean";
TokenName[Token.EOF] = "<end>";
TokenName[Token.Identifier] = "Identifier";
TokenName[Token.Keyword] = "Keyword";
TokenName[Token.NullLiteral] = "Null";
TokenName[Token.NumericLiteral] = "Numeric";
TokenName[Token.Punctuator] = "Punctuator";
TokenName[Token.StringLiteral] = "String";
Syntax = {AssignmentExpression:"AssignmentExpression", ArrayExpression:"ArrayExpression", BlockStatement:"BlockStatement", BinaryExpression:"BinaryExpression", BreakStatement:"BreakStatement", CallExpression:"CallExpression", CatchClause:"CatchClause", ConditionalExpression:"ConditionalExpression", ContinueStatement:"ContinueStatement", DoWhileStatement:"DoWhileStatement", DebuggerStatement:"DebuggerStatement", EmptyStatement:"EmptyStatement", ExpressionStatement:"ExpressionStatement", ForStatement:"ForStatement", 
ForInStatement:"ForInStatement", FunctionDeclaration:"FunctionDeclaration", FunctionExpression:"FunctionExpression", Identifier:"Identifier", IfStatement:"IfStatement", Literal:"Literal", LabeledStatement:"LabeledStatement", LogicalExpression:"LogicalExpression", MemberExpression:"MemberExpression", NewExpression:"NewExpression", ObjectExpression:"ObjectExpression", Program:"Program", Property:"Property", ReturnStatement:"ReturnStatement", SequenceExpression:"SequenceExpression", SwitchStatement:"SwitchStatement", 
SwitchCase:"SwitchCase", ThisExpression:"ThisExpression", ThrowStatement:"ThrowStatement", TryStatement:"TryStatement", UnaryExpression:"UnaryExpression", UpdateExpression:"UpdateExpression", VariableDeclaration:"VariableDeclaration", VariableDeclarator:"VariableDeclarator", WhileStatement:"WhileStatement", WithStatement:"WithStatement"};
PropertyKind = {Data:1, Get:2, Set:4};
Messages = {UnexpectedToken:"Unexpected token %0", UnexpectedNumber:"Unexpected number", UnexpectedString:"Unexpected string", UnexpectedIdentifier:"Unexpected identifier", UnexpectedReserved:"Unexpected reserved word", UnexpectedEOS:"Unexpected end of input", NewlineAfterThrow:"Illegal newline after throw", InvalidRegExp:"Invalid regular expression", UnterminatedRegExp:"Invalid regular expression: missing /", InvalidLHSInAssignment:"Invalid left-hand side in assignment", InvalidLHSInForIn:"Invalid left-hand side in for-in", 
MultipleDefaultsInSwitch:"More than one default clause in switch statement", NoCatchOrFinally:"Missing catch or finally after try", UnknownLabel:"Undefined label '%0'", Redeclaration:"%0 '%1' has already been declared", IllegalContinue:"Illegal continue statement", IllegalBreak:"Illegal break statement", IllegalReturn:"Illegal return statement", StrictModeWith:"Strict mode code may not include a with statement", StrictCatchVariable:"Catch variable may not be eval or arguments in strict mode", StrictVarName:"Variable name may not be eval or arguments in strict mode", 
StrictParamName:"Parameter name eval or arguments is not allowed in strict mode", StrictParamDupe:"Strict mode function may not have duplicate parameter names", StrictFunctionName:"Function name may not be eval or arguments in strict mode", StrictOctalLiteral:"Octal literals are not allowed in strict mode.", StrictDelete:"Delete of an unqualified identifier in strict mode.", StrictDuplicateProperty:"Duplicate data property in object literal not allowed in strict mode", AccessorDataProperty:"Object literal may not have data and accessor property with the same name", 
AccessorGetSet:"Object literal may not have multiple get/set accessors with the same name", StrictLHSAssignment:"Assignment to eval or arguments is not allowed in strict mode", StrictLHSPostfix:"Postfix increment/decrement may not have eval or arguments operand in strict mode", StrictLHSPrefix:"Prefix increment/decrement may not have eval or arguments operand in strict mode", StrictReservedWord:"Use of future reserved word in strict mode"};
Regex = {NonAsciiIdentifierStart:new RegExp("[\u00aa\u00b5\u00ba\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc]"), 
NonAsciiIdentifierPart:new RegExp("[\u00aa\u00b5\u00ba\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0300-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u0483-\u0487\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u05d0-\u05ea\u05f0-\u05f2\u0610-\u061a\u0620-\u0669\u066e-\u06d3\u06d5-\u06dc\u06df-\u06e8\u06ea-\u06fc\u06ff\u0710-\u074a\u074d-\u07b1\u07c0-\u07f5\u07fa\u0800-\u082d\u0840-\u085b\u08a0\u08a2-\u08ac\u08e4-\u08fe\u0900-\u0963\u0966-\u096f\u0971-\u0977\u0979-\u097f\u0981-\u0983\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bc-\u09c4\u09c7\u09c8\u09cb-\u09ce\u09d7\u09dc\u09dd\u09df-\u09e3\u09e6-\u09f1\u0a01-\u0a03\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a59-\u0a5c\u0a5e\u0a66-\u0a75\u0a81-\u0a83\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abc-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ad0\u0ae0-\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3c-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b5c\u0b5d\u0b5f-\u0b63\u0b66-\u0b6f\u0b71\u0b82\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd0\u0bd7\u0be6-\u0bef\u0c01-\u0c03\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c58\u0c59\u0c60-\u0c63\u0c66-\u0c6f\u0c82\u0c83\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbc-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0cde\u0ce0-\u0ce3\u0ce6-\u0cef\u0cf1\u0cf2\u0d02\u0d03\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d-\u0d44\u0d46-\u0d48\u0d4a-\u0d4e\u0d57\u0d60-\u0d63\u0d66-\u0d6f\u0d7a-\u0d7f\u0d82\u0d83\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0df2\u0df3\u0e01-\u0e3a\u0e40-\u0e4e\u0e50-\u0e59\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb9\u0ebb-\u0ebd\u0ec0-\u0ec4\u0ec6\u0ec8-\u0ecd\u0ed0-\u0ed9\u0edc-\u0edf\u0f00\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e-\u0f47\u0f49-\u0f6c\u0f71-\u0f84\u0f86-\u0f97\u0f99-\u0fbc\u0fc6\u1000-\u1049\u1050-\u109d\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u135d-\u135f\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176c\u176e-\u1770\u1772\u1773\u1780-\u17d3\u17d7\u17dc\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u1820-\u1877\u1880-\u18aa\u18b0-\u18f5\u1900-\u191c\u1920-\u192b\u1930-\u193b\u1946-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u19d0-\u19d9\u1a00-\u1a1b\u1a20-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1aa7\u1b00-\u1b4b\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1bf3\u1c00-\u1c37\u1c40-\u1c49\u1c4d-\u1c7d\u1cd0-\u1cd2\u1cd4-\u1cf6\u1d00-\u1de6\u1dfc-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u200c\u200d\u203f\u2040\u2054\u2071\u207f\u2090-\u209c\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d7f-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2de0-\u2dff\u2e2f\u3005-\u3007\u3021-\u302f\u3031-\u3035\u3038-\u303c\u3041-\u3096\u3099\u309a\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua62b\ua640-\ua66f\ua674-\ua67d\ua67f-\ua697\ua69f-\ua6f1\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua827\ua840-\ua873\ua880-\ua8c4\ua8d0-\ua8d9\ua8e0-\ua8f7\ua8fb\ua900-\ua92d\ua930-\ua953\ua960-\ua97c\ua980-\ua9c0\ua9cf-\ua9d9\uaa00-\uaa36\uaa40-\uaa4d\uaa50-\uaa59\uaa60-\uaa76\uaa7a\uaa7b\uaa80-\uaac2\uaadb-\uaadd\uaae0-\uaaef\uaaf2-\uaaf6\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabea\uabec\uabed\uabf0-\uabf9\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe00-\ufe0f\ufe20-\ufe26\ufe33\ufe34\ufe4d-\ufe4f\ufe70-\ufe74\ufe76-\ufefc\uff10-\uff19\uff21-\uff3a\uff3f\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc]")};
function assert(condition, message) {
  if(!condition) {
    throw new Error("ASSERT: " + message);
  }
}
function sliceSource(from, to) {
  return source.slice(from, to)
}
if(typeof"esprima"[0] === "undefined") {
  sliceSource = function sliceArraySource(from, to) {
    return source.slice(from, to).join("")
  }
}
function isDecimalDigit(ch) {
  return"0123456789".indexOf(ch) >= 0
}
function isHexDigit(ch) {
  return"0123456789abcdefABCDEF".indexOf(ch) >= 0
}
function isOctalDigit(ch) {
  return"01234567".indexOf(ch) >= 0
}
function isWhiteSpace(ch) {
  return ch === " " || ch === "\t" || ch === "\x0B" || ch === "\u000c" || ch === "\u00a0" || ch.charCodeAt(0) >= 5760 && "\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\ufeff".indexOf(ch) >= 0
}
function isLineTerminator(ch) {
  return ch === "\n" || ch === "\r" || ch === "\u2028" || ch === "\u2029"
}
function isIdentifierStart(ch) {
  return ch === "$" || ch === "_" || ch === "\\" || ch >= "a" && ch <= "z" || ch >= "A" && ch <= "Z" || ch.charCodeAt(0) >= 128 && Regex.NonAsciiIdentifierStart.test(ch)
}
function isIdentifierPart(ch) {
  return ch === "$" || ch === "_" || ch === "\\" || ch >= "a" && ch <= "z" || ch >= "A" && ch <= "Z" || ch >= "0" && ch <= "9" || ch.charCodeAt(0) >= 128 && Regex.NonAsciiIdentifierPart.test(ch)
}
function isFutureReservedWord(id) {
  switch(id) {
    case "class":
    ;
    case "enum":
    ;
    case "export":
    ;
    case "extends":
    ;
    case "import":
    ;
    case "super":
      return true
  }
  return false
}
function isStrictModeReservedWord(id) {
  switch(id) {
    case "implements":
    ;
    case "interface":
    ;
    case "package":
    ;
    case "private":
    ;
    case "protected":
    ;
    case "public":
    ;
    case "static":
    ;
    case "yield":
    ;
    case "let":
      return true
  }
  return false
}
function isRestrictedWord(id) {
  return id === "eval" || id === "arguments"
}
function isKeyword(id) {
  var keyword = false;
  switch(id.length) {
    case 2:
      keyword = id === "if" || id === "in" || id === "do";
      break;
    case 3:
      keyword = id === "var" || id === "for" || id === "new" || id === "try";
      break;
    case 4:
      keyword = id === "this" || id === "else" || id === "case" || id === "void" || id === "with";
      break;
    case 5:
      keyword = id === "while" || id === "break" || id === "catch" || id === "throw";
      break;
    case 6:
      keyword = id === "return" || id === "typeof" || id === "delete" || id === "switch";
      break;
    case 7:
      keyword = id === "default" || id === "finally";
      break;
    case 8:
      keyword = id === "function" || id === "continue" || id === "debugger";
      break;
    case 10:
      keyword = id === "instanceof";
      break
  }
  if(keyword) {
    return true
  }
  switch(id) {
    case "const":
      return true;
    case "yield":
    ;
    case "let":
      return true
  }
  if(strict && isStrictModeReservedWord(id)) {
    return true
  }
  return isFutureReservedWord(id)
}
function skipComment() {
  var ch, blockComment, lineComment;
  blockComment = false;
  lineComment = false;
  while(index < length) {
    ch = source[index];
    if(lineComment) {
      ch = source[index++];
      if(isLineTerminator(ch)) {
        lineComment = false;
        if(ch === "\r" && source[index] === "\n") {
          ++index
        }
        ++lineNumber;
        lineStart = index
      }
    }else {
      if(blockComment) {
        if(isLineTerminator(ch)) {
          if(ch === "\r" && source[index + 1] === "\n") {
            ++index
          }
          ++lineNumber;
          ++index;
          lineStart = index;
          if(index >= length) {
            throwError({}, Messages.UnexpectedToken, "ILLEGAL")
          }
        }else {
          ch = source[index++];
          if(index >= length) {
            throwError({}, Messages.UnexpectedToken, "ILLEGAL")
          }
          if(ch === "*") {
            ch = source[index];
            if(ch === "/") {
              ++index;
              blockComment = false
            }
          }
        }
      }else {
        if(ch === "/") {
          ch = source[index + 1];
          if(ch === "/") {
            index += 2;
            lineComment = true
          }else {
            if(ch === "*") {
              index += 2;
              blockComment = true;
              if(index >= length) {
                throwError({}, Messages.UnexpectedToken, "ILLEGAL")
              }
            }else {
              break
            }
          }
        }else {
          if(isWhiteSpace(ch)) {
            ++index
          }else {
            if(isLineTerminator(ch)) {
              ++index;
              if(ch === "\r" && source[index] === "\n") {
                ++index
              }
              ++lineNumber;
              lineStart = index
            }else {
              break
            }
          }
        }
      }
    }
  }
}
function scanHexEscape(prefix) {
  var i, len, ch, code = 0;
  len = prefix === "u" ? 4 : 2;
  for(i = 0;i < len;++i) {
    if(index < length && isHexDigit(source[index])) {
      ch = source[index++];
      code = code * 16 + "0123456789abcdef".indexOf(ch.toLowerCase())
    }else {
      return""
    }
  }
  return String.fromCharCode(code)
}
function scanIdentifier() {
  var ch, start, id, restore;
  ch = source[index];
  if(!isIdentifierStart(ch)) {
    return
  }
  start = index;
  if(ch === "\\") {
    ++index;
    if(source[index] !== "u") {
      return
    }
    ++index;
    restore = index;
    ch = scanHexEscape("u");
    if(ch) {
      if(ch === "\\" || !isIdentifierStart(ch)) {
        return
      }
      id = ch
    }else {
      index = restore;
      id = "u"
    }
  }else {
    id = source[index++]
  }
  while(index < length) {
    ch = source[index];
    if(!isIdentifierPart(ch)) {
      break
    }
    if(ch === "\\") {
      ++index;
      if(source[index] !== "u") {
        return
      }
      ++index;
      restore = index;
      ch = scanHexEscape("u");
      if(ch) {
        if(ch === "\\" || !isIdentifierPart(ch)) {
          return
        }
        id += ch
      }else {
        index = restore;
        id += "u"
      }
    }else {
      id += source[index++]
    }
  }
  if(id.length === 1) {
    return{type:Token.Identifier, value:id, lineNumber:lineNumber, lineStart:lineStart, range:[start, index]}
  }
  if(isKeyword(id)) {
    return{type:Token.Keyword, value:id, lineNumber:lineNumber, lineStart:lineStart, range:[start, index]}
  }
  if(id === "null") {
    return{type:Token.NullLiteral, value:id, lineNumber:lineNumber, lineStart:lineStart, range:[start, index]}
  }
  if(id === "true" || id === "false") {
    return{type:Token.BooleanLiteral, value:id, lineNumber:lineNumber, lineStart:lineStart, range:[start, index]}
  }
  return{type:Token.Identifier, value:id, lineNumber:lineNumber, lineStart:lineStart, range:[start, index]}
}
function scanPunctuator() {
  var start = index, ch1 = source[index], ch2, ch3, ch4;
  if(ch1 === ";" || ch1 === "{" || ch1 === "}") {
    ++index;
    return{type:Token.Punctuator, value:ch1, lineNumber:lineNumber, lineStart:lineStart, range:[start, index]}
  }
  if(ch1 === "," || ch1 === "(" || ch1 === ")") {
    ++index;
    return{type:Token.Punctuator, value:ch1, lineNumber:lineNumber, lineStart:lineStart, range:[start, index]}
  }
  ch2 = source[index + 1];
  if(ch1 === "." && !isDecimalDigit(ch2)) {
    return{type:Token.Punctuator, value:source[index++], lineNumber:lineNumber, lineStart:lineStart, range:[start, index]}
  }
  ch3 = source[index + 2];
  ch4 = source[index + 3];
  if(ch1 === ">" && ch2 === ">" && ch3 === ">") {
    if(ch4 === "=") {
      index += 4;
      return{type:Token.Punctuator, value:">>>=", lineNumber:lineNumber, lineStart:lineStart, range:[start, index]}
    }
  }
  if(ch1 === "=" && ch2 === "=" && ch3 === "=") {
    index += 3;
    return{type:Token.Punctuator, value:"===", lineNumber:lineNumber, lineStart:lineStart, range:[start, index]}
  }
  if(ch1 === "!" && ch2 === "=" && ch3 === "=") {
    index += 3;
    return{type:Token.Punctuator, value:"!==", lineNumber:lineNumber, lineStart:lineStart, range:[start, index]}
  }
  if(ch1 === ">" && ch2 === ">" && ch3 === ">") {
    index += 3;
    return{type:Token.Punctuator, value:">>>", lineNumber:lineNumber, lineStart:lineStart, range:[start, index]}
  }
  if(ch1 === "<" && ch2 === "<" && ch3 === "=") {
    index += 3;
    return{type:Token.Punctuator, value:"<<=", lineNumber:lineNumber, lineStart:lineStart, range:[start, index]}
  }
  if(ch1 === ">" && ch2 === ">" && ch3 === "=") {
    index += 3;
    return{type:Token.Punctuator, value:">>=", lineNumber:lineNumber, lineStart:lineStart, range:[start, index]}
  }
  if(ch2 === "=") {
    if("<>=!+-*%&|^/".indexOf(ch1) >= 0) {
      index += 2;
      return{type:Token.Punctuator, value:ch1 + ch2, lineNumber:lineNumber, lineStart:lineStart, range:[start, index]}
    }
  }
  if(ch1 === ch2 && "+-<>&|".indexOf(ch1) >= 0) {
    if("+-<>&|".indexOf(ch2) >= 0) {
      index += 2;
      return{type:Token.Punctuator, value:ch1 + ch2, lineNumber:lineNumber, lineStart:lineStart, range:[start, index]}
    }
  }
  if("[]<>+-*%&|^!~?:=/".indexOf(ch1) >= 0) {
    return{type:Token.Punctuator, value:source[index++], lineNumber:lineNumber, lineStart:lineStart, range:[start, index]}
  }
}
function scanNumericLiteral() {
  var number, start, ch;
  ch = source[index];
  assert(isDecimalDigit(ch) || ch === ".", "Numeric literal must start with a decimal digit or a decimal point");
  start = index;
  number = "";
  if(ch !== ".") {
    number = source[index++];
    ch = source[index];
    if(number === "0") {
      if(ch === "x" || ch === "X") {
        number += source[index++];
        while(index < length) {
          ch = source[index];
          if(!isHexDigit(ch)) {
            break
          }
          number += source[index++]
        }
        if(number.length <= 2) {
          throwError({}, Messages.UnexpectedToken, "ILLEGAL")
        }
        if(index < length) {
          ch = source[index];
          if(isIdentifierStart(ch)) {
            throwError({}, Messages.UnexpectedToken, "ILLEGAL")
          }
        }
        return{type:Token.NumericLiteral, value:parseInt(number, 16), lineNumber:lineNumber, lineStart:lineStart, range:[start, index]}
      }else {
        if(isOctalDigit(ch)) {
          number += source[index++];
          while(index < length) {
            ch = source[index];
            if(!isOctalDigit(ch)) {
              break
            }
            number += source[index++]
          }
          if(index < length) {
            ch = source[index];
            if(isIdentifierStart(ch) || isDecimalDigit(ch)) {
              throwError({}, Messages.UnexpectedToken, "ILLEGAL")
            }
          }
          return{type:Token.NumericLiteral, value:parseInt(number, 8), octal:true, lineNumber:lineNumber, lineStart:lineStart, range:[start, index]}
        }
      }
      if(isDecimalDigit(ch)) {
        throwError({}, Messages.UnexpectedToken, "ILLEGAL")
      }
    }
    while(index < length) {
      ch = source[index];
      if(!isDecimalDigit(ch)) {
        break
      }
      number += source[index++]
    }
  }
  if(ch === ".") {
    number += source[index++];
    while(index < length) {
      ch = source[index];
      if(!isDecimalDigit(ch)) {
        break
      }
      number += source[index++]
    }
  }
  if(ch === "e" || ch === "E") {
    number += source[index++];
    ch = source[index];
    if(ch === "+" || ch === "-") {
      number += source[index++]
    }
    ch = source[index];
    if(isDecimalDigit(ch)) {
      number += source[index++];
      while(index < length) {
        ch = source[index];
        if(!isDecimalDigit(ch)) {
          break
        }
        number += source[index++]
      }
    }else {
      ch = "character " + ch;
      if(index >= length) {
        ch = "<end>"
      }
      throwError({}, Messages.UnexpectedToken, "ILLEGAL")
    }
  }
  if(index < length) {
    ch = source[index];
    if(isIdentifierStart(ch)) {
      throwError({}, Messages.UnexpectedToken, "ILLEGAL")
    }
  }
  return{type:Token.NumericLiteral, value:parseFloat(number), lineNumber:lineNumber, lineStart:lineStart, range:[start, index]}
}
function scanStringLiteral() {
  var str = "", quote, start, ch, code, unescaped, restore, octal = false;
  quote = source[index];
  assert(quote === "'" || quote === '"', "String literal must starts with a quote");
  start = index;
  ++index;
  while(index < length) {
    ch = source[index++];
    if(ch === quote) {
      quote = "";
      break
    }else {
      if(ch === "\\") {
        ch = source[index++];
        if(!isLineTerminator(ch)) {
          switch(ch) {
            case "n":
              str += "\n";
              break;
            case "r":
              str += "\r";
              break;
            case "t":
              str += "\t";
              break;
            case "u":
            ;
            case "x":
              restore = index;
              unescaped = scanHexEscape(ch);
              if(unescaped) {
                str += unescaped
              }else {
                index = restore;
                str += ch
              }
              break;
            case "b":
              str += "\u0008";
              break;
            case "f":
              str += "\u000c";
              break;
            case "v":
              str += "\v";
              break;
            default:
              if(isOctalDigit(ch)) {
                code = "01234567".indexOf(ch);
                if(code !== 0) {
                  octal = true
                }
                if(index < length && isOctalDigit(source[index])) {
                  octal = true;
                  code = code * 8 + "01234567".indexOf(source[index++]);
                  if("0123".indexOf(ch) >= 0 && index < length && isOctalDigit(source[index])) {
                    code = code * 8 + "01234567".indexOf(source[index++])
                  }
                }
                str += String.fromCharCode(code)
              }else {
                str += ch
              }
              break
          }
        }else {
          ++lineNumber;
          if(ch === "\r" && source[index] === "\n") {
            ++index
          }
        }
      }else {
        if(isLineTerminator(ch)) {
          break
        }else {
          str += ch
        }
      }
    }
  }
  if(quote !== "") {
    throwError({}, Messages.UnexpectedToken, "ILLEGAL")
  }
  return{type:Token.StringLiteral, value:str, octal:octal, lineNumber:lineNumber, lineStart:lineStart, range:[start, index]}
}
function scanRegExp() {
  var str = "", ch, start, pattern, flags, value, classMarker = false, restore, terminated = false;
  buffer = null;
  skipComment();
  start = index;
  ch = source[index];
  assert(ch === "/", "Regular expression literal must start with a slash");
  str = source[index++];
  while(index < length) {
    ch = source[index++];
    str += ch;
    if(classMarker) {
      if(ch === "]") {
        classMarker = false
      }
    }else {
      if(ch === "\\") {
        ch = source[index++];
        if(isLineTerminator(ch)) {
          throwError({}, Messages.UnterminatedRegExp)
        }
        str += ch
      }else {
        if(ch === "/") {
          terminated = true;
          break
        }else {
          if(ch === "[") {
            classMarker = true
          }else {
            if(isLineTerminator(ch)) {
              throwError({}, Messages.UnterminatedRegExp)
            }
          }
        }
      }
    }
  }
  if(!terminated) {
    throwError({}, Messages.UnterminatedRegExp)
  }
  pattern = str.substr(1, str.length - 2);
  flags = "";
  while(index < length) {
    ch = source[index];
    if(!isIdentifierPart(ch)) {
      break
    }
    ++index;
    if(ch === "\\" && index < length) {
      ch = source[index];
      if(ch === "u") {
        ++index;
        restore = index;
        ch = scanHexEscape("u");
        if(ch) {
          flags += ch;
          str += "\\u";
          for(;restore < index;++restore) {
            str += source[restore]
          }
        }else {
          index = restore;
          flags += "u";
          str += "\\u"
        }
      }else {
        str += "\\"
      }
    }else {
      flags += ch;
      str += ch
    }
  }
  try {
    value = new RegExp(pattern, flags)
  }catch(e) {
    throwError({}, Messages.InvalidRegExp)
  }
  return{literal:str, value:value, range:[start, index]}
}
function isIdentifierName(token) {
  return token.type === Token.Identifier || token.type === Token.Keyword || token.type === Token.BooleanLiteral || token.type === Token.NullLiteral
}
function advance() {
  var ch, token;
  skipComment();
  if(index >= length) {
    return{type:Token.EOF, lineNumber:lineNumber, lineStart:lineStart, range:[index, index]}
  }
  token = scanPunctuator();
  if(typeof token !== "undefined") {
    return token
  }
  ch = source[index];
  if(ch === "'" || ch === '"') {
    return scanStringLiteral()
  }
  if(ch === "." || isDecimalDigit(ch)) {
    return scanNumericLiteral()
  }
  token = scanIdentifier();
  if(typeof token !== "undefined") {
    return token
  }
  throwError({}, Messages.UnexpectedToken, "ILLEGAL")
}
function lex() {
  var token;
  if(buffer) {
    index = buffer.range[1];
    lineNumber = buffer.lineNumber;
    lineStart = buffer.lineStart;
    token = buffer;
    buffer = null;
    return token
  }
  buffer = null;
  return advance()
}
function lookahead() {
  var pos, line, start;
  if(buffer !== null) {
    return buffer
  }
  pos = index;
  line = lineNumber;
  start = lineStart;
  buffer = advance();
  index = pos;
  lineNumber = line;
  lineStart = start;
  return buffer
}
SyntaxTreeDelegate = {name:"SyntaxTree", createArrayExpression:function(elements) {
  return{type:Syntax.ArrayExpression, elements:elements}
}, createAssignmentExpression:function(operator, left, right) {
  return{type:Syntax.AssignmentExpression, operator:operator, left:left, right:right}
}, createBinaryExpression:function(operator, left, right) {
  return{type:Syntax.BinaryExpression, operator:operator, left:left, right:right}
}, createBlockStatement:function(body) {
  return{type:Syntax.BlockStatement, body:body}
}, createBreakStatement:function(label) {
  return{type:Syntax.BreakStatement, label:label}
}, createCallExpression:function(callee, args) {
  return{type:Syntax.CallExpression, callee:callee, "arguments":args}
}, createCatchClause:function(param, body) {
  return{type:Syntax.CatchClause, param:param, body:body}
}, createConditionalExpression:function(test, consequent, alternate) {
  return{type:Syntax.ConditionalExpression, test:test, consequent:consequent, alternate:alternate}
}, createContinueStatement:function(label) {
  return{type:Syntax.ContinueStatement, label:label}
}, createDebuggerStatement:function() {
  return{type:Syntax.DebuggerStatement}
}, createDoWhileStatement:function(body, test) {
  return{type:Syntax.DoWhileStatement, body:body, test:test}
}, createEmptyStatement:function() {
  return{type:Syntax.EmptyStatement}
}, createExpressionStatement:function(expression) {
  return{type:Syntax.ExpressionStatement, expression:expression}
}, createForStatement:function(init, test, update, body) {
  return{type:Syntax.ForStatement, init:init, test:test, update:update, body:body}
}, createForInStatement:function(left, right, body) {
  return{type:Syntax.ForInStatement, left:left, right:right, body:body, each:false}
}, createFunctionDeclaration:function(id, params, defaults, body) {
  return{type:Syntax.FunctionDeclaration, id:id, params:params, defaults:defaults, body:body, rest:null, generator:false, expression:false}
}, createFunctionExpression:function(id, params, defaults, body) {
  return{type:Syntax.FunctionExpression, id:id, params:params, defaults:defaults, body:body, rest:null, generator:false, expression:false}
}, createIdentifier:function(name) {
  return{type:Syntax.Identifier, name:name}
}, createIfStatement:function(test, consequent, alternate) {
  return{type:Syntax.IfStatement, test:test, consequent:consequent, alternate:alternate}
}, createLabeledStatement:function(label, body) {
  return{type:Syntax.LabeledStatement, label:label, body:body}
}, createLiteral:function(token) {
  return{type:Syntax.Literal, value:token.value}
}, createLogicalExpression:function(operator, left, right) {
  return{type:Syntax.LogicalExpression, operator:operator, left:left, right:right}
}, createMemberExpression:function(accessor, object, property) {
  return{type:Syntax.MemberExpression, computed:accessor === "[", object:object, property:property}
}, createNewExpression:function(callee, args) {
  return{type:Syntax.NewExpression, callee:callee, "arguments":args}
}, createObjectExpression:function(properties) {
  return{type:Syntax.ObjectExpression, properties:properties}
}, createPostfixExpression:function(operator, argument) {
  return{type:Syntax.UpdateExpression, operator:operator, argument:argument, prefix:false}
}, createProgram:function(body) {
  return{type:Syntax.Program, body:body}
}, createProperty:function(kind, key, value) {
  return{type:Syntax.Property, key:key, value:value, kind:kind}
}, createReturnStatement:function(argument) {
  return{type:Syntax.ReturnStatement, argument:argument}
}, createSequenceExpression:function(expressions) {
  return{type:Syntax.SequenceExpression, expressions:expressions}
}, createSwitchCase:function(test, consequent) {
  return{type:Syntax.SwitchCase, test:test, consequent:consequent}
}, createSwitchStatement:function(discriminant, cases) {
  return{type:Syntax.SwitchStatement, discriminant:discriminant, cases:cases}
}, createThisExpression:function() {
  return{type:Syntax.ThisExpression}
}, createThrowStatement:function(argument) {
  return{type:Syntax.ThrowStatement, argument:argument}
}, createTryStatement:function(block, guardedHandlers, handlers, finalizer) {
  return{type:Syntax.TryStatement, block:block, guardedHandlers:guardedHandlers, handlers:handlers, finalizer:finalizer}
}, createUnaryExpression:function(operator, argument) {
  if(operator === "++" || operator === "--") {
    return{type:Syntax.UpdateExpression, operator:operator, argument:argument, prefix:true}
  }else {
    return{type:Syntax.UnaryExpression, operator:operator, argument:argument}
  }
}, createVariableDeclaration:function(declarations, kind) {
  return{type:Syntax.VariableDeclaration, declarations:declarations, kind:kind}
}, createVariableDeclarator:function(id, init) {
  return{type:Syntax.VariableDeclarator, id:id, init:init}
}, createWhileStatement:function(test, body) {
  return{type:Syntax.WhileStatement, test:test, body:body}
}, createWithStatement:function(object, body) {
  return{type:Syntax.WithStatement, object:object, body:body}
}};
function peekLineTerminator() {
  var pos, line, start, found;
  pos = index;
  line = lineNumber;
  start = lineStart;
  skipComment();
  found = lineNumber !== line;
  index = pos;
  lineNumber = line;
  lineStart = start;
  return found
}
function throwError(token, messageFormat) {
  var error, args = Array.prototype.slice.call(arguments, 2), msg = messageFormat.replace(/%(\d)/g, function(whole, index) {
    return args[index] || ""
  });
  if(typeof token.lineNumber === "number") {
    error = new Error("Line " + token.lineNumber + ": " + msg);
    error.index = token.range[0];
    error.lineNumber = token.lineNumber;
    error.column = token.range[0] - lineStart + 1
  }else {
    error = new Error("Line " + lineNumber + ": " + msg);
    error.index = index;
    error.lineNumber = lineNumber;
    error.column = index - lineStart + 1
  }
  throw error;
}
function throwErrorTolerant() {
  try {
    throwError.apply(null, arguments)
  }catch(e) {
    if(extra.errors) {
      extra.errors.push(e)
    }else {
      throw e;
    }
  }
}
function throwUnexpected(token) {
  if(token.type === Token.EOF) {
    throwError(token, Messages.UnexpectedEOS)
  }
  if(token.type === Token.NumericLiteral) {
    throwError(token, Messages.UnexpectedNumber)
  }
  if(token.type === Token.StringLiteral) {
    throwError(token, Messages.UnexpectedString)
  }
  if(token.type === Token.Identifier) {
    throwError(token, Messages.UnexpectedIdentifier)
  }
  if(token.type === Token.Keyword) {
    if(isFutureReservedWord(token.value)) {
      throwError(token, Messages.UnexpectedReserved)
    }else {
      if(strict && isStrictModeReservedWord(token.value)) {
        throwErrorTolerant(token, Messages.StrictReservedWord);
        return
      }
    }
    throwError(token, Messages.UnexpectedToken, token.value)
  }
  throwError(token, Messages.UnexpectedToken, token.value)
}
function expect(value) {
  var token = lex();
  if(token.type !== Token.Punctuator || token.value !== value) {
    throwUnexpected(token)
  }
}
function expectKeyword(keyword) {
  var token = lex();
  if(token.type !== Token.Keyword || token.value !== keyword) {
    throwUnexpected(token)
  }
}
function match(value) {
  var token = lookahead();
  return token.type === Token.Punctuator && token.value === value
}
function matchKeyword(keyword) {
  var token = lookahead();
  return token.type === Token.Keyword && token.value === keyword
}
function matchAssign() {
  var token = lookahead(), op = token.value;
  if(token.type !== Token.Punctuator) {
    return false
  }
  return op === "=" || op === "*=" || op === "/=" || op === "%=" || op === "+=" || op === "-=" || op === "<<=" || op === ">>=" || op === ">>>=" || op === "&=" || op === "^=" || op === "|="
}
function consumeSemicolon() {
  var token, line;
  if(source[index] === ";") {
    lex();
    return
  }
  line = lineNumber;
  skipComment();
  if(lineNumber !== line) {
    return
  }
  if(match(";")) {
    lex();
    return
  }
  token = lookahead();
  if(token.type !== Token.EOF && !match("}")) {
    throwUnexpected(token)
  }
  return
}
function isLeftHandSide(expr) {
  return expr.type === Syntax.Identifier || expr.type === Syntax.MemberExpression
}
function parseArrayInitialiser() {
  var elements = [];
  expect("[");
  while(!match("]")) {
    if(match(",")) {
      lex();
      elements.push(null)
    }else {
      elements.push(parseAssignmentExpression());
      if(!match("]")) {
        expect(",")
      }
    }
  }
  expect("]");
  return delegate.createArrayExpression(elements)
}
function parsePropertyFunction(param, first) {
  var previousStrict, body;
  previousStrict = strict;
  body = parseFunctionSourceElements();
  if(first && strict && isRestrictedWord(param[0].name)) {
    throwErrorTolerant(first, Messages.StrictParamName)
  }
  strict = previousStrict;
  return delegate.createFunctionExpression(null, param, [], body)
}
function parseObjectPropertyKey() {
  var token = lex();
  if(token.type === Token.StringLiteral || token.type === Token.NumericLiteral) {
    if(strict && token.octal) {
      throwErrorTolerant(token, Messages.StrictOctalLiteral)
    }
    return delegate.createLiteral(token)
  }
  return delegate.createIdentifier(token.value)
}
function parseObjectProperty() {
  var token, key, id, value, param;
  token = lookahead();
  if(token.type === Token.Identifier) {
    id = parseObjectPropertyKey();
    if(token.value === "get" && !match(":")) {
      key = parseObjectPropertyKey();
      expect("(");
      expect(")");
      value = parsePropertyFunction([]);
      return delegate.createProperty("get", key, value)
    }else {
      if(token.value === "set" && !match(":")) {
        key = parseObjectPropertyKey();
        expect("(");
        token = lookahead();
        if(token.type !== Token.Identifier) {
          throwUnexpected(lex())
        }
        param = [parseVariableIdentifier()];
        expect(")");
        value = parsePropertyFunction(param, token);
        return delegate.createProperty("set", key, value)
      }else {
        expect(":");
        value = parseAssignmentExpression();
        return delegate.createProperty("init", id, value)
      }
    }
  }else {
    if(token.type === Token.EOF || token.type === Token.Punctuator) {
      throwUnexpected(token)
    }else {
      key = parseObjectPropertyKey();
      expect(":");
      value = parseAssignmentExpression();
      return delegate.createProperty("init", key, value)
    }
  }
}
function parseObjectInitialiser() {
  var properties = [], property, name, kind, map = {}, toString = String;
  expect("{");
  while(!match("}")) {
    property = parseObjectProperty();
    if(property.key.type === Syntax.Identifier) {
      name = property.key.name
    }else {
      name = toString(property.key.value)
    }
    kind = property.kind === "init" ? PropertyKind.Data : property.kind === "get" ? PropertyKind.Get : PropertyKind.Set;
    if(Object.prototype.hasOwnProperty.call(map, name)) {
      if(map[name] === PropertyKind.Data) {
        if(strict && kind === PropertyKind.Data) {
          throwErrorTolerant({}, Messages.StrictDuplicateProperty)
        }else {
          if(kind !== PropertyKind.Data) {
            throwErrorTolerant({}, Messages.AccessorDataProperty)
          }
        }
      }else {
        if(kind === PropertyKind.Data) {
          throwErrorTolerant({}, Messages.AccessorDataProperty)
        }else {
          if(map[name] & kind) {
            throwErrorTolerant({}, Messages.AccessorGetSet)
          }
        }
      }
      map[name] |= kind
    }else {
      map[name] = kind
    }
    properties.push(property);
    if(!match("}")) {
      expect(",")
    }
  }
  expect("}");
  return delegate.createObjectExpression(properties)
}
function parseGroupExpression() {
  var expr;
  expect("(");
  expr = parseExpression();
  expect(")");
  return expr
}
function parsePrimaryExpression() {
  var expr, token = lookahead(), type = token.type;
  if(type === Token.Identifier) {
    lex();
    return delegate.createIdentifier(token.value)
  }
  if(type === Token.StringLiteral || type === Token.NumericLiteral) {
    if(strict && token.octal) {
      throwErrorTolerant(token, Messages.StrictOctalLiteral)
    }
    return delegate.createLiteral(lex())
  }
  if(type === Token.Keyword) {
    if(matchKeyword("this")) {
      lex();
      return delegate.createThisExpression()
    }
    if(matchKeyword("function")) {
      return parseFunctionExpression()
    }
  }
  if(type === Token.BooleanLiteral) {
    lex();
    token.value = token.value === "true";
    return delegate.createLiteral(token)
  }
  if(type === Token.NullLiteral) {
    lex();
    token.value = null;
    return delegate.createLiteral(token)
  }
  if(match("[")) {
    return parseArrayInitialiser()
  }
  if(match("{")) {
    return parseObjectInitialiser()
  }
  if(match("(")) {
    return parseGroupExpression()
  }
  if(match("/") || match("/=")) {
    return delegate.createLiteral(scanRegExp())
  }
  return throwUnexpected(lex())
}
function parseArguments() {
  var args = [];
  expect("(");
  if(!match(")")) {
    while(index < length) {
      args.push(parseAssignmentExpression());
      if(match(")")) {
        break
      }
      expect(",")
    }
  }
  expect(")");
  return args
}
function parseNonComputedProperty() {
  var token = lex();
  if(!isIdentifierName(token)) {
    throwUnexpected(token)
  }
  return delegate.createIdentifier(token.value)
}
function parseNonComputedMember() {
  expect(".");
  return parseNonComputedProperty()
}
function parseComputedMember() {
  var expr;
  expect("[");
  expr = parseExpression();
  expect("]");
  return expr
}
function parseNewExpression() {
  var expr, callee, args;
  expectKeyword("new");
  callee = parseLeftHandSideExpression();
  args = match("(") ? parseArguments() : [];
  return delegate.createNewExpression(callee, args)
}
function parseLeftHandSideExpressionAllowCall() {
  var expr, args, property;
  expr = matchKeyword("new") ? parseNewExpression() : parsePrimaryExpression();
  while(match(".") || match("[") || match("(")) {
    if(match("(")) {
      args = parseArguments();
      expr = delegate.createCallExpression(expr, args)
    }else {
      if(match("[")) {
        property = parseComputedMember();
        expr = delegate.createMemberExpression("[", expr, property)
      }else {
        property = parseNonComputedMember();
        expr = delegate.createMemberExpression(".", expr, property)
      }
    }
  }
  return expr
}
function parseLeftHandSideExpression() {
  var expr, property;
  expr = matchKeyword("new") ? parseNewExpression() : parsePrimaryExpression();
  while(match(".") || match("[")) {
    if(match("[")) {
      property = parseComputedMember();
      expr = delegate.createMemberExpression("[", expr, property)
    }else {
      property = parseNonComputedMember();
      expr = delegate.createMemberExpression(".", expr, property)
    }
  }
  return expr
}
function parsePostfixExpression() {
  var expr = parseLeftHandSideExpressionAllowCall(), token;
  token = lookahead();
  if(token.type !== Token.Punctuator) {
    return expr
  }
  if((match("++") || match("--")) && !peekLineTerminator()) {
    if(strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {
      throwErrorTolerant({}, Messages.StrictLHSPostfix)
    }
    if(!isLeftHandSide(expr)) {
      throwError({}, Messages.InvalidLHSInAssignment)
    }
    token = lex();
    expr = delegate.createPostfixExpression(token.value, expr)
  }
  return expr
}
function parseUnaryExpression() {
  var token, expr;
  token = lookahead();
  if(token.type !== Token.Punctuator && token.type !== Token.Keyword) {
    return parsePostfixExpression()
  }
  if(match("++") || match("--")) {
    token = lex();
    expr = parseUnaryExpression();
    if(strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {
      throwErrorTolerant({}, Messages.StrictLHSPrefix)
    }
    if(!isLeftHandSide(expr)) {
      throwError({}, Messages.InvalidLHSInAssignment)
    }
    return delegate.createUnaryExpression(token.value, expr)
  }
  if(match("+") || match("-") || match("~") || match("!")) {
    token = lex();
    expr = parseUnaryExpression();
    return delegate.createUnaryExpression(token.value, expr)
  }
  if(matchKeyword("delete") || matchKeyword("void") || matchKeyword("typeof")) {
    token = lex();
    expr = parseUnaryExpression();
    expr = delegate.createUnaryExpression(token.value, expr);
    if(strict && expr.operator === "delete" && expr.argument.type === Syntax.Identifier) {
      throwErrorTolerant({}, Messages.StrictDelete)
    }
    return expr
  }
  return parsePostfixExpression()
}
function binaryPrecedence(token, allowIn) {
  var prec = 0;
  if(token.type !== Token.Punctuator && token.type !== Token.Keyword) {
    return 0
  }
  switch(token.value) {
    case "||":
      prec = 1;
      break;
    case "&&":
      prec = 2;
      break;
    case "|":
      prec = 3;
      break;
    case "^":
      prec = 4;
      break;
    case "&":
      prec = 5;
      break;
    case "==":
    ;
    case "!=":
    ;
    case "===":
    ;
    case "!==":
      prec = 6;
      break;
    case "<":
    ;
    case ">":
    ;
    case "<=":
    ;
    case ">=":
    ;
    case "instanceof":
      prec = 7;
      break;
    case "in":
      prec = allowIn ? 7 : 0;
      break;
    case "<<":
    ;
    case ">>":
    ;
    case ">>>":
      prec = 8;
      break;
    case "+":
    ;
    case "-":
      prec = 9;
      break;
    case "*":
    ;
    case "/":
    ;
    case "%":
      prec = 11;
      break;
    default:
      break
  }
  return prec
}
function reduceBinary(stack) {
  var right = stack.pop(), operator = stack.pop().value, left = stack.pop();
  if(operator === "||" || operator === "&&") {
    stack.push(delegate.createLogicalExpression(operator, left, right))
  }else {
    stack.push(delegate.createBinaryExpression(operator, left, right))
  }
}
function parseBinaryExpression() {
  var expr, token, prec, previousAllowIn, stack;
  previousAllowIn = state.allowIn;
  state.allowIn = true;
  expr = parseUnaryExpression();
  token = lookahead();
  prec = binaryPrecedence(token, previousAllowIn);
  if(prec === 0) {
    return expr
  }
  token.prec = prec;
  lex();
  stack = [expr, token, parseUnaryExpression()];
  while((prec = binaryPrecedence(lookahead(), previousAllowIn)) > 0) {
    while(stack.length > 2 && prec <= stack[stack.length - 2].prec) {
      reduceBinary(stack)
    }
    token = lex();
    token.prec = prec;
    stack.push(token);
    stack.push(parseUnaryExpression())
  }
  while(stack.length > 1) {
    reduceBinary(stack)
  }
  state.allowIn = previousAllowIn;
  return stack[0]
}
function parseConditionalExpression() {
  var expr, previousAllowIn, consequent, alternate;
  expr = parseBinaryExpression();
  if(match("?")) {
    lex();
    previousAllowIn = state.allowIn;
    state.allowIn = true;
    consequent = parseAssignmentExpression();
    state.allowIn = previousAllowIn;
    expect(":");
    alternate = parseAssignmentExpression();
    expr = delegate.createConditionalExpression(expr, consequent, alternate)
  }
  return expr
}
function parseAssignmentExpression() {
  var token, left, right;
  token = lookahead();
  left = parseConditionalExpression();
  if(matchAssign()) {
    if(!isLeftHandSide(left)) {
      throwError({}, Messages.InvalidLHSInAssignment)
    }
    if(strict && left.type === Syntax.Identifier && isRestrictedWord(left.name)) {
      throwErrorTolerant(token, Messages.StrictLHSAssignment)
    }
    token = lex();
    right = parseAssignmentExpression();
    return delegate.createAssignmentExpression(token.value, left, right)
  }
  return left
}
function parseExpression() {
  var expr = parseAssignmentExpression();
  if(match(",")) {
    expr = delegate.createSequenceExpression([expr]);
    while(index < length) {
      if(!match(",")) {
        break
      }
      lex();
      expr.expressions.push(parseAssignmentExpression())
    }
  }
  return expr
}
function parseStatementList() {
  var list = [], statement;
  while(index < length) {
    if(match("}")) {
      break
    }
    statement = parseSourceElement();
    if(typeof statement === "undefined") {
      break
    }
    list.push(statement)
  }
  return list
}
function parseBlock() {
  var block;
  expect("{");
  block = parseStatementList();
  expect("}");
  return delegate.createBlockStatement(block)
}
function parseVariableIdentifier() {
  var token = lex();
  if(token.type !== Token.Identifier) {
    throwUnexpected(token)
  }
  return delegate.createIdentifier(token.value)
}
function parseVariableDeclaration(kind) {
  var id = parseVariableIdentifier(), init = null;
  if(strict && isRestrictedWord(id.name)) {
    throwErrorTolerant({}, Messages.StrictVarName)
  }
  if(kind === "const") {
    expect("=");
    init = parseAssignmentExpression()
  }else {
    if(match("=")) {
      lex();
      init = parseAssignmentExpression()
    }
  }
  return delegate.createVariableDeclarator(id, init)
}
function parseVariableDeclarationList(kind) {
  var list = [];
  while(index < length) {
    list.push(parseVariableDeclaration(kind));
    if(!match(",")) {
      break
    }
    lex()
  }
  return list
}
function parseVariableStatement() {
  var declarations;
  expectKeyword("var");
  declarations = parseVariableDeclarationList();
  consumeSemicolon();
  return delegate.createVariableDeclaration(declarations, "var")
}
function parseConstLetDeclaration(kind) {
  var declarations;
  expectKeyword(kind);
  declarations = parseVariableDeclarationList(kind);
  consumeSemicolon();
  return delegate.createVariableDeclaration(declarations, kind)
}
function parseEmptyStatement() {
  expect(";");
  return delegate.createEmptyStatement()
}
function parseExpressionStatement() {
  var expr = parseExpression();
  consumeSemicolon();
  return delegate.createExpressionStatement(expr)
}
function parseIfStatement() {
  var test, consequent, alternate;
  expectKeyword("if");
  expect("(");
  test = parseExpression();
  expect(")");
  consequent = parseStatement();
  if(matchKeyword("else")) {
    lex();
    alternate = parseStatement()
  }else {
    alternate = null
  }
  return delegate.createIfStatement(test, consequent, alternate)
}
function parseDoWhileStatement() {
  var body, test, oldInIteration;
  expectKeyword("do");
  oldInIteration = state.inIteration;
  state.inIteration = true;
  body = parseStatement();
  state.inIteration = oldInIteration;
  expectKeyword("while");
  expect("(");
  test = parseExpression();
  expect(")");
  if(match(";")) {
    lex()
  }
  return delegate.createDoWhileStatement(body, test)
}
function parseWhileStatement() {
  var test, body, oldInIteration;
  expectKeyword("while");
  expect("(");
  test = parseExpression();
  expect(")");
  oldInIteration = state.inIteration;
  state.inIteration = true;
  body = parseStatement();
  state.inIteration = oldInIteration;
  return delegate.createWhileStatement(test, body)
}
function parseForVariableDeclaration() {
  var token = lex(), declarations = parseVariableDeclarationList();
  return delegate.createVariableDeclaration(declarations, token.value)
}
function parseForStatement() {
  var init, test, update, left, right, body, oldInIteration;
  init = test = update = null;
  expectKeyword("for");
  expect("(");
  if(match(";")) {
    lex()
  }else {
    if(matchKeyword("var") || matchKeyword("let")) {
      state.allowIn = false;
      init = parseForVariableDeclaration();
      state.allowIn = true;
      if(init.declarations.length === 1 && matchKeyword("in")) {
        lex();
        left = init;
        right = parseExpression();
        init = null
      }
    }else {
      state.allowIn = false;
      init = parseExpression();
      state.allowIn = true;
      if(matchKeyword("in")) {
        if(!isLeftHandSide(init)) {
          throwError({}, Messages.InvalidLHSInForIn)
        }
        lex();
        left = init;
        right = parseExpression();
        init = null
      }
    }
    if(typeof left === "undefined") {
      expect(";")
    }
  }
  if(typeof left === "undefined") {
    if(!match(";")) {
      test = parseExpression()
    }
    expect(";");
    if(!match(")")) {
      update = parseExpression()
    }
  }
  expect(")");
  oldInIteration = state.inIteration;
  state.inIteration = true;
  body = parseStatement();
  state.inIteration = oldInIteration;
  return typeof left === "undefined" ? delegate.createForStatement(init, test, update, body) : delegate.createForInStatement(left, right, body)
}
function parseContinueStatement() {
  var token, label = null;
  expectKeyword("continue");
  if(source[index] === ";") {
    lex();
    if(!state.inIteration) {
      throwError({}, Messages.IllegalContinue)
    }
    return delegate.createContinueStatement(null)
  }
  if(peekLineTerminator()) {
    if(!state.inIteration) {
      throwError({}, Messages.IllegalContinue)
    }
    return delegate.createContinueStatement(null)
  }
  token = lookahead();
  if(token.type === Token.Identifier) {
    label = parseVariableIdentifier();
    if(!Object.prototype.hasOwnProperty.call(state.labelSet, label.name)) {
      throwError({}, Messages.UnknownLabel, label.name)
    }
  }
  consumeSemicolon();
  if(label === null && !state.inIteration) {
    throwError({}, Messages.IllegalContinue)
  }
  return delegate.createContinueStatement(label)
}
function parseBreakStatement() {
  var token, label = null;
  expectKeyword("break");
  if(source[index] === ";") {
    lex();
    if(!(state.inIteration || state.inSwitch)) {
      throwError({}, Messages.IllegalBreak)
    }
    return delegate.createBreakStatement(null)
  }
  if(peekLineTerminator()) {
    if(!(state.inIteration || state.inSwitch)) {
      throwError({}, Messages.IllegalBreak)
    }
    return delegate.createBreakStatement(null)
  }
  token = lookahead();
  if(token.type === Token.Identifier) {
    label = parseVariableIdentifier();
    if(!Object.prototype.hasOwnProperty.call(state.labelSet, label.name)) {
      throwError({}, Messages.UnknownLabel, label.name)
    }
  }
  consumeSemicolon();
  if(label === null && !(state.inIteration || state.inSwitch)) {
    throwError({}, Messages.IllegalBreak)
  }
  return delegate.createBreakStatement(label)
}
function parseReturnStatement() {
  var token, argument = null;
  expectKeyword("return");
  if(!state.inFunctionBody) {
    throwErrorTolerant({}, Messages.IllegalReturn)
  }
  if(source[index] === " ") {
    if(isIdentifierStart(source[index + 1])) {
      argument = parseExpression();
      consumeSemicolon();
      return delegate.createReturnStatement(argument)
    }
  }
  if(peekLineTerminator()) {
    return delegate.createReturnStatement(null)
  }
  if(!match(";")) {
    token = lookahead();
    if(!match("}") && token.type !== Token.EOF) {
      argument = parseExpression()
    }
  }
  consumeSemicolon();
  return delegate.createReturnStatement(argument)
}
function parseWithStatement() {
  var object, body;
  if(strict) {
    throwErrorTolerant({}, Messages.StrictModeWith)
  }
  expectKeyword("with");
  expect("(");
  object = parseExpression();
  expect(")");
  body = parseStatement();
  return delegate.createWithStatement(object, body)
}
function parseSwitchCase() {
  var test, consequent = [], statement;
  if(matchKeyword("default")) {
    lex();
    test = null
  }else {
    expectKeyword("case");
    test = parseExpression()
  }
  expect(":");
  while(index < length) {
    if(match("}") || matchKeyword("default") || matchKeyword("case")) {
      break
    }
    statement = parseStatement();
    if(typeof statement === "undefined") {
      break
    }
    consequent.push(statement)
  }
  return delegate.createSwitchCase(test, consequent)
}
function parseSwitchStatement() {
  var discriminant, cases, clause, oldInSwitch, defaultFound;
  expectKeyword("switch");
  expect("(");
  discriminant = parseExpression();
  expect(")");
  expect("{");
  if(match("}")) {
    lex();
    return delegate.createSwitchStatement(discriminant)
  }
  cases = [];
  oldInSwitch = state.inSwitch;
  state.inSwitch = true;
  defaultFound = false;
  while(index < length) {
    if(match("}")) {
      break
    }
    clause = parseSwitchCase();
    if(clause.test === null) {
      if(defaultFound) {
        throwError({}, Messages.MultipleDefaultsInSwitch)
      }
      defaultFound = true
    }
    cases.push(clause)
  }
  state.inSwitch = oldInSwitch;
  expect("}");
  return delegate.createSwitchStatement(discriminant, cases)
}
function parseThrowStatement() {
  var argument;
  expectKeyword("throw");
  if(peekLineTerminator()) {
    throwError({}, Messages.NewlineAfterThrow)
  }
  argument = parseExpression();
  consumeSemicolon();
  return delegate.createThrowStatement(argument)
}
function parseCatchClause() {
  var param, body;
  expectKeyword("catch");
  expect("(");
  if(!match(")")) {
    param = parseExpression();
    if(strict && param.type === Syntax.Identifier && isRestrictedWord(param.name)) {
      throwErrorTolerant({}, Messages.StrictCatchVariable)
    }
  }
  expect(")");
  body = parseBlock();
  return delegate.createCatchClause(param, body)
}
function parseTryStatement() {
  var block, handlers = [], finalizer = null;
  expectKeyword("try");
  block = parseBlock();
  if(matchKeyword("catch")) {
    handlers.push(parseCatchClause())
  }
  if(matchKeyword("finally")) {
    lex();
    finalizer = parseBlock()
  }
  if(handlers.length === 0 && !finalizer) {
    throwError({}, Messages.NoCatchOrFinally)
  }
  return delegate.createTryStatement(block, [], handlers, finalizer)
}
function parseDebuggerStatement() {
  expectKeyword("debugger");
  consumeSemicolon();
  return delegate.createDebuggerStatement()
}
function parseStatement() {
  var token = lookahead(), expr, labeledBody;
  if(token.type === Token.EOF) {
    throwUnexpected(token)
  }
  if(token.type === Token.Punctuator) {
    switch(token.value) {
      case ";":
        return parseEmptyStatement();
      case "{":
        return parseBlock();
      case "(":
        return parseExpressionStatement();
      default:
        break
    }
  }
  if(token.type === Token.Keyword) {
    switch(token.value) {
      case "break":
        return parseBreakStatement();
      case "continue":
        return parseContinueStatement();
      case "debugger":
        return parseDebuggerStatement();
      case "do":
        return parseDoWhileStatement();
      case "for":
        return parseForStatement();
      case "function":
        return parseFunctionDeclaration();
      case "if":
        return parseIfStatement();
      case "return":
        return parseReturnStatement();
      case "switch":
        return parseSwitchStatement();
      case "throw":
        return parseThrowStatement();
      case "try":
        return parseTryStatement();
      case "var":
        return parseVariableStatement();
      case "while":
        return parseWhileStatement();
      case "with":
        return parseWithStatement();
      default:
        break
    }
  }
  expr = parseExpression();
  if(expr.type === Syntax.Identifier && match(":")) {
    lex();
    if(Object.prototype.hasOwnProperty.call(state.labelSet, expr.name)) {
      throwError({}, Messages.Redeclaration, "Label", expr.name)
    }
    state.labelSet[expr.name] = true;
    labeledBody = parseStatement();
    delete state.labelSet[expr.name];
    return delegate.createLabeledStatement(expr, labeledBody)
  }
  consumeSemicolon();
  return delegate.createExpressionStatement(expr)
}
function parseFunctionSourceElements() {
  var sourceElement, sourceElements = [], token, directive, firstRestricted, oldLabelSet, oldInIteration, oldInSwitch, oldInFunctionBody;
  expect("{");
  while(index < length) {
    token = lookahead();
    if(token.type !== Token.StringLiteral) {
      break
    }
    sourceElement = parseSourceElement();
    sourceElements.push(sourceElement);
    if(sourceElement.expression.type !== Syntax.Literal) {
      break
    }
    directive = sliceSource(token.range[0] + 1, token.range[1] - 1);
    if(directive === "use strict") {
      strict = true;
      if(firstRestricted) {
        throwErrorTolerant(firstRestricted, Messages.StrictOctalLiteral)
      }
    }else {
      if(!firstRestricted && token.octal) {
        firstRestricted = token
      }
    }
  }
  oldLabelSet = state.labelSet;
  oldInIteration = state.inIteration;
  oldInSwitch = state.inSwitch;
  oldInFunctionBody = state.inFunctionBody;
  state.labelSet = {};
  state.inIteration = false;
  state.inSwitch = false;
  state.inFunctionBody = true;
  while(index < length) {
    if(match("}")) {
      break
    }
    sourceElement = parseSourceElement();
    if(typeof sourceElement === "undefined") {
      break
    }
    sourceElements.push(sourceElement)
  }
  expect("}");
  state.labelSet = oldLabelSet;
  state.inIteration = oldInIteration;
  state.inSwitch = oldInSwitch;
  state.inFunctionBody = oldInFunctionBody;
  return delegate.createBlockStatement(sourceElements)
}
function parseFunctionDeclaration() {
  var id, param, params = [], body, token, stricted, firstRestricted, message, previousStrict, paramSet;
  expectKeyword("function");
  token = lookahead();
  id = parseVariableIdentifier();
  if(strict) {
    if(isRestrictedWord(token.value)) {
      throwErrorTolerant(token, Messages.StrictFunctionName)
    }
  }else {
    if(isRestrictedWord(token.value)) {
      firstRestricted = token;
      message = Messages.StrictFunctionName
    }else {
      if(isStrictModeReservedWord(token.value)) {
        firstRestricted = token;
        message = Messages.StrictReservedWord
      }
    }
  }
  expect("(");
  if(!match(")")) {
    paramSet = {};
    while(index < length) {
      token = lookahead();
      param = parseVariableIdentifier();
      if(strict) {
        if(isRestrictedWord(token.value)) {
          stricted = token;
          message = Messages.StrictParamName
        }
        if(Object.prototype.hasOwnProperty.call(paramSet, token.value)) {
          stricted = token;
          message = Messages.StrictParamDupe
        }
      }else {
        if(!firstRestricted) {
          if(isRestrictedWord(token.value)) {
            firstRestricted = token;
            message = Messages.StrictParamName
          }else {
            if(isStrictModeReservedWord(token.value)) {
              firstRestricted = token;
              message = Messages.StrictReservedWord
            }else {
              if(Object.prototype.hasOwnProperty.call(paramSet, token.value)) {
                firstRestricted = token;
                message = Messages.StrictParamDupe
              }
            }
          }
        }
      }
      params.push(param);
      paramSet[param.name] = true;
      if(match(")")) {
        break
      }
      expect(",")
    }
  }
  expect(")");
  previousStrict = strict;
  body = parseFunctionSourceElements();
  if(strict && firstRestricted) {
    throwError(firstRestricted, message)
  }
  if(strict && stricted) {
    throwErrorTolerant(stricted, message)
  }
  strict = previousStrict;
  return delegate.createFunctionDeclaration(id, params, [], body)
}
function parseFunctionExpression() {
  var token, id = null, stricted, firstRestricted, message, param, params = [], body, previousStrict, paramSet;
  expectKeyword("function");
  if(!match("(")) {
    token = lookahead();
    id = parseVariableIdentifier();
    if(strict) {
      if(isRestrictedWord(token.value)) {
        throwErrorTolerant(token, Messages.StrictFunctionName)
      }
    }else {
      if(isRestrictedWord(token.value)) {
        firstRestricted = token;
        message = Messages.StrictFunctionName
      }else {
        if(isStrictModeReservedWord(token.value)) {
          firstRestricted = token;
          message = Messages.StrictReservedWord
        }
      }
    }
  }
  expect("(");
  if(!match(")")) {
    paramSet = {};
    while(index < length) {
      token = lookahead();
      param = parseVariableIdentifier();
      if(strict) {
        if(isRestrictedWord(token.value)) {
          stricted = token;
          message = Messages.StrictParamName
        }
        if(Object.prototype.hasOwnProperty.call(paramSet, token.value)) {
          stricted = token;
          message = Messages.StrictParamDupe
        }
      }else {
        if(!firstRestricted) {
          if(isRestrictedWord(token.value)) {
            firstRestricted = token;
            message = Messages.StrictParamName
          }else {
            if(isStrictModeReservedWord(token.value)) {
              firstRestricted = token;
              message = Messages.StrictReservedWord
            }else {
              if(Object.prototype.hasOwnProperty.call(paramSet, token.value)) {
                firstRestricted = token;
                message = Messages.StrictParamDupe
              }
            }
          }
        }
      }
      params.push(param);
      paramSet[param.name] = true;
      if(match(")")) {
        break
      }
      expect(",")
    }
  }
  expect(")");
  previousStrict = strict;
  body = parseFunctionSourceElements();
  if(strict && firstRestricted) {
    throwError(firstRestricted, message)
  }
  if(strict && stricted) {
    throwErrorTolerant(stricted, message)
  }
  strict = previousStrict;
  return delegate.createFunctionExpression(id, params, [], body)
}
function parseSourceElement() {
  var token = lookahead();
  if(token.type === Token.Keyword) {
    switch(token.value) {
      case "const":
      ;
      case "let":
        return parseConstLetDeclaration(token.value);
      case "function":
        return parseFunctionDeclaration();
      default:
        return parseStatement()
    }
  }
  if(token.type !== Token.EOF) {
    return parseStatement()
  }
}
function parseSourceElements() {
  var sourceElement, sourceElements = [], token, directive, firstRestricted;
  while(index < length) {
    token = lookahead();
    if(token.type !== Token.StringLiteral) {
      break
    }
    sourceElement = parseSourceElement();
    sourceElements.push(sourceElement);
    if(sourceElement.expression.type !== Syntax.Literal) {
      break
    }
    directive = sliceSource(token.range[0] + 1, token.range[1] - 1);
    if(directive === "use strict") {
      strict = true;
      if(firstRestricted) {
        throwErrorTolerant(firstRestricted, Messages.StrictOctalLiteral)
      }
    }else {
      if(!firstRestricted && token.octal) {
        firstRestricted = token
      }
    }
  }
  while(index < length) {
    sourceElement = parseSourceElement();
    if(typeof sourceElement === "undefined") {
      break
    }
    sourceElements.push(sourceElement)
  }
  return sourceElements
}
function parseProgram() {
  var body;
  strict = false;
  body = parseSourceElements();
  return delegate.createProgram(body)
}
function addComment(type, value, start, end, loc) {
  assert(typeof start === "number", "Comment must have valid position");
  if(extra.comments.length > 0) {
    if(extra.comments[extra.comments.length - 1].range[1] > start) {
      return
    }
  }
  extra.comments.push({type:type, value:value, range:[start, end], loc:loc})
}
function scanComment() {
  var comment, ch, loc, start, blockComment, lineComment;
  comment = "";
  blockComment = false;
  lineComment = false;
  while(index < length) {
    ch = source[index];
    if(lineComment) {
      ch = source[index++];
      if(isLineTerminator(ch)) {
        loc.end = {line:lineNumber, column:index - lineStart - 1};
        lineComment = false;
        addComment("Line", comment, start, index - 1, loc);
        if(ch === "\r" && source[index] === "\n") {
          ++index
        }
        ++lineNumber;
        lineStart = index;
        comment = ""
      }else {
        if(index >= length) {
          lineComment = false;
          comment += ch;
          loc.end = {line:lineNumber, column:length - lineStart};
          addComment("Line", comment, start, length, loc)
        }else {
          comment += ch
        }
      }
    }else {
      if(blockComment) {
        if(isLineTerminator(ch)) {
          if(ch === "\r" && source[index + 1] === "\n") {
            ++index;
            comment += "\r\n"
          }else {
            comment += ch
          }
          ++lineNumber;
          ++index;
          lineStart = index;
          if(index >= length) {
            throwError({}, Messages.UnexpectedToken, "ILLEGAL")
          }
        }else {
          ch = source[index++];
          if(index >= length) {
            throwError({}, Messages.UnexpectedToken, "ILLEGAL")
          }
          comment += ch;
          if(ch === "*") {
            ch = source[index];
            if(ch === "/") {
              comment = comment.substr(0, comment.length - 1);
              blockComment = false;
              ++index;
              loc.end = {line:lineNumber, column:index - lineStart};
              addComment("Block", comment, start, index, loc);
              comment = ""
            }
          }
        }
      }else {
        if(ch === "/") {
          ch = source[index + 1];
          if(ch === "/") {
            loc = {start:{line:lineNumber, column:index - lineStart}};
            start = index;
            index += 2;
            lineComment = true;
            if(index >= length) {
              loc.end = {line:lineNumber, column:index - lineStart};
              lineComment = false;
              addComment("Line", comment, start, index, loc)
            }
          }else {
            if(ch === "*") {
              start = index;
              index += 2;
              blockComment = true;
              loc = {start:{line:lineNumber, column:index - lineStart - 2}};
              if(index >= length) {
                throwError({}, Messages.UnexpectedToken, "ILLEGAL")
              }
            }else {
              break
            }
          }
        }else {
          if(isWhiteSpace(ch)) {
            ++index
          }else {
            if(isLineTerminator(ch)) {
              ++index;
              if(ch === "\r" && source[index] === "\n") {
                ++index
              }
              ++lineNumber;
              lineStart = index
            }else {
              break
            }
          }
        }
      }
    }
  }
}
function filterCommentLocation() {
  var i, entry, comment, comments = [];
  for(i = 0;i < extra.comments.length;++i) {
    entry = extra.comments[i];
    comment = {type:entry.type, value:entry.value};
    if(extra.range) {
      comment.range = entry.range
    }
    if(extra.loc) {
      comment.loc = entry.loc
    }
    comments.push(comment)
  }
  extra.comments = comments
}
function collectToken() {
  var start, loc, token, range, value;
  skipComment();
  start = index;
  loc = {start:{line:lineNumber, column:index - lineStart}};
  token = extra.advance();
  loc.end = {line:lineNumber, column:index - lineStart};
  if(token.type !== Token.EOF) {
    range = [token.range[0], token.range[1]];
    value = sliceSource(token.range[0], token.range[1]);
    extra.tokens.push({type:TokenName[token.type], value:value, range:range, loc:loc})
  }
  return token
}
function collectRegex() {
  var pos, loc, regex, token;
  skipComment();
  pos = index;
  loc = {start:{line:lineNumber, column:index - lineStart}};
  regex = extra.scanRegExp();
  loc.end = {line:lineNumber, column:index - lineStart};
  if(extra.tokens.length > 0) {
    token = extra.tokens[extra.tokens.length - 1];
    if(token.range[0] === pos && token.type === "Punctuator") {
      if(token.value === "/" || token.value === "/=") {
        extra.tokens.pop()
      }
    }
  }
  extra.tokens.push({type:"RegularExpression", value:regex.literal, range:[pos, index], loc:loc});
  return regex
}
function filterTokenLocation() {
  var i, entry, token, tokens = [];
  for(i = 0;i < extra.tokens.length;++i) {
    entry = extra.tokens[i];
    token = {type:entry.type, value:entry.value};
    if(extra.range) {
      token.range = entry.range
    }
    if(extra.loc) {
      token.loc = entry.loc
    }
    tokens.push(token)
  }
  extra.tokens = tokens
}
function createLocationMarker() {
  var marker = {};
  marker.range = [index, index];
  marker.loc = {start:{line:lineNumber, column:index - lineStart}, end:{line:lineNumber, column:index - lineStart}};
  marker.end = function() {
    marker.range[1] = index;
    marker.loc.end.line = lineNumber;
    marker.loc.end.column = index - lineStart
  };
  marker.applyGroup = function(node) {
    if(extra.range) {
      node.groupRange = [marker.range[0], marker.range[1]]
    }
    if(extra.loc) {
      node.groupLoc = {start:{line:marker.loc.start.line, column:marker.loc.start.column}, end:{line:marker.loc.end.line, column:marker.loc.end.column}}
    }
  };
  marker.apply = function(node) {
    if(extra.range) {
      node.range = [marker.range[0], marker.range[1]]
    }
    if(extra.loc) {
      node.loc = {start:{line:marker.loc.start.line, column:marker.loc.start.column}, end:{line:marker.loc.end.line, column:marker.loc.end.column}}
    }
  };
  return marker
}
function trackGroupExpression() {
  var marker, expr;
  skipComment();
  marker = createLocationMarker();
  expect("(");
  expr = parseExpression();
  expect(")");
  marker.end();
  marker.applyGroup(expr);
  return expr
}
function trackLeftHandSideExpression() {
  var marker, expr, property;
  skipComment();
  marker = createLocationMarker();
  expr = matchKeyword("new") ? parseNewExpression() : parsePrimaryExpression();
  while(match(".") || match("[")) {
    if(match("[")) {
      property = parseComputedMember();
      expr = delegate.createMemberExpression("[", expr, property);
      marker.end();
      marker.apply(expr)
    }else {
      property = parseNonComputedMember();
      expr = delegate.createMemberExpression(".", expr, property);
      marker.end();
      marker.apply(expr)
    }
  }
  return expr
}
function trackLeftHandSideExpressionAllowCall() {
  var marker, expr, args, property;
  skipComment();
  marker = createLocationMarker();
  expr = matchKeyword("new") ? parseNewExpression() : parsePrimaryExpression();
  while(match(".") || match("[") || match("(")) {
    if(match("(")) {
      args = parseArguments();
      expr = delegate.createCallExpression(expr, args);
      marker.end();
      marker.apply(expr)
    }else {
      if(match("[")) {
        property = parseComputedMember();
        expr = delegate.createMemberExpression("[", expr, property);
        marker.end();
        marker.apply(expr)
      }else {
        property = parseNonComputedMember();
        expr = delegate.createMemberExpression(".", expr, property);
        marker.end();
        marker.apply(expr)
      }
    }
  }
  return expr
}
function filterGroup(node) {
  var n, i, entry;
  n = Object.prototype.toString.apply(node) === "[object Array]" ? [] : {};
  for(i in node) {
    if(node.hasOwnProperty(i) && i !== "groupRange" && i !== "groupLoc") {
      entry = node[i];
      if(entry === null || typeof entry !== "object" || entry instanceof RegExp) {
        n[i] = entry
      }else {
        n[i] = filterGroup(entry)
      }
    }
  }
  return n
}
function wrapTrackingFunction(range, loc) {
  return function(parseFunction) {
    function isBinary(node) {
      return node.type === Syntax.LogicalExpression || node.type === Syntax.BinaryExpression
    }
    function visit(node) {
      var start, end;
      if(isBinary(node.left)) {
        visit(node.left)
      }
      if(isBinary(node.right)) {
        visit(node.right)
      }
      if(range) {
        if(node.left.groupRange || node.right.groupRange) {
          start = node.left.groupRange ? node.left.groupRange[0] : node.left.range[0];
          end = node.right.groupRange ? node.right.groupRange[1] : node.right.range[1];
          node.range = [start, end]
        }else {
          if(typeof node.range === "undefined") {
            start = node.left.range[0];
            end = node.right.range[1];
            node.range = [start, end]
          }
        }
      }
      if(loc) {
        if(node.left.groupLoc || node.right.groupLoc) {
          start = node.left.groupLoc ? node.left.groupLoc.start : node.left.loc.start;
          end = node.right.groupLoc ? node.right.groupLoc.end : node.right.loc.end;
          node.loc = {start:start, end:end}
        }else {
          if(typeof node.loc === "undefined") {
            node.loc = {start:node.left.loc.start, end:node.right.loc.end}
          }
        }
      }
    }
    return function() {
      var marker, node;
      skipComment();
      marker = createLocationMarker();
      node = parseFunction.apply(null, arguments);
      marker.end();
      if(range && typeof node.range === "undefined") {
        marker.apply(node)
      }
      if(loc && typeof node.loc === "undefined") {
        marker.apply(node)
      }
      if(isBinary(node)) {
        visit(node)
      }
      return node
    }
  }
}
function patch() {
  var wrapTracking;
  if(extra.comments) {
    extra.skipComment = skipComment;
    skipComment = scanComment
  }
  if(extra.range || extra.loc) {
    extra.parseGroupExpression = parseGroupExpression;
    extra.parseLeftHandSideExpression = parseLeftHandSideExpression;
    extra.parseLeftHandSideExpressionAllowCall = parseLeftHandSideExpressionAllowCall;
    parseGroupExpression = trackGroupExpression;
    parseLeftHandSideExpression = trackLeftHandSideExpression;
    parseLeftHandSideExpressionAllowCall = trackLeftHandSideExpressionAllowCall;
    wrapTracking = wrapTrackingFunction(extra.range, extra.loc);
    extra.parseAssignmentExpression = parseAssignmentExpression;
    extra.parseBinaryExpression = parseBinaryExpression;
    extra.parseBlock = parseBlock;
    extra.parseFunctionSourceElements = parseFunctionSourceElements;
    extra.parseCatchClause = parseCatchClause;
    extra.parseComputedMember = parseComputedMember;
    extra.parseConditionalExpression = parseConditionalExpression;
    extra.parseConstLetDeclaration = parseConstLetDeclaration;
    extra.parseExpression = parseExpression;
    extra.parseForVariableDeclaration = parseForVariableDeclaration;
    extra.parseFunctionDeclaration = parseFunctionDeclaration;
    extra.parseFunctionExpression = parseFunctionExpression;
    extra.parseNewExpression = parseNewExpression;
    extra.parseNonComputedProperty = parseNonComputedProperty;
    extra.parseObjectProperty = parseObjectProperty;
    extra.parseObjectPropertyKey = parseObjectPropertyKey;
    extra.parsePostfixExpression = parsePostfixExpression;
    extra.parsePrimaryExpression = parsePrimaryExpression;
    extra.parseProgram = parseProgram;
    extra.parsePropertyFunction = parsePropertyFunction;
    extra.parseStatement = parseStatement;
    extra.parseSwitchCase = parseSwitchCase;
    extra.parseUnaryExpression = parseUnaryExpression;
    extra.parseVariableDeclaration = parseVariableDeclaration;
    extra.parseVariableIdentifier = parseVariableIdentifier;
    parseAssignmentExpression = wrapTracking(extra.parseAssignmentExpression);
    parseBinaryExpression = wrapTracking(extra.parseBinaryExpression);
    parseBlock = wrapTracking(extra.parseBlock);
    parseFunctionSourceElements = wrapTracking(extra.parseFunctionSourceElements);
    parseCatchClause = wrapTracking(extra.parseCatchClause);
    parseComputedMember = wrapTracking(extra.parseComputedMember);
    parseConditionalExpression = wrapTracking(extra.parseConditionalExpression);
    parseConstLetDeclaration = wrapTracking(extra.parseConstLetDeclaration);
    parseExpression = wrapTracking(extra.parseExpression);
    parseForVariableDeclaration = wrapTracking(extra.parseForVariableDeclaration);
    parseFunctionDeclaration = wrapTracking(extra.parseFunctionDeclaration);
    parseFunctionExpression = wrapTracking(extra.parseFunctionExpression);
    parseLeftHandSideExpression = wrapTracking(parseLeftHandSideExpression);
    parseNewExpression = wrapTracking(extra.parseNewExpression);
    parseNonComputedProperty = wrapTracking(extra.parseNonComputedProperty);
    parseObjectProperty = wrapTracking(extra.parseObjectProperty);
    parseObjectPropertyKey = wrapTracking(extra.parseObjectPropertyKey);
    parsePostfixExpression = wrapTracking(extra.parsePostfixExpression);
    parsePrimaryExpression = wrapTracking(extra.parsePrimaryExpression);
    parseProgram = wrapTracking(extra.parseProgram);
    parsePropertyFunction = wrapTracking(extra.parsePropertyFunction);
    parseStatement = wrapTracking(extra.parseStatement);
    parseSwitchCase = wrapTracking(extra.parseSwitchCase);
    parseUnaryExpression = wrapTracking(extra.parseUnaryExpression);
    parseVariableDeclaration = wrapTracking(extra.parseVariableDeclaration);
    parseVariableIdentifier = wrapTracking(extra.parseVariableIdentifier)
  }
  if(typeof extra.tokens !== "undefined") {
    extra.advance = advance;
    extra.scanRegExp = scanRegExp;
    advance = collectToken;
    scanRegExp = collectRegex
  }
}
function unpatch() {
  if(typeof extra.skipComment === "function") {
    skipComment = extra.skipComment
  }
  if(extra.range || extra.loc) {
    parseAssignmentExpression = extra.parseAssignmentExpression;
    parseBinaryExpression = extra.parseBinaryExpression;
    parseBlock = extra.parseBlock;
    parseFunctionSourceElements = extra.parseFunctionSourceElements;
    parseCatchClause = extra.parseCatchClause;
    parseComputedMember = extra.parseComputedMember;
    parseConditionalExpression = extra.parseConditionalExpression;
    parseConstLetDeclaration = extra.parseConstLetDeclaration;
    parseExpression = extra.parseExpression;
    parseForVariableDeclaration = extra.parseForVariableDeclaration;
    parseFunctionDeclaration = extra.parseFunctionDeclaration;
    parseFunctionExpression = extra.parseFunctionExpression;
    parseGroupExpression = extra.parseGroupExpression;
    parseLeftHandSideExpression = extra.parseLeftHandSideExpression;
    parseLeftHandSideExpressionAllowCall = extra.parseLeftHandSideExpressionAllowCall;
    parseNewExpression = extra.parseNewExpression;
    parseNonComputedProperty = extra.parseNonComputedProperty;
    parseObjectProperty = extra.parseObjectProperty;
    parseObjectPropertyKey = extra.parseObjectPropertyKey;
    parsePrimaryExpression = extra.parsePrimaryExpression;
    parsePostfixExpression = extra.parsePostfixExpression;
    parseProgram = extra.parseProgram;
    parsePropertyFunction = extra.parsePropertyFunction;
    parseStatement = extra.parseStatement;
    parseSwitchCase = extra.parseSwitchCase;
    parseUnaryExpression = extra.parseUnaryExpression;
    parseVariableDeclaration = extra.parseVariableDeclaration;
    parseVariableIdentifier = extra.parseVariableIdentifier
  }
  if(typeof extra.scanRegExp === "function") {
    advance = extra.advance;
    scanRegExp = extra.scanRegExp
  }
}
function stringToArray(str) {
  var length = str.length, result = [], i;
  for(i = 0;i < length;++i) {
    result[i] = str.charAt(i)
  }
  return result
}
function extend(object, properties) {
  var entry, result = {};
  for(entry in object) {
    if(object.hasOwnProperty(entry)) {
      result[entry] = object[entry]
    }
  }
  for(entry in properties) {
    if(properties.hasOwnProperty(entry)) {
      result[entry] = properties[entry]
    }
  }
  return result
}
function parse(code, options) {
  var program, toString;
  toString = String;
  if(typeof code !== "string" && !(code instanceof String)) {
    code = toString(code)
  }
  delegate = SyntaxTreeDelegate;
  source = code;
  index = 0;
  lineNumber = source.length > 0 ? 1 : 0;
  lineStart = 0;
  length = source.length;
  buffer = null;
  state = {allowIn:true, labelSet:{}, inFunctionBody:false, inIteration:false, inSwitch:false};
  extra = {};
  if(typeof options !== "undefined") {
    extra.range = typeof options.range === "boolean" && options.range;
    extra.loc = typeof options.loc === "boolean" && options.loc;
    if(typeof options.raw === "boolean" && options.raw) {
      delegate = extend(delegate, {"createLiteral":function(token) {
        return{type:Syntax.Literal, value:token.value, raw:sliceSource(token.range[0], token.range[1])}
      }})
    }
    if(typeof options.tokens === "boolean" && options.tokens) {
      extra.tokens = []
    }
    if(typeof options.comment === "boolean" && options.comment) {
      extra.comments = []
    }
    if(typeof options.tolerant === "boolean" && options.tolerant) {
      extra.errors = []
    }
  }
  if(length > 0) {
    if(typeof source[0] === "undefined") {
      if(code instanceof String) {
        source = code.valueOf()
      }
      if(typeof source[0] === "undefined") {
        source = stringToArray(code)
      }
    }
  }
  patch();
  try {
    program = parseProgram();
    if(typeof extra.comments !== "undefined") {
      filterCommentLocation();
      program.comments = extra.comments
    }
    if(typeof extra.tokens !== "undefined") {
      filterTokenLocation();
      program.tokens = extra.tokens
    }
    if(typeof extra.errors !== "undefined") {
      program.errors = extra.errors
    }
    if(extra.range || extra.loc) {
      program.body = filterGroup(program.body)
    }
  }catch(e) {
    throw e;
  }finally {
    unpatch();
    extra = {}
  }
  return program
}
esprima.version = "1.1.0-deeeeev";
esprima.parse = parse;
esprima.Syntax = function() {
  var name, types = {};
  if(typeof Object.create === "function") {
    types = Object.create(null)
  }
  for(name in Syntax) {
    if(Syntax.hasOwnProperty(name)) {
      types[name] = Syntax[name]
    }
  }
  if(typeof Object.freeze === "function") {
    Object.freeze(types)
  }
  return types
}();
goog.provide("jsrefact.predicates");
goog.require("cljs.core");
goog.require("clojure.set");
goog.require("cljs.core.logic");
goog.require("clojure.walk");
goog.require("jipdaast");
goog.require("lattice");
goog.require("jipda");
goog.require("esco");
goog.require("esp");
goog.require("clojure.set");
goog.require("clojure.walk");
goog.require("cljs.core.logic");
jsrefact.predicates.js_print = function js_print(arg) {
  return console.log(arg)
};
jsrefact.predicates.lprint = function lprint(_QMARK_val) {
  return function(a4268) {
    var _QMARK_val__$1 = cljs.core.logic._walk_STAR_.call(null, a4268, _QMARK_val);
    return function(a__2897__auto__) {
      return new cljs.core.logic.Inc(function() {
        return cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2885__auto__) {
          var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, null, jsrefact.predicates.js_print.call(null, _QMARK_val__$1));
          if(cljs.core.truth_(temp__3971__auto__)) {
            var b__2886__auto__ = temp__3971__auto__;
            return b__2886__auto__
          }else {
            return null
          }
        })
      })
    }.call(null, a4268)
  }
};
cljs.core._STAR_print_fn_STAR_ = jsrefact.predicates.js_print;
jsrefact.predicates.esprimaParser = esprima;
jsrefact.predicates.parsed = jsrefact.predicates.esprimaParser.parse("function add1(n){return n+1}; var i = 0; function inc(f, p){return f(p)}; inc(add1,i);", {loc:true});
jsrefact.predicates.progrm = cljs.core.atom.call(null, jsrefact.predicates.parsed.body);
jsrefact.predicates.escodegenGenerator = escodegen;
jsrefact.predicates.generated = jsrefact.predicates.escodegenGenerator.generate(jsrefact.predicates.parsed, {format:{compact:true}});
jsrefact.predicates.ast_property_value = function ast_property_value(ast, property) {
  return ast[property]
};
jsrefact.predicates.ast_property_set_value = function ast_property_set_value(ast, property, value) {
  ast[property] = value;
  return ast
};
jsrefact.predicates.ast_properties = function ast_properties(ast) {
  return cljs.core.seq.call(null, Object.keys(ast))
};
jsrefact.predicates.ast_kind = function ast_kind(ast) {
  return jsrefact.predicates.ast_property_value.call(null, ast, "type")
};
jsrefact.predicates.ast_QMARK_ = function ast_QMARK_(ast) {
  var and__3822__auto__ = cljs.core.instance_QMARK_.call(null, Object, ast);
  if(and__3822__auto__) {
    return cljs.core.not_EQ_.call(null, null, ast["type"])
  }else {
    return and__3822__auto__
  }
};
jsrefact.predicates.program = function program(_QMARK_node) {
  return function(a__2949__auto__) {
    return cljs.core.logic._bind.call(null, a__2949__auto__, cljs.core.logic.membero.call(null, _QMARK_node, cljs.core.seq.call(null, cljs.core.deref.call(null, jsrefact.predicates.progrm))))
  }
};
jsrefact.predicates.ast = function ast(_QMARK_kind, _QMARK_node) {
  return function(a__2897__auto__) {
    return new cljs.core.logic.Inc(function() {
      var _QMARK_root = cljs.core.logic.lvar.call(null, "\ufdd1'?root");
      return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, jsrefact.predicates.program.call(null, _QMARK_root)), function(a4271) {
        return new cljs.core.logic.Inc(function() {
          return cljs.core.logic._mplus.call(null, cljs.core.logic._bind.call(null, a4271, function(a__2885__auto__) {
            var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_root, _QMARK_node);
            if(cljs.core.truth_(temp__3971__auto__)) {
              var b__2886__auto__ = temp__3971__auto__;
              return b__2886__auto__
            }else {
              return null
            }
          }), new cljs.core.logic.Inc(function() {
            return cljs.core.logic._bind.call(null, a4271, jsrefact.predicates.child_PLUS_.call(null, _QMARK_root, _QMARK_node))
          }))
        })
      }), function(a4272) {
        var _QMARK_node__$1 = cljs.core.logic._walk_STAR_.call(null, a4272, _QMARK_node);
        return function(a__2897__auto____$1) {
          return new cljs.core.logic.Inc(function() {
            return cljs.core.logic._bind.call(null, a__2897__auto____$1, function(a__2885__auto__) {
              var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_kind, jsrefact.predicates.ast_kind.call(null, _QMARK_node__$1));
              if(cljs.core.truth_(temp__3971__auto__)) {
                var b__2886__auto__ = temp__3971__auto__;
                return b__2886__auto__
              }else {
                return null
              }
            })
          })
        }.call(null, a4272)
      })
    })
  }
};
jsrefact.predicates.ast_property = function ast_property(_QMARK_prop, _QMARK_node) {
  return function(a__2897__auto__) {
    return new cljs.core.logic.Inc(function() {
      var _QMARK_root = cljs.core.logic.lvar.call(null, "\ufdd1'?root");
      return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, jsrefact.predicates.program.call(null, _QMARK_root)), function(a4275) {
        return new cljs.core.logic.Inc(function() {
          return cljs.core.logic._mplus.call(null, cljs.core.logic._bind.call(null, a4275, function(a__2885__auto__) {
            var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_root, _QMARK_node);
            if(cljs.core.truth_(temp__3971__auto__)) {
              var b__2886__auto__ = temp__3971__auto__;
              return b__2886__auto__
            }else {
              return null
            }
          }), new cljs.core.logic.Inc(function() {
            return cljs.core.logic._bind.call(null, a4275, jsrefact.predicates.child_PLUS_.call(null, _QMARK_root, _QMARK_node))
          }))
        })
      }), function(a4276) {
        var _QMARK_node__$1 = cljs.core.logic._walk_STAR_.call(null, a4276, _QMARK_node);
        return function(a__2897__auto____$1) {
          return new cljs.core.logic.Inc(function() {
            return cljs.core.logic._bind.call(null, a__2897__auto____$1, cljs.core.logic.membero.call(null, _QMARK_prop, jsrefact.predicates.ast_properties.call(null, _QMARK_node__$1)))
          })
        }.call(null, a4276)
      })
    })
  }
};
jsrefact.predicates.ast_with_input = function ast_with_input(_QMARK_kind, _QMARK_nodeIn, _QMARK_nodeOut) {
  return function(a__2897__auto__) {
    return new cljs.core.logic.Inc(function() {
      var _QMARK_root = cljs.core.logic.lvar.call(null, "\ufdd1'?root");
      return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2885__auto__) {
        var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_root, _QMARK_nodeIn);
        if(cljs.core.truth_(temp__3971__auto__)) {
          var b__2886__auto__ = temp__3971__auto__;
          return b__2886__auto__
        }else {
          return null
        }
      }), function(a4279) {
        return new cljs.core.logic.Inc(function() {
          return cljs.core.logic._mplus.call(null, cljs.core.logic._bind.call(null, a4279, function(a__2885__auto__) {
            var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_root, _QMARK_nodeOut);
            if(cljs.core.truth_(temp__3971__auto__)) {
              var b__2886__auto__ = temp__3971__auto__;
              return b__2886__auto__
            }else {
              return null
            }
          }), new cljs.core.logic.Inc(function() {
            return cljs.core.logic._bind.call(null, a4279, jsrefact.predicates.child_PLUS_.call(null, _QMARK_root, _QMARK_nodeOut))
          }))
        })
      }), function(a4280) {
        var _QMARK_nodeOut__$1 = cljs.core.logic._walk_STAR_.call(null, a4280, _QMARK_nodeOut);
        return function(a__2897__auto____$1) {
          return new cljs.core.logic.Inc(function() {
            return cljs.core.logic._bind.call(null, a__2897__auto____$1, function(a__2885__auto__) {
              var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_kind, jsrefact.predicates.ast_kind.call(null, _QMARK_nodeOut__$1));
              if(cljs.core.truth_(temp__3971__auto__)) {
                var b__2886__auto__ = temp__3971__auto__;
                return b__2886__auto__
              }else {
                return null
              }
            })
          })
        }.call(null, a4280)
      })
    })
  }
};
jsrefact.predicates.has = function has(_QMARK_property, _QMARK_node, _QMARK_value) {
  return function(a__2897__auto__) {
    return new cljs.core.logic.Inc(function() {
      var _QMARK_kind = cljs.core.logic.lvar.call(null, "\ufdd1'?kind");
      var _QMARK_properties = cljs.core.logic.lvar.call(null, "\ufdd1'?properties");
      return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, function(a4283) {
        var _QMARK_node__$1 = cljs.core.logic._walk_STAR_.call(null, a4283, _QMARK_node);
        return function(a__2897__auto____$1) {
          return new cljs.core.logic.Inc(function() {
            return cljs.core.logic._bind.call(null, a__2897__auto____$1, function(a__2885__auto__) {
              var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_properties, jsrefact.predicates.ast_properties.call(null, _QMARK_node__$1));
              if(cljs.core.truth_(temp__3971__auto__)) {
                var b__2886__auto__ = temp__3971__auto__;
                return b__2886__auto__
              }else {
                return null
              }
            })
          })
        }.call(null, a4283)
      }), cljs.core.logic.membero.call(null, _QMARK_property, _QMARK_properties)), function(a4284) {
        var _QMARK_property__$1 = cljs.core.logic._walk_STAR_.call(null, a4284, _QMARK_property);
        var _QMARK_node__$1 = cljs.core.logic._walk_STAR_.call(null, a4284, _QMARK_node);
        return function(a__2897__auto____$1) {
          return new cljs.core.logic.Inc(function() {
            return cljs.core.logic._bind.call(null, a__2897__auto____$1, function(a__2885__auto__) {
              var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_value, jsrefact.predicates.ast_property_value.call(null, _QMARK_node__$1, _QMARK_property__$1));
              if(cljs.core.truth_(temp__3971__auto__)) {
                var b__2886__auto__ = temp__3971__auto__;
                return b__2886__auto__
              }else {
                return null
              }
            })
          })
        }.call(null, a4284)
      })
    })
  }
};
jsrefact.predicates.child = function child(_QMARK_prop, _QMARK_node, _QMARK_val) {
  return function(a__2897__auto__) {
    return new cljs.core.logic.Inc(function() {
      var _QMARK_foundvals = cljs.core.logic.lvar.call(null, "\ufdd1'?foundvals");
      return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, jsrefact.predicates.has.call(null, _QMARK_prop, _QMARK_node, _QMARK_foundvals)), function(a4287) {
        var _QMARK_foundvals__$1 = cljs.core.logic._walk_STAR_.call(null, a4287, _QMARK_foundvals);
        return function(a__2897__auto____$1) {
          return new cljs.core.logic.Inc(function() {
            return cljs.core.logic._bind.call(null, a__2897__auto____$1, function(a4288) {
              return new cljs.core.logic.Inc(function() {
                return cljs.core.logic._mplus.call(null, cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a4288, function(a__2885__auto__) {
                  var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, true, jsrefact.predicates.ast_QMARK_.call(null, _QMARK_foundvals__$1));
                  if(cljs.core.truth_(temp__3971__auto__)) {
                    var b__2886__auto__ = temp__3971__auto__;
                    return b__2886__auto__
                  }else {
                    return null
                  }
                }), function(a__2885__auto__) {
                  var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_val, _QMARK_foundvals__$1);
                  if(cljs.core.truth_(temp__3971__auto__)) {
                    var b__2886__auto__ = temp__3971__auto__;
                    return b__2886__auto__
                  }else {
                    return null
                  }
                }), new cljs.core.logic.Inc(function() {
                  return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a4288, function(a__2885__auto__) {
                    var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, true, cljs.core.instance_QMARK_.call(null, Array, _QMARK_foundvals__$1));
                    if(cljs.core.truth_(temp__3971__auto__)) {
                      var b__2886__auto__ = temp__3971__auto__;
                      return b__2886__auto__
                    }else {
                      return null
                    }
                  }), function(a__2897__auto____$2) {
                    return new cljs.core.logic.Inc(function() {
                      var _QMARK_s = cljs.core.logic.lvar.call(null, "\ufdd1'?s");
                      return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto____$2, function(a__2885__auto__) {
                        var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_s, cljs.core.seq.call(null, _QMARK_foundvals__$1));
                        if(cljs.core.truth_(temp__3971__auto__)) {
                          var b__2886__auto__ = temp__3971__auto__;
                          return b__2886__auto__
                        }else {
                          return null
                        }
                      }), cljs.core.logic.membero.call(null, _QMARK_val, _QMARK_s))
                    })
                  })
                }))
              })
            })
          })
        }.call(null, a4287)
      })
    })
  }
};
jsrefact.predicates.child_PLUS_ = function child_PLUS_(_QMARK_node, _QMARK_child) {
  return function(a__2897__auto__) {
    return new cljs.core.logic.Inc(function() {
      var _QMARK_prop = cljs.core.logic.lvar.call(null, "\ufdd1'?prop");
      var _QMARK_ch = cljs.core.logic.lvar.call(null, "\ufdd1'?ch");
      return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, jsrefact.predicates.child.call(null, _QMARK_prop, _QMARK_node, _QMARK_ch)), function(a4290) {
        return new cljs.core.logic.Inc(function() {
          return cljs.core.logic._mplus.call(null, cljs.core.logic._bind.call(null, a4290, function(a__2885__auto__) {
            var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_child, _QMARK_ch);
            if(cljs.core.truth_(temp__3971__auto__)) {
              var b__2886__auto__ = temp__3971__auto__;
              return b__2886__auto__
            }else {
              return null
            }
          }), new cljs.core.logic.Inc(function() {
            return cljs.core.logic._bind.call(null, a4290, child_PLUS_.call(null, _QMARK_ch, _QMARK_child))
          }))
        })
      })
    })
  }
};
jsrefact.predicates.thisexpression = function thisexpression(_QMARK_this) {
  return jsrefact.predicates.ast.call(null, "ThisExpression", _QMARK_this)
};
jsrefact.predicates.functiondeclaration = function functiondeclaration(_QMARK_funct) {
  return jsrefact.predicates.ast.call(null, "FunctionDeclaration", _QMARK_funct)
};
jsrefact.predicates.expressionstatement = function expressionstatement(_QMARK_exp) {
  return jsrefact.predicates.ast.call(null, "ExpressionStatement", _QMARK_exp)
};
jsrefact.predicates.ast_arrayexpression = function ast_arrayexpression(_QMARK_ast, _QMARK_arr) {
  return jsrefact.predicates.ast_with_input.call(null, "ArrayExpression", _QMARK_ast, _QMARK_arr)
};
jsrefact.predicates.ast_literal = function ast_literal(_QMARK_ast, _QMARK_lit) {
  return jsrefact.predicates.ast_with_input.call(null, "Literal", _QMARK_ast, _QMARK_lit)
};
jsrefact.predicates.ast_value = function ast_value(_QMARK_ast, _QMARK_value) {
  return function(a4292) {
    var _QMARK_ast__$1 = cljs.core.logic._walk_STAR_.call(null, a4292, _QMARK_ast);
    return function(a__2897__auto__) {
      return new cljs.core.logic.Inc(function() {
        return cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2885__auto__) {
          var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_value, _QMARK_ast__$1.value);
          if(cljs.core.truth_(temp__3971__auto__)) {
            var b__2886__auto__ = temp__3971__auto__;
            return b__2886__auto__
          }else {
            return null
          }
        })
      })
    }.call(null, a4292)
  }
};
jsrefact.predicates.ast_name = function ast_name(_QMARK_ast, _QMARK_name) {
  return function(a__2897__auto__) {
    return new cljs.core.logic.Inc(function() {
      var _QMARK_p = cljs.core.logic.lvar.call(null, "\ufdd1'?p");
      var _QMARK_n = cljs.core.logic.lvar.call(null, "\ufdd1'?n");
      return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, jsrefact.predicates.ast_property.call(null, "name", _QMARK_n)), function(a4294) {
        var _QMARK_n__$1 = cljs.core.logic._walk_STAR_.call(null, a4294, _QMARK_n);
        return function(a__2897__auto____$1) {
          return new cljs.core.logic.Inc(function() {
            return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto____$1, function(a__2885__auto__) {
              var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_name, jsrefact.predicates.ast_property_value.call(null, _QMARK_n__$1, "name"));
              if(cljs.core.truth_(temp__3971__auto__)) {
                var b__2886__auto__ = temp__3971__auto__;
                return b__2886__auto__
              }else {
                return null
              }
            }), function(a__2885__auto__) {
              var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_n__$1, _QMARK_ast);
              if(cljs.core.truth_(temp__3971__auto__)) {
                var b__2886__auto__ = temp__3971__auto__;
                return b__2886__auto__
              }else {
                return null
              }
            })
          })
        }.call(null, a4294)
      })
    })
  }
};
jsrefact.predicates.function_name = function function_name(_QMARK_func, _QMARK_funcname) {
  return jsrefact.predicates.ast_name.call(null, _QMARK_func.id, _QMARK_funcname)
};
jsrefact.predicates.invocationcall = function invocationcall(_QMARK_callee) {
  return function(a__2897__auto__) {
    return new cljs.core.logic.Inc(function() {
      var _QMARK_expressionstatement = cljs.core.logic.lvar.call(null, "\ufdd1'?expressionstatement");
      var _QMARK_expression = cljs.core.logic.lvar.call(null, "\ufdd1'?expression");
      return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, jsrefact.predicates.expressionstatement.call(null, _QMARK_expressionstatement)), jsrefact.predicates.has.call(null, "expression", _QMARK_expressionstatement, _QMARK_expression)), jsrefact.predicates.has.call(null, "callee", _QMARK_expression, _QMARK_callee))
    })
  }
};
jsrefact.predicates.function_invocation = function function_invocation(_QMARK_func, _QMARK_invocation) {
  return function(a__2897__auto__) {
    return new cljs.core.logic.Inc(function() {
      var _QMARK_funcName = cljs.core.logic.lvar.call(null, "\ufdd1'?funcName");
      var _QMARK_invoc = cljs.core.logic.lvar.call(null, "\ufdd1'?invoc");
      var _QMARK_invocName = cljs.core.logic.lvar.call(null, "\ufdd1'?invocName");
      return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, jsrefact.predicates.function_name.call(null, _QMARK_func, _QMARK_funcName)), jsrefact.predicates.invocationcall.call(null, _QMARK_invoc)), jsrefact.predicates.ast_name.call(null, _QMARK_invoc, _QMARK_invocName)), function(a__2885__auto__) {
        var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_invocName, _QMARK_funcName);
        if(cljs.core.truth_(temp__3971__auto__)) {
          var b__2886__auto__ = temp__3971__auto__;
          return b__2886__auto__
        }else {
          return null
        }
      }), function(a__2885__auto__) {
        var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_invocation, _QMARK_invoc);
        if(cljs.core.truth_(temp__3971__auto__)) {
          var b__2886__auto__ = temp__3971__auto__;
          return b__2886__auto__
        }else {
          return null
        }
      })
    })
  }
};
jsrefact.predicates.ast_location = function ast_location(_QMARK_ast, _QMARK_startLine, _QMARK_endLine, _QMARK_startCol, _QMARK_endCol) {
  return function(a4297) {
    var _QMARK_ast__$1 = cljs.core.logic._walk_STAR_.call(null, a4297, _QMARK_ast);
    return function(a__2897__auto__) {
      return new cljs.core.logic.Inc(function() {
        return cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2897__auto____$1) {
          return new cljs.core.logic.Inc(function() {
            var _QMARK_loc = cljs.core.logic.lvar.call(null, "\ufdd1'?loc");
            return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto____$1, function(a__2885__auto__) {
              var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_loc, _QMARK_ast__$1.loc);
              if(cljs.core.truth_(temp__3971__auto__)) {
                var b__2886__auto__ = temp__3971__auto__;
                return b__2886__auto__
              }else {
                return null
              }
            }), function(a4298) {
              var _QMARK_loc__$1 = cljs.core.logic._walk_STAR_.call(null, a4298, _QMARK_loc);
              return function(a__2897__auto____$2) {
                return new cljs.core.logic.Inc(function() {
                  return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto____$2, function(a__2885__auto__) {
                    var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_startLine, _QMARK_loc__$1.start.line);
                    if(cljs.core.truth_(temp__3971__auto__)) {
                      var b__2886__auto__ = temp__3971__auto__;
                      return b__2886__auto__
                    }else {
                      return null
                    }
                  }), function(a__2885__auto__) {
                    var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_endLine, _QMARK_loc__$1.end.line);
                    if(cljs.core.truth_(temp__3971__auto__)) {
                      var b__2886__auto__ = temp__3971__auto__;
                      return b__2886__auto__
                    }else {
                      return null
                    }
                  }), function(a__2885__auto__) {
                    var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_startCol, _QMARK_loc__$1.start.column);
                    if(cljs.core.truth_(temp__3971__auto__)) {
                      var b__2886__auto__ = temp__3971__auto__;
                      return b__2886__auto__
                    }else {
                      return null
                    }
                  }), function(a__2885__auto__) {
                    var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_endCol, _QMARK_loc__$1.end.column);
                    if(cljs.core.truth_(temp__3971__auto__)) {
                      var b__2886__auto__ = temp__3971__auto__;
                      return b__2886__auto__
                    }else {
                      return null
                    }
                  })
                })
              }.call(null, a4298)
            })
          })
        })
      })
    }.call(null, a4297)
  }
};
jsrefact.predicates.ast_length = function ast_length(_QMARK_ast, _QMARK_length) {
  return function(a__2897__auto__) {
    return new cljs.core.logic.Inc(function() {
      var _QMARK_s = cljs.core.logic.lvar.call(null, "\ufdd1'?s");
      var _QMARK_e = cljs.core.logic.lvar.call(null, "\ufdd1'?e");
      var _QMARK_cs = cljs.core.logic.lvar.call(null, "\ufdd1'?cs");
      var _QMARK_ce = cljs.core.logic.lvar.call(null, "\ufdd1'?ce");
      return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, jsrefact.predicates.ast_location.call(null, _QMARK_ast, _QMARK_s, _QMARK_e, _QMARK_cs, _QMARK_ce)), function(a4300) {
        var _QMARK_e__$1 = cljs.core.logic._walk_STAR_.call(null, a4300, _QMARK_e);
        var _QMARK_s__$1 = cljs.core.logic._walk_STAR_.call(null, a4300, _QMARK_s);
        return function(a__2897__auto____$1) {
          return new cljs.core.logic.Inc(function() {
            return cljs.core.logic._bind.call(null, a__2897__auto____$1, function(a__2885__auto__) {
              var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_length, _QMARK_e__$1 - _QMARK_s__$1 - -1);
              if(cljs.core.truth_(temp__3971__auto__)) {
                var b__2886__auto__ = temp__3971__auto__;
                return b__2886__auto__
              }else {
                return null
              }
            })
          })
        }.call(null, a4300)
      })
    })
  }
};
jsrefact.predicates.functionlength = function functionlength(_QMARK_length) {
  return function(a__2897__auto__) {
    return new cljs.core.logic.Inc(function() {
      var _QMARK_f = cljs.core.logic.lvar.call(null, "\ufdd1'?f");
      return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, jsrefact.predicates.functiondeclaration.call(null, _QMARK_f)), jsrefact.predicates.ast_length.call(null, _QMARK_f, _QMARK_length))
    })
  }
};
jsrefact.predicates.average_function_lengths = function average_function_lengths() {
  var lengths = cljs.core.doall.call(null, function() {
    var xs__2905__auto__ = cljs.core.logic._take_STAR_.call(null, new cljs.core.logic.Inc(function() {
      return function(a__2897__auto__) {
        return new cljs.core.logic.Inc(function() {
          var _QMARK_length = cljs.core.logic.lvar.call(null, "\ufdd1'?length");
          return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, jsrefact.predicates.functionlength.call(null, _QMARK_length)), function(a__2906__auto__) {
            return cljs.core.cons.call(null, cljs.core.logic._reify.call(null, a__2906__auto__, _QMARK_length), cljs.core.List.EMPTY)
          })
        })
      }.call(null, cljs.core.logic.empty_s)
    }));
    if(false) {
      return cljs.core.take.call(null, false, xs__2905__auto__)
    }else {
      return xs__2905__auto__
    }
  }());
  return clojure.walk.walk.call(null, function(p1__4301_SHARP_) {
    return 1 * p1__4301_SHARP_
  }, function(p1__4302_SHARP_) {
    return cljs.core.apply.call(null, cljs.core._PLUS_, p1__4302_SHARP_)
  }, lengths) / cljs.core.count.call(null, lengths)
};
jsrefact.predicates.countTypes = function countTypes() {
  var entries = cljs.core.doall.call(null, function() {
    var xs__2905__auto__ = cljs.core.logic._take_STAR_.call(null, new cljs.core.logic.Inc(function() {
      return function(a__2897__auto__) {
        return new cljs.core.logic.Inc(function() {
          var _QMARK_k = cljs.core.logic.lvar.call(null, "\ufdd1'?k");
          return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2897__auto____$1) {
            return new cljs.core.logic.Inc(function() {
              var _QMARK_n = cljs.core.logic.lvar.call(null, "\ufdd1'?n");
              return cljs.core.logic._bind.call(null, a__2897__auto____$1, pred.ast.call(null, _QMARK_k, _QMARK_n))
            })
          }), function(a__2906__auto__) {
            return cljs.core.cons.call(null, cljs.core.logic._reify.call(null, a__2906__auto__, _QMARK_k), cljs.core.List.EMPTY)
          })
        })
      }.call(null, cljs.core.logic.empty_s)
    }));
    if(false) {
      return cljs.core.take.call(null, false, xs__2905__auto__)
    }else {
      return xs__2905__auto__
    }
  }());
  return cljs.core.into.call(null, cljs.core.ObjMap.EMPTY, cljs.core.frequencies.call(null, entries))
};
goog.provide("jsrefact.tests.refacttest");
goog.require("cljs.core");
goog.require("jsrefact.predicates");
goog.require("jsrefact.predicates");
jsrefact.tests.refacttest.parsedTest = createAst("var x = 1; var y = 7;");
jsrefact.tests.refacttest.progrmTest = jsrefact.tests.refacttest.parsedTest.body;
cljs.core.swap_BANG_.call(null, jsrefact.predicates.progrm, function(progrmT) {
  return jsrefact.tests.refacttest.progrmTest
});
jsrefact.predicates.ast_property_set_value = function ast_property_set_value(ast, property, value) {
  ast[property] = value;
  return ast
};
jsrefact.tests.refacttest.ast_tag = function ast_tag(ast) {
  return jsrefact.predicates.ast_property_value.call(null, ast, "tag")
};
jsrefact.tests.refacttest.ast_tagged = function ast_tagged(tag_number) {
  return cljs.core.first.call(null, cljs.core.doall.call(null, function() {
    var xs__2905__auto__ = cljs.core.logic._take_STAR_.call(null, new cljs.core.logic.Inc(function() {
      return function(a__2897__auto__) {
        return new cljs.core.logic.Inc(function() {
          var _QMARK_node = cljs.core.logic.lvar.call(null, "\ufdd1'?node");
          return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, jsrefact.predicates.ast_property.call(null, "tag", _QMARK_node)), function(a3615) {
            var _QMARK_node__$1 = cljs.core.logic._walk_STAR_.call(null, a3615, _QMARK_node);
            return function(a__2897__auto____$1) {
              return new cljs.core.logic.Inc(function() {
                return cljs.core.logic._bind.call(null, a__2897__auto____$1, function(a__2885__auto__) {
                  var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, tag_number, jsrefact.predicates.ast_property_value.call(null, _QMARK_node__$1, "tag"));
                  if(cljs.core.truth_(temp__3971__auto__)) {
                    var b__2886__auto__ = temp__3971__auto__;
                    return b__2886__auto__
                  }else {
                    return null
                  }
                })
              })
            }.call(null, a3615)
          }), function(a__2906__auto__) {
            return cljs.core.cons.call(null, cljs.core.logic._reify.call(null, a__2906__auto__, _QMARK_node), cljs.core.List.EMPTY)
          })
        })
      }.call(null, cljs.core.logic.empty_s)
    }));
    if(false) {
      return cljs.core.take.call(null, false, xs__2905__auto__)
    }else {
      return xs__2905__auto__
    }
  }()))
};
jsrefact.tests.refacttest.jsr_ast_replace_property = function jsr_ast_replace_property(tag_number, property, new_value) {
  return cljs.core.doall.call(null, function() {
    var xs__2905__auto__ = cljs.core.logic._take_STAR_.call(null, new cljs.core.logic.Inc(function() {
      return function(a__2897__auto__) {
        return new cljs.core.logic.Inc(function() {
          var _QMARK_out = cljs.core.logic.lvar.call(null, "\ufdd1'?out");
          return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2897__auto____$1) {
            return new cljs.core.logic.Inc(function() {
              var _QMARK_node = cljs.core.logic.lvar.call(null, "\ufdd1'?node");
              return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto____$1, function(a__2885__auto__) {
                var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_node, jsrefact.tests.refacttest.ast_tagged.call(null, tag_number));
                if(cljs.core.truth_(temp__3971__auto__)) {
                  var b__2886__auto__ = temp__3971__auto__;
                  return b__2886__auto__
                }else {
                  return null
                }
              }), function(a3617) {
                var _QMARK_node__$1 = cljs.core.logic._walk_STAR_.call(null, a3617, _QMARK_node);
                return function(a__2897__auto____$2) {
                  return new cljs.core.logic.Inc(function() {
                    return cljs.core.logic._bind.call(null, a__2897__auto____$2, function(a__2885__auto__) {
                      var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_out, jsrefact.predicates.ast_property_set_value.call(null, _QMARK_node__$1, property, new_value));
                      if(cljs.core.truth_(temp__3971__auto__)) {
                        var b__2886__auto__ = temp__3971__auto__;
                        return b__2886__auto__
                      }else {
                        return null
                      }
                    })
                  })
                }.call(null, a3617)
              })
            })
          }), function(a__2906__auto__) {
            return cljs.core.cons.call(null, cljs.core.logic._reify.call(null, a__2906__auto__, _QMARK_out), cljs.core.List.EMPTY)
          })
        })
      }.call(null, cljs.core.logic.empty_s)
    }));
    if(false) {
      return cljs.core.take.call(null, false, xs__2905__auto__)
    }else {
      return xs__2905__auto__
    }
  }())
};
cljs.core.doall.call(null, function() {
  var xs__2905__auto__ = cljs.core.logic._take_STAR_.call(null, new cljs.core.logic.Inc(function() {
    return function(a__2897__auto__) {
      return new cljs.core.logic.Inc(function() {
        var _QMARK_r = cljs.core.logic.lvar.call(null, "\ufdd1'?r");
        return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2897__auto____$1) {
          return new cljs.core.logic.Inc(function() {
            var _QMARK_node = cljs.core.logic.lvar.call(null, "\ufdd1'?node");
            return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto____$1, jsrefact.predicates.ast_property.call(null, "tag", _QMARK_node)), function(a3618) {
              var _QMARK_node__$1 = cljs.core.logic._walk_STAR_.call(null, a3618, _QMARK_node);
              return function(a__2897__auto____$2) {
                return new cljs.core.logic.Inc(function() {
                  return cljs.core.logic._bind.call(null, a__2897__auto____$2, function(a__2885__auto__) {
                    var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_r, jsrefact.tests.refacttest.ast_tag.call(null, _QMARK_node__$1));
                    if(cljs.core.truth_(temp__3971__auto__)) {
                      var b__2886__auto__ = temp__3971__auto__;
                      return b__2886__auto__
                    }else {
                      return null
                    }
                  })
                })
              }.call(null, a3618)
            })
          })
        }), function(a__2906__auto__) {
          return cljs.core.cons.call(null, cljs.core.logic._reify.call(null, a__2906__auto__, _QMARK_r), cljs.core.List.EMPTY)
        })
      })
    }.call(null, cljs.core.logic.empty_s)
  }));
  if(false) {
    return cljs.core.take.call(null, false, xs__2905__auto__)
  }else {
    return xs__2905__auto__
  }
}());
goog.provide("jsrefact.tests.predicatestest");
goog.require("cljs.core");
goog.require("jsrefact.predicates");
goog.require("jsrefact.predicates");
jsrefact.tests.predicatestest.run = function run() {
  jsrefact.tests.predicatestest.parsedTest = jsrefact.predicates.esprimaParser.parse("var x = 43");
  jsrefact.tests.predicatestest.progrmTest = jsrefact.tests.predicatestest.parsedTest.body;
  cljs.core.swap_BANG_.call(null, jsrefact.predicates.progrm, function(progrmT) {
    return jsrefact.tests.predicatestest.progrmTest
  });
  jsrefact.tests.predicatestest.one = cljs.core.first.call(null, cljs.core.doall.call(null, function() {
    var xs__2905__auto__ = cljs.core.logic._take_STAR_.call(null, new cljs.core.logic.Inc(function() {
      return function(a__2897__auto__) {
        return new cljs.core.logic.Inc(function() {
          var _QMARK_value = cljs.core.logic.lvar.call(null, "\ufdd1'?value");
          return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2897__auto____$1) {
            return new cljs.core.logic.Inc(function() {
              var _QMARK_node = cljs.core.logic.lvar.call(null, "\ufdd1'?node");
              var _QMARK_prop = cljs.core.logic.lvar.call(null, "\ufdd1'?prop");
              return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto____$1, jsrefact.predicates.program.call(null, _QMARK_node)), jsrefact.predicates.child.call(null, _QMARK_prop, _QMARK_node, _QMARK_value))
            })
          }), function(a__2906__auto__) {
            return cljs.core.cons.call(null, cljs.core.logic._reify.call(null, a__2906__auto__, _QMARK_value), cljs.core.List.EMPTY)
          })
        })
      }.call(null, cljs.core.logic.empty_s)
    }));
    if(false) {
      return cljs.core.take.call(null, false, xs__2905__auto__)
    }else {
      return xs__2905__auto__
    }
  }()));
  jsrefact.tests.predicatestest.sec = cljs.core.second.call(null, cljs.core.doall.call(null, function() {
    var xs__2905__auto__ = cljs.core.logic._take_STAR_.call(null, new cljs.core.logic.Inc(function() {
      return function(a__2897__auto__) {
        return new cljs.core.logic.Inc(function() {
          var _QMARK_v = cljs.core.logic.lvar.call(null, "\ufdd1'?v");
          return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2897__auto____$1) {
            return new cljs.core.logic.Inc(function() {
              var _QMARK_n = cljs.core.logic.lvar.call(null, "\ufdd1'?n");
              var _QMARK_p = cljs.core.logic.lvar.call(null, "\ufdd1'?p");
              return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto____$1, function(a__2885__auto__) {
                var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_n, jsrefact.tests.predicatestest.one);
                if(cljs.core.truth_(temp__3971__auto__)) {
                  var b__2886__auto__ = temp__3971__auto__;
                  return b__2886__auto__
                }else {
                  return null
                }
              }), jsrefact.predicates.child.call(null, _QMARK_p, _QMARK_n, _QMARK_v))
            })
          }), function(a__2906__auto__) {
            return cljs.core.cons.call(null, cljs.core.logic._reify.call(null, a__2906__auto__, _QMARK_v), cljs.core.List.EMPTY)
          })
        })
      }.call(null, cljs.core.logic.empty_s)
    }));
    if(false) {
      return cljs.core.take.call(null, false, xs__2905__auto__)
    }else {
      return xs__2905__auto__
    }
  }()));
  cljs.core.println.call(null, "  AST Unit tests started.");
  if(cljs.core._EQ_.call(null, jsrefact.predicates.ast_property_value.call(null, jsrefact.tests.predicatestest.parsedTest, "type"), "Program")) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'ast-property-value", "\ufdd1'parsedTest", "type"), cljs.core.hash_map("\ufdd0'line", 37)), "Program"), cljs.core.hash_map("\ufdd0'line", 37))))].join(""));
  }
  if(cljs.core._EQ_.call(null, jsrefact.predicates.ast_property_value.call(null, cljs.core.first.call(null, cljs.core.deref.call(null, jsrefact.predicates.progrm)), "type"), "VariableDeclaration")) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'ast-property-value", cljs.core.with_meta(cljs.core.list("\ufdd1'first", cljs.core.list("\ufdd1'clojure.core/deref", "\ufdd1'progrm")), cljs.core.hash_map("\ufdd0'line", 39)), "type"), cljs.core.hash_map("\ufdd0'line", 39)), "VariableDeclaration"), cljs.core.hash_map("\ufdd0'line", 39))))].join(""));
  }
  if(cljs.core._EQ_.call(null, cljs.core.instance_QMARK_.call(null, Array, jsrefact.predicates.ast_property_value.call(null, cljs.core.first.call(null, cljs.core.deref.call(null, jsrefact.predicates.progrm)), "declarations")), true)) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'instance?", "\ufdd1'js/Array", cljs.core.with_meta(cljs.core.list("\ufdd1'ast-property-value", cljs.core.with_meta(cljs.core.list("\ufdd1'first", cljs.core.list("\ufdd1'clojure.core/deref", "\ufdd1'progrm")), cljs.core.hash_map("\ufdd0'line", 41)), "declarations"), cljs.core.hash_map("\ufdd0'line", 41))), cljs.core.hash_map("\ufdd0'line", 
    41)), true), cljs.core.hash_map("\ufdd0'line", 41))))].join(""));
  }
  if(cljs.core._EQ_.call(null, cljs.core.first.call(null, jsrefact.predicates.ast_properties.call(null, jsrefact.tests.predicatestest.parsedTest)), "type")) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'first", cljs.core.with_meta(cljs.core.list("\ufdd1'ast-properties", "\ufdd1'parsedTest"), cljs.core.hash_map("\ufdd0'line", 43))), cljs.core.hash_map("\ufdd0'line", 43)), "type"), cljs.core.hash_map("\ufdd0'line", 43))))].join(""));
  }
  if(cljs.core._EQ_.call(null, cljs.core.first.call(null, jsrefact.predicates.ast_properties.call(null, cljs.core.first.call(null, cljs.core.deref.call(null, jsrefact.predicates.progrm)))), "type")) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'first", cljs.core.with_meta(cljs.core.list("\ufdd1'ast-properties", cljs.core.with_meta(cljs.core.list("\ufdd1'first", cljs.core.list("\ufdd1'clojure.core/deref", "\ufdd1'progrm")), cljs.core.hash_map("\ufdd0'line", 45))), cljs.core.hash_map("\ufdd0'line", 45))), cljs.core.hash_map("\ufdd0'line", 45)), "type"), cljs.core.hash_map("\ufdd0'line", 
    45))))].join(""));
  }
  if(cljs.core._EQ_.call(null, cljs.core.count.call(null, jsrefact.predicates.ast_properties.call(null, cljs.core.first.call(null, cljs.core.deref.call(null, jsrefact.predicates.progrm)))), 3)) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'count", cljs.core.with_meta(cljs.core.list("\ufdd1'ast-properties", cljs.core.with_meta(cljs.core.list("\ufdd1'first", cljs.core.list("\ufdd1'clojure.core/deref", "\ufdd1'progrm")), cljs.core.hash_map("\ufdd0'line", 47))), cljs.core.hash_map("\ufdd0'line", 47))), cljs.core.hash_map("\ufdd0'line", 47)), 3), cljs.core.hash_map("\ufdd0'line", 
    47))))].join(""));
  }
  if(cljs.core._EQ_.call(null, jsrefact.predicates.ast_kind.call(null, jsrefact.tests.predicatestest.parsedTest), "Program")) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'ast-kind", "\ufdd1'parsedTest"), cljs.core.hash_map("\ufdd0'line", 49)), "Program"), cljs.core.hash_map("\ufdd0'line", 49))))].join(""));
  }
  if(cljs.core._EQ_.call(null, jsrefact.predicates.ast_kind.call(null, cljs.core.first.call(null, cljs.core.deref.call(null, jsrefact.predicates.progrm))), "VariableDeclaration")) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'ast-kind", cljs.core.with_meta(cljs.core.list("\ufdd1'first", cljs.core.list("\ufdd1'clojure.core/deref", "\ufdd1'progrm")), cljs.core.hash_map("\ufdd0'line", 51))), cljs.core.hash_map("\ufdd0'line", 51)), "VariableDeclaration"), cljs.core.hash_map("\ufdd0'line", 51))))].join(""));
  }
  var fakeAst = 5;
  if(cljs.core.not_EQ_.call(null, jsrefact.predicates.ast_QMARK_.call(null, fakeAst), true)) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'not=", cljs.core.with_meta(cljs.core.list("\ufdd1'ast?", "\ufdd1'fakeAst"), cljs.core.hash_map("\ufdd0'line", 54)), true), cljs.core.hash_map("\ufdd0'line", 54))))].join(""));
  }
  if(cljs.core._EQ_.call(null, jsrefact.predicates.ast_QMARK_.call(null, jsrefact.tests.predicatestest.parsedTest), true)) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'ast?", "\ufdd1'parsedTest"), cljs.core.hash_map("\ufdd0'line", 55)), true), cljs.core.hash_map("\ufdd0'line", 55))))].join(""));
  }
  if(cljs.core._EQ_.call(null, jsrefact.predicates.ast_QMARK_.call(null, cljs.core.first.call(null, cljs.core.deref.call(null, jsrefact.predicates.progrm))), true)) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'ast?", cljs.core.with_meta(cljs.core.list("\ufdd1'first", cljs.core.list("\ufdd1'clojure.core/deref", "\ufdd1'progrm")), cljs.core.hash_map("\ufdd0'line", 57))), cljs.core.hash_map("\ufdd0'line", 57)), true), cljs.core.hash_map("\ufdd0'line", 57))))].join(""));
  }
  if(cljs.core._EQ_.call(null, cljs.core.first.call(null, cljs.core.doall.call(null, function() {
    var xs__2905__auto__ = cljs.core.logic._take_STAR_.call(null, new cljs.core.logic.Inc(function() {
      return function(a__2897__auto__) {
        return new cljs.core.logic.Inc(function() {
          var _QMARK_p = cljs.core.logic.lvar.call(null, "\ufdd1'?p");
          return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, jsrefact.predicates.program.call(null, _QMARK_p)), function(a__2906__auto__) {
            return cljs.core.cons.call(null, cljs.core.logic._reify.call(null, a__2906__auto__, _QMARK_p), cljs.core.List.EMPTY)
          })
        })
      }.call(null, cljs.core.logic.empty_s)
    }));
    if(false) {
      return cljs.core.take.call(null, false, xs__2905__auto__)
    }else {
      return xs__2905__auto__
    }
  }())).type, "VariableDeclaration")) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'.-type", cljs.core.with_meta(cljs.core.list("\ufdd1'first", cljs.core.with_meta(cljs.core.list("\ufdd1'l/run*", cljs.core.vec(["\ufdd1'?p"]), cljs.core.with_meta(cljs.core.list("\ufdd1'program", "\ufdd1'?p"), cljs.core.hash_map("\ufdd0'line", 59))), cljs.core.hash_map("\ufdd0'line", 59))), cljs.core.hash_map("\ufdd0'line", 
    59))), cljs.core.hash_map("\ufdd0'line", 59)), "VariableDeclaration"), cljs.core.hash_map("\ufdd0'line", 59))))].join(""));
  }
  if(cljs.core._EQ_.call(null, cljs.core.first.call(null, cljs.core.doall.call(null, function() {
    var xs__2905__auto__ = cljs.core.logic._take_STAR_.call(null, new cljs.core.logic.Inc(function() {
      return function(a__2897__auto__) {
        return new cljs.core.logic.Inc(function() {
          var _QMARK_p = cljs.core.logic.lvar.call(null, "\ufdd1'?p");
          return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, jsrefact.predicates.program.call(null, _QMARK_p)), function(a__2906__auto__) {
            return cljs.core.cons.call(null, cljs.core.logic._reify.call(null, a__2906__auto__, _QMARK_p), cljs.core.List.EMPTY)
          })
        })
      }.call(null, cljs.core.logic.empty_s)
    }));
    if(false) {
      return cljs.core.take.call(null, false, xs__2905__auto__)
    }else {
      return xs__2905__auto__
    }
  }())), cljs.core.first.call(null, cljs.core.deref.call(null, jsrefact.predicates.progrm)))) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'first", cljs.core.with_meta(cljs.core.list("\ufdd1'l/run*", cljs.core.vec(["\ufdd1'?p"]), cljs.core.with_meta(cljs.core.list("\ufdd1'program", "\ufdd1'?p"), cljs.core.hash_map("\ufdd0'line", 62))), cljs.core.hash_map("\ufdd0'line", 62))), cljs.core.hash_map("\ufdd0'line", 62)), cljs.core.with_meta(cljs.core.list("\ufdd1'first", 
    cljs.core.list("\ufdd1'clojure.core/deref", "\ufdd1'progrm")), cljs.core.hash_map("\ufdd0'line", 62))), cljs.core.hash_map("\ufdd0'line", 62))))].join(""));
  }
  if(cljs.core._EQ_.call(null, cljs.core.first.call(null, cljs.core.doall.call(null, function() {
    var xs__2905__auto__ = cljs.core.logic._take_STAR_.call(null, new cljs.core.logic.Inc(function() {
      return function(a__2897__auto__) {
        return new cljs.core.logic.Inc(function() {
          var _QMARK_prop = cljs.core.logic.lvar.call(null, "\ufdd1'?prop");
          return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2897__auto____$1) {
            return new cljs.core.logic.Inc(function() {
              var _QMARK_node = cljs.core.logic.lvar.call(null, "\ufdd1'?node");
              var _QMARK_value = cljs.core.logic.lvar.call(null, "\ufdd1'?value");
              return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto____$1, jsrefact.predicates.program.call(null, _QMARK_node)), jsrefact.predicates.child.call(null, _QMARK_prop, _QMARK_node, _QMARK_value))
            })
          }), function(a__2906__auto__) {
            return cljs.core.cons.call(null, cljs.core.logic._reify.call(null, a__2906__auto__, _QMARK_prop), cljs.core.List.EMPTY)
          })
        })
      }.call(null, cljs.core.logic.empty_s)
    }));
    if(false) {
      return cljs.core.take.call(null, false, xs__2905__auto__)
    }else {
      return xs__2905__auto__
    }
  }())), "declarations")) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'first", cljs.core.with_meta(cljs.core.list("\ufdd1'l/run*", cljs.core.vec(["\ufdd1'?prop"]), cljs.core.with_meta(cljs.core.list("\ufdd1'l/fresh", cljs.core.vec(["\ufdd1'?node", "\ufdd1'?value"]), cljs.core.with_meta(cljs.core.list("\ufdd1'program", "\ufdd1'?node"), cljs.core.hash_map("\ufdd0'line", 67)), cljs.core.with_meta(cljs.core.list("\ufdd1'child", 
    "\ufdd1'?prop", "\ufdd1'?node", "\ufdd1'?value"), cljs.core.hash_map("\ufdd0'line", 68))), cljs.core.hash_map("\ufdd0'line", 66))), cljs.core.hash_map("\ufdd0'line", 65))), cljs.core.hash_map("\ufdd0'line", 65)), "declarations"), cljs.core.hash_map("\ufdd0'line", 65))))].join(""));
  }
  if(cljs.core._EQ_.call(null, jsrefact.predicates.ast_kind.call(null, cljs.core.first.call(null, cljs.core.doall.call(null, function() {
    var xs__2905__auto__ = cljs.core.logic._take_STAR_.call(null, new cljs.core.logic.Inc(function() {
      return function(a__2897__auto__) {
        return new cljs.core.logic.Inc(function() {
          var _QMARK_va = cljs.core.logic.lvar.call(null, "\ufdd1'?va");
          return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2897__auto____$1) {
            return new cljs.core.logic.Inc(function() {
              var _QMARK_no = cljs.core.logic.lvar.call(null, "\ufdd1'?no");
              var _QMARK_pr = cljs.core.logic.lvar.call(null, "\ufdd1'?pr");
              return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto____$1, jsrefact.predicates.program.call(null, _QMARK_no)), jsrefact.predicates.child.call(null, _QMARK_pr, _QMARK_no, _QMARK_va))
            })
          }), function(a__2906__auto__) {
            return cljs.core.cons.call(null, cljs.core.logic._reify.call(null, a__2906__auto__, _QMARK_va), cljs.core.List.EMPTY)
          })
        })
      }.call(null, cljs.core.logic.empty_s)
    }));
    if(false) {
      return cljs.core.take.call(null, false, xs__2905__auto__)
    }else {
      return xs__2905__auto__
    }
  }()))), "VariableDeclarator")) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'ast-kind", cljs.core.with_meta(cljs.core.list("\ufdd1'first", cljs.core.with_meta(cljs.core.list("\ufdd1'l/run*", cljs.core.vec(["\ufdd1'?va"]), cljs.core.with_meta(cljs.core.list("\ufdd1'l/fresh", cljs.core.vec(["\ufdd1'?no", "\ufdd1'?pr"]), cljs.core.with_meta(cljs.core.list("\ufdd1'program", "\ufdd1'?no"), cljs.core.hash_map("\ufdd0'line", 
    73)), cljs.core.with_meta(cljs.core.list("\ufdd1'child", "\ufdd1'?pr", "\ufdd1'?no", "\ufdd1'?va"), cljs.core.hash_map("\ufdd0'line", 74))), cljs.core.hash_map("\ufdd0'line", 72))), cljs.core.hash_map("\ufdd0'line", 71))), cljs.core.hash_map("\ufdd0'line", 71))), cljs.core.hash_map("\ufdd0'line", 71)), "VariableDeclarator"), cljs.core.hash_map("\ufdd0'line", 71))))].join(""));
  }
  if(cljs.core._EQ_.call(null, cljs.core.first.call(null, cljs.core.doall.call(null, function() {
    var xs__2905__auto__ = cljs.core.logic._take_STAR_.call(null, new cljs.core.logic.Inc(function() {
      return function(a__2897__auto__) {
        return new cljs.core.logic.Inc(function() {
          var _QMARK_pr = cljs.core.logic.lvar.call(null, "\ufdd1'?pr");
          return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2897__auto____$1) {
            return new cljs.core.logic.Inc(function() {
              var _QMARK_no = cljs.core.logic.lvar.call(null, "\ufdd1'?no");
              var _QMARK_va = cljs.core.logic.lvar.call(null, "\ufdd1'?va");
              return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto____$1, function(a__2885__auto__) {
                var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_no, jsrefact.tests.predicatestest.one);
                if(cljs.core.truth_(temp__3971__auto__)) {
                  var b__2886__auto__ = temp__3971__auto__;
                  return b__2886__auto__
                }else {
                  return null
                }
              }), jsrefact.predicates.child.call(null, _QMARK_pr, _QMARK_no, _QMARK_va))
            })
          }), function(a__2906__auto__) {
            return cljs.core.cons.call(null, cljs.core.logic._reify.call(null, a__2906__auto__, _QMARK_pr), cljs.core.List.EMPTY)
          })
        })
      }.call(null, cljs.core.logic.empty_s)
    }));
    if(false) {
      return cljs.core.take.call(null, false, xs__2905__auto__)
    }else {
      return xs__2905__auto__
    }
  }())), "id")) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'first", cljs.core.with_meta(cljs.core.list("\ufdd1'l/run*", cljs.core.vec(["\ufdd1'?pr"]), cljs.core.with_meta(cljs.core.list("\ufdd1'l/fresh", cljs.core.vec(["\ufdd1'?no", "\ufdd1'?va"]), cljs.core.with_meta(cljs.core.list("\ufdd1'l/==", "\ufdd1'?no", "\ufdd1'one"), cljs.core.hash_map("\ufdd0'line", 79)), cljs.core.with_meta(cljs.core.list("\ufdd1'child", 
    "\ufdd1'?pr", "\ufdd1'?no", "\ufdd1'?va"), cljs.core.hash_map("\ufdd0'line", 80))), cljs.core.hash_map("\ufdd0'line", 78))), cljs.core.hash_map("\ufdd0'line", 77))), cljs.core.hash_map("\ufdd0'line", 77)), "id"), cljs.core.hash_map("\ufdd0'line", 77))))].join(""));
  }
  if(cljs.core._EQ_.call(null, cljs.core.doall.call(null, function() {
    var xs__2905__auto__ = cljs.core.logic._take_STAR_.call(null, new cljs.core.logic.Inc(function() {
      return function(a__2897__auto__) {
        return new cljs.core.logic.Inc(function() {
          var _QMARK_pr = cljs.core.logic.lvar.call(null, "\ufdd1'?pr");
          return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2897__auto____$1) {
            return new cljs.core.logic.Inc(function() {
              var _QMARK_no = cljs.core.logic.lvar.call(null, "\ufdd1'?no");
              var _QMARK_va = cljs.core.logic.lvar.call(null, "\ufdd1'?va");
              return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto____$1, function(a__2885__auto__) {
                var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_no, jsrefact.tests.predicatestest.sec);
                if(cljs.core.truth_(temp__3971__auto__)) {
                  var b__2886__auto__ = temp__3971__auto__;
                  return b__2886__auto__
                }else {
                  return null
                }
              }), jsrefact.predicates.child.call(null, _QMARK_pr, _QMARK_no, _QMARK_va))
            })
          }), function(a__2906__auto__) {
            return cljs.core.cons.call(null, cljs.core.logic._reify.call(null, a__2906__auto__, _QMARK_pr), cljs.core.List.EMPTY)
          })
        })
      }.call(null, cljs.core.logic.empty_s)
    }));
    if(false) {
      return cljs.core.take.call(null, false, xs__2905__auto__)
    }else {
      return xs__2905__auto__
    }
  }()), cljs.core.List.EMPTY)) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'l/run*", cljs.core.vec(["\ufdd1'?pr"]), cljs.core.with_meta(cljs.core.list("\ufdd1'l/fresh", cljs.core.vec(["\ufdd1'?no", "\ufdd1'?va"]), cljs.core.with_meta(cljs.core.list("\ufdd1'l/==", "\ufdd1'?no", "\ufdd1'sec"), cljs.core.hash_map("\ufdd0'line", 84)), cljs.core.with_meta(cljs.core.list("\ufdd1'child", "\ufdd1'?pr", 
    "\ufdd1'?no", "\ufdd1'?va"), cljs.core.hash_map("\ufdd0'line", 85))), cljs.core.hash_map("\ufdd0'line", 83))), cljs.core.hash_map("\ufdd0'line", 82)), cljs.core.List.EMPTY), cljs.core.hash_map("\ufdd0'line", 82))))].join(""));
  }
  if(cljs.core._EQ_.call(null, cljs.core.doall.call(null, function() {
    var xs__2905__auto__ = cljs.core.logic._take_STAR_.call(null, new cljs.core.logic.Inc(function() {
      return function(a__2897__auto__) {
        return new cljs.core.logic.Inc(function() {
          var _QMARK_va = cljs.core.logic.lvar.call(null, "\ufdd1'?va");
          return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2897__auto____$1) {
            return new cljs.core.logic.Inc(function() {
              var _QMARK_no = cljs.core.logic.lvar.call(null, "\ufdd1'?no");
              var _QMARK_pr = cljs.core.logic.lvar.call(null, "\ufdd1'?pr");
              return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto____$1, function(a__2885__auto__) {
                var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_no, jsrefact.tests.predicatestest.sec);
                if(cljs.core.truth_(temp__3971__auto__)) {
                  var b__2886__auto__ = temp__3971__auto__;
                  return b__2886__auto__
                }else {
                  return null
                }
              }), jsrefact.predicates.child.call(null, _QMARK_pr, _QMARK_no, _QMARK_va))
            })
          }), function(a__2906__auto__) {
            return cljs.core.cons.call(null, cljs.core.logic._reify.call(null, a__2906__auto__, _QMARK_va), cljs.core.List.EMPTY)
          })
        })
      }.call(null, cljs.core.logic.empty_s)
    }));
    if(false) {
      return cljs.core.take.call(null, false, xs__2905__auto__)
    }else {
      return xs__2905__auto__
    }
  }()), cljs.core.List.EMPTY)) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'l/run*", cljs.core.vec(["\ufdd1'?va"]), cljs.core.with_meta(cljs.core.list("\ufdd1'l/fresh", cljs.core.vec(["\ufdd1'?no", "\ufdd1'?pr"]), cljs.core.with_meta(cljs.core.list("\ufdd1'l/==", "\ufdd1'?no", "\ufdd1'sec"), cljs.core.hash_map("\ufdd0'line", 89)), cljs.core.with_meta(cljs.core.list("\ufdd1'child", "\ufdd1'?pr", 
    "\ufdd1'?no", "\ufdd1'?va"), cljs.core.hash_map("\ufdd0'line", 90))), cljs.core.hash_map("\ufdd0'line", 88))), cljs.core.hash_map("\ufdd0'line", 87)), cljs.core.List.EMPTY), cljs.core.hash_map("\ufdd0'line", 87))))].join(""));
  }
  if(cljs.core._EQ_.call(null, jsrefact.predicates.ast_kind.call(null, cljs.core.first.call(null, cljs.core.doall.call(null, function() {
    var xs__2905__auto__ = cljs.core.logic._take_STAR_.call(null, new cljs.core.logic.Inc(function() {
      return function(a__2897__auto__) {
        return new cljs.core.logic.Inc(function() {
          var _QMARK_va = cljs.core.logic.lvar.call(null, "\ufdd1'?va");
          return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2897__auto____$1) {
            return new cljs.core.logic.Inc(function() {
              var _QMARK_no = cljs.core.logic.lvar.call(null, "\ufdd1'?no");
              var _QMARK_pr = cljs.core.logic.lvar.call(null, "\ufdd1'?pr");
              return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto____$1, function(a__2885__auto__) {
                var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_no, jsrefact.tests.predicatestest.one);
                if(cljs.core.truth_(temp__3971__auto__)) {
                  var b__2886__auto__ = temp__3971__auto__;
                  return b__2886__auto__
                }else {
                  return null
                }
              }), jsrefact.predicates.child.call(null, _QMARK_pr, _QMARK_no, _QMARK_va))
            })
          }), function(a__2906__auto__) {
            return cljs.core.cons.call(null, cljs.core.logic._reify.call(null, a__2906__auto__, _QMARK_va), cljs.core.List.EMPTY)
          })
        })
      }.call(null, cljs.core.logic.empty_s)
    }));
    if(false) {
      return cljs.core.take.call(null, false, xs__2905__auto__)
    }else {
      return xs__2905__auto__
    }
  }()))), "Identifier")) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'ast-kind", cljs.core.with_meta(cljs.core.list("\ufdd1'first", cljs.core.with_meta(cljs.core.list("\ufdd1'l/run*", cljs.core.vec(["\ufdd1'?va"]), cljs.core.with_meta(cljs.core.list("\ufdd1'l/fresh", cljs.core.vec(["\ufdd1'?no", "\ufdd1'?pr"]), cljs.core.with_meta(cljs.core.list("\ufdd1'l/==", "\ufdd1'?no", "\ufdd1'one"), 
    cljs.core.hash_map("\ufdd0'line", 94)), cljs.core.with_meta(cljs.core.list("\ufdd1'child", "\ufdd1'?pr", "\ufdd1'?no", "\ufdd1'?va"), cljs.core.hash_map("\ufdd0'line", 95))), cljs.core.hash_map("\ufdd0'line", 93))), cljs.core.hash_map("\ufdd0'line", 92))), cljs.core.hash_map("\ufdd0'line", 92))), cljs.core.hash_map("\ufdd0'line", 92)), "Identifier"), cljs.core.hash_map("\ufdd0'line", 92))))].join(""));
  }
  if(cljs.core._EQ_.call(null, cljs.core.count.call(null, cljs.core.doall.call(null, function() {
    var xs__2905__auto__ = cljs.core.logic._take_STAR_.call(null, new cljs.core.logic.Inc(function() {
      return function(a__2897__auto__) {
        return new cljs.core.logic.Inc(function() {
          var _QMARK_props = cljs.core.logic.lvar.call(null, "\ufdd1'?props");
          return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2897__auto____$1) {
            return new cljs.core.logic.Inc(function() {
              var _QMARK_p = cljs.core.logic.lvar.call(null, "\ufdd1'?p");
              var _QMARK_value = cljs.core.logic.lvar.call(null, "\ufdd1'?value");
              return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto____$1, jsrefact.predicates.program.call(null, _QMARK_p)), jsrefact.predicates.has.call(null, _QMARK_props, _QMARK_p, _QMARK_value))
            })
          }), function(a__2906__auto__) {
            return cljs.core.cons.call(null, cljs.core.logic._reify.call(null, a__2906__auto__, _QMARK_props), cljs.core.List.EMPTY)
          })
        })
      }.call(null, cljs.core.logic.empty_s)
    }));
    if(false) {
      return cljs.core.take.call(null, false, xs__2905__auto__)
    }else {
      return xs__2905__auto__
    }
  }())), 3)) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'count", cljs.core.with_meta(cljs.core.list("\ufdd1'l/run*", cljs.core.vec(["\ufdd1'?props"]), cljs.core.with_meta(cljs.core.list("\ufdd1'l/fresh", cljs.core.vec(["\ufdd1'?p", "\ufdd1'?value"]), cljs.core.with_meta(cljs.core.list("\ufdd1'program", "\ufdd1'?p"), cljs.core.hash_map("\ufdd0'line", 104)), cljs.core.with_meta(cljs.core.list("\ufdd1'has", 
    "\ufdd1'?props", "\ufdd1'?p", "\ufdd1'?value"), cljs.core.hash_map("\ufdd0'line", 105))), cljs.core.hash_map("\ufdd0'line", 103))), cljs.core.hash_map("\ufdd0'line", 102))), cljs.core.hash_map("\ufdd0'line", 102)), 3), cljs.core.hash_map("\ufdd0'line", 101))))].join(""));
  }
  if(cljs.core._EQ_.call(null, cljs.core.first.call(null, cljs.core.doall.call(null, function() {
    var xs__2905__auto__ = cljs.core.logic._take_STAR_.call(null, new cljs.core.logic.Inc(function() {
      return function(a__2897__auto__) {
        return new cljs.core.logic.Inc(function() {
          var _QMARK_props = cljs.core.logic.lvar.call(null, "\ufdd1'?props");
          return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2897__auto____$1) {
            return new cljs.core.logic.Inc(function() {
              var _QMARK_p = cljs.core.logic.lvar.call(null, "\ufdd1'?p");
              var _QMARK_value = cljs.core.logic.lvar.call(null, "\ufdd1'?value");
              return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto____$1, jsrefact.predicates.program.call(null, _QMARK_p)), jsrefact.predicates.has.call(null, _QMARK_props, _QMARK_p, _QMARK_value))
            })
          }), function(a__2906__auto__) {
            return cljs.core.cons.call(null, cljs.core.logic._reify.call(null, a__2906__auto__, _QMARK_props), cljs.core.List.EMPTY)
          })
        })
      }.call(null, cljs.core.logic.empty_s)
    }));
    if(false) {
      return cljs.core.take.call(null, false, xs__2905__auto__)
    }else {
      return xs__2905__auto__
    }
  }())), "type")) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'first", cljs.core.with_meta(cljs.core.list("\ufdd1'l/run*", cljs.core.vec(["\ufdd1'?props"]), cljs.core.with_meta(cljs.core.list("\ufdd1'l/fresh", cljs.core.vec(["\ufdd1'?p", "\ufdd1'?value"]), cljs.core.with_meta(cljs.core.list("\ufdd1'program", "\ufdd1'?p"), cljs.core.hash_map("\ufdd0'line", 111)), cljs.core.with_meta(cljs.core.list("\ufdd1'has", 
    "\ufdd1'?props", "\ufdd1'?p", "\ufdd1'?value"), cljs.core.hash_map("\ufdd0'line", 112))), cljs.core.hash_map("\ufdd0'line", 110))), cljs.core.hash_map("\ufdd0'line", 109))), cljs.core.hash_map("\ufdd0'line", 109)), "type"), cljs.core.hash_map("\ufdd0'line", 108))))].join(""));
  }
  if(cljs.core._EQ_.call(null, cljs.core.first.call(null, cljs.core.doall.call(null, function() {
    var xs__2905__auto__ = cljs.core.logic._take_STAR_.call(null, new cljs.core.logic.Inc(function() {
      return function(a__2897__auto__) {
        return new cljs.core.logic.Inc(function() {
          var _QMARK_value = cljs.core.logic.lvar.call(null, "\ufdd1'?value");
          return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2897__auto____$1) {
            return new cljs.core.logic.Inc(function() {
              var _QMARK_p = cljs.core.logic.lvar.call(null, "\ufdd1'?p");
              var _QMARK_props = cljs.core.logic.lvar.call(null, "\ufdd1'?props");
              return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto____$1, jsrefact.predicates.program.call(null, _QMARK_p)), jsrefact.predicates.has.call(null, _QMARK_props, _QMARK_p, _QMARK_value))
            })
          }), function(a__2906__auto__) {
            return cljs.core.cons.call(null, cljs.core.logic._reify.call(null, a__2906__auto__, _QMARK_value), cljs.core.List.EMPTY)
          })
        })
      }.call(null, cljs.core.logic.empty_s)
    }));
    if(false) {
      return cljs.core.take.call(null, false, xs__2905__auto__)
    }else {
      return xs__2905__auto__
    }
  }())), "VariableDeclaration")) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'first", cljs.core.with_meta(cljs.core.list("\ufdd1'l/run*", cljs.core.vec(["\ufdd1'?value"]), cljs.core.with_meta(cljs.core.list("\ufdd1'l/fresh", cljs.core.vec(["\ufdd1'?p", "\ufdd1'?props"]), cljs.core.with_meta(cljs.core.list("\ufdd1'program", "\ufdd1'?p"), cljs.core.hash_map("\ufdd0'line", 118)), cljs.core.with_meta(cljs.core.list("\ufdd1'has", 
    "\ufdd1'?props", "\ufdd1'?p", "\ufdd1'?value"), cljs.core.hash_map("\ufdd0'line", 119))), cljs.core.hash_map("\ufdd0'line", 117))), cljs.core.hash_map("\ufdd0'line", 116))), cljs.core.hash_map("\ufdd0'line", 116)), "VariableDeclaration"), cljs.core.hash_map("\ufdd0'line", 115))))].join(""));
  }
  if(cljs.core._EQ_.call(null, cljs.core.instance_QMARK_.call(null, Array, cljs.core.second.call(null, cljs.core.doall.call(null, function() {
    var xs__2905__auto__ = cljs.core.logic._take_STAR_.call(null, new cljs.core.logic.Inc(function() {
      return function(a__2897__auto__) {
        return new cljs.core.logic.Inc(function() {
          var _QMARK_value = cljs.core.logic.lvar.call(null, "\ufdd1'?value");
          return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2897__auto____$1) {
            return new cljs.core.logic.Inc(function() {
              var _QMARK_p = cljs.core.logic.lvar.call(null, "\ufdd1'?p");
              var _QMARK_props = cljs.core.logic.lvar.call(null, "\ufdd1'?props");
              return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto____$1, jsrefact.predicates.program.call(null, _QMARK_p)), jsrefact.predicates.has.call(null, _QMARK_props, _QMARK_p, _QMARK_value))
            })
          }), function(a__2906__auto__) {
            return cljs.core.cons.call(null, cljs.core.logic._reify.call(null, a__2906__auto__, _QMARK_value), cljs.core.List.EMPTY)
          })
        })
      }.call(null, cljs.core.logic.empty_s)
    }));
    if(false) {
      return cljs.core.take.call(null, false, xs__2905__auto__)
    }else {
      return xs__2905__auto__
    }
  }()))), true)) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'instance?", "\ufdd1'js/Array", cljs.core.with_meta(cljs.core.list("\ufdd1'second", cljs.core.with_meta(cljs.core.list("\ufdd1'l/run*", cljs.core.vec(["\ufdd1'?value"]), cljs.core.with_meta(cljs.core.list("\ufdd1'l/fresh", cljs.core.vec(["\ufdd1'?p", "\ufdd1'?props"]), cljs.core.with_meta(cljs.core.list("\ufdd1'program", 
    "\ufdd1'?p"), cljs.core.hash_map("\ufdd0'line", 125)), cljs.core.with_meta(cljs.core.list("\ufdd1'has", "\ufdd1'?props", "\ufdd1'?p", "\ufdd1'?value"), cljs.core.hash_map("\ufdd0'line", 126))), cljs.core.hash_map("\ufdd0'line", 124))), cljs.core.hash_map("\ufdd0'line", 123))), cljs.core.hash_map("\ufdd0'line", 123))), cljs.core.hash_map("\ufdd0'line", 123)), true), cljs.core.hash_map("\ufdd0'line", 122))))].join(""));
  }
  if(cljs.core._EQ_.call(null, cljs.core.count.call(null, cljs.core.doall.call(null, function() {
    var xs__2905__auto__ = cljs.core.logic._take_STAR_.call(null, new cljs.core.logic.Inc(function() {
      return function(a__2897__auto__) {
        return new cljs.core.logic.Inc(function() {
          var _QMARK_chld = cljs.core.logic.lvar.call(null, "\ufdd1'?chld");
          return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2897__auto____$1) {
            return new cljs.core.logic.Inc(function() {
              var _QMARK_p = cljs.core.logic.lvar.call(null, "\ufdd1'?p");
              return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto____$1, jsrefact.predicates.program.call(null, _QMARK_p)), jsrefact.predicates.child_PLUS_.call(null, _QMARK_p, _QMARK_chld))
            })
          }), function(a__2906__auto__) {
            return cljs.core.cons.call(null, cljs.core.logic._reify.call(null, a__2906__auto__, _QMARK_chld), cljs.core.List.EMPTY)
          })
        })
      }.call(null, cljs.core.logic.empty_s)
    }));
    if(false) {
      return cljs.core.take.call(null, false, xs__2905__auto__)
    }else {
      return xs__2905__auto__
    }
  }())), 3)) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'count", cljs.core.with_meta(cljs.core.list("\ufdd1'l/run*", cljs.core.vec(["\ufdd1'?chld"]), cljs.core.with_meta(cljs.core.list("\ufdd1'l/fresh", cljs.core.vec(["\ufdd1'?p"]), cljs.core.with_meta(cljs.core.list("\ufdd1'program", "\ufdd1'?p"), cljs.core.hash_map("\ufdd0'line", 132)), cljs.core.with_meta(cljs.core.list("\ufdd1'child+", 
    "\ufdd1'?p", "\ufdd1'?chld"), cljs.core.hash_map("\ufdd0'line", 133))), cljs.core.hash_map("\ufdd0'line", 131))), cljs.core.hash_map("\ufdd0'line", 130))), cljs.core.hash_map("\ufdd0'line", 130)), 3), cljs.core.hash_map("\ufdd0'line", 130))))].join(""));
  }
  if(cljs.core._EQ_.call(null, cljs.core.last.call(null, cljs.core.doall.call(null, function() {
    var xs__2905__auto__ = cljs.core.logic._take_STAR_.call(null, new cljs.core.logic.Inc(function() {
      return function(a__2897__auto__) {
        return new cljs.core.logic.Inc(function() {
          var _QMARK_chld = cljs.core.logic.lvar.call(null, "\ufdd1'?chld");
          return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2897__auto____$1) {
            return new cljs.core.logic.Inc(function() {
              var _QMARK_p = cljs.core.logic.lvar.call(null, "\ufdd1'?p");
              return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto____$1, jsrefact.predicates.program.call(null, _QMARK_p)), jsrefact.predicates.child_PLUS_.call(null, _QMARK_p, _QMARK_chld))
            })
          }), function(a__2906__auto__) {
            return cljs.core.cons.call(null, cljs.core.logic._reify.call(null, a__2906__auto__, _QMARK_chld), cljs.core.List.EMPTY)
          })
        })
      }.call(null, cljs.core.logic.empty_s)
    }));
    if(false) {
      return cljs.core.take.call(null, false, xs__2905__auto__)
    }else {
      return xs__2905__auto__
    }
  }())).type, "Literal")) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'.-type", cljs.core.with_meta(cljs.core.list("\ufdd1'last", cljs.core.with_meta(cljs.core.list("\ufdd1'l/run*", cljs.core.vec(["\ufdd1'?chld"]), cljs.core.with_meta(cljs.core.list("\ufdd1'l/fresh", cljs.core.vec(["\ufdd1'?p"]), cljs.core.with_meta(cljs.core.list("\ufdd1'program", "\ufdd1'?p"), cljs.core.hash_map("\ufdd0'line", 
    138)), cljs.core.with_meta(cljs.core.list("\ufdd1'child+", "\ufdd1'?p", "\ufdd1'?chld"), cljs.core.hash_map("\ufdd0'line", 139))), cljs.core.hash_map("\ufdd0'line", 137))), cljs.core.hash_map("\ufdd0'line", 136))), cljs.core.hash_map("\ufdd0'line", 136))), cljs.core.hash_map("\ufdd0'line", 136)), "Literal"), cljs.core.hash_map("\ufdd0'line", 136))))].join(""));
  }
  if(cljs.core._EQ_.call(null, cljs.core.second.call(null, cljs.core.doall.call(null, function() {
    var xs__2905__auto__ = cljs.core.logic._take_STAR_.call(null, new cljs.core.logic.Inc(function() {
      return function(a__2897__auto__) {
        return new cljs.core.logic.Inc(function() {
          var _QMARK_chld = cljs.core.logic.lvar.call(null, "\ufdd1'?chld");
          return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2897__auto____$1) {
            return new cljs.core.logic.Inc(function() {
              var _QMARK_p = cljs.core.logic.lvar.call(null, "\ufdd1'?p");
              return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto____$1, jsrefact.predicates.program.call(null, _QMARK_p)), jsrefact.predicates.child_PLUS_.call(null, _QMARK_p, _QMARK_chld))
            })
          }), function(a__2906__auto__) {
            return cljs.core.cons.call(null, cljs.core.logic._reify.call(null, a__2906__auto__, _QMARK_chld), cljs.core.List.EMPTY)
          })
        })
      }.call(null, cljs.core.logic.empty_s)
    }));
    if(false) {
      return cljs.core.take.call(null, false, xs__2905__auto__)
    }else {
      return xs__2905__auto__
    }
  }())).type, "Identifier")) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'.-type", cljs.core.with_meta(cljs.core.list("\ufdd1'second", cljs.core.with_meta(cljs.core.list("\ufdd1'l/run*", cljs.core.vec(["\ufdd1'?chld"]), cljs.core.with_meta(cljs.core.list("\ufdd1'l/fresh", cljs.core.vec(["\ufdd1'?p"]), cljs.core.with_meta(cljs.core.list("\ufdd1'program", "\ufdd1'?p"), cljs.core.hash_map("\ufdd0'line", 
    144)), cljs.core.with_meta(cljs.core.list("\ufdd1'child+", "\ufdd1'?p", "\ufdd1'?chld"), cljs.core.hash_map("\ufdd0'line", 145))), cljs.core.hash_map("\ufdd0'line", 143))), cljs.core.hash_map("\ufdd0'line", 142))), cljs.core.hash_map("\ufdd0'line", 142))), cljs.core.hash_map("\ufdd0'line", 142)), "Identifier"), cljs.core.hash_map("\ufdd0'line", 142))))].join(""));
  }
  if(cljs.core._EQ_.call(null, cljs.core.first.call(null, cljs.core.doall.call(null, function() {
    var xs__2905__auto__ = cljs.core.logic._take_STAR_.call(null, new cljs.core.logic.Inc(function() {
      return function(a__2897__auto__) {
        return new cljs.core.logic.Inc(function() {
          var _QMARK_chld = cljs.core.logic.lvar.call(null, "\ufdd1'?chld");
          return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2897__auto____$1) {
            return new cljs.core.logic.Inc(function() {
              var _QMARK_p = cljs.core.logic.lvar.call(null, "\ufdd1'?p");
              return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto____$1, jsrefact.predicates.program.call(null, _QMARK_p)), jsrefact.predicates.child_PLUS_.call(null, _QMARK_p, _QMARK_chld))
            })
          }), function(a__2906__auto__) {
            return cljs.core.cons.call(null, cljs.core.logic._reify.call(null, a__2906__auto__, _QMARK_chld), cljs.core.List.EMPTY)
          })
        })
      }.call(null, cljs.core.logic.empty_s)
    }));
    if(false) {
      return cljs.core.take.call(null, false, xs__2905__auto__)
    }else {
      return xs__2905__auto__
    }
  }())).type, "VariableDeclarator")) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'.-type", cljs.core.with_meta(cljs.core.list("\ufdd1'first", cljs.core.with_meta(cljs.core.list("\ufdd1'l/run*", cljs.core.vec(["\ufdd1'?chld"]), cljs.core.with_meta(cljs.core.list("\ufdd1'l/fresh", cljs.core.vec(["\ufdd1'?p"]), cljs.core.with_meta(cljs.core.list("\ufdd1'program", "\ufdd1'?p"), cljs.core.hash_map("\ufdd0'line", 
    150)), cljs.core.with_meta(cljs.core.list("\ufdd1'child+", "\ufdd1'?p", "\ufdd1'?chld"), cljs.core.hash_map("\ufdd0'line", 151))), cljs.core.hash_map("\ufdd0'line", 149))), cljs.core.hash_map("\ufdd0'line", 148))), cljs.core.hash_map("\ufdd0'line", 148))), cljs.core.hash_map("\ufdd0'line", 148)), "VariableDeclarator"), cljs.core.hash_map("\ufdd0'line", 148))))].join(""));
  }
  if(cljs.core._EQ_.call(null, cljs.core.count.call(null, cljs.core.doall.call(null, function() {
    var xs__2905__auto__ = cljs.core.logic._take_STAR_.call(null, new cljs.core.logic.Inc(function() {
      return function(a__2897__auto__) {
        return new cljs.core.logic.Inc(function() {
          var _QMARK_kind = cljs.core.logic.lvar.call(null, "\ufdd1'?kind");
          return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2897__auto____$1) {
            return new cljs.core.logic.Inc(function() {
              var _QMARK_node = cljs.core.logic.lvar.call(null, "\ufdd1'?node");
              return cljs.core.logic._bind.call(null, a__2897__auto____$1, jsrefact.predicates.ast.call(null, _QMARK_kind, _QMARK_node))
            })
          }), function(a__2906__auto__) {
            return cljs.core.cons.call(null, cljs.core.logic._reify.call(null, a__2906__auto__, _QMARK_kind), cljs.core.List.EMPTY)
          })
        })
      }.call(null, cljs.core.logic.empty_s)
    }));
    if(false) {
      return cljs.core.take.call(null, false, xs__2905__auto__)
    }else {
      return xs__2905__auto__
    }
  }())), 4)) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'count", cljs.core.with_meta(cljs.core.list("\ufdd1'l/run*", cljs.core.vec(["\ufdd1'?kind"]), cljs.core.with_meta(cljs.core.list("\ufdd1'l/fresh", cljs.core.vec(["\ufdd1'?node"]), cljs.core.with_meta(cljs.core.list("\ufdd1'ast", "\ufdd1'?kind", "\ufdd1'?node"), cljs.core.hash_map("\ufdd0'line", 157))), cljs.core.hash_map("\ufdd0'line", 
    156))), cljs.core.hash_map("\ufdd0'line", 155))), cljs.core.hash_map("\ufdd0'line", 155)), 4), cljs.core.hash_map("\ufdd0'line", 155))))].join(""));
  }
  if(cljs.core._EQ_.call(null, cljs.core.first.call(null, cljs.core.doall.call(null, function() {
    var xs__2905__auto__ = cljs.core.logic._take_STAR_.call(null, new cljs.core.logic.Inc(function() {
      return function(a__2897__auto__) {
        return new cljs.core.logic.Inc(function() {
          var _QMARK_node = cljs.core.logic.lvar.call(null, "\ufdd1'?node");
          return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, jsrefact.predicates.ast.call(null, "Identifier", _QMARK_node)), function(a__2906__auto__) {
            return cljs.core.cons.call(null, cljs.core.logic._reify.call(null, a__2906__auto__, _QMARK_node), cljs.core.List.EMPTY)
          })
        })
      }.call(null, cljs.core.logic.empty_s)
    }));
    if(false) {
      return cljs.core.take.call(null, false, xs__2905__auto__)
    }else {
      return xs__2905__auto__
    }
  }())).type, "Identifier")) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'.-type", cljs.core.with_meta(cljs.core.list("\ufdd1'first", cljs.core.with_meta(cljs.core.list("\ufdd1'l/run*", cljs.core.vec(["\ufdd1'?node"]), cljs.core.with_meta(cljs.core.list("\ufdd1'ast", "Identifier", "\ufdd1'?node"), cljs.core.hash_map("\ufdd0'line", 161))), cljs.core.hash_map("\ufdd0'line", 160))), cljs.core.hash_map("\ufdd0'line", 
    160))), cljs.core.hash_map("\ufdd0'line", 160)), "Identifier"), cljs.core.hash_map("\ufdd0'line", 160))))].join(""));
  }
  if(cljs.core._EQ_.call(null, cljs.core.count.call(null, cljs.core.doall.call(null, function() {
    var xs__2905__auto__ = cljs.core.logic._take_STAR_.call(null, new cljs.core.logic.Inc(function() {
      return function(a__2897__auto__) {
        return new cljs.core.logic.Inc(function() {
          var _QMARK_node = cljs.core.logic.lvar.call(null, "\ufdd1'?node");
          return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, jsrefact.predicates.ast.call(null, "Identifier", _QMARK_node)), function(a__2906__auto__) {
            return cljs.core.cons.call(null, cljs.core.logic._reify.call(null, a__2906__auto__, _QMARK_node), cljs.core.List.EMPTY)
          })
        })
      }.call(null, cljs.core.logic.empty_s)
    }));
    if(false) {
      return cljs.core.take.call(null, false, xs__2905__auto__)
    }else {
      return xs__2905__auto__
    }
  }())), 1)) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'count", cljs.core.with_meta(cljs.core.list("\ufdd1'l/run*", cljs.core.vec(["\ufdd1'?node"]), cljs.core.with_meta(cljs.core.list("\ufdd1'ast", "Identifier", "\ufdd1'?node"), cljs.core.hash_map("\ufdd0'line", 165))), cljs.core.hash_map("\ufdd0'line", 164))), cljs.core.hash_map("\ufdd0'line", 164)), 1), cljs.core.hash_map("\ufdd0'line", 
    164))))].join(""));
  }
  if(cljs.core._EQ_.call(null, cljs.core.first.call(null, cljs.core.doall.call(null, function() {
    var xs__2905__auto__ = cljs.core.logic._take_STAR_.call(null, new cljs.core.logic.Inc(function() {
      return function(a__2897__auto__) {
        return new cljs.core.logic.Inc(function() {
          var _QMARK_kind = cljs.core.logic.lvar.call(null, "\ufdd1'?kind");
          return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2897__auto____$1) {
            return new cljs.core.logic.Inc(function() {
              var _QMARK_node = cljs.core.logic.lvar.call(null, "\ufdd1'?node");
              return cljs.core.logic._bind.call(null, a__2897__auto____$1, jsrefact.predicates.ast.call(null, _QMARK_kind, _QMARK_node))
            })
          }), function(a__2906__auto__) {
            return cljs.core.cons.call(null, cljs.core.logic._reify.call(null, a__2906__auto__, _QMARK_kind), cljs.core.List.EMPTY)
          })
        })
      }.call(null, cljs.core.logic.empty_s)
    }));
    if(false) {
      return cljs.core.take.call(null, false, xs__2905__auto__)
    }else {
      return xs__2905__auto__
    }
  }())), "VariableDeclaration")) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'first", cljs.core.with_meta(cljs.core.list("\ufdd1'l/run*", cljs.core.vec(["\ufdd1'?kind"]), cljs.core.with_meta(cljs.core.list("\ufdd1'l/fresh", cljs.core.vec(["\ufdd1'?node"]), cljs.core.with_meta(cljs.core.list("\ufdd1'ast", "\ufdd1'?kind", "\ufdd1'?node"), cljs.core.hash_map("\ufdd0'line", 170))), cljs.core.hash_map("\ufdd0'line", 
    169))), cljs.core.hash_map("\ufdd0'line", 168))), cljs.core.hash_map("\ufdd0'line", 168)), "VariableDeclaration"), cljs.core.hash_map("\ufdd0'line", 168))))].join(""));
  }
  if(cljs.core._EQ_.call(null, cljs.core.count.call(null, cljs.core.doall.call(null, function() {
    var xs__2905__auto__ = cljs.core.logic._take_STAR_.call(null, new cljs.core.logic.Inc(function() {
      return function(a__2897__auto__) {
        return new cljs.core.logic.Inc(function() {
          var _QMARK_kind = cljs.core.logic.lvar.call(null, "\ufdd1'?kind");
          return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2897__auto____$1) {
            return new cljs.core.logic.Inc(function() {
              var _QMARK_nodeOut = cljs.core.logic.lvar.call(null, "\ufdd1'?nodeOut");
              var _QMARK_no = cljs.core.logic.lvar.call(null, "\ufdd1'?no");
              return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto____$1, function(a__2885__auto__) {
                var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_no, jsrefact.tests.predicatestest.one);
                if(cljs.core.truth_(temp__3971__auto__)) {
                  var b__2886__auto__ = temp__3971__auto__;
                  return b__2886__auto__
                }else {
                  return null
                }
              }), jsrefact.predicates.ast_with_input.call(null, _QMARK_kind, _QMARK_no, _QMARK_nodeOut))
            })
          }), function(a__2906__auto__) {
            return cljs.core.cons.call(null, cljs.core.logic._reify.call(null, a__2906__auto__, _QMARK_kind), cljs.core.List.EMPTY)
          })
        })
      }.call(null, cljs.core.logic.empty_s)
    }));
    if(false) {
      return cljs.core.take.call(null, false, xs__2905__auto__)
    }else {
      return xs__2905__auto__
    }
  }())), 3)) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'count", cljs.core.with_meta(cljs.core.list("\ufdd1'l/run*", cljs.core.vec(["\ufdd1'?kind"]), cljs.core.with_meta(cljs.core.list("\ufdd1'l/fresh", cljs.core.vec(["\ufdd1'?nodeOut", "\ufdd1'?no"]), cljs.core.with_meta(cljs.core.list("\ufdd1'l/==", "\ufdd1'?no", "\ufdd1'one"), cljs.core.hash_map("\ufdd0'line", 177)), 
    cljs.core.with_meta(cljs.core.list("\ufdd1'ast-with-input", "\ufdd1'?kind", "\ufdd1'?no", "\ufdd1'?nodeOut"), cljs.core.hash_map("\ufdd0'line", 178))), cljs.core.hash_map("\ufdd0'line", 176))), cljs.core.hash_map("\ufdd0'line", 175))), cljs.core.hash_map("\ufdd0'line", 175)), 3), cljs.core.hash_map("\ufdd0'line", 175))))].join(""));
  }
  if(cljs.core._EQ_.call(null, cljs.core.first.call(null, cljs.core.doall.call(null, function() {
    var xs__2905__auto__ = cljs.core.logic._take_STAR_.call(null, new cljs.core.logic.Inc(function() {
      return function(a__2897__auto__) {
        return new cljs.core.logic.Inc(function() {
          var _QMARK_kind = cljs.core.logic.lvar.call(null, "\ufdd1'?kind");
          return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2897__auto____$1) {
            return new cljs.core.logic.Inc(function() {
              var _QMARK_nodeOut = cljs.core.logic.lvar.call(null, "\ufdd1'?nodeOut");
              var _QMARK_no = cljs.core.logic.lvar.call(null, "\ufdd1'?no");
              return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto____$1, function(a__2885__auto__) {
                var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_no, jsrefact.tests.predicatestest.one);
                if(cljs.core.truth_(temp__3971__auto__)) {
                  var b__2886__auto__ = temp__3971__auto__;
                  return b__2886__auto__
                }else {
                  return null
                }
              }), jsrefact.predicates.ast_with_input.call(null, _QMARK_kind, _QMARK_no, _QMARK_nodeOut))
            })
          }), function(a__2906__auto__) {
            return cljs.core.cons.call(null, cljs.core.logic._reify.call(null, a__2906__auto__, _QMARK_kind), cljs.core.List.EMPTY)
          })
        })
      }.call(null, cljs.core.logic.empty_s)
    }));
    if(false) {
      return cljs.core.take.call(null, false, xs__2905__auto__)
    }else {
      return xs__2905__auto__
    }
  }())), "VariableDeclarator")) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'first", cljs.core.with_meta(cljs.core.list("\ufdd1'l/run*", cljs.core.vec(["\ufdd1'?kind"]), cljs.core.with_meta(cljs.core.list("\ufdd1'l/fresh", cljs.core.vec(["\ufdd1'?nodeOut", "\ufdd1'?no"]), cljs.core.with_meta(cljs.core.list("\ufdd1'l/==", "\ufdd1'?no", "\ufdd1'one"), cljs.core.hash_map("\ufdd0'line", 183)), 
    cljs.core.with_meta(cljs.core.list("\ufdd1'ast-with-input", "\ufdd1'?kind", "\ufdd1'?no", "\ufdd1'?nodeOut"), cljs.core.hash_map("\ufdd0'line", 184))), cljs.core.hash_map("\ufdd0'line", 182))), cljs.core.hash_map("\ufdd0'line", 181))), cljs.core.hash_map("\ufdd0'line", 181)), "VariableDeclarator"), cljs.core.hash_map("\ufdd0'line", 181))))].join(""));
  }
  if(cljs.core._EQ_.call(null, cljs.core.first.call(null, cljs.core.doall.call(null, function() {
    var xs__2905__auto__ = cljs.core.logic._take_STAR_.call(null, new cljs.core.logic.Inc(function() {
      return function(a__2897__auto__) {
        return new cljs.core.logic.Inc(function() {
          var _QMARK_kind = cljs.core.logic.lvar.call(null, "\ufdd1'?kind");
          return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2897__auto____$1) {
            return new cljs.core.logic.Inc(function() {
              var _QMARK_nodeOut = cljs.core.logic.lvar.call(null, "\ufdd1'?nodeOut");
              var _QMARK_no = cljs.core.logic.lvar.call(null, "\ufdd1'?no");
              return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto____$1, function(a__2885__auto__) {
                var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_no, jsrefact.tests.predicatestest.sec);
                if(cljs.core.truth_(temp__3971__auto__)) {
                  var b__2886__auto__ = temp__3971__auto__;
                  return b__2886__auto__
                }else {
                  return null
                }
              }), jsrefact.predicates.ast_with_input.call(null, _QMARK_kind, _QMARK_no, _QMARK_nodeOut))
            })
          }), function(a__2906__auto__) {
            return cljs.core.cons.call(null, cljs.core.logic._reify.call(null, a__2906__auto__, _QMARK_kind), cljs.core.List.EMPTY)
          })
        })
      }.call(null, cljs.core.logic.empty_s)
    }));
    if(false) {
      return cljs.core.take.call(null, false, xs__2905__auto__)
    }else {
      return xs__2905__auto__
    }
  }())), "Literal")) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'first", cljs.core.with_meta(cljs.core.list("\ufdd1'l/run*", cljs.core.vec(["\ufdd1'?kind"]), cljs.core.with_meta(cljs.core.list("\ufdd1'l/fresh", cljs.core.vec(["\ufdd1'?nodeOut", "\ufdd1'?no"]), cljs.core.with_meta(cljs.core.list("\ufdd1'l/==", "\ufdd1'?no", "\ufdd1'sec"), cljs.core.hash_map("\ufdd0'line", 189)), 
    cljs.core.with_meta(cljs.core.list("\ufdd1'ast-with-input", "\ufdd1'?kind", "\ufdd1'?no", "\ufdd1'?nodeOut"), cljs.core.hash_map("\ufdd0'line", 190))), cljs.core.hash_map("\ufdd0'line", 188))), cljs.core.hash_map("\ufdd0'line", 187))), cljs.core.hash_map("\ufdd0'line", 187)), "Literal"), cljs.core.hash_map("\ufdd0'line", 187))))].join(""));
  }
  if(cljs.core._EQ_.call(null, cljs.core.count.call(null, cljs.core.doall.call(null, function() {
    var xs__2905__auto__ = cljs.core.logic._take_STAR_.call(null, new cljs.core.logic.Inc(function() {
      return function(a__2897__auto__) {
        return new cljs.core.logic.Inc(function() {
          var _QMARK_kind = cljs.core.logic.lvar.call(null, "\ufdd1'?kind");
          return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2897__auto____$1) {
            return new cljs.core.logic.Inc(function() {
              var _QMARK_nodeOut = cljs.core.logic.lvar.call(null, "\ufdd1'?nodeOut");
              var _QMARK_no = cljs.core.logic.lvar.call(null, "\ufdd1'?no");
              return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto____$1, function(a__2885__auto__) {
                var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_no, jsrefact.tests.predicatestest.sec);
                if(cljs.core.truth_(temp__3971__auto__)) {
                  var b__2886__auto__ = temp__3971__auto__;
                  return b__2886__auto__
                }else {
                  return null
                }
              }), jsrefact.predicates.ast_with_input.call(null, _QMARK_kind, _QMARK_no, _QMARK_nodeOut))
            })
          }), function(a__2906__auto__) {
            return cljs.core.cons.call(null, cljs.core.logic._reify.call(null, a__2906__auto__, _QMARK_kind), cljs.core.List.EMPTY)
          })
        })
      }.call(null, cljs.core.logic.empty_s)
    }));
    if(false) {
      return cljs.core.take.call(null, false, xs__2905__auto__)
    }else {
      return xs__2905__auto__
    }
  }())), 1)) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'count", cljs.core.with_meta(cljs.core.list("\ufdd1'l/run*", cljs.core.vec(["\ufdd1'?kind"]), cljs.core.with_meta(cljs.core.list("\ufdd1'l/fresh", cljs.core.vec(["\ufdd1'?nodeOut", "\ufdd1'?no"]), cljs.core.with_meta(cljs.core.list("\ufdd1'l/==", "\ufdd1'?no", "\ufdd1'sec"), cljs.core.hash_map("\ufdd0'line", 195)), 
    cljs.core.with_meta(cljs.core.list("\ufdd1'ast-with-input", "\ufdd1'?kind", "\ufdd1'?no", "\ufdd1'?nodeOut"), cljs.core.hash_map("\ufdd0'line", 196))), cljs.core.hash_map("\ufdd0'line", 194))), cljs.core.hash_map("\ufdd0'line", 193))), cljs.core.hash_map("\ufdd0'line", 193)), 1), cljs.core.hash_map("\ufdd0'line", 193))))].join(""));
  }
  if(cljs.core._EQ_.call(null, cljs.core.count.call(null, cljs.core.doall.call(null, function() {
    var xs__2905__auto__ = cljs.core.logic._take_STAR_.call(null, new cljs.core.logic.Inc(function() {
      return function(a__2897__auto__) {
        return new cljs.core.logic.Inc(function() {
          var _QMARK_ast = cljs.core.logic.lvar.call(null, "\ufdd1'?ast");
          return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2897__auto____$1) {
            return new cljs.core.logic.Inc(function() {
              var _QMARK_p = cljs.core.logic.lvar.call(null, "\ufdd1'?p");
              return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto____$1, jsrefact.predicates.program.call(null, _QMARK_p)), jsrefact.predicates.ast_literal.call(null, _QMARK_p, _QMARK_ast))
            })
          }), function(a__2906__auto__) {
            return cljs.core.cons.call(null, cljs.core.logic._reify.call(null, a__2906__auto__, _QMARK_ast), cljs.core.List.EMPTY)
          })
        })
      }.call(null, cljs.core.logic.empty_s)
    }));
    if(false) {
      return cljs.core.take.call(null, false, xs__2905__auto__)
    }else {
      return xs__2905__auto__
    }
  }())), 1)) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'count", cljs.core.with_meta(cljs.core.list("\ufdd1'l/run*", cljs.core.vec(["\ufdd1'?ast"]), cljs.core.with_meta(cljs.core.list("\ufdd1'l/fresh", cljs.core.vec(["\ufdd1'?p"]), cljs.core.with_meta(cljs.core.list("\ufdd1'program", "\ufdd1'?p"), cljs.core.hash_map("\ufdd0'line", 203)), cljs.core.with_meta(cljs.core.list("\ufdd1'ast-literal", 
    "\ufdd1'?p", "\ufdd1'?ast"), cljs.core.hash_map("\ufdd0'line", 204))), cljs.core.hash_map("\ufdd0'line", 202))), cljs.core.hash_map("\ufdd0'line", 201))), cljs.core.hash_map("\ufdd0'line", 201)), 1), cljs.core.hash_map("\ufdd0'line", 201))))].join(""));
  }
  if(cljs.core._EQ_.call(null, cljs.core.first.call(null, cljs.core.doall.call(null, function() {
    var xs__2905__auto__ = cljs.core.logic._take_STAR_.call(null, new cljs.core.logic.Inc(function() {
      return function(a__2897__auto__) {
        return new cljs.core.logic.Inc(function() {
          var _QMARK_value = cljs.core.logic.lvar.call(null, "\ufdd1'?value");
          return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2897__auto____$1) {
            return new cljs.core.logic.Inc(function() {
              var _QMARK_p = cljs.core.logic.lvar.call(null, "\ufdd1'?p");
              var _QMARK_ast = cljs.core.logic.lvar.call(null, "\ufdd1'?ast");
              return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto____$1, jsrefact.predicates.program.call(null, _QMARK_p)), jsrefact.predicates.ast_literal.call(null, _QMARK_p, _QMARK_ast)), jsrefact.predicates.ast_value.call(null, _QMARK_ast, _QMARK_value))
            })
          }), function(a__2906__auto__) {
            return cljs.core.cons.call(null, cljs.core.logic._reify.call(null, a__2906__auto__, _QMARK_value), cljs.core.List.EMPTY)
          })
        })
      }.call(null, cljs.core.logic.empty_s)
    }));
    if(false) {
      return cljs.core.take.call(null, false, xs__2905__auto__)
    }else {
      return xs__2905__auto__
    }
  }())), 43)) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'first", cljs.core.with_meta(cljs.core.list("\ufdd1'l/run*", cljs.core.vec(["\ufdd1'?value"]), cljs.core.with_meta(cljs.core.list("\ufdd1'l/fresh", cljs.core.vec(["\ufdd1'?p", "\ufdd1'?ast"]), cljs.core.with_meta(cljs.core.list("\ufdd1'program", "\ufdd1'?p"), cljs.core.hash_map("\ufdd0'line", 210)), cljs.core.with_meta(cljs.core.list("\ufdd1'ast-literal", 
    "\ufdd1'?p", "\ufdd1'?ast"), cljs.core.hash_map("\ufdd0'line", 211)), cljs.core.with_meta(cljs.core.list("\ufdd1'ast-value", "\ufdd1'?ast", "\ufdd1'?value"), cljs.core.hash_map("\ufdd0'line", 212))), cljs.core.hash_map("\ufdd0'line", 209))), cljs.core.hash_map("\ufdd0'line", 208))), cljs.core.hash_map("\ufdd0'line", 208)), 43), cljs.core.hash_map("\ufdd0'line", 208))))].join(""));
  }
  if(cljs.core._EQ_.call(null, cljs.core.count.call(null, cljs.core.doall.call(null, function() {
    var xs__2905__auto__ = cljs.core.logic._take_STAR_.call(null, new cljs.core.logic.Inc(function() {
      return function(a__2897__auto__) {
        return new cljs.core.logic.Inc(function() {
          var _QMARK_n = cljs.core.logic.lvar.call(null, "\ufdd1'?n");
          return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, jsrefact.predicates.ast_name.call(null, _QMARK_n, "x")), function(a__2906__auto__) {
            return cljs.core.cons.call(null, cljs.core.logic._reify.call(null, a__2906__auto__, _QMARK_n), cljs.core.List.EMPTY)
          })
        })
      }.call(null, cljs.core.logic.empty_s)
    }));
    if(false) {
      return cljs.core.take.call(null, false, xs__2905__auto__)
    }else {
      return xs__2905__auto__
    }
  }())), 1)) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'count", cljs.core.with_meta(cljs.core.list("\ufdd1'l/run*", cljs.core.vec(["\ufdd1'?n"]), cljs.core.with_meta(cljs.core.list("\ufdd1'ast-name", "\ufdd1'?n", "x"), cljs.core.hash_map("\ufdd0'line", 215))), cljs.core.hash_map("\ufdd0'line", 215))), cljs.core.hash_map("\ufdd0'line", 215)), 1), cljs.core.hash_map("\ufdd0'line", 
    215))))].join(""));
  }
  if(cljs.core._EQ_.call(null, cljs.core.first.call(null, cljs.core.doall.call(null, function() {
    var xs__2905__auto__ = cljs.core.logic._take_STAR_.call(null, new cljs.core.logic.Inc(function() {
      return function(a__2897__auto__) {
        return new cljs.core.logic.Inc(function() {
          var _QMARK_n = cljs.core.logic.lvar.call(null, "\ufdd1'?n");
          return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, jsrefact.predicates.ast_name.call(null, _QMARK_n, "x")), function(a__2906__auto__) {
            return cljs.core.cons.call(null, cljs.core.logic._reify.call(null, a__2906__auto__, _QMARK_n), cljs.core.List.EMPTY)
          })
        })
      }.call(null, cljs.core.logic.empty_s)
    }));
    if(false) {
      return cljs.core.take.call(null, false, xs__2905__auto__)
    }else {
      return xs__2905__auto__
    }
  }())).name, "x")) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'.-name", cljs.core.with_meta(cljs.core.list("\ufdd1'first", cljs.core.with_meta(cljs.core.list("\ufdd1'l/run*", cljs.core.vec(["\ufdd1'?n"]), cljs.core.with_meta(cljs.core.list("\ufdd1'ast-name", "\ufdd1'?n", "x"), cljs.core.hash_map("\ufdd0'line", 217))), cljs.core.hash_map("\ufdd0'line", 217))), cljs.core.hash_map("\ufdd0'line", 
    217))), cljs.core.hash_map("\ufdd0'line", 217)), "x"), cljs.core.hash_map("\ufdd0'line", 217))))].join(""));
  }
  if(cljs.core._EQ_.call(null, cljs.core.count.call(null, cljs.core.doall.call(null, function() {
    var xs__2905__auto__ = cljs.core.logic._take_STAR_.call(null, new cljs.core.logic.Inc(function() {
      return function(a__2897__auto__) {
        return new cljs.core.logic.Inc(function() {
          var _QMARK_v = cljs.core.logic.lvar.call(null, "\ufdd1'?v");
          return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2897__auto____$1) {
            return new cljs.core.logic.Inc(function() {
              var _QMARK_n = cljs.core.logic.lvar.call(null, "\ufdd1'?n");
              return cljs.core.logic._bind.call(null, a__2897__auto____$1, jsrefact.predicates.ast_name.call(null, _QMARK_n, _QMARK_v))
            })
          }), function(a__2906__auto__) {
            return cljs.core.cons.call(null, cljs.core.logic._reify.call(null, a__2906__auto__, _QMARK_v), cljs.core.List.EMPTY)
          })
        })
      }.call(null, cljs.core.logic.empty_s)
    }));
    if(false) {
      return cljs.core.take.call(null, false, xs__2905__auto__)
    }else {
      return xs__2905__auto__
    }
  }())), 1)) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'count", cljs.core.with_meta(cljs.core.list("\ufdd1'l/run*", cljs.core.vec(["\ufdd1'?v"]), cljs.core.with_meta(cljs.core.list("\ufdd1'l/fresh", cljs.core.vec(["\ufdd1'?n"]), cljs.core.with_meta(cljs.core.list("\ufdd1'ast-name", "\ufdd1'?n", "\ufdd1'?v"), cljs.core.hash_map("\ufdd0'line", 222))), cljs.core.hash_map("\ufdd0'line", 
    221))), cljs.core.hash_map("\ufdd0'line", 220))), cljs.core.hash_map("\ufdd0'line", 220)), 1), cljs.core.hash_map("\ufdd0'line", 220))))].join(""));
  }
  if(cljs.core._EQ_.call(null, cljs.core.count.call(null, cljs.core.doall.call(null, function() {
    var xs__2905__auto__ = cljs.core.logic._take_STAR_.call(null, new cljs.core.logic.Inc(function() {
      return function(a__2897__auto__) {
        return new cljs.core.logic.Inc(function() {
          var _QMARK_n = cljs.core.logic.lvar.call(null, "\ufdd1'?n");
          return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, jsrefact.predicates.ast_name.call(null, _QMARK_n, "y")), function(a__2906__auto__) {
            return cljs.core.cons.call(null, cljs.core.logic._reify.call(null, a__2906__auto__, _QMARK_n), cljs.core.List.EMPTY)
          })
        })
      }.call(null, cljs.core.logic.empty_s)
    }));
    if(false) {
      return cljs.core.take.call(null, false, xs__2905__auto__)
    }else {
      return xs__2905__auto__
    }
  }())), 0)) {
  }else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'=", cljs.core.with_meta(cljs.core.list("\ufdd1'count", cljs.core.with_meta(cljs.core.list("\ufdd1'l/run*", cljs.core.vec(["\ufdd1'?n"]), cljs.core.with_meta(cljs.core.list("\ufdd1'ast-name", "\ufdd1'?n", "y"), cljs.core.hash_map("\ufdd0'line", 225))), cljs.core.hash_map("\ufdd0'line", 225))), cljs.core.hash_map("\ufdd0'line", 225)), 0), cljs.core.hash_map("\ufdd0'line", 
    225))))].join(""));
  }
  return cljs.core.println.call(null, "  AST Unit tests finished.")
};
goog.provide("jsrefact.tests");
goog.require("cljs.core");
goog.require("jsrefact.tests.refacttest");
goog.require("jsrefact.tests.predicatestest");
jsrefact.tests.success = 0;
jsrefact.tests.run = function run() {
  cljs.core.println.call(null, "Start all tests");
  jsrefact.tests.predicatestest.run.call(null);
  cljs.core.println.call(null, "All tests succeeded.");
  alert("All tests succeeded.");
  return jsrefact.tests.success
};
goog.exportSymbol("jsrefact.tests.run", jsrefact.tests.run);
