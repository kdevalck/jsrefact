var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.DEBUG = true;
goog.LOCALE = "en";
goog.provide = function(name) {
  if(!COMPILED) {
    if(goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while(namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if(goog.getObjectByName(namespace)) {
        break
      }
      goog.implicitNamespaces_[namespace] = true
    }
  }
  goog.exportPath_(name)
};
goog.setTestOnly = function(opt_message) {
  if(COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + opt_message ? ": " + opt_message : ".");
  }
};
if(!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && !!goog.getObjectByName(name)
  };
  goog.implicitNamespaces_ = {}
}
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if(!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0])
  }
  for(var part;parts.length && (part = parts.shift());) {
    if(!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object
    }else {
      if(cur[part]) {
        cur = cur[part]
      }else {
        cur = cur[part] = {}
      }
    }
  }
};
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for(var part;part = parts.shift();) {
    if(goog.isDefAndNotNull(cur[part])) {
      cur = cur[part]
    }else {
      return null
    }
  }
  return cur
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for(var x in obj) {
    global[x] = obj[x]
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if(!COMPILED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for(var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if(!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {}
      }
      deps.pathToNames[path][provide] = true
    }
    for(var j = 0;require = requires[j];j++) {
      if(!(path in deps.requires)) {
        deps.requires[path] = {}
      }
      deps.requires[path][require] = true
    }
  }
};
goog.ENABLE_DEBUG_LOADER = true;
goog.require = function(name) {
  if(!COMPILED) {
    if(goog.isProvided_(name)) {
      return
    }
    if(goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if(path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if(goog.global.console) {
      goog.global.console["error"](errorMessage)
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(var_args) {
  return arguments[0]
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    return ctor.instance_ || (ctor.instance_ = new ctor)
  }
};
if(!COMPILED && goog.ENABLE_DEBUG_LOADER) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc
  };
  goog.findBasePath_ = function() {
    if(goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return
    }else {
      if(!goog.inHtmlDocument_()) {
        return
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for(var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if(src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if(!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true
    }
  };
  goog.writeScriptTag_ = function(src) {
    if(goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      doc.write('<script type="text/javascript" src="' + src + '"></' + "script>");
      return true
    }else {
      return false
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if(path in deps.written) {
        return
      }
      if(path in deps.visited) {
        if(!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path)
        }
        return
      }
      deps.visited[path] = true;
      if(path in deps.requires) {
        for(var requireName in deps.requires[path]) {
          if(!goog.isProvided_(requireName)) {
            if(requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName])
            }else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if(!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path)
      }
    }
    for(var path in goog.included_) {
      if(!deps.written[path]) {
        visitNode(path)
      }
    }
    for(var i = 0;i < scripts.length;i++) {
      if(scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i])
      }else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if(rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule]
    }else {
      return null
    }
  };
  goog.findBasePath_();
  if(!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js")
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if(s == "object") {
    if(value) {
      if(value instanceof Array) {
        return"array"
      }else {
        if(value instanceof Object) {
          return s
        }
      }
      var className = Object.prototype.toString.call(value);
      if(className == "[object Window]") {
        return"object"
      }
      if(className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return"array"
      }
      if(className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return"function"
      }
    }else {
      return"null"
    }
  }else {
    if(s == "function" && typeof value.call == "undefined") {
      return"object"
    }
  }
  return s
};
goog.propertyIsEnumerableCustom_ = function(object, propName) {
  if(propName in object) {
    for(var key in object) {
      if(key == propName && Object.prototype.hasOwnProperty.call(object, propName)) {
        return true
      }
    }
  }
  return false
};
goog.propertyIsEnumerable_ = function(object, propName) {
  if(object instanceof Object) {
    return Object.prototype.propertyIsEnumerable.call(object, propName)
  }else {
    return goog.propertyIsEnumerableCustom_(object, propName)
  }
};
goog.isDef = function(val) {
  return val !== undefined
};
goog.isNull = function(val) {
  return val === null
};
goog.isDefAndNotNull = function(val) {
  return val != null
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array"
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number"
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function"
};
goog.isString = function(val) {
  return typeof val == "string"
};
goog.isBoolean = function(val) {
  return typeof val == "boolean"
};
goog.isNumber = function(val) {
  return typeof val == "number"
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function"
};
goog.isObject = function(val) {
  var type = goog.typeOf(val);
  return type == "object" || type == "array" || type == "function"
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_)
};
goog.removeUid = function(obj) {
  if("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_)
  }
  try {
    delete obj[goog.UID_PROPERTY_]
  }catch(ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + Math.floor(Math.random() * 2147483648).toString(36);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if(type == "object" || type == "array") {
    if(obj.clone) {
      return obj.clone()
    }
    var clone = type == "array" ? [] : {};
    for(var key in obj) {
      clone[key] = goog.cloneObject(obj[key])
    }
    return clone
  }
  return obj
};
Object.prototype.clone;
goog.bindNative_ = function(fn, selfObj, var_args) {
  return fn.call.apply(fn.bind, arguments)
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if(!fn) {
    throw new Error;
  }
  if(arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs)
    }
  }else {
    return function() {
      return fn.apply(selfObj, arguments)
    }
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if(Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_
  }else {
    goog.bind = goog.bindJs_
  }
  return goog.bind.apply(null, arguments)
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = Array.prototype.slice.call(arguments);
    newArgs.unshift.apply(newArgs, args);
    return fn.apply(this, newArgs)
  }
};
goog.mixin = function(target, source) {
  for(var x in source) {
    target[x] = source[x]
  }
};
goog.now = Date.now || function() {
  return+new Date
};
goog.globalEval = function(script) {
  if(goog.global.execScript) {
    goog.global.execScript(script, "JavaScript")
  }else {
    if(goog.global.eval) {
      if(goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ = 1;");
        if(typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true
        }else {
          goog.evalWorksForGlobals_ = false
        }
      }
      if(goog.evalWorksForGlobals_) {
        goog.global.eval(script)
      }else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt)
      }
    }else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for(var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]))
    }
    return mapped.join("-")
  };
  var rename;
  if(goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts
  }else {
    rename = function(a) {
      return a
    }
  }
  if(opt_modifier) {
    return className + "-" + rename(opt_modifier)
  }else {
    return rename(className)
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if(!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING
}
goog.getMsg = function(str, opt_values) {
  var values = opt_values || {};
  for(var key in values) {
    var value = ("" + values[key]).replace(/\$/g, "$$$$");
    str = str.replace(new RegExp("\\{\\$" + key + "\\}", "gi"), value)
  }
  return str
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo)
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if(caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1))
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for(var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if(ctor.prototype[opt_methodName] === caller) {
      foundCaller = true
    }else {
      if(foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args)
      }
    }
  }
  if(me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args)
  }else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global)
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  this.stack = (new Error).stack || "";
  if(opt_msg) {
    this.message = String(opt_msg)
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0
};
goog.string.subs = function(str, var_args) {
  for(var i = 1;i < arguments.length;i++) {
    var replacement = String(arguments[i]).replace(/\$/g, "$$$$");
    str = str.replace(/\%s/, replacement)
  }
  return str
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "")
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str)
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str))
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str)
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str)
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str)
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str)
};
goog.string.isSpace = function(ch) {
  return ch == " "
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "\u0080" && ch <= "\ufffd"
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ")
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n")
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ")
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ")
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "")
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "")
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "")
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "")
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if(test1 < test2) {
    return-1
  }else {
    if(test1 == test2) {
      return 0
    }else {
      return 1
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if(str1 == str2) {
    return 0
  }
  if(!str1) {
    return-1
  }
  if(!str2) {
    return 1
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for(var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if(a != b) {
      var num1 = parseInt(a, 10);
      if(!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if(!isNaN(num2) && num1 - num2) {
          return num1 - num2
        }
      }
      return a < b ? -1 : 1
    }
  }
  if(tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length
  }
  return str1 < str2 ? -1 : 1
};
goog.string.encodeUriRegExp_ = /^[a-zA-Z0-9\-_.!~*'()]*$/;
goog.string.urlEncode = function(str) {
  str = String(str);
  if(!goog.string.encodeUriRegExp_.test(str)) {
    return encodeURIComponent(str)
  }
  return str
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "))
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "<br />" : "<br>")
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if(opt_isLikelyToContainHtmlChars) {
    return str.replace(goog.string.amperRe_, "&amp;").replace(goog.string.ltRe_, "&lt;").replace(goog.string.gtRe_, "&gt;").replace(goog.string.quotRe_, "&quot;")
  }else {
    if(!goog.string.allRe_.test(str)) {
      return str
    }
    if(str.indexOf("&") != -1) {
      str = str.replace(goog.string.amperRe_, "&amp;")
    }
    if(str.indexOf("<") != -1) {
      str = str.replace(goog.string.ltRe_, "&lt;")
    }
    if(str.indexOf(">") != -1) {
      str = str.replace(goog.string.gtRe_, "&gt;")
    }
    if(str.indexOf('"') != -1) {
      str = str.replace(goog.string.quotRe_, "&quot;")
    }
    return str
  }
};
goog.string.amperRe_ = /&/g;
goog.string.ltRe_ = /</g;
goog.string.gtRe_ = />/g;
goog.string.quotRe_ = /\"/g;
goog.string.allRe_ = /[&<>\"]/;
goog.string.unescapeEntities = function(str) {
  if(goog.string.contains(str, "&")) {
    if("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str)
    }else {
      return goog.string.unescapePureXmlEntities_(str)
    }
  }
  return str
};
goog.string.unescapeEntitiesUsingDom_ = function(str) {
  var seen = {"&amp;":"&", "&lt;":"<", "&gt;":">", "&quot;":'"'};
  var div = document.createElement("div");
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if(value) {
      return value
    }
    if(entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if(!isNaN(n)) {
        value = String.fromCharCode(n)
      }
    }
    if(!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1)
    }
    return seen[s] = value
  })
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return"&";
      case "lt":
        return"<";
      case "gt":
        return">";
      case "quot":
        return'"';
      default:
        if(entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if(!isNaN(n)) {
            return String.fromCharCode(n)
          }
        }
        return s
    }
  })
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " &#160;"), opt_xml)
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for(var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if(str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1)
    }
  }
  return str
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if(opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str)
  }
  if(str.length > chars) {
    str = str.substring(0, chars - 3) + "..."
  }
  if(opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str)
  }
  return str
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if(opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str)
  }
  if(opt_trailingChars && str.length > chars) {
    if(opt_trailingChars > chars) {
      opt_trailingChars = chars
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint)
  }else {
    if(str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos)
    }
  }
  if(opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str)
  }
  return str
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\u0008":"\\b", "\u000c":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if(s.quote) {
    return s.quote()
  }else {
    var sb = ['"'];
    for(var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch))
    }
    sb.push('"');
    return sb.join("")
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for(var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i))
  }
  return sb.join("")
};
goog.string.escapeChar = function(c) {
  if(c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c]
  }
  if(c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c]
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if(cc > 31 && cc < 127) {
    rv = c
  }else {
    if(cc < 256) {
      rv = "\\x";
      if(cc < 16 || cc > 256) {
        rv += "0"
      }
    }else {
      rv = "\\u";
      if(cc < 4096) {
        rv += "0"
      }
    }
    rv += cc.toString(16).toUpperCase()
  }
  return goog.string.jsEscapeCache_[c] = rv
};
goog.string.toMap = function(s) {
  var rv = {};
  for(var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true
  }
  return rv
};
goog.string.contains = function(s, ss) {
  return s.indexOf(ss) != -1
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if(index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength)
  }
  return resultStr
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "")
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "")
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08")
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string)
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if(index == -1) {
    index = s.length
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj)
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "")
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36)
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for(var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if(v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2])
    }while(order == 0)
  }
  return order
};
goog.string.compareElements_ = function(left, right) {
  if(left < right) {
    return-1
  }else {
    if(left > right) {
      return 1
    }
  }
  return 0
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for(var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_
  }
  return result
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return"goog_" + goog.string.uniqueStringCounter_++
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if(num == 0 && goog.string.isEmpty(str)) {
    return NaN
  }
  return num
};
goog.string.toCamelCaseCache_ = {};
goog.string.toCamelCase = function(str) {
  return goog.string.toCamelCaseCache_[str] || (goog.string.toCamelCaseCache_[str] = String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase()
  }))
};
goog.string.toSelectorCaseCache_ = {};
goog.string.toSelectorCase = function(str) {
  return goog.string.toSelectorCaseCache_[str] || (goog.string.toSelectorCaseCache_[str] = String(str).replace(/([A-Z])/g, "-$1").toLowerCase())
};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.string");
goog.asserts.ENABLE_ASSERTS = goog.DEBUG;
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if(givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs
  }else {
    if(defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs
    }
  }
  throw new goog.asserts.AssertionError("" + message, args || []);
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return condition
};
goog.asserts.fail = function(opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS) {
    throw new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return value
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return value
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return value
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return value
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return value
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2))
  }
  return value
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3))
  }
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.NATIVE_ARRAY_PROTOTYPES = true;
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1]
};
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.indexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex)
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if(goog.isString(arr)) {
    if(!goog.isString(obj) || obj.length != 1) {
      return-1
    }
    return arr.indexOf(obj, fromIndex)
  }
  for(var i = fromIndex;i < arr.length;i++) {
    if(i in arr && arr[i] === obj) {
      return i
    }
  }
  return-1
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.lastIndexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex)
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if(fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex)
  }
  if(goog.isString(arr)) {
    if(!goog.isString(obj) || obj.length != 1) {
      return-1
    }
    return arr.lastIndexOf(obj, fromIndex)
  }
  for(var i = fromIndex;i >= 0;i--) {
    if(i in arr && arr[i] === obj) {
      return i
    }
  }
  return-1
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.forEach ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj)
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = 0;i < l;i++) {
    if(i in arr2) {
      f.call(opt_obj, arr2[i], i, arr)
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = l - 1;i >= 0;--i) {
    if(i in arr2) {
      f.call(opt_obj, arr2[i], i, arr)
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.filter ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj)
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = 0;i < l;i++) {
    if(i in arr2) {
      var val = arr2[i];
      if(f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val
      }
    }
  }
  return res
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.map ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj)
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = 0;i < l;i++) {
    if(i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr)
    }
  }
  return res
};
goog.array.reduce = function(arr, f, val, opt_obj) {
  if(arr.reduce) {
    if(opt_obj) {
      return arr.reduce(goog.bind(f, opt_obj), val)
    }else {
      return arr.reduce(f, val)
    }
  }
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr)
  });
  return rval
};
goog.array.reduceRight = function(arr, f, val, opt_obj) {
  if(arr.reduceRight) {
    if(opt_obj) {
      return arr.reduceRight(goog.bind(f, opt_obj), val)
    }else {
      return arr.reduceRight(f, val)
    }
  }
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr)
  });
  return rval
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.some ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj)
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = 0;i < l;i++) {
    if(i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true
    }
  }
  return false
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.every ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj)
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = 0;i < l;i++) {
    if(i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false
    }
  }
  return true
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i]
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = 0;i < l;i++) {
    if(i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i
    }
  }
  return-1
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i]
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for(var i = l - 1;i >= 0;i--) {
    if(i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i
    }
  }
  return-1
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0
};
goog.array.clear = function(arr) {
  if(!goog.isArray(arr)) {
    for(var i = arr.length - 1;i >= 0;i--) {
      delete arr[i]
    }
  }
  arr.length = 0
};
goog.array.insert = function(arr, obj) {
  if(!goog.array.contains(arr, obj)) {
    arr.push(obj)
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj)
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd)
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if(arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj)
  }else {
    goog.array.insertAt(arr, obj, i)
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if(rv = i >= 0) {
    goog.array.removeAt(arr, i)
  }
  return rv
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if(i >= 0) {
    goog.array.removeAt(arr, i);
    return true
  }
  return false
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments)
};
goog.array.clone = function(arr) {
  if(goog.isArray(arr)) {
    return goog.array.concat(arr)
  }else {
    var rv = [];
    for(var i = 0, len = arr.length;i < len;i++) {
      rv[i] = arr[i]
    }
    return rv
  }
};
goog.array.toArray = function(object) {
  if(goog.isArray(object)) {
    return goog.array.concat(object)
  }
  return goog.array.clone(object)
};
goog.array.extend = function(arr1, var_args) {
  for(var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if(goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && arr2.hasOwnProperty("callee")) {
      arr1.push.apply(arr1, arr2)
    }else {
      if(isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for(var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j]
        }
      }else {
        arr1.push(arr2)
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1))
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if(arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start)
  }else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end)
  }
};
goog.array.removeDuplicates = function(arr, opt_rv) {
  var returnArray = opt_rv || arr;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while(cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
    if(!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current
    }
  }
  returnArray.length = cursorInsert
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target)
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj)
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while(left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if(isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr)
    }else {
      compareResult = compareFn(opt_target, arr[middle])
    }
    if(compareResult > 0) {
      left = middle + 1
    }else {
      right = middle;
      found = !compareResult
    }
  }
  return found ? left : ~left
};
goog.array.sort = function(arr, opt_compareFn) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.sort.call(arr, opt_compareFn || goog.array.defaultCompare)
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for(var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]}
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index
  }
  goog.array.sort(arr, stableCompareFn);
  for(var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key])
  })
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for(var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if(compareResult > 0 || compareResult == 0 && opt_strict) {
      return false
    }
  }
  return true
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if(!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for(var i = 0;i < l;i++) {
    if(!equalsFn(arr1[i], arr2[i])) {
      return false
    }
  }
  return true
};
goog.array.compare = function(arr1, arr2, opt_equalsFn) {
  return goog.array.equals(arr1, arr2, opt_equalsFn)
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for(var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if(result != 0) {
      return result
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length)
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if(index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true
  }
  return false
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false
};
goog.array.bucket = function(array, sorter) {
  var buckets = {};
  for(var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter(value, i, array);
    if(goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value)
    }
  }
  return buckets
};
goog.array.repeat = function(value, n) {
  var array = [];
  for(var i = 0;i < n;i++) {
    array[i] = value
  }
  return array
};
goog.array.flatten = function(var_args) {
  var result = [];
  for(var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if(goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element))
    }else {
      result.push(element)
    }
  }
  return result
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if(array.length) {
    n %= array.length;
    if(n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n))
    }else {
      if(n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n))
      }
    }
  }
  return array
};
goog.array.zip = function(var_args) {
  if(!arguments.length) {
    return[]
  }
  var result = [];
  for(var i = 0;true;i++) {
    var value = [];
    for(var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if(i >= arr.length) {
        return result
      }
      value.push(arr[i])
    }
    result.push(value)
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for(var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp
  }
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for(var key in obj) {
    f.call(opt_obj, obj[key], key, obj)
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for(var key in obj) {
    if(f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key]
    }
  }
  return res
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for(var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj)
  }
  return res
};
goog.object.some = function(obj, f, opt_obj) {
  for(var key in obj) {
    if(f.call(opt_obj, obj[key], key, obj)) {
      return true
    }
  }
  return false
};
goog.object.every = function(obj, f, opt_obj) {
  for(var key in obj) {
    if(!f.call(opt_obj, obj[key], key, obj)) {
      return false
    }
  }
  return true
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for(var key in obj) {
    rv++
  }
  return rv
};
goog.object.getAnyKey = function(obj) {
  for(var key in obj) {
    return key
  }
};
goog.object.getAnyValue = function(obj) {
  for(var key in obj) {
    return obj[key]
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val)
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for(var key in obj) {
    res[i++] = obj[key]
  }
  return res
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for(var key in obj) {
    res[i++] = key
  }
  return res
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for(var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if(!goog.isDef(obj)) {
      break
    }
  }
  return obj
};
goog.object.containsKey = function(obj, key) {
  return key in obj
};
goog.object.containsValue = function(obj, val) {
  for(var key in obj) {
    if(obj[key] == val) {
      return true
    }
  }
  return false
};
goog.object.findKey = function(obj, f, opt_this) {
  for(var key in obj) {
    if(f.call(opt_this, obj[key], key, obj)) {
      return key
    }
  }
  return undefined
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key]
};
goog.object.isEmpty = function(obj) {
  for(var key in obj) {
    return false
  }
  return true
};
goog.object.clear = function(obj) {
  for(var i in obj) {
    delete obj[i]
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if(rv = key in obj) {
    delete obj[key]
  }
  return rv
};
goog.object.add = function(obj, key, val) {
  if(key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val)
};
goog.object.get = function(obj, key, opt_val) {
  if(key in obj) {
    return obj[key]
  }
  return opt_val
};
goog.object.set = function(obj, key, value) {
  obj[key] = value
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value
};
goog.object.clone = function(obj) {
  var res = {};
  for(var key in obj) {
    res[key] = obj[key]
  }
  return res
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if(type == "object" || type == "array") {
    if(obj.clone) {
      return obj.clone()
    }
    var clone = type == "array" ? [] : {};
    for(var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key])
    }
    return clone
  }
  return obj
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for(var key in obj) {
    transposed[obj[key]] = key
  }
  return transposed
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for(var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for(key in source) {
      target[key] = source[key]
    }
    for(var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if(Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key]
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if(argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0])
  }
  if(argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for(var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1]
  }
  return rv
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if(argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0])
  }
  var rv = {};
  for(var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true
  }
  return rv
};
goog.provide("goog.string.format");
goog.require("goog.string");
goog.string.format = function(formatString, var_args) {
  var args = Array.prototype.slice.call(arguments);
  var template = args.shift();
  if(typeof template == "undefined") {
    throw Error("[goog.string.format] Template required");
  }
  var formatRe = /%([0\-\ \+]*)(\d+)?(\.(\d+))?([%sfdiu])/g;
  function replacerDemuxer(match, flags, width, dotp, precision, type, offset, wholeString) {
    if(type == "%") {
      return"%"
    }
    var value = args.shift();
    if(typeof value == "undefined") {
      throw Error("[goog.string.format] Not enough arguments");
    }
    arguments[0] = value;
    return goog.string.format.demuxes_[type].apply(null, arguments)
  }
  return template.replace(formatRe, replacerDemuxer)
};
goog.string.format.demuxes_ = {};
goog.string.format.demuxes_["s"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  var replacement = value;
  if(isNaN(width) || width == "" || replacement.length >= width) {
    return replacement
  }
  if(flags.indexOf("-", 0) > -1) {
    replacement = replacement + goog.string.repeat(" ", width - replacement.length)
  }else {
    replacement = goog.string.repeat(" ", width - replacement.length) + replacement
  }
  return replacement
};
goog.string.format.demuxes_["f"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  var replacement = value.toString();
  if(!(isNaN(precision) || precision == "")) {
    replacement = value.toFixed(precision)
  }
  var sign;
  if(value < 0) {
    sign = "-"
  }else {
    if(flags.indexOf("+") >= 0) {
      sign = "+"
    }else {
      if(flags.indexOf(" ") >= 0) {
        sign = " "
      }else {
        sign = ""
      }
    }
  }
  if(value >= 0) {
    replacement = sign + replacement
  }
  if(isNaN(width) || replacement.length >= width) {
    return replacement
  }
  replacement = isNaN(precision) ? Math.abs(value).toString() : Math.abs(value).toFixed(precision);
  var padCount = width - replacement.length - sign.length;
  if(flags.indexOf("-", 0) >= 0) {
    replacement = sign + replacement + goog.string.repeat(" ", padCount)
  }else {
    var paddingChar = flags.indexOf("0", 0) >= 0 ? "0" : " ";
    replacement = sign + goog.string.repeat(paddingChar, padCount) + replacement
  }
  return replacement
};
goog.string.format.demuxes_["d"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  return goog.string.format.demuxes_["f"](parseInt(value, 10), flags, width, dotp, 0, type, offset, wholeString)
};
goog.string.format.demuxes_["i"] = goog.string.format.demuxes_["d"];
goog.string.format.demuxes_["u"] = goog.string.format.demuxes_["d"];
goog.provide("goog.userAgent.jscript");
goog.require("goog.string");
goog.userAgent.jscript.ASSUME_NO_JSCRIPT = false;
goog.userAgent.jscript.init_ = function() {
  var hasScriptEngine = "ScriptEngine" in goog.global;
  goog.userAgent.jscript.DETECTED_HAS_JSCRIPT_ = hasScriptEngine && goog.global["ScriptEngine"]() == "JScript";
  goog.userAgent.jscript.DETECTED_VERSION_ = goog.userAgent.jscript.DETECTED_HAS_JSCRIPT_ ? goog.global["ScriptEngineMajorVersion"]() + "." + goog.global["ScriptEngineMinorVersion"]() + "." + goog.global["ScriptEngineBuildVersion"]() : "0"
};
if(!goog.userAgent.jscript.ASSUME_NO_JSCRIPT) {
  goog.userAgent.jscript.init_()
}
goog.userAgent.jscript.HAS_JSCRIPT = goog.userAgent.jscript.ASSUME_NO_JSCRIPT ? false : goog.userAgent.jscript.DETECTED_HAS_JSCRIPT_;
goog.userAgent.jscript.VERSION = goog.userAgent.jscript.ASSUME_NO_JSCRIPT ? "0" : goog.userAgent.jscript.DETECTED_VERSION_;
goog.userAgent.jscript.isVersion = function(version) {
  return goog.string.compareVersions(goog.userAgent.jscript.VERSION, version) >= 0
};
goog.provide("goog.string.StringBuffer");
goog.require("goog.userAgent.jscript");
goog.string.StringBuffer = function(opt_a1, var_args) {
  this.buffer_ = goog.userAgent.jscript.HAS_JSCRIPT ? [] : "";
  if(opt_a1 != null) {
    this.append.apply(this, arguments)
  }
};
goog.string.StringBuffer.prototype.set = function(s) {
  this.clear();
  this.append(s)
};
if(goog.userAgent.jscript.HAS_JSCRIPT) {
  goog.string.StringBuffer.prototype.bufferLength_ = 0;
  goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
    if(opt_a2 == null) {
      this.buffer_[this.bufferLength_++] = a1
    }else {
      this.buffer_.push.apply(this.buffer_, arguments);
      this.bufferLength_ = this.buffer_.length
    }
    return this
  }
}else {
  goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
    this.buffer_ += a1;
    if(opt_a2 != null) {
      for(var i = 1;i < arguments.length;i++) {
        this.buffer_ += arguments[i]
      }
    }
    return this
  }
}
goog.string.StringBuffer.prototype.clear = function() {
  if(goog.userAgent.jscript.HAS_JSCRIPT) {
    this.buffer_.length = 0;
    this.bufferLength_ = 0
  }else {
    this.buffer_ = ""
  }
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.toString().length
};
goog.string.StringBuffer.prototype.toString = function() {
  if(goog.userAgent.jscript.HAS_JSCRIPT) {
    var str = this.buffer_.join("");
    this.clear();
    if(str) {
      this.append(str)
    }
    return str
  }else {
    return this.buffer_
  }
};
goog.provide("cljs.core");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.string.format");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
  throw new Error("No *print-fn* fn set for evaluation environment");
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false
};
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null
};
cljs.core.not = function not(x) {
  if(cljs.core.truth_(x)) {
    return false
  }else {
    return true
  }
};
cljs.core.type_satisfies_ = function type_satisfies_(p, x) {
  var x__$1 = x == null ? null : x;
  if(p[goog.typeOf(x__$1)]) {
    return true
  }else {
    if(p["_"]) {
      return true
    }else {
      if("\ufdd0'else") {
        return false
      }else {
        return null
      }
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  return Error(["No protocol method ", proto, " defined for type ", goog.typeOf(obj), ": ", obj].join(""))
};
cljs.core.aclone = function aclone(array_like) {
  return array_like.slice()
};
cljs.core.array = function array(var_args) {
  return Array.prototype.slice.call(arguments)
};
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size)
  };
  var make_array__2 = function(type, size) {
    return make_array.call(null, size)
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$lang$arity$1 = make_array__1;
  make_array.cljs$lang$arity$2 = make_array__2;
  return make_array
}();
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i]
  };
  var aget__3 = function() {
    var G__3387__delegate = function(array, i, idxs) {
      return cljs.core.apply.call(null, aget, aget.call(null, array, i), idxs)
    };
    var G__3387 = function(array, i, var_args) {
      var idxs = null;
      if(goog.isDef(var_args)) {
        idxs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3387__delegate.call(this, array, i, idxs)
    };
    G__3387.cljs$lang$maxFixedArity = 2;
    G__3387.cljs$lang$applyTo = function(arglist__3388) {
      var array = cljs.core.first(arglist__3388);
      var i = cljs.core.first(cljs.core.next(arglist__3388));
      var idxs = cljs.core.rest(cljs.core.next(arglist__3388));
      return G__3387__delegate(array, i, idxs)
    };
    G__3387.cljs$lang$arity$variadic = G__3387__delegate;
    return G__3387
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        return aget__3.cljs$lang$arity$variadic(array, i, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$lang$arity$2 = aget__2;
  aget.cljs$lang$arity$variadic = aget__3.cljs$lang$arity$variadic;
  return aget
}();
cljs.core.aset = function aset(array, i, val) {
  return array[i] = val
};
cljs.core.alength = function alength(array) {
  return array.length
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.call(null, null, aseq)
  };
  var into_array__2 = function(type, aseq) {
    return cljs.core.reduce.call(null, function(a, x) {
      a.push(x);
      return a
    }, [], aseq)
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$lang$arity$1 = into_array__1;
  into_array.cljs$lang$arity$2 = into_array__2;
  return into_array
}();
cljs.core.IFn = {};
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = cljs.core._invoke[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._invoke["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$)
    }
  };
  var _invoke__2 = function(this$, a) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = cljs.core._invoke[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._invoke["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a)
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = cljs.core._invoke[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._invoke["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b)
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = cljs.core._invoke[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._invoke["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c)
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = cljs.core._invoke[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._invoke["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d)
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = cljs.core._invoke[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._invoke["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e)
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = cljs.core._invoke[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._invoke["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f)
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = cljs.core._invoke[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._invoke["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g)
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = cljs.core._invoke[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._invoke["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h)
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = cljs.core._invoke[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._invoke["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i)
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = cljs.core._invoke[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._invoke["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j)
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = cljs.core._invoke[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._invoke["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k)
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = cljs.core._invoke[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._invoke["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l)
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = cljs.core._invoke[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._invoke["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m)
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = cljs.core._invoke[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._invoke["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n)
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = cljs.core._invoke[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._invoke["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = cljs.core._invoke[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._invoke["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p)
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = cljs.core._invoke[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._invoke["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = cljs.core._invoke[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._invoke["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s)
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = cljs.core._invoke[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._invoke["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t)
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = cljs.core._invoke[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._invoke["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest)
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$lang$arity$1 = _invoke__1;
  _invoke.cljs$lang$arity$2 = _invoke__2;
  _invoke.cljs$lang$arity$3 = _invoke__3;
  _invoke.cljs$lang$arity$4 = _invoke__4;
  _invoke.cljs$lang$arity$5 = _invoke__5;
  _invoke.cljs$lang$arity$6 = _invoke__6;
  _invoke.cljs$lang$arity$7 = _invoke__7;
  _invoke.cljs$lang$arity$8 = _invoke__8;
  _invoke.cljs$lang$arity$9 = _invoke__9;
  _invoke.cljs$lang$arity$10 = _invoke__10;
  _invoke.cljs$lang$arity$11 = _invoke__11;
  _invoke.cljs$lang$arity$12 = _invoke__12;
  _invoke.cljs$lang$arity$13 = _invoke__13;
  _invoke.cljs$lang$arity$14 = _invoke__14;
  _invoke.cljs$lang$arity$15 = _invoke__15;
  _invoke.cljs$lang$arity$16 = _invoke__16;
  _invoke.cljs$lang$arity$17 = _invoke__17;
  _invoke.cljs$lang$arity$18 = _invoke__18;
  _invoke.cljs$lang$arity$19 = _invoke__19;
  _invoke.cljs$lang$arity$20 = _invoke__20;
  _invoke.cljs$lang$arity$21 = _invoke__21;
  return _invoke
}();
cljs.core.ICounted = {};
cljs.core._count = function _count(coll) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._count[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._count["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ICounted.-count", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.IEmptyableCollection = {};
cljs.core._empty = function _empty(coll) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._empty[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._empty["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.ICollection = {};
cljs.core._conj = function _conj(coll, o) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._conj[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._conj["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o)
  }
};
cljs.core.IIndexed = {};
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if(function() {
      var and__3822__auto__ = coll;
      if(and__3822__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2
      }else {
        return and__3822__auto__
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n)
    }else {
      var x__2373__auto__ = coll == null ? null : coll;
      return function() {
        var or__3824__auto__ = cljs.core._nth[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._nth["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n)
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if(function() {
      var and__3822__auto__ = coll;
      if(and__3822__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3
      }else {
        return and__3822__auto__
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found)
    }else {
      var x__2373__auto__ = coll == null ? null : coll;
      return function() {
        var or__3824__auto__ = cljs.core._nth[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._nth["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found)
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$lang$arity$2 = _nth__2;
  _nth.cljs$lang$arity$3 = _nth__3;
  return _nth
}();
cljs.core.ASeq = {};
cljs.core.ISeq = {};
cljs.core._first = function _first(coll) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._first[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._first["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-first", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core._rest = function _rest(coll) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._rest[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._rest["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-rest", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.INext = {};
cljs.core._next = function _next(coll) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$INext$_next$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._next[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._next["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "INext.-next", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.ILookup = {};
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if(function() {
      var and__3822__auto__ = o;
      if(and__3822__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2
      }else {
        return and__3822__auto__
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k)
    }else {
      var x__2373__auto__ = o == null ? null : o;
      return function() {
        var or__3824__auto__ = cljs.core._lookup[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._lookup["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k)
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if(function() {
      var and__3822__auto__ = o;
      if(and__3822__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3
      }else {
        return and__3822__auto__
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found)
    }else {
      var x__2373__auto__ = o == null ? null : o;
      return function() {
        var or__3824__auto__ = cljs.core._lookup[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._lookup["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found)
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$lang$arity$2 = _lookup__2;
  _lookup.cljs$lang$arity$3 = _lookup__3;
  return _lookup
}();
cljs.core.IAssociative = {};
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k)
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._assoc[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._assoc["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v)
  }
};
cljs.core.IMap = {};
cljs.core._dissoc = function _dissoc(coll, k) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._dissoc[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._dissoc["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k)
  }
};
cljs.core.IMapEntry = {};
cljs.core._key = function _key(coll) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._key[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._key["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-key", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core._val = function _val(coll) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._val[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._val["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-val", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.ISet = {};
cljs.core._disjoin = function _disjoin(coll, v) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._disjoin[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._disjoin["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v)
  }
};
cljs.core.IStack = {};
cljs.core._peek = function _peek(coll) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._peek[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._peek["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IStack.-peek", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core._pop = function _pop(coll) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._pop[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._pop["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IStack.-pop", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.IVector = {};
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._assoc_n[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._assoc_n["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val)
  }
};
cljs.core.IDeref = {};
cljs.core._deref = function _deref(o) {
  if(function() {
    var and__3822__auto__ = o;
    if(and__3822__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o)
  }else {
    var x__2373__auto__ = o == null ? null : o;
    return function() {
      var or__3824__auto__ = cljs.core._deref[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._deref["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IDeref.-deref", o);
        }
      }
    }().call(null, o)
  }
};
cljs.core.IDerefWithTimeout = {};
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if(function() {
    var and__3822__auto__ = o;
    if(and__3822__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val)
  }else {
    var x__2373__auto__ = o == null ? null : o;
    return function() {
      var or__3824__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._deref_with_timeout["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val)
  }
};
cljs.core.IMeta = {};
cljs.core._meta = function _meta(o) {
  if(function() {
    var and__3822__auto__ = o;
    if(and__3822__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o)
  }else {
    var x__2373__auto__ = o == null ? null : o;
    return function() {
      var or__3824__auto__ = cljs.core._meta[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._meta["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMeta.-meta", o);
        }
      }
    }().call(null, o)
  }
};
cljs.core.IWithMeta = {};
cljs.core._with_meta = function _with_meta(o, meta) {
  if(function() {
    var and__3822__auto__ = o;
    if(and__3822__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta)
  }else {
    var x__2373__auto__ = o == null ? null : o;
    return function() {
      var or__3824__auto__ = cljs.core._with_meta[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._with_meta["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta)
  }
};
cljs.core.IReduce = {};
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if(function() {
      var and__3822__auto__ = coll;
      if(and__3822__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2
      }else {
        return and__3822__auto__
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f)
    }else {
      var x__2373__auto__ = coll == null ? null : coll;
      return function() {
        var or__3824__auto__ = cljs.core._reduce[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._reduce["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f)
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if(function() {
      var and__3822__auto__ = coll;
      if(and__3822__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3
      }else {
        return and__3822__auto__
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start)
    }else {
      var x__2373__auto__ = coll == null ? null : coll;
      return function() {
        var or__3824__auto__ = cljs.core._reduce[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = cljs.core._reduce["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start)
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$lang$arity$2 = _reduce__2;
  _reduce.cljs$lang$arity$3 = _reduce__3;
  return _reduce
}();
cljs.core.IKVReduce = {};
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._kv_reduce[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._kv_reduce["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init)
  }
};
cljs.core.IEquiv = {};
cljs.core._equiv = function _equiv(o, other) {
  if(function() {
    var and__3822__auto__ = o;
    if(and__3822__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other)
  }else {
    var x__2373__auto__ = o == null ? null : o;
    return function() {
      var or__3824__auto__ = cljs.core._equiv[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._equiv["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other)
  }
};
cljs.core.IHash = {};
cljs.core._hash = function _hash(o) {
  if(function() {
    var and__3822__auto__ = o;
    if(and__3822__auto__) {
      return o.cljs$core$IHash$_hash$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o)
  }else {
    var x__2373__auto__ = o == null ? null : o;
    return function() {
      var or__3824__auto__ = cljs.core._hash[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._hash["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IHash.-hash", o);
        }
      }
    }().call(null, o)
  }
};
cljs.core.ISeqable = {};
cljs.core._seq = function _seq(o) {
  if(function() {
    var and__3822__auto__ = o;
    if(and__3822__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o)
  }else {
    var x__2373__auto__ = o == null ? null : o;
    return function() {
      var or__3824__auto__ = cljs.core._seq[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._seq["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISeqable.-seq", o);
        }
      }
    }().call(null, o)
  }
};
cljs.core.ISequential = {};
cljs.core.IList = {};
cljs.core.IRecord = {};
cljs.core.IReversible = {};
cljs.core._rseq = function _rseq(coll) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._rseq[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._rseq["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IReversible.-rseq", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.ISorted = {};
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._sorted_seq[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._sorted_seq["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_)
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._sorted_seq_from["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_)
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._entry_key[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._entry_key["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry)
  }
};
cljs.core._comparator = function _comparator(coll) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._comparator[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._comparator["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-comparator", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.IPrintable = {};
cljs.core._pr_seq = function _pr_seq(o, opts) {
  if(function() {
    var and__3822__auto__ = o;
    if(and__3822__auto__) {
      return o.cljs$core$IPrintable$_pr_seq$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return o.cljs$core$IPrintable$_pr_seq$arity$2(o, opts)
  }else {
    var x__2373__auto__ = o == null ? null : o;
    return function() {
      var or__3824__auto__ = cljs.core._pr_seq[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._pr_seq["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IPrintable.-pr-seq", o);
        }
      }
    }().call(null, o, opts)
  }
};
cljs.core.IWriter = {};
cljs.core._write = function _write(writer, s) {
  if(function() {
    var and__3822__auto__ = writer;
    if(and__3822__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s)
  }else {
    var x__2373__auto__ = writer == null ? null : writer;
    return function() {
      var or__3824__auto__ = cljs.core._write[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._write["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-write", writer);
        }
      }
    }().call(null, writer, s)
  }
};
cljs.core._flush = function _flush(writer) {
  if(function() {
    var and__3822__auto__ = writer;
    if(and__3822__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer)
  }else {
    var x__2373__auto__ = writer == null ? null : writer;
    return function() {
      var or__3824__auto__ = cljs.core._flush[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._flush["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-flush", writer);
        }
      }
    }().call(null, writer)
  }
};
cljs.core.IPrintWithWriter = {};
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if(function() {
    var and__3822__auto__ = o;
    if(and__3822__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts)
  }else {
    var x__2373__auto__ = o == null ? null : o;
    return function() {
      var or__3824__auto__ = cljs.core._pr_writer[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._pr_writer["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts)
  }
};
cljs.core.IPending = {};
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if(function() {
    var and__3822__auto__ = d;
    if(and__3822__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d)
  }else {
    var x__2373__auto__ = d == null ? null : d;
    return function() {
      var or__3824__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._realized_QMARK_["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IPending.-realized?", d);
        }
      }
    }().call(null, d)
  }
};
cljs.core.IWatchable = {};
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if(function() {
    var and__3822__auto__ = this$;
    if(and__3822__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval)
  }else {
    var x__2373__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3824__auto__ = cljs.core._notify_watches[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._notify_watches["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval)
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if(function() {
    var and__3822__auto__ = this$;
    if(and__3822__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f)
  }else {
    var x__2373__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3824__auto__ = cljs.core._add_watch[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._add_watch["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f)
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if(function() {
    var and__3822__auto__ = this$;
    if(and__3822__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key)
  }else {
    var x__2373__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3824__auto__ = cljs.core._remove_watch[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._remove_watch["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key)
  }
};
cljs.core.IEditableCollection = {};
cljs.core._as_transient = function _as_transient(coll) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._as_transient[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._as_transient["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.ITransientCollection = {};
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if(function() {
    var and__3822__auto__ = tcoll;
    if(and__3822__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val)
  }else {
    var x__2373__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3824__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._conj_BANG_["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val)
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if(function() {
    var and__3822__auto__ = tcoll;
    if(and__3822__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll)
  }else {
    var x__2373__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3824__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._persistent_BANG_["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll)
  }
};
cljs.core.ITransientAssociative = {};
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if(function() {
    var and__3822__auto__ = tcoll;
    if(and__3822__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val)
  }else {
    var x__2373__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3824__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._assoc_BANG_["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val)
  }
};
cljs.core.ITransientMap = {};
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if(function() {
    var and__3822__auto__ = tcoll;
    if(and__3822__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key)
  }else {
    var x__2373__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3824__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key)
  }
};
cljs.core.ITransientVector = {};
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if(function() {
    var and__3822__auto__ = tcoll;
    if(and__3822__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val)
  }else {
    var x__2373__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3824__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val)
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if(function() {
    var and__3822__auto__ = tcoll;
    if(and__3822__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll)
  }else {
    var x__2373__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3824__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._pop_BANG_["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll)
  }
};
cljs.core.ITransientSet = {};
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if(function() {
    var and__3822__auto__ = tcoll;
    if(and__3822__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v)
  }else {
    var x__2373__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3824__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v)
  }
};
cljs.core.IComparable = {};
cljs.core._compare = function _compare(x, y) {
  if(function() {
    var and__3822__auto__ = x;
    if(and__3822__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y)
  }else {
    var x__2373__auto__ = x == null ? null : x;
    return function() {
      var or__3824__auto__ = cljs.core._compare[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._compare["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IComparable.-compare", x);
        }
      }
    }().call(null, x, y)
  }
};
cljs.core.IChunk = {};
cljs.core._drop_first = function _drop_first(coll) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._drop_first[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._drop_first["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.IChunkedSeq = {};
cljs.core._chunked_first = function _chunked_first(coll) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._chunked_first[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._chunked_first["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._chunked_rest[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._chunked_rest["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.IChunkedNext = {};
cljs.core._chunked_next = function _chunked_next(coll) {
  if(function() {
    var and__3822__auto__ = coll;
    if(and__3822__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll)
  }else {
    var x__2373__auto__ = coll == null ? null : coll;
    return function() {
      var or__3824__auto__ = cljs.core._chunked_next[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._chunked_next["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll)
  }
};
cljs.core.seq = function seq(coll) {
  if(coll == null) {
    return null
  }else {
    if(function() {
      var G__3390 = coll;
      if(G__3390) {
        if(function() {
          var or__3824__auto__ = G__3390.cljs$lang$protocol_mask$partition0$ & 32;
          if(or__3824__auto__) {
            return or__3824__auto__
          }else {
            return G__3390.cljs$core$ASeq$
          }
        }()) {
          return true
        }else {
          if(!G__3390.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.type_satisfies_.call(null, cljs.core.ASeq, G__3390)
          }else {
            return false
          }
        }
      }else {
        return cljs.core.type_satisfies_.call(null, cljs.core.ASeq, G__3390)
      }
    }()) {
      return coll
    }else {
      return cljs.core._seq.call(null, coll)
    }
  }
};
cljs.core.first = function first(coll) {
  if(coll == null) {
    return null
  }else {
    if(function() {
      var G__3392 = coll;
      if(G__3392) {
        if(function() {
          var or__3824__auto__ = G__3392.cljs$lang$protocol_mask$partition0$ & 64;
          if(or__3824__auto__) {
            return or__3824__auto__
          }else {
            return G__3392.cljs$core$ISeq$
          }
        }()) {
          return true
        }else {
          if(!G__3392.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.type_satisfies_.call(null, cljs.core.ISeq, G__3392)
          }else {
            return false
          }
        }
      }else {
        return cljs.core.type_satisfies_.call(null, cljs.core.ISeq, G__3392)
      }
    }()) {
      return cljs.core._first.call(null, coll)
    }else {
      var s = cljs.core.seq.call(null, coll);
      if(s == null) {
        return null
      }else {
        return cljs.core._first.call(null, s)
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if(!(coll == null)) {
    if(function() {
      var G__3394 = coll;
      if(G__3394) {
        if(function() {
          var or__3824__auto__ = G__3394.cljs$lang$protocol_mask$partition0$ & 64;
          if(or__3824__auto__) {
            return or__3824__auto__
          }else {
            return G__3394.cljs$core$ISeq$
          }
        }()) {
          return true
        }else {
          if(!G__3394.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.type_satisfies_.call(null, cljs.core.ISeq, G__3394)
          }else {
            return false
          }
        }
      }else {
        return cljs.core.type_satisfies_.call(null, cljs.core.ISeq, G__3394)
      }
    }()) {
      return cljs.core._rest.call(null, coll)
    }else {
      var s = cljs.core.seq.call(null, coll);
      if(!(s == null)) {
        return cljs.core._rest.call(null, s)
      }else {
        return cljs.core.List.EMPTY
      }
    }
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.next = function next(coll) {
  if(coll == null) {
    return null
  }else {
    if(function() {
      var G__3396 = coll;
      if(G__3396) {
        if(function() {
          var or__3824__auto__ = G__3396.cljs$lang$protocol_mask$partition0$ & 128;
          if(or__3824__auto__) {
            return or__3824__auto__
          }else {
            return G__3396.cljs$core$INext$
          }
        }()) {
          return true
        }else {
          if(!G__3396.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.type_satisfies_.call(null, cljs.core.INext, G__3396)
          }else {
            return false
          }
        }
      }else {
        return cljs.core.type_satisfies_.call(null, cljs.core.INext, G__3396)
      }
    }()) {
      return cljs.core._next.call(null, coll)
    }else {
      return cljs.core.seq.call(null, cljs.core.rest.call(null, coll))
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true
  };
  var _EQ___2 = function(x, y) {
    var or__3824__auto__ = x === y;
    if(or__3824__auto__) {
      return or__3824__auto__
    }else {
      return cljs.core._equiv.call(null, x, y)
    }
  };
  var _EQ___3 = function() {
    var G__3397__delegate = function(x, y, more) {
      while(true) {
        if(cljs.core.truth_(_EQ_.call(null, x, y))) {
          if(cljs.core.next.call(null, more)) {
            var G__3398 = y;
            var G__3399 = cljs.core.first.call(null, more);
            var G__3400 = cljs.core.next.call(null, more);
            x = G__3398;
            y = G__3399;
            more = G__3400;
            continue
          }else {
            return _EQ_.call(null, y, cljs.core.first.call(null, more))
          }
        }else {
          return false
        }
        break
      }
    };
    var G__3397 = function(x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3397__delegate.call(this, x, y, more)
    };
    G__3397.cljs$lang$maxFixedArity = 2;
    G__3397.cljs$lang$applyTo = function(arglist__3401) {
      var x = cljs.core.first(arglist__3401);
      var y = cljs.core.first(cljs.core.next(arglist__3401));
      var more = cljs.core.rest(cljs.core.next(arglist__3401));
      return G__3397__delegate(x, y, more)
    };
    G__3397.cljs$lang$arity$variadic = G__3397__delegate;
    return G__3397
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        return _EQ___3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$lang$arity$1 = _EQ___1;
  _EQ_.cljs$lang$arity$2 = _EQ___2;
  _EQ_.cljs$lang$arity$variadic = _EQ___3.cljs$lang$arity$variadic;
  return _EQ_
}();
cljs.core.type = function type(x) {
  if(x == null) {
    return null
  }else {
    return x.constructor
  }
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t
};
cljs.core.IHash["null"] = true;
cljs.core._hash["null"] = function(o) {
  return 0
};
cljs.core.ILookup["null"] = true;
cljs.core._lookup["null"] = function() {
  var G__3402 = null;
  var G__3402__2 = function(o, k) {
    return null
  };
  var G__3402__3 = function(o, k, not_found) {
    return not_found
  };
  G__3402 = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3402__2.call(this, o, k);
      case 3:
        return G__3402__3.call(this, o, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__3402
}();
cljs.core.IAssociative["null"] = true;
cljs.core._assoc["null"] = function(_, k, v) {
  return cljs.core.hash_map.call(null, k, v)
};
cljs.core.INext["null"] = true;
cljs.core._next["null"] = function(_) {
  return null
};
cljs.core.IPrintWithWriter["null"] = true;
cljs.core._pr_writer["null"] = function(o, writer, _) {
  return cljs.core._write.call(null, writer, "nil")
};
cljs.core.ICollection["null"] = true;
cljs.core._conj["null"] = function(_, o) {
  return cljs.core.list.call(null, o)
};
cljs.core.IReduce["null"] = true;
cljs.core._reduce["null"] = function() {
  var G__3403 = null;
  var G__3403__2 = function(_, f) {
    return f.call(null)
  };
  var G__3403__3 = function(_, f, start) {
    return start
  };
  G__3403 = function(_, f, start) {
    switch(arguments.length) {
      case 2:
        return G__3403__2.call(this, _, f);
      case 3:
        return G__3403__3.call(this, _, f, start)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__3403
}();
cljs.core.IPrintable["null"] = true;
cljs.core._pr_seq["null"] = function(o) {
  return cljs.core.list.call(null, "nil")
};
cljs.core.ISet["null"] = true;
cljs.core._disjoin["null"] = function(_, v) {
  return null
};
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0
};
cljs.core.IStack["null"] = true;
cljs.core._peek["null"] = function(_) {
  return null
};
cljs.core._pop["null"] = function(_) {
  return null
};
cljs.core.ISeq["null"] = true;
cljs.core._first["null"] = function(_) {
  return null
};
cljs.core._rest["null"] = function(_) {
  return cljs.core.list.call(null)
};
cljs.core.IEquiv["null"] = true;
cljs.core._equiv["null"] = function(_, o) {
  return o == null
};
cljs.core.IWithMeta["null"] = true;
cljs.core._with_meta["null"] = function(_, meta) {
  return null
};
cljs.core.IMeta["null"] = true;
cljs.core._meta["null"] = function(_) {
  return null
};
cljs.core.IIndexed["null"] = true;
cljs.core._nth["null"] = function() {
  var G__3404 = null;
  var G__3404__2 = function(_, n) {
    return null
  };
  var G__3404__3 = function(_, n, not_found) {
    return not_found
  };
  G__3404 = function(_, n, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3404__2.call(this, _, n);
      case 3:
        return G__3404__3.call(this, _, n, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__3404
}();
cljs.core.IEmptyableCollection["null"] = true;
cljs.core._empty["null"] = function(_) {
  return null
};
cljs.core.IMap["null"] = true;
cljs.core._dissoc["null"] = function(_, k) {
  return null
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var and__3822__auto__ = cljs.core.instance_QMARK_.call(null, Date, other);
  if(and__3822__auto__) {
    return o.toString() === other.toString()
  }else {
    return and__3822__auto__
  }
};
cljs.core.IHash["number"] = true;
cljs.core._hash["number"] = function(o) {
  return o
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o
};
cljs.core.IHash["boolean"] = true;
cljs.core._hash["boolean"] = function(o) {
  if(o === true) {
    return 1
  }else {
    return 0
  }
};
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o)
};
cljs.core.inc = function inc(x) {
  return x + 1
};
goog.provide("cljs.core.Reduced");
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/Reduced")
};
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/Reduced")
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  return self__.val
};
cljs.core.Reduced;
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x)
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return cljs.core.instance_QMARK_.call(null, cljs.core.Reduced, r)
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count.call(null, cicoll);
    if(cnt === 0) {
      return f.call(null)
    }else {
      var val = cljs.core._nth.call(null, cicoll, 0);
      var n = 1;
      while(true) {
        if(n < cnt) {
          var nval = f.call(null, val, cljs.core._nth.call(null, cicoll, n));
          if(cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval)
          }else {
            var G__3405 = nval;
            var G__3406 = n + 1;
            val = G__3405;
            n = G__3406;
            continue
          }
        }else {
          return val
        }
        break
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = 0;
    while(true) {
      if(n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if(cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval)
        }else {
          var G__3407 = nval;
          var G__3408 = n + 1;
          val__$1 = G__3407;
          n = G__3408;
          continue
        }
      }else {
        return val__$1
      }
      break
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = idx;
    while(true) {
      if(n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if(cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval)
        }else {
          var G__3409 = nval;
          var G__3410 = n + 1;
          val__$1 = G__3409;
          n = G__3410;
          continue
        }
      }else {
        return val__$1
      }
      break
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$lang$arity$2 = ci_reduce__2;
  ci_reduce.cljs$lang$arity$3 = ci_reduce__3;
  ci_reduce.cljs$lang$arity$4 = ci_reduce__4;
  return ci_reduce
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if(arr.length === 0) {
      return f.call(null)
    }else {
      var val = arr[0];
      var n = 1;
      while(true) {
        if(n < cnt) {
          var nval = f.call(null, val, arr[n]);
          if(cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval)
          }else {
            var G__3411 = nval;
            var G__3412 = n + 1;
            val = G__3411;
            n = G__3412;
            continue
          }
        }else {
          return val
        }
        break
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while(true) {
      if(n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if(cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval)
        }else {
          var G__3413 = nval;
          var G__3414 = n + 1;
          val__$1 = G__3413;
          n = G__3414;
          continue
        }
      }else {
        return val__$1
      }
      break
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while(true) {
      if(n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if(cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval)
        }else {
          var G__3415 = nval;
          var G__3416 = n + 1;
          val__$1 = G__3415;
          n = G__3416;
          continue
        }
      }else {
        return val__$1
      }
      break
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$lang$arity$2 = array_reduce__2;
  array_reduce.cljs$lang$arity$3 = array_reduce__3;
  array_reduce.cljs$lang$arity$4 = array_reduce__4;
  return array_reduce
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__3418 = x;
  if(G__3418) {
    if(function() {
      var or__3824__auto__ = G__3418.cljs$lang$protocol_mask$partition0$ & 2;
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        return G__3418.cljs$core$ICounted$
      }
    }()) {
      return true
    }else {
      if(!G__3418.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.type_satisfies_.call(null, cljs.core.ICounted, G__3418)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.type_satisfies_.call(null, cljs.core.ICounted, G__3418)
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__3420 = x;
  if(G__3420) {
    if(function() {
      var or__3824__auto__ = G__3420.cljs$lang$protocol_mask$partition0$ & 16;
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        return G__3420.cljs$core$IIndexed$
      }
    }()) {
      return true
    }else {
      if(!G__3420.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.type_satisfies_.call(null, cljs.core.IIndexed, G__3420)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.type_satisfies_.call(null, cljs.core.IIndexed, G__3420)
  }
};
goog.provide("cljs.core.IndexedSeq");
cljs.core.IndexedSeq = function(a, i) {
  this.a = a;
  this.i = i;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 166199550
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/IndexedSeq")
};
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/IndexedSeq")
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.hash_coll.call(null, coll)
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  if(self__.i + 1 < self__.a.length) {
    return new cljs.core.IndexedSeq(self__.a, self__.i + 1)
  }else {
    return null
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return cljs.core.cons.call(null, o, coll)
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var c = coll.cljs$core$ICounted$_count$arity$1(coll);
  if(c > 0) {
    return new cljs.core.RSeq(coll, c - 1, null)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  if(cljs.core.counted_QMARK_.call(null, self__.a)) {
    return cljs.core.ci_reduce.call(null, self__.a, f, self__.a[self__.i], self__.i + 1)
  }else {
    return cljs.core.ci_reduce.call(null, coll, f, self__.a[self__.i], 0)
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  if(cljs.core.counted_QMARK_.call(null, self__.a)) {
    return cljs.core.ci_reduce.call(null, self__.a, f, start, self__.i)
  }else {
    return cljs.core.ci_reduce.call(null, coll, f, start, 0)
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  return this$
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  return self__.a.length - self__.i
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  return self__.a[self__.i]
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  if(self__.i + 1 < self__.a.length) {
    return new cljs.core.IndexedSeq(self__.a, self__.i + 1)
  }else {
    return cljs.core.list.call(null)
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var i__$1 = n + self__.i;
  if(i__$1 < self__.a.length) {
    return self__.a[i__$1]
  }else {
    return null
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var i__$1 = n + self__.i;
  if(i__$1 < self__.a.length) {
    return self__.a[i__$1]
  }else {
    return not_found
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.List.EMPTY
};
cljs.core.IndexedSeq;
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.call(null, prim, 0)
  };
  var prim_seq__2 = function(prim, i) {
    if(i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i)
    }else {
      return null
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$lang$arity$1 = prim_seq__1;
  prim_seq.cljs$lang$arity$2 = prim_seq__2;
  return prim_seq
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.call(null, array, 0)
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.call(null, array, i)
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$lang$arity$1 = array_seq__1;
  array_seq.cljs$lang$arity$2 = array_seq__2;
  return array_seq
}();
cljs.core.IReduce["array"] = true;
cljs.core._reduce["array"] = function() {
  var G__3421 = null;
  var G__3421__2 = function(array, f) {
    return cljs.core.ci_reduce.call(null, array, f)
  };
  var G__3421__3 = function(array, f, start) {
    return cljs.core.ci_reduce.call(null, array, f, start)
  };
  G__3421 = function(array, f, start) {
    switch(arguments.length) {
      case 2:
        return G__3421__2.call(this, array, f);
      case 3:
        return G__3421__3.call(this, array, f, start)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__3421
}();
cljs.core.ILookup["array"] = true;
cljs.core._lookup["array"] = function() {
  var G__3422 = null;
  var G__3422__2 = function(array, k) {
    return array[k]
  };
  var G__3422__3 = function(array, k, not_found) {
    return cljs.core._nth.call(null, array, k, not_found)
  };
  G__3422 = function(array, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3422__2.call(this, array, k);
      case 3:
        return G__3422__3.call(this, array, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__3422
}();
cljs.core.IIndexed["array"] = true;
cljs.core._nth["array"] = function() {
  var G__3423 = null;
  var G__3423__2 = function(array, n) {
    if(n < array.length) {
      return array[n]
    }else {
      return null
    }
  };
  var G__3423__3 = function(array, n, not_found) {
    if(n < array.length) {
      return array[n]
    }else {
      return not_found
    }
  };
  G__3423 = function(array, n, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3423__2.call(this, array, n);
      case 3:
        return G__3423__3.call(this, array, n, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__3423
}();
cljs.core.ICounted["array"] = true;
cljs.core._count["array"] = function(a) {
  return a.length
};
cljs.core.ISeqable["array"] = true;
cljs.core._seq["array"] = function(array) {
  return cljs.core.array_seq.call(null, array, 0)
};
goog.provide("cljs.core.RSeq");
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850574
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/RSeq")
};
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/RSeq")
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.hash_coll.call(null, coll)
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return cljs.core.cons.call(null, o, coll)
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  return coll
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return self__.i + 1
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core._nth.call(null, self__.ci, self__.i)
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  if(self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta)
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.RSeq;
cljs.core.second = function second(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll))
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first.call(null, cljs.core.first.call(null, coll))
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next.call(null, cljs.core.first.call(null, coll))
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll))
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next.call(null, cljs.core.next.call(null, coll))
};
cljs.core.last = function last(s) {
  while(true) {
    var sn = cljs.core.next.call(null, s);
    if(!(sn == null)) {
      var G__3424 = sn;
      s = G__3424;
      continue
    }else {
      return cljs.core.first.call(null, s)
    }
    break
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o
};
cljs.core.conj = function() {
  var conj = null;
  var conj__2 = function(coll, x) {
    return cljs.core._conj.call(null, coll, x)
  };
  var conj__3 = function() {
    var G__3425__delegate = function(coll, x, xs) {
      while(true) {
        if(cljs.core.truth_(xs)) {
          var G__3426 = conj.call(null, coll, x);
          var G__3427 = cljs.core.first.call(null, xs);
          var G__3428 = cljs.core.next.call(null, xs);
          coll = G__3426;
          x = G__3427;
          xs = G__3428;
          continue
        }else {
          return conj.call(null, coll, x)
        }
        break
      }
    };
    var G__3425 = function(coll, x, var_args) {
      var xs = null;
      if(goog.isDef(var_args)) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3425__delegate.call(this, coll, x, xs)
    };
    G__3425.cljs$lang$maxFixedArity = 2;
    G__3425.cljs$lang$applyTo = function(arglist__3429) {
      var coll = cljs.core.first(arglist__3429);
      var x = cljs.core.first(cljs.core.next(arglist__3429));
      var xs = cljs.core.rest(cljs.core.next(arglist__3429));
      return G__3425__delegate(coll, x, xs)
    };
    G__3425.cljs$lang$arity$variadic = G__3425__delegate;
    return G__3425
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 2:
        return conj__2.call(this, coll, x);
      default:
        return conj__3.cljs$lang$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$lang$arity$2 = conj__2;
  conj.cljs$lang$arity$variadic = conj__3.cljs$lang$arity$variadic;
  return conj
}();
cljs.core.empty = function empty(coll) {
  return cljs.core._empty.call(null, coll)
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq.call(null, coll);
  var acc = 0;
  while(true) {
    if(cljs.core.counted_QMARK_.call(null, s)) {
      return acc + cljs.core._count.call(null, s)
    }else {
      var G__3430 = cljs.core.next.call(null, s);
      var G__3431 = acc + 1;
      s = G__3430;
      acc = G__3431;
      continue
    }
    break
  }
};
cljs.core.count = function count(coll) {
  if(cljs.core.counted_QMARK_.call(null, coll)) {
    return cljs.core._count.call(null, coll)
  }else {
    return cljs.core.accumulating_seq_count.call(null, coll)
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while(true) {
      if(coll == null) {
        throw new Error("Index out of bounds");
      }else {
        if(n === 0) {
          if(cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll)
          }else {
            throw new Error("Index out of bounds");
          }
        }else {
          if(cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n)
          }else {
            if(cljs.core.seq.call(null, coll)) {
              var G__3432 = cljs.core.next.call(null, coll);
              var G__3433 = n - 1;
              coll = G__3432;
              n = G__3433;
              continue
            }else {
              if("\ufdd0'else") {
                throw new Error("Index out of bounds");
              }else {
                return null
              }
            }
          }
        }
      }
      break
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while(true) {
      if(coll == null) {
        return not_found
      }else {
        if(n === 0) {
          if(cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll)
          }else {
            return not_found
          }
        }else {
          if(cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n, not_found)
          }else {
            if(cljs.core.seq.call(null, coll)) {
              var G__3434 = cljs.core.next.call(null, coll);
              var G__3435 = n - 1;
              var G__3436 = not_found;
              coll = G__3434;
              n = G__3435;
              not_found = G__3436;
              continue
            }else {
              if("\ufdd0'else") {
                return not_found
              }else {
                return null
              }
            }
          }
        }
      }
      break
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$lang$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$lang$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if(coll == null) {
      return null
    }else {
      if(function() {
        var G__3439 = coll;
        if(G__3439) {
          if(function() {
            var or__3824__auto__ = G__3439.cljs$lang$protocol_mask$partition0$ & 16;
            if(or__3824__auto__) {
              return or__3824__auto__
            }else {
              return G__3439.cljs$core$IIndexed$
            }
          }()) {
            return true
          }else {
            if(!G__3439.cljs$lang$protocol_mask$partition0$) {
              return cljs.core.type_satisfies_.call(null, cljs.core.IIndexed, G__3439)
            }else {
              return false
            }
          }
        }else {
          return cljs.core.type_satisfies_.call(null, cljs.core.IIndexed, G__3439)
        }
      }()) {
        return cljs.core._nth.call(null, coll, Math.floor(n))
      }else {
        return cljs.core.linear_traversal_nth.call(null, coll, Math.floor(n))
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if(!(coll == null)) {
      if(function() {
        var G__3440 = coll;
        if(G__3440) {
          if(function() {
            var or__3824__auto__ = G__3440.cljs$lang$protocol_mask$partition0$ & 16;
            if(or__3824__auto__) {
              return or__3824__auto__
            }else {
              return G__3440.cljs$core$IIndexed$
            }
          }()) {
            return true
          }else {
            if(!G__3440.cljs$lang$protocol_mask$partition0$) {
              return cljs.core.type_satisfies_.call(null, cljs.core.IIndexed, G__3440)
            }else {
              return false
            }
          }
        }else {
          return cljs.core.type_satisfies_.call(null, cljs.core.IIndexed, G__3440)
        }
      }()) {
        return cljs.core._nth.call(null, coll, Math.floor(n), not_found)
      }else {
        return cljs.core.linear_traversal_nth.call(null, coll, Math.floor(n), not_found)
      }
    }else {
      return not_found
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$lang$arity$2 = nth__2;
  nth.cljs$lang$arity$3 = nth__3;
  return nth
}();
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    return cljs.core._lookup.call(null, o, k)
  };
  var get__3 = function(o, k, not_found) {
    return cljs.core._lookup.call(null, o, k, not_found)
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$lang$arity$2 = get__2;
  get.cljs$lang$arity$3 = get__3;
  return get
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    return cljs.core._assoc.call(null, coll, k, v)
  };
  var assoc__4 = function() {
    var G__3441__delegate = function(coll, k, v, kvs) {
      while(true) {
        var ret = assoc.call(null, coll, k, v);
        if(cljs.core.truth_(kvs)) {
          var G__3442 = ret;
          var G__3443 = cljs.core.first.call(null, kvs);
          var G__3444 = cljs.core.second.call(null, kvs);
          var G__3445 = cljs.core.nnext.call(null, kvs);
          coll = G__3442;
          k = G__3443;
          v = G__3444;
          kvs = G__3445;
          continue
        }else {
          return ret
        }
        break
      }
    };
    var G__3441 = function(coll, k, v, var_args) {
      var kvs = null;
      if(goog.isDef(var_args)) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__3441__delegate.call(this, coll, k, v, kvs)
    };
    G__3441.cljs$lang$maxFixedArity = 3;
    G__3441.cljs$lang$applyTo = function(arglist__3446) {
      var coll = cljs.core.first(arglist__3446);
      var k = cljs.core.first(cljs.core.next(arglist__3446));
      var v = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3446)));
      var kvs = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3446)));
      return G__3441__delegate(coll, k, v, kvs)
    };
    G__3441.cljs$lang$arity$variadic = G__3441__delegate;
    return G__3441
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        return assoc__4.cljs$lang$arity$variadic(coll, k, v, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$lang$arity$3 = assoc__3;
  assoc.cljs$lang$arity$variadic = assoc__4.cljs$lang$arity$variadic;
  return assoc
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll
  };
  var dissoc__2 = function(coll, k) {
    return cljs.core._dissoc.call(null, coll, k)
  };
  var dissoc__3 = function() {
    var G__3447__delegate = function(coll, k, ks) {
      while(true) {
        var ret = dissoc.call(null, coll, k);
        if(cljs.core.truth_(ks)) {
          var G__3448 = ret;
          var G__3449 = cljs.core.first.call(null, ks);
          var G__3450 = cljs.core.next.call(null, ks);
          coll = G__3448;
          k = G__3449;
          ks = G__3450;
          continue
        }else {
          return ret
        }
        break
      }
    };
    var G__3447 = function(coll, k, var_args) {
      var ks = null;
      if(goog.isDef(var_args)) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3447__delegate.call(this, coll, k, ks)
    };
    G__3447.cljs$lang$maxFixedArity = 2;
    G__3447.cljs$lang$applyTo = function(arglist__3451) {
      var coll = cljs.core.first(arglist__3451);
      var k = cljs.core.first(cljs.core.next(arglist__3451));
      var ks = cljs.core.rest(cljs.core.next(arglist__3451));
      return G__3447__delegate(coll, k, ks)
    };
    G__3447.cljs$lang$arity$variadic = G__3447__delegate;
    return G__3447
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        return dissoc__3.cljs$lang$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$lang$arity$1 = dissoc__1;
  dissoc.cljs$lang$arity$2 = dissoc__2;
  dissoc.cljs$lang$arity$variadic = dissoc__3.cljs$lang$arity$variadic;
  return dissoc
}();
cljs.core.with_meta = function with_meta(o, meta) {
  return cljs.core._with_meta.call(null, o, meta)
};
cljs.core.meta = function meta(o) {
  if(function() {
    var G__3453 = o;
    if(G__3453) {
      if(function() {
        var or__3824__auto__ = G__3453.cljs$lang$protocol_mask$partition0$ & 131072;
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          return G__3453.cljs$core$IMeta$
        }
      }()) {
        return true
      }else {
        if(!G__3453.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.type_satisfies_.call(null, cljs.core.IMeta, G__3453)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.type_satisfies_.call(null, cljs.core.IMeta, G__3453)
    }
  }()) {
    return cljs.core._meta.call(null, o)
  }else {
    return null
  }
};
cljs.core.peek = function peek(coll) {
  return cljs.core._peek.call(null, coll)
};
cljs.core.pop = function pop(coll) {
  return cljs.core._pop.call(null, coll)
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll
  };
  var disj__2 = function(coll, k) {
    return cljs.core._disjoin.call(null, coll, k)
  };
  var disj__3 = function() {
    var G__3454__delegate = function(coll, k, ks) {
      while(true) {
        var ret = disj.call(null, coll, k);
        if(cljs.core.truth_(ks)) {
          var G__3455 = ret;
          var G__3456 = cljs.core.first.call(null, ks);
          var G__3457 = cljs.core.next.call(null, ks);
          coll = G__3455;
          k = G__3456;
          ks = G__3457;
          continue
        }else {
          return ret
        }
        break
      }
    };
    var G__3454 = function(coll, k, var_args) {
      var ks = null;
      if(goog.isDef(var_args)) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3454__delegate.call(this, coll, k, ks)
    };
    G__3454.cljs$lang$maxFixedArity = 2;
    G__3454.cljs$lang$applyTo = function(arglist__3458) {
      var coll = cljs.core.first(arglist__3458);
      var k = cljs.core.first(cljs.core.next(arglist__3458));
      var ks = cljs.core.rest(cljs.core.next(arglist__3458));
      return G__3454__delegate(coll, k, ks)
    };
    G__3454.cljs$lang$arity$variadic = G__3454__delegate;
    return G__3454
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        return disj__3.cljs$lang$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$lang$arity$1 = disj__1;
  disj.cljs$lang$arity$2 = disj__2;
  disj.cljs$lang$arity$variadic = disj__3.cljs$lang$arity$variadic;
  return disj
}();
cljs.core.string_hash_cache = {};
cljs.core.string_hash_cache_count = 0;
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = goog.string.hashCode(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h
};
cljs.core.check_string_hash_cache = function check_string_hash_cache(k) {
  if(cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = {};
    cljs.core.string_hash_cache_count = 0
  }else {
  }
  var h = cljs.core.string_hash_cache[k];
  if(!(h == null)) {
    return h
  }else {
    return cljs.core.add_to_string_hash_cache.call(null, k)
  }
};
cljs.core.hash = function() {
  var hash = null;
  var hash__1 = function(o) {
    return hash.call(null, o, true)
  };
  var hash__2 = function(o, check_cache) {
    if(function() {
      var and__3822__auto__ = goog.isString(o);
      if(and__3822__auto__) {
        return check_cache
      }else {
        return and__3822__auto__
      }
    }()) {
      return cljs.core.check_string_hash_cache.call(null, o)
    }else {
      return cljs.core._hash.call(null, o)
    }
  };
  hash = function(o, check_cache) {
    switch(arguments.length) {
      case 1:
        return hash__1.call(this, o);
      case 2:
        return hash__2.call(this, o, check_cache)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash.cljs$lang$arity$1 = hash__1;
  hash.cljs$lang$arity$2 = hash__2;
  return hash
}();
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  var or__3824__auto__ = coll == null;
  if(or__3824__auto__) {
    return or__3824__auto__
  }else {
    return cljs.core.not.call(null, cljs.core.seq.call(null, coll))
  }
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if(x == null) {
    return false
  }else {
    var G__3460 = x;
    if(G__3460) {
      if(function() {
        var or__3824__auto__ = G__3460.cljs$lang$protocol_mask$partition0$ & 8;
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          return G__3460.cljs$core$ICollection$
        }
      }()) {
        return true
      }else {
        if(!G__3460.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.type_satisfies_.call(null, cljs.core.ICollection, G__3460)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.type_satisfies_.call(null, cljs.core.ICollection, G__3460)
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if(x == null) {
    return false
  }else {
    var G__3462 = x;
    if(G__3462) {
      if(function() {
        var or__3824__auto__ = G__3462.cljs$lang$protocol_mask$partition0$ & 4096;
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          return G__3462.cljs$core$ISet$
        }
      }()) {
        return true
      }else {
        if(!G__3462.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.type_satisfies_.call(null, cljs.core.ISet, G__3462)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.type_satisfies_.call(null, cljs.core.ISet, G__3462)
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__3464 = x;
  if(G__3464) {
    if(function() {
      var or__3824__auto__ = G__3464.cljs$lang$protocol_mask$partition0$ & 512;
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        return G__3464.cljs$core$IAssociative$
      }
    }()) {
      return true
    }else {
      if(!G__3464.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.type_satisfies_.call(null, cljs.core.IAssociative, G__3464)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.type_satisfies_.call(null, cljs.core.IAssociative, G__3464)
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__3466 = x;
  if(G__3466) {
    if(function() {
      var or__3824__auto__ = G__3466.cljs$lang$protocol_mask$partition0$ & 16777216;
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        return G__3466.cljs$core$ISequential$
      }
    }()) {
      return true
    }else {
      if(!G__3466.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.type_satisfies_.call(null, cljs.core.ISequential, G__3466)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.type_satisfies_.call(null, cljs.core.ISequential, G__3466)
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__3468 = x;
  if(G__3468) {
    if(function() {
      var or__3824__auto__ = G__3468.cljs$lang$protocol_mask$partition0$ & 524288;
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        return G__3468.cljs$core$IReduce$
      }
    }()) {
      return true
    }else {
      if(!G__3468.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.type_satisfies_.call(null, cljs.core.IReduce, G__3468)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.type_satisfies_.call(null, cljs.core.IReduce, G__3468)
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if(x == null) {
    return false
  }else {
    var G__3470 = x;
    if(G__3470) {
      if(function() {
        var or__3824__auto__ = G__3470.cljs$lang$protocol_mask$partition0$ & 1024;
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          return G__3470.cljs$core$IMap$
        }
      }()) {
        return true
      }else {
        if(!G__3470.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.type_satisfies_.call(null, cljs.core.IMap, G__3470)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.type_satisfies_.call(null, cljs.core.IMap, G__3470)
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__3472 = x;
  if(G__3472) {
    if(function() {
      var or__3824__auto__ = G__3472.cljs$lang$protocol_mask$partition0$ & 16384;
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        return G__3472.cljs$core$IVector$
      }
    }()) {
      return true
    }else {
      if(!G__3472.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.type_satisfies_.call(null, cljs.core.IVector, G__3472)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.type_satisfies_.call(null, cljs.core.IVector, G__3472)
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__3474 = x;
  if(G__3474) {
    if(function() {
      var or__3824__auto__ = G__3474.cljs$lang$protocol_mask$partition1$ & 512;
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        return G__3474.cljs$core$IChunkedSeq$
      }
    }()) {
      return true
    }else {
      if(!G__3474.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.type_satisfies_.call(null, cljs.core.IChunkedSeq, G__3474)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.type_satisfies_.call(null, cljs.core.IChunkedSeq, G__3474)
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    return{}
  };
  var js_obj__1 = function() {
    var G__3475__delegate = function(keyvals) {
      return cljs.core.apply.call(null, goog.object.create, keyvals)
    };
    var G__3475 = function(var_args) {
      var keyvals = null;
      if(goog.isDef(var_args)) {
        keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
      }
      return G__3475__delegate.call(this, keyvals)
    };
    G__3475.cljs$lang$maxFixedArity = 0;
    G__3475.cljs$lang$applyTo = function(arglist__3476) {
      var keyvals = cljs.core.seq(arglist__3476);
      return G__3475__delegate(keyvals)
    };
    G__3475.cljs$lang$arity$variadic = G__3475__delegate;
    return G__3475
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        return js_obj__1.cljs$lang$arity$variadic(cljs.core.array_seq(arguments, 0))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$lang$arity$0 = js_obj__0;
  js_obj.cljs$lang$arity$variadic = js_obj__1.cljs$lang$arity$variadic;
  return js_obj
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  goog.object.forEach(obj, function(val, key, obj__$1) {
    return keys.push(key)
  });
  return keys
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key]
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while(true) {
    if(len__$1 === 0) {
      return to
    }else {
      to[j__$1] = from[i__$1];
      var G__3477 = i__$1 + 1;
      var G__3478 = j__$1 + 1;
      var G__3479 = len__$1 - 1;
      i__$1 = G__3477;
      j__$1 = G__3478;
      len__$1 = G__3479;
      continue
    }
    break
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while(true) {
    if(len__$1 === 0) {
      return to
    }else {
      to[j__$1] = from[i__$1];
      var G__3480 = i__$1 - 1;
      var G__3481 = j__$1 - 1;
      var G__3482 = len__$1 - 1;
      i__$1 = G__3480;
      j__$1 = G__3481;
      len__$1 = G__3482;
      continue
    }
    break
  }
};
cljs.core.lookup_sentinel = {};
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if(s == null) {
    return false
  }else {
    var G__3484 = s;
    if(G__3484) {
      if(function() {
        var or__3824__auto__ = G__3484.cljs$lang$protocol_mask$partition0$ & 64;
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          return G__3484.cljs$core$ISeq$
        }
      }()) {
        return true
      }else {
        if(!G__3484.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.type_satisfies_.call(null, cljs.core.ISeq, G__3484)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.type_satisfies_.call(null, cljs.core.ISeq, G__3484)
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__3486 = s;
  if(G__3486) {
    if(function() {
      var or__3824__auto__ = G__3486.cljs$lang$protocol_mask$partition0$ & 8388608;
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        return G__3486.cljs$core$ISeqable$
      }
    }()) {
      return true
    }else {
      if(!G__3486.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.type_satisfies_.call(null, cljs.core.ISeqable, G__3486)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.type_satisfies_.call(null, cljs.core.ISeqable, G__3486)
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if(cljs.core.truth_(x)) {
    return true
  }else {
    return false
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  var and__3822__auto__ = goog.isString(x);
  if(and__3822__auto__) {
    return!function() {
      var or__3824__auto__ = x.charAt(0) === "\ufdd0";
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        return x.charAt(0) === "\ufdd1"
      }
    }()
  }else {
    return and__3822__auto__
  }
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  var and__3822__auto__ = goog.isString(x);
  if(and__3822__auto__) {
    return x.charAt(0) === "\ufdd0"
  }else {
    return and__3822__auto__
  }
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  var and__3822__auto__ = goog.isString(x);
  if(and__3822__auto__) {
    return x.charAt(0) === "\ufdd1"
  }else {
    return and__3822__auto__
  }
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return goog.isNumber(n)
};
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  return goog.isFunction(f)
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__3824__auto__ = cljs.core.fn_QMARK_.call(null, f);
  if(or__3824__auto__) {
    return or__3824__auto__
  }else {
    var G__3488 = f;
    if(G__3488) {
      if(function() {
        var or__3824__auto____$1 = G__3488.cljs$lang$protocol_mask$partition0$ & 1;
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          return G__3488.cljs$core$IFn$
        }
      }()) {
        return true
      }else {
        if(!G__3488.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.type_satisfies_.call(null, cljs.core.IFn, G__3488)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.type_satisfies_.call(null, cljs.core.IFn, G__3488)
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  var and__3822__auto__ = cljs.core.number_QMARK_.call(null, n);
  if(and__3822__auto__) {
    var and__3822__auto____$1 = !isNaN(n);
    if(and__3822__auto____$1) {
      var and__3822__auto____$2 = !(n === Infinity);
      if(and__3822__auto____$2) {
        return parseFloat(n) === parseInt(n, 10)
      }else {
        return and__3822__auto____$2
      }
    }else {
      return and__3822__auto____$1
    }
  }else {
    return and__3822__auto__
  }
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if(cljs.core._lookup.call(null, coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false
  }else {
    return true
  }
};
cljs.core.find = function find(coll, k) {
  if(function() {
    var and__3822__auto__ = !(coll == null);
    if(and__3822__auto__) {
      var and__3822__auto____$1 = cljs.core.associative_QMARK_.call(null, coll);
      if(and__3822__auto____$1) {
        return cljs.core.contains_QMARK_.call(null, coll, k)
      }else {
        return and__3822__auto____$1
      }
    }else {
      return and__3822__auto__
    }
  }()) {
    return cljs.core.PersistentVector.fromArray([k, cljs.core._lookup.call(null, coll, k)], true)
  }else {
    return null
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y)
  };
  var distinct_QMARK___3 = function() {
    var G__3489__delegate = function(x, y, more) {
      if(!cljs.core._EQ_.call(null, x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([y, x]);
        var xs = more;
        while(true) {
          var x__$1 = cljs.core.first.call(null, xs);
          var etc = cljs.core.next.call(null, xs);
          if(cljs.core.truth_(xs)) {
            if(cljs.core.contains_QMARK_.call(null, s, x__$1)) {
              return false
            }else {
              var G__3490 = cljs.core.conj.call(null, s, x__$1);
              var G__3491 = etc;
              s = G__3490;
              xs = G__3491;
              continue
            }
          }else {
            return true
          }
          break
        }
      }else {
        return false
      }
    };
    var G__3489 = function(x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3489__delegate.call(this, x, y, more)
    };
    G__3489.cljs$lang$maxFixedArity = 2;
    G__3489.cljs$lang$applyTo = function(arglist__3492) {
      var x = cljs.core.first(arglist__3492);
      var y = cljs.core.first(cljs.core.next(arglist__3492));
      var more = cljs.core.rest(cljs.core.next(arglist__3492));
      return G__3489__delegate(x, y, more)
    };
    G__3489.cljs$lang$arity$variadic = G__3489__delegate;
    return G__3489
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        return distinct_QMARK___3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$lang$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$lang$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$lang$arity$variadic = distinct_QMARK___3.cljs$lang$arity$variadic;
  return distinct_QMARK_
}();
cljs.core.compare = function compare(x, y) {
  if(x === y) {
    return 0
  }else {
    if(x == null) {
      return-1
    }else {
      if(y == null) {
        return 1
      }else {
        if(cljs.core.type.call(null, x) === cljs.core.type.call(null, y)) {
          if(function() {
            var G__3494 = x;
            if(G__3494) {
              if(function() {
                var or__3824__auto__ = G__3494.cljs$lang$protocol_mask$partition1$ & 2048;
                if(or__3824__auto__) {
                  return or__3824__auto__
                }else {
                  return G__3494.cljs$core$IComparable$
                }
              }()) {
                return true
              }else {
                if(!G__3494.cljs$lang$protocol_mask$partition1$) {
                  return cljs.core.type_satisfies_.call(null, cljs.core.IComparable, G__3494)
                }else {
                  return false
                }
              }
            }else {
              return cljs.core.type_satisfies_.call(null, cljs.core.IComparable, G__3494)
            }
          }()) {
            return cljs.core._compare.call(null, x, y)
          }else {
            return goog.array.defaultCompare(x, y)
          }
        }else {
          if("\ufdd0'else") {
            throw new Error("compare on non-nil objects of different types");
          }else {
            return null
          }
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count.call(null, xs);
    var yl = cljs.core.count.call(null, ys);
    if(xl < yl) {
      return-1
    }else {
      if(xl > yl) {
        return 1
      }else {
        if("\ufdd0'else") {
          return compare_indexed.call(null, xs, ys, xl, 0)
        }else {
          return null
        }
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while(true) {
      var d = cljs.core.compare.call(null, cljs.core.nth.call(null, xs, n), cljs.core.nth.call(null, ys, n));
      if(function() {
        var and__3822__auto__ = d === 0;
        if(and__3822__auto__) {
          return n + 1 < len
        }else {
          return and__3822__auto__
        }
      }()) {
        var G__3495 = xs;
        var G__3496 = ys;
        var G__3497 = len;
        var G__3498 = n + 1;
        xs = G__3495;
        ys = G__3496;
        len = G__3497;
        n = G__3498;
        continue
      }else {
        return d
      }
      break
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$lang$arity$2 = compare_indexed__2;
  compare_indexed.cljs$lang$arity$4 = compare_indexed__4;
  return compare_indexed
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if(cljs.core._EQ_.call(null, f, cljs.core.compare)) {
    return cljs.core.compare
  }else {
    return function(x, y) {
      var r = f.call(null, x, y);
      if(cljs.core.number_QMARK_.call(null, r)) {
        return r
      }else {
        if(cljs.core.truth_(r)) {
          return-1
        }else {
          if(cljs.core.truth_(f.call(null, y, x))) {
            return 1
          }else {
            return 0
          }
        }
      }
    }
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.call(null, cljs.core.compare, coll)
  };
  var sort__2 = function(comp, coll) {
    if(cljs.core.seq.call(null, coll)) {
      var a = cljs.core.to_array.call(null, coll);
      goog.array.stableSort(a, cljs.core.fn__GT_comparator.call(null, comp));
      return cljs.core.seq.call(null, a)
    }else {
      return cljs.core.List.EMPTY
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$lang$arity$1 = sort__1;
  sort.cljs$lang$arity$2 = sort__2;
  return sort
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.call(null, keyfn, cljs.core.compare, coll)
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.call(null, function(x, y) {
      return cljs.core.fn__GT_comparator.call(null, comp).call(null, keyfn.call(null, x), keyfn.call(null, y))
    }, coll)
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$lang$arity$2 = sort_by__2;
  sort_by.cljs$lang$arity$3 = sort_by__3;
  return sort_by
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__3971__auto__ = cljs.core.seq.call(null, coll);
    if(temp__3971__auto__) {
      var s = temp__3971__auto__;
      return cljs.core.reduce.call(null, f, cljs.core.first.call(null, s), cljs.core.next.call(null, s))
    }else {
      return f.call(null)
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while(true) {
      if(coll__$1) {
        var nval = f.call(null, val__$1, cljs.core.first.call(null, coll__$1));
        if(cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval)
        }else {
          var G__3499 = nval;
          var G__3500 = cljs.core.next.call(null, coll__$1);
          val__$1 = G__3499;
          coll__$1 = G__3500;
          continue
        }
      }else {
        return val__$1
      }
      break
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$lang$arity$2 = seq_reduce__2;
  seq_reduce.cljs$lang$arity$3 = seq_reduce__3;
  return seq_reduce
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.call(null, a)
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if(function() {
      var G__3503 = coll;
      if(G__3503) {
        if(function() {
          var or__3824__auto__ = G__3503.cljs$lang$protocol_mask$partition0$ & 524288;
          if(or__3824__auto__) {
            return or__3824__auto__
          }else {
            return G__3503.cljs$core$IReduce$
          }
        }()) {
          return true
        }else {
          if(!G__3503.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.type_satisfies_.call(null, cljs.core.IReduce, G__3503)
          }else {
            return false
          }
        }
      }else {
        return cljs.core.type_satisfies_.call(null, cljs.core.IReduce, G__3503)
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f)
    }else {
      return cljs.core.seq_reduce.call(null, f, coll)
    }
  };
  var reduce__3 = function(f, val, coll) {
    if(function() {
      var G__3504 = coll;
      if(G__3504) {
        if(function() {
          var or__3824__auto__ = G__3504.cljs$lang$protocol_mask$partition0$ & 524288;
          if(or__3824__auto__) {
            return or__3824__auto__
          }else {
            return G__3504.cljs$core$IReduce$
          }
        }()) {
          return true
        }else {
          if(!G__3504.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.type_satisfies_.call(null, cljs.core.IReduce, G__3504)
          }else {
            return false
          }
        }
      }else {
        return cljs.core.type_satisfies_.call(null, cljs.core.IReduce, G__3504)
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f, val)
    }else {
      return cljs.core.seq_reduce.call(null, f, val, coll)
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$lang$arity$2 = reduce__2;
  reduce.cljs$lang$arity$3 = reduce__3;
  return reduce
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  return cljs.core._kv_reduce.call(null, coll, f, init)
};
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0
  };
  var _PLUS___1 = function(x) {
    return x
  };
  var _PLUS___2 = function(x, y) {
    return x + y
  };
  var _PLUS___3 = function() {
    var G__3505__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _PLUS_, x + y, more)
    };
    var G__3505 = function(x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3505__delegate.call(this, x, y, more)
    };
    G__3505.cljs$lang$maxFixedArity = 2;
    G__3505.cljs$lang$applyTo = function(arglist__3506) {
      var x = cljs.core.first(arglist__3506);
      var y = cljs.core.first(cljs.core.next(arglist__3506));
      var more = cljs.core.rest(cljs.core.next(arglist__3506));
      return G__3505__delegate(x, y, more)
    };
    G__3505.cljs$lang$arity$variadic = G__3505__delegate;
    return G__3505
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        return _PLUS___3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$lang$arity$0 = _PLUS___0;
  _PLUS_.cljs$lang$arity$1 = _PLUS___1;
  _PLUS_.cljs$lang$arity$2 = _PLUS___2;
  _PLUS_.cljs$lang$arity$variadic = _PLUS___3.cljs$lang$arity$variadic;
  return _PLUS_
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x
  };
  var ___2 = function(x, y) {
    return x - y
  };
  var ___3 = function() {
    var G__3507__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _, x - y, more)
    };
    var G__3507 = function(x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3507__delegate.call(this, x, y, more)
    };
    G__3507.cljs$lang$maxFixedArity = 2;
    G__3507.cljs$lang$applyTo = function(arglist__3508) {
      var x = cljs.core.first(arglist__3508);
      var y = cljs.core.first(cljs.core.next(arglist__3508));
      var more = cljs.core.rest(cljs.core.next(arglist__3508));
      return G__3507__delegate(x, y, more)
    };
    G__3507.cljs$lang$arity$variadic = G__3507__delegate;
    return G__3507
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        return ___3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$lang$arity$1 = ___1;
  _.cljs$lang$arity$2 = ___2;
  _.cljs$lang$arity$variadic = ___3.cljs$lang$arity$variadic;
  return _
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1
  };
  var _STAR___1 = function(x) {
    return x
  };
  var _STAR___2 = function(x, y) {
    return x * y
  };
  var _STAR___3 = function() {
    var G__3509__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _STAR_, x * y, more)
    };
    var G__3509 = function(x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3509__delegate.call(this, x, y, more)
    };
    G__3509.cljs$lang$maxFixedArity = 2;
    G__3509.cljs$lang$applyTo = function(arglist__3510) {
      var x = cljs.core.first(arglist__3510);
      var y = cljs.core.first(cljs.core.next(arglist__3510));
      var more = cljs.core.rest(cljs.core.next(arglist__3510));
      return G__3509__delegate(x, y, more)
    };
    G__3509.cljs$lang$arity$variadic = G__3509__delegate;
    return G__3509
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        return _STAR___3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$lang$arity$0 = _STAR___0;
  _STAR_.cljs$lang$arity$1 = _STAR___1;
  _STAR_.cljs$lang$arity$2 = _STAR___2;
  _STAR_.cljs$lang$arity$variadic = _STAR___3.cljs$lang$arity$variadic;
  return _STAR_
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.call(null, 1, x)
  };
  var _SLASH___2 = function(x, y) {
    return x / y
  };
  var _SLASH___3 = function() {
    var G__3511__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _SLASH_, _SLASH_.call(null, x, y), more)
    };
    var G__3511 = function(x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3511__delegate.call(this, x, y, more)
    };
    G__3511.cljs$lang$maxFixedArity = 2;
    G__3511.cljs$lang$applyTo = function(arglist__3512) {
      var x = cljs.core.first(arglist__3512);
      var y = cljs.core.first(cljs.core.next(arglist__3512));
      var more = cljs.core.rest(cljs.core.next(arglist__3512));
      return G__3511__delegate(x, y, more)
    };
    G__3511.cljs$lang$arity$variadic = G__3511__delegate;
    return G__3511
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        return _SLASH___3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$lang$arity$1 = _SLASH___1;
  _SLASH_.cljs$lang$arity$2 = _SLASH___2;
  _SLASH_.cljs$lang$arity$variadic = _SLASH___3.cljs$lang$arity$variadic;
  return _SLASH_
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true
  };
  var _LT___2 = function(x, y) {
    return x < y
  };
  var _LT___3 = function() {
    var G__3513__delegate = function(x, y, more) {
      while(true) {
        if(x < y) {
          if(cljs.core.next.call(null, more)) {
            var G__3514 = y;
            var G__3515 = cljs.core.first.call(null, more);
            var G__3516 = cljs.core.next.call(null, more);
            x = G__3514;
            y = G__3515;
            more = G__3516;
            continue
          }else {
            return y < cljs.core.first.call(null, more)
          }
        }else {
          return false
        }
        break
      }
    };
    var G__3513 = function(x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3513__delegate.call(this, x, y, more)
    };
    G__3513.cljs$lang$maxFixedArity = 2;
    G__3513.cljs$lang$applyTo = function(arglist__3517) {
      var x = cljs.core.first(arglist__3517);
      var y = cljs.core.first(cljs.core.next(arglist__3517));
      var more = cljs.core.rest(cljs.core.next(arglist__3517));
      return G__3513__delegate(x, y, more)
    };
    G__3513.cljs$lang$arity$variadic = G__3513__delegate;
    return G__3513
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        return _LT___3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$lang$arity$1 = _LT___1;
  _LT_.cljs$lang$arity$2 = _LT___2;
  _LT_.cljs$lang$arity$variadic = _LT___3.cljs$lang$arity$variadic;
  return _LT_
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y
  };
  var _LT__EQ___3 = function() {
    var G__3518__delegate = function(x, y, more) {
      while(true) {
        if(x <= y) {
          if(cljs.core.next.call(null, more)) {
            var G__3519 = y;
            var G__3520 = cljs.core.first.call(null, more);
            var G__3521 = cljs.core.next.call(null, more);
            x = G__3519;
            y = G__3520;
            more = G__3521;
            continue
          }else {
            return y <= cljs.core.first.call(null, more)
          }
        }else {
          return false
        }
        break
      }
    };
    var G__3518 = function(x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3518__delegate.call(this, x, y, more)
    };
    G__3518.cljs$lang$maxFixedArity = 2;
    G__3518.cljs$lang$applyTo = function(arglist__3522) {
      var x = cljs.core.first(arglist__3522);
      var y = cljs.core.first(cljs.core.next(arglist__3522));
      var more = cljs.core.rest(cljs.core.next(arglist__3522));
      return G__3518__delegate(x, y, more)
    };
    G__3518.cljs$lang$arity$variadic = G__3518__delegate;
    return G__3518
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        return _LT__EQ___3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$lang$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$lang$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$lang$arity$variadic = _LT__EQ___3.cljs$lang$arity$variadic;
  return _LT__EQ_
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true
  };
  var _GT___2 = function(x, y) {
    return x > y
  };
  var _GT___3 = function() {
    var G__3523__delegate = function(x, y, more) {
      while(true) {
        if(x > y) {
          if(cljs.core.next.call(null, more)) {
            var G__3524 = y;
            var G__3525 = cljs.core.first.call(null, more);
            var G__3526 = cljs.core.next.call(null, more);
            x = G__3524;
            y = G__3525;
            more = G__3526;
            continue
          }else {
            return y > cljs.core.first.call(null, more)
          }
        }else {
          return false
        }
        break
      }
    };
    var G__3523 = function(x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3523__delegate.call(this, x, y, more)
    };
    G__3523.cljs$lang$maxFixedArity = 2;
    G__3523.cljs$lang$applyTo = function(arglist__3527) {
      var x = cljs.core.first(arglist__3527);
      var y = cljs.core.first(cljs.core.next(arglist__3527));
      var more = cljs.core.rest(cljs.core.next(arglist__3527));
      return G__3523__delegate(x, y, more)
    };
    G__3523.cljs$lang$arity$variadic = G__3523__delegate;
    return G__3523
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        return _GT___3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$lang$arity$1 = _GT___1;
  _GT_.cljs$lang$arity$2 = _GT___2;
  _GT_.cljs$lang$arity$variadic = _GT___3.cljs$lang$arity$variadic;
  return _GT_
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y
  };
  var _GT__EQ___3 = function() {
    var G__3528__delegate = function(x, y, more) {
      while(true) {
        if(x >= y) {
          if(cljs.core.next.call(null, more)) {
            var G__3529 = y;
            var G__3530 = cljs.core.first.call(null, more);
            var G__3531 = cljs.core.next.call(null, more);
            x = G__3529;
            y = G__3530;
            more = G__3531;
            continue
          }else {
            return y >= cljs.core.first.call(null, more)
          }
        }else {
          return false
        }
        break
      }
    };
    var G__3528 = function(x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3528__delegate.call(this, x, y, more)
    };
    G__3528.cljs$lang$maxFixedArity = 2;
    G__3528.cljs$lang$applyTo = function(arglist__3532) {
      var x = cljs.core.first(arglist__3532);
      var y = cljs.core.first(cljs.core.next(arglist__3532));
      var more = cljs.core.rest(cljs.core.next(arglist__3532));
      return G__3528__delegate(x, y, more)
    };
    G__3528.cljs$lang$arity$variadic = G__3528__delegate;
    return G__3528
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        return _GT__EQ___3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$lang$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$lang$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$lang$arity$variadic = _GT__EQ___3.cljs$lang$arity$variadic;
  return _GT__EQ_
}();
cljs.core.dec = function dec(x) {
  return x - 1
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x
  };
  var max__2 = function(x, y) {
    return x > y ? x : y
  };
  var max__3 = function() {
    var G__3533__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, max, x > y ? x : y, more)
    };
    var G__3533 = function(x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3533__delegate.call(this, x, y, more)
    };
    G__3533.cljs$lang$maxFixedArity = 2;
    G__3533.cljs$lang$applyTo = function(arglist__3534) {
      var x = cljs.core.first(arglist__3534);
      var y = cljs.core.first(cljs.core.next(arglist__3534));
      var more = cljs.core.rest(cljs.core.next(arglist__3534));
      return G__3533__delegate(x, y, more)
    };
    G__3533.cljs$lang$arity$variadic = G__3533__delegate;
    return G__3533
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        return max__3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$lang$arity$1 = max__1;
  max.cljs$lang$arity$2 = max__2;
  max.cljs$lang$arity$variadic = max__3.cljs$lang$arity$variadic;
  return max
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x
  };
  var min__2 = function(x, y) {
    return x < y ? x : y
  };
  var min__3 = function() {
    var G__3535__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, min, x < y ? x : y, more)
    };
    var G__3535 = function(x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3535__delegate.call(this, x, y, more)
    };
    G__3535.cljs$lang$maxFixedArity = 2;
    G__3535.cljs$lang$applyTo = function(arglist__3536) {
      var x = cljs.core.first(arglist__3536);
      var y = cljs.core.first(cljs.core.next(arglist__3536));
      var more = cljs.core.rest(cljs.core.next(arglist__3536));
      return G__3535__delegate(x, y, more)
    };
    G__3535.cljs$lang$arity$variadic = G__3535__delegate;
    return G__3535
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        return min__3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$lang$arity$1 = min__1;
  min.cljs$lang$arity$2 = min__2;
  min.cljs$lang$arity$variadic = min__3.cljs$lang$arity$variadic;
  return min
}();
cljs.core.fix = function fix(q) {
  if(q >= 0) {
    return Math.floor.call(null, q)
  }else {
    return Math.ceil.call(null, q)
  }
};
cljs.core.int$ = function int$(x) {
  return cljs.core.fix.call(null, x)
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix.call(null, x)
};
cljs.core.mod = function mod(n, d) {
  return n % d
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix.call(null, (n - rem) / d)
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot.call(null, n, d);
  return n - d * q
};
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return Math.random.call(null)
  };
  var rand__1 = function(n) {
    return n * rand.call(null)
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$lang$arity$0 = rand__0;
  rand.cljs$lang$arity$1 = rand__1;
  return rand
}();
cljs.core.rand_int = function rand_int(n) {
  return cljs.core.fix.call(null, cljs.core.rand.call(null, n))
};
cljs.core.bit_xor = function bit_xor(x, y) {
  return x ^ y
};
cljs.core.bit_and = function bit_and(x, y) {
  return x & y
};
cljs.core.bit_or = function bit_or(x, y) {
  return x | y
};
cljs.core.bit_and_not = function bit_and_not(x, y) {
  return x & ~y
};
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n)
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n
};
cljs.core.bit_not = function bit_not(x) {
  return~x
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv.call(null, x, y)
  };
  var _EQ__EQ___3 = function() {
    var G__3537__delegate = function(x, y, more) {
      while(true) {
        if(cljs.core.truth_(_EQ__EQ_.call(null, x, y))) {
          if(cljs.core.next.call(null, more)) {
            var G__3538 = y;
            var G__3539 = cljs.core.first.call(null, more);
            var G__3540 = cljs.core.next.call(null, more);
            x = G__3538;
            y = G__3539;
            more = G__3540;
            continue
          }else {
            return _EQ__EQ_.call(null, y, cljs.core.first.call(null, more))
          }
        }else {
          return false
        }
        break
      }
    };
    var G__3537 = function(x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3537__delegate.call(this, x, y, more)
    };
    G__3537.cljs$lang$maxFixedArity = 2;
    G__3537.cljs$lang$applyTo = function(arglist__3541) {
      var x = cljs.core.first(arglist__3541);
      var y = cljs.core.first(cljs.core.next(arglist__3541));
      var more = cljs.core.rest(cljs.core.next(arglist__3541));
      return G__3537__delegate(x, y, more)
    };
    G__3537.cljs$lang$arity$variadic = G__3537__delegate;
    return G__3537
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        return _EQ__EQ___3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$lang$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$lang$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$lang$arity$variadic = _EQ__EQ___3.cljs$lang$arity$variadic;
  return _EQ__EQ_
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq.call(null, coll);
  while(true) {
    if(cljs.core.truth_(function() {
      var and__3822__auto__ = xs;
      if(and__3822__auto__) {
        return n__$1 > 0
      }else {
        return and__3822__auto__
      }
    }())) {
      var G__3542 = n__$1 - 1;
      var G__3543 = cljs.core.next.call(null, xs);
      n__$1 = G__3542;
      xs = G__3543;
      continue
    }else {
      return xs
    }
    break
  }
};
cljs.core.str_STAR_ = function() {
  var str_STAR_ = null;
  var str_STAR___0 = function() {
    return""
  };
  var str_STAR___1 = function(x) {
    if(x == null) {
      return""
    }else {
      if("\ufdd0'else") {
        return x.toString()
      }else {
        return null
      }
    }
  };
  var str_STAR___2 = function() {
    var G__3544__delegate = function(x, ys) {
      return function(sb, more) {
        while(true) {
          if(cljs.core.truth_(more)) {
            var G__3545 = sb.append(str_STAR_.call(null, cljs.core.first.call(null, more)));
            var G__3546 = cljs.core.next.call(null, more);
            sb = G__3545;
            more = G__3546;
            continue
          }else {
            return str_STAR_.call(null, sb)
          }
          break
        }
      }.call(null, new goog.string.StringBuffer(str_STAR_.call(null, x)), ys)
    };
    var G__3544 = function(x, var_args) {
      var ys = null;
      if(goog.isDef(var_args)) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
      }
      return G__3544__delegate.call(this, x, ys)
    };
    G__3544.cljs$lang$maxFixedArity = 1;
    G__3544.cljs$lang$applyTo = function(arglist__3547) {
      var x = cljs.core.first(arglist__3547);
      var ys = cljs.core.rest(arglist__3547);
      return G__3544__delegate(x, ys)
    };
    G__3544.cljs$lang$arity$variadic = G__3544__delegate;
    return G__3544
  }();
  str_STAR_ = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str_STAR___0.call(this);
      case 1:
        return str_STAR___1.call(this, x);
      default:
        return str_STAR___2.cljs$lang$arity$variadic(x, cljs.core.array_seq(arguments, 1))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str_STAR_.cljs$lang$maxFixedArity = 1;
  str_STAR_.cljs$lang$applyTo = str_STAR___2.cljs$lang$applyTo;
  str_STAR_.cljs$lang$arity$0 = str_STAR___0;
  str_STAR_.cljs$lang$arity$1 = str_STAR___1;
  str_STAR_.cljs$lang$arity$variadic = str_STAR___2.cljs$lang$arity$variadic;
  return str_STAR_
}();
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return""
  };
  var str__1 = function(x) {
    if(cljs.core.symbol_QMARK_.call(null, x)) {
      return x.substring(2, x.length)
    }else {
      if(cljs.core.keyword_QMARK_.call(null, x)) {
        return cljs.core.str_STAR_.call(null, ":", x.substring(2, x.length))
      }else {
        if(x == null) {
          return""
        }else {
          if("\ufdd0'else") {
            return x.toString()
          }else {
            return null
          }
        }
      }
    }
  };
  var str__2 = function() {
    var G__3548__delegate = function(x, ys) {
      return function(sb, more) {
        while(true) {
          if(cljs.core.truth_(more)) {
            var G__3549 = sb.append(str.call(null, cljs.core.first.call(null, more)));
            var G__3550 = cljs.core.next.call(null, more);
            sb = G__3549;
            more = G__3550;
            continue
          }else {
            return cljs.core.str_STAR_.call(null, sb)
          }
          break
        }
      }.call(null, new goog.string.StringBuffer(str.call(null, x)), ys)
    };
    var G__3548 = function(x, var_args) {
      var ys = null;
      if(goog.isDef(var_args)) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
      }
      return G__3548__delegate.call(this, x, ys)
    };
    G__3548.cljs$lang$maxFixedArity = 1;
    G__3548.cljs$lang$applyTo = function(arglist__3551) {
      var x = cljs.core.first(arglist__3551);
      var ys = cljs.core.rest(arglist__3551);
      return G__3548__delegate(x, ys)
    };
    G__3548.cljs$lang$arity$variadic = G__3548__delegate;
    return G__3548
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        return str__2.cljs$lang$arity$variadic(x, cljs.core.array_seq(arguments, 1))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$lang$arity$0 = str__0;
  str.cljs$lang$arity$1 = str__1;
  str.cljs$lang$arity$variadic = str__2.cljs$lang$arity$variadic;
  return str
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start)
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end)
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$lang$arity$2 = subs__2;
  subs.cljs$lang$arity$3 = subs__3;
  return subs
}();
cljs.core.format = function() {
  var format__delegate = function(fmt, args) {
    var args__$1 = cljs.core.map.call(null, function(x) {
      if(function() {
        var or__3824__auto__ = cljs.core.keyword_QMARK_.call(null, x);
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          return cljs.core.symbol_QMARK_.call(null, x)
        }
      }()) {
        return[cljs.core.str(x)].join("")
      }else {
        return x
      }
    }, args);
    return cljs.core.apply.call(null, goog.string.format, fmt, args__$1)
  };
  var format = function(fmt, var_args) {
    var args = null;
    if(goog.isDef(var_args)) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return format__delegate.call(this, fmt, args)
  };
  format.cljs$lang$maxFixedArity = 1;
  format.cljs$lang$applyTo = function(arglist__3552) {
    var fmt = cljs.core.first(arglist__3552);
    var args = cljs.core.rest(arglist__3552);
    return format__delegate(fmt, args)
  };
  format.cljs$lang$arity$variadic = format__delegate;
  return format
}();
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if(cljs.core.symbol_QMARK_.call(null, name)) {
      return name
    }else {
      if(cljs.core.keyword_QMARK_.call(null, name)) {
        return cljs.core.str_STAR_.call(null, "\ufdd1", "'", cljs.core.subs.call(null, name, 2))
      }else {
        if("\ufdd0'else") {
          return cljs.core.str_STAR_.call(null, "\ufdd1", "'", name)
        }else {
          return null
        }
      }
    }
  };
  var symbol__2 = function(ns, name) {
    return symbol.call(null, cljs.core.str_STAR_.call(null, ns, "/", name))
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$lang$arity$1 = symbol__1;
  symbol.cljs$lang$arity$2 = symbol__2;
  return symbol
}();
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if(cljs.core.keyword_QMARK_.call(null, name)) {
      return name
    }else {
      if(cljs.core.symbol_QMARK_.call(null, name)) {
        return cljs.core.str_STAR_.call(null, "\ufdd0", "'", cljs.core.subs.call(null, name, 2))
      }else {
        if("\ufdd0'else") {
          return cljs.core.str_STAR_.call(null, "\ufdd0", "'", name)
        }else {
          return null
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return keyword.call(null, cljs.core.str_STAR_.call(null, ns, "/", name))
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$lang$arity$1 = keyword__1;
  keyword.cljs$lang$arity$2 = keyword__2;
  return keyword
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.sequential_QMARK_.call(null, y) ? function() {
    var xs = cljs.core.seq.call(null, x);
    var ys = cljs.core.seq.call(null, y);
    while(true) {
      if(xs == null) {
        return ys == null
      }else {
        if(ys == null) {
          return false
        }else {
          if(cljs.core._EQ_.call(null, cljs.core.first.call(null, xs), cljs.core.first.call(null, ys))) {
            var G__3553 = cljs.core.next.call(null, xs);
            var G__3554 = cljs.core.next.call(null, ys);
            xs = G__3553;
            ys = G__3554;
            continue
          }else {
            if("\ufdd0'else") {
              return false
            }else {
              return null
            }
          }
        }
      }
      break
    }
  }() : null)
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2)
};
cljs.core.hash_coll = function hash_coll(coll) {
  return cljs.core.reduce.call(null, function(p1__3555_SHARP_, p2__3556_SHARP_) {
    return cljs.core.hash_combine.call(null, p1__3555_SHARP_, cljs.core.hash.call(null, p2__3556_SHARP_, false))
  }, cljs.core.hash.call(null, cljs.core.first.call(null, coll), false), cljs.core.next.call(null, coll))
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq.call(null, m);
  while(true) {
    if(s) {
      var e = cljs.core.first.call(null, s);
      var G__3557 = (h + (cljs.core.hash.call(null, cljs.core.key.call(null, e)) ^ cljs.core.hash.call(null, cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__3558 = cljs.core.next.call(null, s);
      h = G__3557;
      s = G__3558;
      continue
    }else {
      return h
    }
    break
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq.call(null, s);
  while(true) {
    if(s__$1) {
      var e = cljs.core.first.call(null, s__$1);
      var G__3559 = (h + cljs.core.hash.call(null, e)) % 4503599627370496;
      var G__3560 = cljs.core.next.call(null, s__$1);
      h = G__3559;
      s__$1 = G__3560;
      continue
    }else {
      return h
    }
    break
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var G__3563 = cljs.core.seq.call(null, fn_map);
  while(true) {
    if(G__3563) {
      var vec__3564 = cljs.core.first.call(null, G__3563);
      var key_name = cljs.core.nth.call(null, vec__3564, 0, null);
      var f = cljs.core.nth.call(null, vec__3564, 1, null);
      var str_name = cljs.core.name.call(null, key_name);
      obj[str_name] = f;
      var G__3565 = cljs.core.next.call(null, G__3563);
      G__3563 = G__3565;
      continue
    }else {
    }
    break
  }
  return obj
};
goog.provide("cljs.core.List");
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 65413358
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/List")
};
cljs.core.List.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/List")
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  if(self__.count === 1) {
    return null
  }else {
    return self__.rest
  }
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return new cljs.core.List(self__.meta, o, coll, self__.count + 1, null)
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  return coll
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return self__.count
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  return self__.first
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  return coll.cljs$core$ISeq$_rest$arity$1(coll)
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  return self__.first
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  if(self__.count === 1) {
    return cljs.core.List.EMPTY
  }else {
    return self__.rest
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash)
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.List.EMPTY
};
cljs.core.List;
goog.provide("cljs.core.EmptyList");
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 65413326
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/EmptyList")
};
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/EmptyList")
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  return 0
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  return null
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return new cljs.core.List(self__.meta, o, null, 1, null)
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  return null
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return 0
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  return null
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  return null
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.List.EMPTY
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.EmptyList(meta__$1)
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return coll
};
cljs.core.EmptyList;
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__3567 = coll;
  if(G__3567) {
    if(function() {
      var or__3824__auto__ = G__3567.cljs$lang$protocol_mask$partition0$ & 134217728;
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        return G__3567.cljs$core$IReversible$
      }
    }()) {
      return true
    }else {
      if(!G__3567.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.type_satisfies_.call(null, cljs.core.IReversible, G__3567)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.type_satisfies_.call(null, cljs.core.IReversible, G__3567)
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq.call(null, coll)
};
cljs.core.reverse = function reverse(coll) {
  if(cljs.core.reversible_QMARK_.call(null, coll)) {
    return cljs.core.rseq.call(null, coll)
  }else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll)
  }
};
cljs.core.list = function() {
  var list = null;
  var list__0 = function() {
    return cljs.core.List.EMPTY
  };
  var list__1 = function(x) {
    return cljs.core.conj.call(null, cljs.core.List.EMPTY, x)
  };
  var list__2 = function(x, y) {
    return cljs.core.conj.call(null, list.call(null, y), x)
  };
  var list__3 = function(x, y, z) {
    return cljs.core.conj.call(null, list.call(null, y, z), x)
  };
  var list__4 = function() {
    var G__3568__delegate = function(x, y, z, items) {
      return cljs.core.conj.call(null, cljs.core.conj.call(null, cljs.core.conj.call(null, cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, cljs.core.reverse.call(null, items)), z), y), x)
    };
    var G__3568 = function(x, y, z, var_args) {
      var items = null;
      if(goog.isDef(var_args)) {
        items = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__3568__delegate.call(this, x, y, z, items)
    };
    G__3568.cljs$lang$maxFixedArity = 3;
    G__3568.cljs$lang$applyTo = function(arglist__3569) {
      var x = cljs.core.first(arglist__3569);
      var y = cljs.core.first(cljs.core.next(arglist__3569));
      var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3569)));
      var items = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3569)));
      return G__3568__delegate(x, y, z, items)
    };
    G__3568.cljs$lang$arity$variadic = G__3568__delegate;
    return G__3568
  }();
  list = function(x, y, z, var_args) {
    var items = var_args;
    switch(arguments.length) {
      case 0:
        return list__0.call(this);
      case 1:
        return list__1.call(this, x);
      case 2:
        return list__2.call(this, x, y);
      case 3:
        return list__3.call(this, x, y, z);
      default:
        return list__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list.cljs$lang$maxFixedArity = 3;
  list.cljs$lang$applyTo = list__4.cljs$lang$applyTo;
  list.cljs$lang$arity$0 = list__0;
  list.cljs$lang$arity$1 = list__1;
  list.cljs$lang$arity$2 = list__2;
  list.cljs$lang$arity$3 = list__3;
  list.cljs$lang$arity$variadic = list__4.cljs$lang$arity$variadic;
  return list
}();
goog.provide("cljs.core.Cons");
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 65405164
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/Cons")
};
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/Cons")
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  if(self__.rest == null) {
    return null
  }else {
    return cljs.core._seq.call(null, self__.rest)
  }
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return new cljs.core.Cons(null, o, coll, self__.__hash)
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  return coll
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  return self__.first
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  if(self__.rest == null) {
    return cljs.core.List.EMPTY
  }else {
    return self__.rest
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash)
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.Cons;
cljs.core.cons = function cons(x, coll) {
  if(function() {
    var or__3824__auto__ = coll == null;
    if(or__3824__auto__) {
      return or__3824__auto__
    }else {
      var G__3571 = coll;
      if(G__3571) {
        if(function() {
          var or__3824__auto____$1 = G__3571.cljs$lang$protocol_mask$partition0$ & 64;
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            return G__3571.cljs$core$ISeq$
          }
        }()) {
          return true
        }else {
          if(!G__3571.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.type_satisfies_.call(null, cljs.core.ISeq, G__3571)
          }else {
            return false
          }
        }
      }else {
        return cljs.core.type_satisfies_.call(null, cljs.core.ISeq, G__3571)
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null)
  }else {
    return new cljs.core.Cons(null, x, cljs.core.seq.call(null, coll), null)
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__3573 = x;
  if(G__3573) {
    if(function() {
      var or__3824__auto__ = G__3573.cljs$lang$protocol_mask$partition0$ & 33554432;
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        return G__3573.cljs$core$IList$
      }
    }()) {
      return true
    }else {
      if(!G__3573.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.type_satisfies_.call(null, cljs.core.IList, G__3573)
      }else {
        return false
      }
    }
  }else {
    return cljs.core.type_satisfies_.call(null, cljs.core.IList, G__3573)
  }
};
cljs.core.IReduce["string"] = true;
cljs.core._reduce["string"] = function() {
  var G__3574 = null;
  var G__3574__2 = function(string, f) {
    return cljs.core.ci_reduce.call(null, string, f)
  };
  var G__3574__3 = function(string, f, start) {
    return cljs.core.ci_reduce.call(null, string, f, start)
  };
  G__3574 = function(string, f, start) {
    switch(arguments.length) {
      case 2:
        return G__3574__2.call(this, string, f);
      case 3:
        return G__3574__3.call(this, string, f, start)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__3574
}();
cljs.core.ILookup["string"] = true;
cljs.core._lookup["string"] = function() {
  var G__3575 = null;
  var G__3575__2 = function(string, k) {
    return cljs.core._nth.call(null, string, k)
  };
  var G__3575__3 = function(string, k, not_found) {
    return cljs.core._nth.call(null, string, k, not_found)
  };
  G__3575 = function(string, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3575__2.call(this, string, k);
      case 3:
        return G__3575__3.call(this, string, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__3575
}();
cljs.core.IIndexed["string"] = true;
cljs.core._nth["string"] = function() {
  var G__3576 = null;
  var G__3576__2 = function(string, n) {
    if(n < cljs.core._count.call(null, string)) {
      return string.charAt(n)
    }else {
      return null
    }
  };
  var G__3576__3 = function(string, n, not_found) {
    if(n < cljs.core._count.call(null, string)) {
      return string.charAt(n)
    }else {
      return not_found
    }
  };
  G__3576 = function(string, n, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3576__2.call(this, string, n);
      case 3:
        return G__3576__3.call(this, string, n, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__3576
}();
cljs.core.ICounted["string"] = true;
cljs.core._count["string"] = function(s) {
  return s.length
};
cljs.core.ISeqable["string"] = true;
cljs.core._seq["string"] = function(string) {
  return cljs.core.prim_seq.call(null, string, 0)
};
cljs.core.IHash["string"] = true;
cljs.core._hash["string"] = function(o) {
  return goog.string.hashCode(o)
};
goog.provide("cljs.core.Keyword");
cljs.core.Keyword = function(k) {
  this.k = k;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/Keyword")
};
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/Keyword")
};
cljs.core.Keyword.prototype.call = function() {
  var G__3581 = null;
  var G__3581__2 = function(this_sym3579, coll) {
    var self__ = this;
    var this_sym3579__$1 = this;
    var _ = this_sym3579__$1;
    if(coll == null) {
      return null
    }else {
      var strobj = coll.strobj;
      if(strobj == null) {
        return cljs.core._lookup.call(null, coll, self__.k, null)
      }else {
        return strobj[self__.k]
      }
    }
  };
  var G__3581__3 = function(this_sym3580, coll, not_found) {
    var self__ = this;
    var this_sym3580__$1 = this;
    var _ = this_sym3580__$1;
    if(coll == null) {
      return not_found
    }else {
      return cljs.core._lookup.call(null, coll, self__.k, not_found)
    }
  };
  G__3581 = function(this_sym3580, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3581__2.call(this, this_sym3580, coll);
      case 3:
        return G__3581__3.call(this, this_sym3580, coll, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__3581
}();
cljs.core.Keyword.prototype.apply = function(this_sym3577, args3578) {
  var self__ = this;
  return this_sym3577.call.apply(this_sym3577, [this_sym3577].concat(args3578.slice()))
};
cljs.core.Keyword;
String.prototype.cljs$core$IFn$ = true;
String.prototype.call = function() {
  var G__3586 = null;
  var G__3586__2 = function(this_sym3584, coll) {
    var this_sym3584__$1 = this;
    var this$ = this_sym3584__$1;
    return cljs.core._lookup.call(null, coll, this$.toString(), null)
  };
  var G__3586__3 = function(this_sym3585, coll, not_found) {
    var this_sym3585__$1 = this;
    var this$ = this_sym3585__$1;
    return cljs.core._lookup.call(null, coll, this$.toString(), not_found)
  };
  G__3586 = function(this_sym3585, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3586__2.call(this, this_sym3585, coll);
      case 3:
        return G__3586__3.call(this, this_sym3585, coll, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__3586
}();
String.prototype.apply = function(this_sym3582, args3583) {
  return this_sym3582.call.apply(this_sym3582, [this_sym3582].concat(args3583.slice()))
};
String.prototype.apply = function(s, args) {
  if(cljs.core.count.call(null, args) < 2) {
    return cljs.core._lookup.call(null, args[0], s, null)
  }else {
    return cljs.core._lookup.call(null, args[0], s, args[1])
  }
};
cljs.core.lazy_seq_value = function lazy_seq_value(lazy_seq) {
  var x = lazy_seq.x;
  if(lazy_seq.realized) {
    return x
  }else {
    lazy_seq.x = x.call(null);
    lazy_seq.realized = true;
    return lazy_seq.x
  }
};
goog.provide("cljs.core.LazySeq");
cljs.core.LazySeq = function(meta, realized, x, __hash) {
  this.meta = meta;
  this.realized = realized;
  this.x = x;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850700
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/LazySeq")
};
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/LazySeq")
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core._seq.call(null, coll.cljs$core$ISeq$_rest$arity$1(coll))
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return cljs.core.cons.call(null, o, coll)
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.seq.call(null, cljs.core.lazy_seq_value.call(null, coll))
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.first.call(null, cljs.core.lazy_seq_value.call(null, coll))
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.rest.call(null, cljs.core.lazy_seq_value.call(null, coll))
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.LazySeq(meta__$1, self__.realized, self__.x, self__.__hash)
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.LazySeq;
goog.provide("cljs.core.ChunkBuffer");
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/ChunkBuffer")
};
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/ChunkBuffer")
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  return self__.end
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret
};
cljs.core.ChunkBuffer;
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(cljs.core.make_array.call(null, capacity), 0)
};
goog.provide("cljs.core.ArrayChunk");
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/ArrayChunk")
};
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/ArrayChunk")
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.off], self__.off + 1)
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.off)
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  if(self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  }else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end)
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  return self__.arr[self__.off + i]
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  if(function() {
    var and__3822__auto__ = i >= 0;
    if(and__3822__auto__) {
      return i < self__.end - self__.off
    }else {
      return and__3822__auto__
    }
  }()) {
    return self__.arr[self__.off + i]
  }else {
    return not_found
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  return self__.end - self__.off
};
cljs.core.ArrayChunk;
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return array_chunk.call(null, arr, 0, arr.length)
  };
  var array_chunk__2 = function(arr, off) {
    return array_chunk.call(null, arr, off, arr.length)
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end)
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$lang$arity$1 = array_chunk__1;
  array_chunk.cljs$lang$arity$2 = array_chunk__2;
  array_chunk.cljs$lang$arity$3 = array_chunk__3;
  return array_chunk
}();
goog.provide("cljs.core.ChunkedCons");
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850604;
  this.cljs$lang$protocol_mask$partition1$ = 1536
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/ChunkedCons")
};
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/ChunkedCons")
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  return cljs.core.cons.call(null, o, this$)
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  return coll
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core._nth.call(null, self__.chunk, 0)
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  if(cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null)
  }else {
    if(self__.more == null) {
      return cljs.core.List.EMPTY
    }else {
      return self__.more
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  if(self__.more == null) {
    return null
  }else {
    return self__.more
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash)
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  return self__.chunk
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  if(self__.more == null) {
    return cljs.core.List.EMPTY
  }else {
    return self__.more
  }
};
cljs.core.ChunkedCons;
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if(cljs.core._count.call(null, chunk) === 0) {
    return rest
  }else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null)
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x)
};
cljs.core.chunk = function chunk(b) {
  return b.chunk()
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first.call(null, s)
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest.call(null, s)
};
cljs.core.chunk_next = function chunk_next(s) {
  if(function() {
    var G__3588 = s;
    if(G__3588) {
      if(function() {
        var or__3824__auto__ = G__3588.cljs$lang$protocol_mask$partition1$ & 1024;
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          return G__3588.cljs$core$IChunkedNext$
        }
      }()) {
        return true
      }else {
        if(!G__3588.cljs$lang$protocol_mask$partition1$) {
          return cljs.core.type_satisfies_.call(null, cljs.core.IChunkedNext, G__3588)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.type_satisfies_.call(null, cljs.core.IChunkedNext, G__3588)
    }
  }()) {
    return cljs.core._chunked_next.call(null, s)
  }else {
    return cljs.core.seq.call(null, cljs.core._chunked_rest.call(null, s))
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while(true) {
    if(cljs.core.seq.call(null, s__$1)) {
      ary.push(cljs.core.first.call(null, s__$1));
      var G__3589 = cljs.core.next.call(null, s__$1);
      s__$1 = G__3589;
      continue
    }else {
      return ary
    }
    break
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = cljs.core.make_array.call(null, cljs.core.count.call(null, coll));
  var i = 0;
  var xs = cljs.core.seq.call(null, coll);
  while(true) {
    if(xs) {
      ret[i] = cljs.core.to_array.call(null, cljs.core.first.call(null, xs));
      var G__3590 = i + 1;
      var G__3591 = cljs.core.next.call(null, xs);
      i = G__3590;
      xs = G__3591;
      continue
    }else {
    }
    break
  }
  return ret
};
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if(cljs.core.number_QMARK_.call(null, size_or_seq)) {
      return long_array.call(null, size_or_seq, null)
    }else {
      if(cljs.core.seq_QMARK_.call(null, size_or_seq)) {
        return cljs.core.into_array.call(null, size_or_seq)
      }else {
        if("\ufdd0'else") {
          throw new Error("long-array called with something other than size or ISeq");
        }else {
          return null
        }
      }
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = cljs.core.make_array.call(null, size);
    if(cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while(true) {
        if(cljs.core.truth_(function() {
          var and__3822__auto__ = s__$1;
          if(and__3822__auto__) {
            return i < size
          }else {
            return and__3822__auto__
          }
        }())) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__3592 = i + 1;
          var G__3593 = cljs.core.next.call(null, s__$1);
          i = G__3592;
          s__$1 = G__3593;
          continue
        }else {
          return a
        }
        break
      }
    }else {
      var n__2535__auto__ = size;
      var i = 0;
      while(true) {
        if(i < n__2535__auto__) {
          a[i] = init_val_or_seq;
          var G__3594 = i + 1;
          i = G__3594;
          continue
        }else {
        }
        break
      }
      return a
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$lang$arity$1 = long_array__1;
  long_array.cljs$lang$arity$2 = long_array__2;
  return long_array
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if(cljs.core.number_QMARK_.call(null, size_or_seq)) {
      return double_array.call(null, size_or_seq, null)
    }else {
      if(cljs.core.seq_QMARK_.call(null, size_or_seq)) {
        return cljs.core.into_array.call(null, size_or_seq)
      }else {
        if("\ufdd0'else") {
          throw new Error("double-array called with something other than size or ISeq");
        }else {
          return null
        }
      }
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = cljs.core.make_array.call(null, size);
    if(cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while(true) {
        if(cljs.core.truth_(function() {
          var and__3822__auto__ = s__$1;
          if(and__3822__auto__) {
            return i < size
          }else {
            return and__3822__auto__
          }
        }())) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__3595 = i + 1;
          var G__3596 = cljs.core.next.call(null, s__$1);
          i = G__3595;
          s__$1 = G__3596;
          continue
        }else {
          return a
        }
        break
      }
    }else {
      var n__2535__auto__ = size;
      var i = 0;
      while(true) {
        if(i < n__2535__auto__) {
          a[i] = init_val_or_seq;
          var G__3597 = i + 1;
          i = G__3597;
          continue
        }else {
        }
        break
      }
      return a
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$lang$arity$1 = double_array__1;
  double_array.cljs$lang$arity$2 = double_array__2;
  return double_array
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if(cljs.core.number_QMARK_.call(null, size_or_seq)) {
      return object_array.call(null, size_or_seq, null)
    }else {
      if(cljs.core.seq_QMARK_.call(null, size_or_seq)) {
        return cljs.core.into_array.call(null, size_or_seq)
      }else {
        if("\ufdd0'else") {
          throw new Error("object-array called with something other than size or ISeq");
        }else {
          return null
        }
      }
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = cljs.core.make_array.call(null, size);
    if(cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while(true) {
        if(cljs.core.truth_(function() {
          var and__3822__auto__ = s__$1;
          if(and__3822__auto__) {
            return i < size
          }else {
            return and__3822__auto__
          }
        }())) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__3598 = i + 1;
          var G__3599 = cljs.core.next.call(null, s__$1);
          i = G__3598;
          s__$1 = G__3599;
          continue
        }else {
          return a
        }
        break
      }
    }else {
      var n__2535__auto__ = size;
      var i = 0;
      while(true) {
        if(i < n__2535__auto__) {
          a[i] = init_val_or_seq;
          var G__3600 = i + 1;
          i = G__3600;
          continue
        }else {
        }
        break
      }
      return a
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$lang$arity$1 = object_array__1;
  object_array.cljs$lang$arity$2 = object_array__2;
  return object_array
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if(cljs.core.counted_QMARK_.call(null, s)) {
    return cljs.core.count.call(null, s)
  }else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while(true) {
      if(cljs.core.truth_(function() {
        var and__3822__auto__ = i > 0;
        if(and__3822__auto__) {
          return cljs.core.seq.call(null, s__$1)
        }else {
          return and__3822__auto__
        }
      }())) {
        var G__3601 = cljs.core.next.call(null, s__$1);
        var G__3602 = i - 1;
        var G__3603 = sum + 1;
        s__$1 = G__3601;
        i = G__3602;
        sum = G__3603;
        continue
      }else {
        return sum
      }
      break
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if(arglist == null) {
    return null
  }else {
    if(cljs.core.next.call(null, arglist) == null) {
      return cljs.core.seq.call(null, cljs.core.first.call(null, arglist))
    }else {
      if("\ufdd0'else") {
        return cljs.core.cons.call(null, cljs.core.first.call(null, arglist), spread.call(null, cljs.core.next.call(null, arglist)))
      }else {
        return null
      }
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, false, function() {
      return null
    }, null)
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, false, function() {
      return x
    }, null)
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, false, function() {
      var s = cljs.core.seq.call(null, x);
      if(s) {
        if(cljs.core.chunked_seq_QMARK_.call(null, s)) {
          return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, s), concat.call(null, cljs.core.chunk_rest.call(null, s), y))
        }else {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), concat.call(null, cljs.core.rest.call(null, s), y))
        }
      }else {
        return y
      }
    }, null)
  };
  var concat__3 = function() {
    var G__3604__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, false, function() {
          var xys__$1 = cljs.core.seq.call(null, xys);
          if(xys__$1) {
            if(cljs.core.chunked_seq_QMARK_.call(null, xys__$1)) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, xys__$1), cat.call(null, cljs.core.chunk_rest.call(null, xys__$1), zs__$1))
            }else {
              return cljs.core.cons.call(null, cljs.core.first.call(null, xys__$1), cat.call(null, cljs.core.rest.call(null, xys__$1), zs__$1))
            }
          }else {
            if(cljs.core.truth_(zs__$1)) {
              return cat.call(null, cljs.core.first.call(null, zs__$1), cljs.core.next.call(null, zs__$1))
            }else {
              return null
            }
          }
        }, null)
      };
      return cat.call(null, concat.call(null, x, y), zs)
    };
    var G__3604 = function(x, y, var_args) {
      var zs = null;
      if(goog.isDef(var_args)) {
        zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3604__delegate.call(this, x, y, zs)
    };
    G__3604.cljs$lang$maxFixedArity = 2;
    G__3604.cljs$lang$applyTo = function(arglist__3605) {
      var x = cljs.core.first(arglist__3605);
      var y = cljs.core.first(cljs.core.next(arglist__3605));
      var zs = cljs.core.rest(cljs.core.next(arglist__3605));
      return G__3604__delegate(x, y, zs)
    };
    G__3604.cljs$lang$arity$variadic = G__3604__delegate;
    return G__3604
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        return concat__3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$lang$arity$0 = concat__0;
  concat.cljs$lang$arity$1 = concat__1;
  concat.cljs$lang$arity$2 = concat__2;
  concat.cljs$lang$arity$variadic = concat__3.cljs$lang$arity$variadic;
  return concat
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq.call(null, args)
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons.call(null, a, args)
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, args))
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, args)))
  };
  var list_STAR___5 = function() {
    var G__3606__delegate = function(a, b, c, d, more) {
      return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, more)))))
    };
    var G__3606 = function(a, b, c, d, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0)
      }
      return G__3606__delegate.call(this, a, b, c, d, more)
    };
    G__3606.cljs$lang$maxFixedArity = 4;
    G__3606.cljs$lang$applyTo = function(arglist__3607) {
      var a = cljs.core.first(arglist__3607);
      var b = cljs.core.first(cljs.core.next(arglist__3607));
      var c = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3607)));
      var d = cljs.core.first(cljs.core.next(cljs.core.next(cljs.core.next(arglist__3607))));
      var more = cljs.core.rest(cljs.core.next(cljs.core.next(cljs.core.next(arglist__3607))));
      return G__3606__delegate(a, b, c, d, more)
    };
    G__3606.cljs$lang$arity$variadic = G__3606__delegate;
    return G__3606
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        return list_STAR___5.cljs$lang$arity$variadic(a, b, c, d, cljs.core.array_seq(arguments, 4))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$lang$arity$1 = list_STAR___1;
  list_STAR_.cljs$lang$arity$2 = list_STAR___2;
  list_STAR_.cljs$lang$arity$3 = list_STAR___3;
  list_STAR_.cljs$lang$arity$4 = list_STAR___4;
  list_STAR_.cljs$lang$arity$variadic = list_STAR___5.cljs$lang$arity$variadic;
  return list_STAR_
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient.call(null, coll)
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_.call(null, tcoll)
};
cljs.core.conj_BANG_ = function conj_BANG_(tcoll, val) {
  return cljs.core._conj_BANG_.call(null, tcoll, val)
};
cljs.core.assoc_BANG_ = function assoc_BANG_(tcoll, key, val) {
  return cljs.core._assoc_BANG_.call(null, tcoll, key, val)
};
cljs.core.dissoc_BANG_ = function dissoc_BANG_(tcoll, key) {
  return cljs.core._dissoc_BANG_.call(null, tcoll, key)
};
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_.call(null, tcoll)
};
cljs.core.disj_BANG_ = function disj_BANG_(tcoll, val) {
  return cljs.core._disjoin_BANG_.call(null, tcoll, val)
};
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq.call(null, args);
  if(argc === 0) {
    return f.call(null)
  }else {
    var a = cljs.core._first.call(null, args__$1);
    var args__$2 = cljs.core._rest.call(null, args__$1);
    if(argc === 1) {
      if(f.cljs$lang$arity$1) {
        return f.cljs$lang$arity$1(a)
      }else {
        return f.call(null, a)
      }
    }else {
      var b = cljs.core._first.call(null, args__$2);
      var args__$3 = cljs.core._rest.call(null, args__$2);
      if(argc === 2) {
        if(f.cljs$lang$arity$2) {
          return f.cljs$lang$arity$2(a, b)
        }else {
          return f.call(null, a, b)
        }
      }else {
        var c = cljs.core._first.call(null, args__$3);
        var args__$4 = cljs.core._rest.call(null, args__$3);
        if(argc === 3) {
          if(f.cljs$lang$arity$3) {
            return f.cljs$lang$arity$3(a, b, c)
          }else {
            return f.call(null, a, b, c)
          }
        }else {
          var d = cljs.core._first.call(null, args__$4);
          var args__$5 = cljs.core._rest.call(null, args__$4);
          if(argc === 4) {
            if(f.cljs$lang$arity$4) {
              return f.cljs$lang$arity$4(a, b, c, d)
            }else {
              return f.call(null, a, b, c, d)
            }
          }else {
            var e = cljs.core._first.call(null, args__$5);
            var args__$6 = cljs.core._rest.call(null, args__$5);
            if(argc === 5) {
              if(f.cljs$lang$arity$5) {
                return f.cljs$lang$arity$5(a, b, c, d, e)
              }else {
                return f.call(null, a, b, c, d, e)
              }
            }else {
              var f__$1 = cljs.core._first.call(null, args__$6);
              var args__$7 = cljs.core._rest.call(null, args__$6);
              if(argc === 6) {
                if(f__$1.cljs$lang$arity$6) {
                  return f__$1.cljs$lang$arity$6(a, b, c, d, e, f__$1)
                }else {
                  return f__$1.call(null, a, b, c, d, e, f__$1)
                }
              }else {
                var g = cljs.core._first.call(null, args__$7);
                var args__$8 = cljs.core._rest.call(null, args__$7);
                if(argc === 7) {
                  if(f__$1.cljs$lang$arity$7) {
                    return f__$1.cljs$lang$arity$7(a, b, c, d, e, f__$1, g)
                  }else {
                    return f__$1.call(null, a, b, c, d, e, f__$1, g)
                  }
                }else {
                  var h = cljs.core._first.call(null, args__$8);
                  var args__$9 = cljs.core._rest.call(null, args__$8);
                  if(argc === 8) {
                    if(f__$1.cljs$lang$arity$8) {
                      return f__$1.cljs$lang$arity$8(a, b, c, d, e, f__$1, g, h)
                    }else {
                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h)
                    }
                  }else {
                    var i = cljs.core._first.call(null, args__$9);
                    var args__$10 = cljs.core._rest.call(null, args__$9);
                    if(argc === 9) {
                      if(f__$1.cljs$lang$arity$9) {
                        return f__$1.cljs$lang$arity$9(a, b, c, d, e, f__$1, g, h, i)
                      }else {
                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i)
                      }
                    }else {
                      var j = cljs.core._first.call(null, args__$10);
                      var args__$11 = cljs.core._rest.call(null, args__$10);
                      if(argc === 10) {
                        if(f__$1.cljs$lang$arity$10) {
                          return f__$1.cljs$lang$arity$10(a, b, c, d, e, f__$1, g, h, i, j)
                        }else {
                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j)
                        }
                      }else {
                        var k = cljs.core._first.call(null, args__$11);
                        var args__$12 = cljs.core._rest.call(null, args__$11);
                        if(argc === 11) {
                          if(f__$1.cljs$lang$arity$11) {
                            return f__$1.cljs$lang$arity$11(a, b, c, d, e, f__$1, g, h, i, j, k)
                          }else {
                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k)
                          }
                        }else {
                          var l = cljs.core._first.call(null, args__$12);
                          var args__$13 = cljs.core._rest.call(null, args__$12);
                          if(argc === 12) {
                            if(f__$1.cljs$lang$arity$12) {
                              return f__$1.cljs$lang$arity$12(a, b, c, d, e, f__$1, g, h, i, j, k, l)
                            }else {
                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l)
                            }
                          }else {
                            var m = cljs.core._first.call(null, args__$13);
                            var args__$14 = cljs.core._rest.call(null, args__$13);
                            if(argc === 13) {
                              if(f__$1.cljs$lang$arity$13) {
                                return f__$1.cljs$lang$arity$13(a, b, c, d, e, f__$1, g, h, i, j, k, l, m)
                              }else {
                                return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m)
                              }
                            }else {
                              var n = cljs.core._first.call(null, args__$14);
                              var args__$15 = cljs.core._rest.call(null, args__$14);
                              if(argc === 14) {
                                if(f__$1.cljs$lang$arity$14) {
                                  return f__$1.cljs$lang$arity$14(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n)
                                }else {
                                  return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n)
                                }
                              }else {
                                var o = cljs.core._first.call(null, args__$15);
                                var args__$16 = cljs.core._rest.call(null, args__$15);
                                if(argc === 15) {
                                  if(f__$1.cljs$lang$arity$15) {
                                    return f__$1.cljs$lang$arity$15(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o)
                                  }else {
                                    return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o)
                                  }
                                }else {
                                  var p = cljs.core._first.call(null, args__$16);
                                  var args__$17 = cljs.core._rest.call(null, args__$16);
                                  if(argc === 16) {
                                    if(f__$1.cljs$lang$arity$16) {
                                      return f__$1.cljs$lang$arity$16(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p)
                                    }else {
                                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p)
                                    }
                                  }else {
                                    var q = cljs.core._first.call(null, args__$17);
                                    var args__$18 = cljs.core._rest.call(null, args__$17);
                                    if(argc === 17) {
                                      if(f__$1.cljs$lang$arity$17) {
                                        return f__$1.cljs$lang$arity$17(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q)
                                      }else {
                                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q)
                                      }
                                    }else {
                                      var r = cljs.core._first.call(null, args__$18);
                                      var args__$19 = cljs.core._rest.call(null, args__$18);
                                      if(argc === 18) {
                                        if(f__$1.cljs$lang$arity$18) {
                                          return f__$1.cljs$lang$arity$18(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r)
                                        }else {
                                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r)
                                        }
                                      }else {
                                        var s = cljs.core._first.call(null, args__$19);
                                        var args__$20 = cljs.core._rest.call(null, args__$19);
                                        if(argc === 19) {
                                          if(f__$1.cljs$lang$arity$19) {
                                            return f__$1.cljs$lang$arity$19(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s)
                                          }else {
                                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s)
                                          }
                                        }else {
                                          var t = cljs.core._first.call(null, args__$20);
                                          var args__$21 = cljs.core._rest.call(null, args__$20);
                                          if(argc === 20) {
                                            if(f__$1.cljs$lang$arity$20) {
                                              return f__$1.cljs$lang$arity$20(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t)
                                            }else {
                                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t)
                                            }
                                          }else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if(f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, args, fixed_arity + 1);
      if(bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, args)
      }else {
        return f.cljs$lang$applyTo(args)
      }
    }else {
      return f.apply(f, cljs.core.to_array.call(null, args))
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if(f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if(bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist)
      }else {
        return f.cljs$lang$applyTo(arglist)
      }
    }else {
      return f.apply(f, cljs.core.to_array.call(null, arglist))
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if(f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if(bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist)
      }else {
        return f.cljs$lang$applyTo(arglist)
      }
    }else {
      return f.apply(f, cljs.core.to_array.call(null, arglist))
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if(f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if(bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist)
      }else {
        return f.cljs$lang$applyTo(arglist)
      }
    }else {
      return f.apply(f, cljs.core.to_array.call(null, arglist))
    }
  };
  var apply__6 = function() {
    var G__3608__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if(f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
        if(bc <= fixed_arity) {
          return cljs.core.apply_to.call(null, f, bc, arglist)
        }else {
          return f.cljs$lang$applyTo(arglist)
        }
      }else {
        return f.apply(f, cljs.core.to_array.call(null, arglist))
      }
    };
    var G__3608 = function(f, a, b, c, d, var_args) {
      var args = null;
      if(goog.isDef(var_args)) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0)
      }
      return G__3608__delegate.call(this, f, a, b, c, d, args)
    };
    G__3608.cljs$lang$maxFixedArity = 5;
    G__3608.cljs$lang$applyTo = function(arglist__3609) {
      var f = cljs.core.first(arglist__3609);
      var a = cljs.core.first(cljs.core.next(arglist__3609));
      var b = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3609)));
      var c = cljs.core.first(cljs.core.next(cljs.core.next(cljs.core.next(arglist__3609))));
      var d = cljs.core.first(cljs.core.next(cljs.core.next(cljs.core.next(cljs.core.next(arglist__3609)))));
      var args = cljs.core.rest(cljs.core.next(cljs.core.next(cljs.core.next(cljs.core.next(arglist__3609)))));
      return G__3608__delegate(f, a, b, c, d, args)
    };
    G__3608.cljs$lang$arity$variadic = G__3608__delegate;
    return G__3608
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        return apply__6.cljs$lang$arity$variadic(f, a, b, c, d, cljs.core.array_seq(arguments, 5))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$lang$arity$2 = apply__2;
  apply.cljs$lang$arity$3 = apply__3;
  apply.cljs$lang$arity$4 = apply__4;
  apply.cljs$lang$arity$5 = apply__5;
  apply.cljs$lang$arity$variadic = apply__6.cljs$lang$arity$variadic;
  return apply
}();
cljs.core.vary_meta = function() {
  var vary_meta__delegate = function(obj, f, args) {
    return cljs.core.with_meta.call(null, obj, cljs.core.apply.call(null, f, cljs.core.meta.call(null, obj), args))
  };
  var vary_meta = function(obj, f, var_args) {
    var args = null;
    if(goog.isDef(var_args)) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
    }
    return vary_meta__delegate.call(this, obj, f, args)
  };
  vary_meta.cljs$lang$maxFixedArity = 2;
  vary_meta.cljs$lang$applyTo = function(arglist__3610) {
    var obj = cljs.core.first(arglist__3610);
    var f = cljs.core.first(cljs.core.next(arglist__3610));
    var args = cljs.core.rest(cljs.core.next(arglist__3610));
    return vary_meta__delegate(obj, f, args)
  };
  vary_meta.cljs$lang$arity$variadic = vary_meta__delegate;
  return vary_meta
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y)
  };
  var not_EQ___3 = function() {
    var G__3611__delegate = function(x, y, more) {
      return cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core._EQ_, x, y, more))
    };
    var G__3611 = function(x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3611__delegate.call(this, x, y, more)
    };
    G__3611.cljs$lang$maxFixedArity = 2;
    G__3611.cljs$lang$applyTo = function(arglist__3612) {
      var x = cljs.core.first(arglist__3612);
      var y = cljs.core.first(cljs.core.next(arglist__3612));
      var more = cljs.core.rest(cljs.core.next(arglist__3612));
      return G__3611__delegate(x, y, more)
    };
    G__3611.cljs$lang$arity$variadic = G__3611__delegate;
    return G__3611
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        return not_EQ___3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$lang$arity$1 = not_EQ___1;
  not_EQ_.cljs$lang$arity$2 = not_EQ___2;
  not_EQ_.cljs$lang$arity$variadic = not_EQ___3.cljs$lang$arity$variadic;
  return not_EQ_
}();
cljs.core.not_empty = function not_empty(coll) {
  if(cljs.core.seq.call(null, coll)) {
    return coll
  }else {
    return null
  }
};
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while(true) {
    if(cljs.core.seq.call(null, coll) == null) {
      return true
    }else {
      if(cljs.core.truth_(pred.call(null, cljs.core.first.call(null, coll)))) {
        var G__3613 = pred;
        var G__3614 = cljs.core.next.call(null, coll);
        pred = G__3613;
        coll = G__3614;
        continue
      }else {
        if("\ufdd0'else") {
          return false
        }else {
          return null
        }
      }
    }
    break
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_.call(null, pred, coll)
};
cljs.core.some = function some(pred, coll) {
  while(true) {
    if(cljs.core.seq.call(null, coll)) {
      var or__3824__auto__ = pred.call(null, cljs.core.first.call(null, coll));
      if(cljs.core.truth_(or__3824__auto__)) {
        return or__3824__auto__
      }else {
        var G__3615 = pred;
        var G__3616 = cljs.core.next.call(null, coll);
        pred = G__3615;
        coll = G__3616;
        continue
      }
    }else {
      return null
    }
    break
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not.call(null, cljs.core.some.call(null, pred, coll))
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if(cljs.core.integer_QMARK_.call(null, n)) {
    return(n & 1) === 0
  }else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_.call(null, n)
};
cljs.core.identity = function identity(x) {
  return x
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__3617 = null;
    var G__3617__0 = function() {
      return cljs.core.not.call(null, f.call(null))
    };
    var G__3617__1 = function(x) {
      return cljs.core.not.call(null, f.call(null, x))
    };
    var G__3617__2 = function(x, y) {
      return cljs.core.not.call(null, f.call(null, x, y))
    };
    var G__3617__3 = function() {
      var G__3618__delegate = function(x, y, zs) {
        return cljs.core.not.call(null, cljs.core.apply.call(null, f, x, y, zs))
      };
      var G__3618 = function(x, y, var_args) {
        var zs = null;
        if(goog.isDef(var_args)) {
          zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
        }
        return G__3618__delegate.call(this, x, y, zs)
      };
      G__3618.cljs$lang$maxFixedArity = 2;
      G__3618.cljs$lang$applyTo = function(arglist__3619) {
        var x = cljs.core.first(arglist__3619);
        var y = cljs.core.first(cljs.core.next(arglist__3619));
        var zs = cljs.core.rest(cljs.core.next(arglist__3619));
        return G__3618__delegate(x, y, zs)
      };
      G__3618.cljs$lang$arity$variadic = G__3618__delegate;
      return G__3618
    }();
    G__3617 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__3617__0.call(this);
        case 1:
          return G__3617__1.call(this, x);
        case 2:
          return G__3617__2.call(this, x, y);
        default:
          return G__3617__3.cljs$lang$arity$variadic(x, y, cljs.core.array_seq(arguments, 2))
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__3617.cljs$lang$maxFixedArity = 2;
    G__3617.cljs$lang$applyTo = G__3617__3.cljs$lang$applyTo;
    return G__3617
  }()
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__3620__delegate = function(args) {
      return x
    };
    var G__3620 = function(var_args) {
      var args = null;
      if(goog.isDef(var_args)) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
      }
      return G__3620__delegate.call(this, args)
    };
    G__3620.cljs$lang$maxFixedArity = 0;
    G__3620.cljs$lang$applyTo = function(arglist__3621) {
      var args = cljs.core.seq(arglist__3621);
      return G__3620__delegate(args)
    };
    G__3620.cljs$lang$arity$variadic = G__3620__delegate;
    return G__3620
  }()
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity
  };
  var comp__1 = function(f) {
    return f
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__3622 = null;
      var G__3622__0 = function() {
        return f.call(null, g.call(null))
      };
      var G__3622__1 = function(x) {
        return f.call(null, g.call(null, x))
      };
      var G__3622__2 = function(x, y) {
        return f.call(null, g.call(null, x, y))
      };
      var G__3622__3 = function(x, y, z) {
        return f.call(null, g.call(null, x, y, z))
      };
      var G__3622__4 = function() {
        var G__3623__delegate = function(x, y, z, args) {
          return f.call(null, cljs.core.apply.call(null, g, x, y, z, args))
        };
        var G__3623 = function(x, y, z, var_args) {
          var args = null;
          if(goog.isDef(var_args)) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__3623__delegate.call(this, x, y, z, args)
        };
        G__3623.cljs$lang$maxFixedArity = 3;
        G__3623.cljs$lang$applyTo = function(arglist__3624) {
          var x = cljs.core.first(arglist__3624);
          var y = cljs.core.first(cljs.core.next(arglist__3624));
          var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3624)));
          var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3624)));
          return G__3623__delegate(x, y, z, args)
        };
        G__3623.cljs$lang$arity$variadic = G__3623__delegate;
        return G__3623
      }();
      G__3622 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__3622__0.call(this);
          case 1:
            return G__3622__1.call(this, x);
          case 2:
            return G__3622__2.call(this, x, y);
          case 3:
            return G__3622__3.call(this, x, y, z);
          default:
            return G__3622__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__3622.cljs$lang$maxFixedArity = 3;
      G__3622.cljs$lang$applyTo = G__3622__4.cljs$lang$applyTo;
      return G__3622
    }()
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__3625 = null;
      var G__3625__0 = function() {
        return f.call(null, g.call(null, h.call(null)))
      };
      var G__3625__1 = function(x) {
        return f.call(null, g.call(null, h.call(null, x)))
      };
      var G__3625__2 = function(x, y) {
        return f.call(null, g.call(null, h.call(null, x, y)))
      };
      var G__3625__3 = function(x, y, z) {
        return f.call(null, g.call(null, h.call(null, x, y, z)))
      };
      var G__3625__4 = function() {
        var G__3626__delegate = function(x, y, z, args) {
          return f.call(null, g.call(null, cljs.core.apply.call(null, h, x, y, z, args)))
        };
        var G__3626 = function(x, y, z, var_args) {
          var args = null;
          if(goog.isDef(var_args)) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__3626__delegate.call(this, x, y, z, args)
        };
        G__3626.cljs$lang$maxFixedArity = 3;
        G__3626.cljs$lang$applyTo = function(arglist__3627) {
          var x = cljs.core.first(arglist__3627);
          var y = cljs.core.first(cljs.core.next(arglist__3627));
          var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3627)));
          var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3627)));
          return G__3626__delegate(x, y, z, args)
        };
        G__3626.cljs$lang$arity$variadic = G__3626__delegate;
        return G__3626
      }();
      G__3625 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__3625__0.call(this);
          case 1:
            return G__3625__1.call(this, x);
          case 2:
            return G__3625__2.call(this, x, y);
          case 3:
            return G__3625__3.call(this, x, y, z);
          default:
            return G__3625__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__3625.cljs$lang$maxFixedArity = 3;
      G__3625.cljs$lang$applyTo = G__3625__4.cljs$lang$applyTo;
      return G__3625
    }()
  };
  var comp__4 = function() {
    var G__3628__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse.call(null, cljs.core.list_STAR_.call(null, f1, f2, f3, fs));
      return function() {
        var G__3629__delegate = function(args) {
          var ret = cljs.core.apply.call(null, cljs.core.first.call(null, fs__$1), args);
          var fs__$2 = cljs.core.next.call(null, fs__$1);
          while(true) {
            if(fs__$2) {
              var G__3630 = cljs.core.first.call(null, fs__$2).call(null, ret);
              var G__3631 = cljs.core.next.call(null, fs__$2);
              ret = G__3630;
              fs__$2 = G__3631;
              continue
            }else {
              return ret
            }
            break
          }
        };
        var G__3629 = function(var_args) {
          var args = null;
          if(goog.isDef(var_args)) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
          }
          return G__3629__delegate.call(this, args)
        };
        G__3629.cljs$lang$maxFixedArity = 0;
        G__3629.cljs$lang$applyTo = function(arglist__3632) {
          var args = cljs.core.seq(arglist__3632);
          return G__3629__delegate(args)
        };
        G__3629.cljs$lang$arity$variadic = G__3629__delegate;
        return G__3629
      }()
    };
    var G__3628 = function(f1, f2, f3, var_args) {
      var fs = null;
      if(goog.isDef(var_args)) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__3628__delegate.call(this, f1, f2, f3, fs)
    };
    G__3628.cljs$lang$maxFixedArity = 3;
    G__3628.cljs$lang$applyTo = function(arglist__3633) {
      var f1 = cljs.core.first(arglist__3633);
      var f2 = cljs.core.first(cljs.core.next(arglist__3633));
      var f3 = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3633)));
      var fs = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3633)));
      return G__3628__delegate(f1, f2, f3, fs)
    };
    G__3628.cljs$lang$arity$variadic = G__3628__delegate;
    return G__3628
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        return comp__4.cljs$lang$arity$variadic(f1, f2, f3, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$lang$arity$0 = comp__0;
  comp.cljs$lang$arity$1 = comp__1;
  comp.cljs$lang$arity$2 = comp__2;
  comp.cljs$lang$arity$3 = comp__3;
  comp.cljs$lang$arity$variadic = comp__4.cljs$lang$arity$variadic;
  return comp
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__2 = function(f, arg1) {
    return function() {
      var G__3634__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, args)
      };
      var G__3634 = function(var_args) {
        var args = null;
        if(goog.isDef(var_args)) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
        }
        return G__3634__delegate.call(this, args)
      };
      G__3634.cljs$lang$maxFixedArity = 0;
      G__3634.cljs$lang$applyTo = function(arglist__3635) {
        var args = cljs.core.seq(arglist__3635);
        return G__3634__delegate(args)
      };
      G__3634.cljs$lang$arity$variadic = G__3634__delegate;
      return G__3634
    }()
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__3636__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, args)
      };
      var G__3636 = function(var_args) {
        var args = null;
        if(goog.isDef(var_args)) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
        }
        return G__3636__delegate.call(this, args)
      };
      G__3636.cljs$lang$maxFixedArity = 0;
      G__3636.cljs$lang$applyTo = function(arglist__3637) {
        var args = cljs.core.seq(arglist__3637);
        return G__3636__delegate(args)
      };
      G__3636.cljs$lang$arity$variadic = G__3636__delegate;
      return G__3636
    }()
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__3638__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, arg3, args)
      };
      var G__3638 = function(var_args) {
        var args = null;
        if(goog.isDef(var_args)) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
        }
        return G__3638__delegate.call(this, args)
      };
      G__3638.cljs$lang$maxFixedArity = 0;
      G__3638.cljs$lang$applyTo = function(arglist__3639) {
        var args = cljs.core.seq(arglist__3639);
        return G__3638__delegate(args)
      };
      G__3638.cljs$lang$arity$variadic = G__3638__delegate;
      return G__3638
    }()
  };
  var partial__5 = function() {
    var G__3640__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__3641__delegate = function(args) {
          return cljs.core.apply.call(null, f, arg1, arg2, arg3, cljs.core.concat.call(null, more, args))
        };
        var G__3641 = function(var_args) {
          var args = null;
          if(goog.isDef(var_args)) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
          }
          return G__3641__delegate.call(this, args)
        };
        G__3641.cljs$lang$maxFixedArity = 0;
        G__3641.cljs$lang$applyTo = function(arglist__3642) {
          var args = cljs.core.seq(arglist__3642);
          return G__3641__delegate(args)
        };
        G__3641.cljs$lang$arity$variadic = G__3641__delegate;
        return G__3641
      }()
    };
    var G__3640 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0)
      }
      return G__3640__delegate.call(this, f, arg1, arg2, arg3, more)
    };
    G__3640.cljs$lang$maxFixedArity = 4;
    G__3640.cljs$lang$applyTo = function(arglist__3643) {
      var f = cljs.core.first(arglist__3643);
      var arg1 = cljs.core.first(cljs.core.next(arglist__3643));
      var arg2 = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3643)));
      var arg3 = cljs.core.first(cljs.core.next(cljs.core.next(cljs.core.next(arglist__3643))));
      var more = cljs.core.rest(cljs.core.next(cljs.core.next(cljs.core.next(arglist__3643))));
      return G__3640__delegate(f, arg1, arg2, arg3, more)
    };
    G__3640.cljs$lang$arity$variadic = G__3640__delegate;
    return G__3640
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        return partial__5.cljs$lang$arity$variadic(f, arg1, arg2, arg3, cljs.core.array_seq(arguments, 4))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$lang$arity$2 = partial__2;
  partial.cljs$lang$arity$3 = partial__3;
  partial.cljs$lang$arity$4 = partial__4;
  partial.cljs$lang$arity$variadic = partial__5.cljs$lang$arity$variadic;
  return partial
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__3644 = null;
      var G__3644__1 = function(a) {
        return f.call(null, a == null ? x : a)
      };
      var G__3644__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b)
      };
      var G__3644__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b, c)
      };
      var G__3644__4 = function() {
        var G__3645__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b, c, ds)
        };
        var G__3645 = function(a, b, c, var_args) {
          var ds = null;
          if(goog.isDef(var_args)) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__3645__delegate.call(this, a, b, c, ds)
        };
        G__3645.cljs$lang$maxFixedArity = 3;
        G__3645.cljs$lang$applyTo = function(arglist__3646) {
          var a = cljs.core.first(arglist__3646);
          var b = cljs.core.first(cljs.core.next(arglist__3646));
          var c = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3646)));
          var ds = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3646)));
          return G__3645__delegate(a, b, c, ds)
        };
        G__3645.cljs$lang$arity$variadic = G__3645__delegate;
        return G__3645
      }();
      G__3644 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__3644__1.call(this, a);
          case 2:
            return G__3644__2.call(this, a, b);
          case 3:
            return G__3644__3.call(this, a, b, c);
          default:
            return G__3644__4.cljs$lang$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__3644.cljs$lang$maxFixedArity = 3;
      G__3644.cljs$lang$applyTo = G__3644__4.cljs$lang$applyTo;
      return G__3644
    }()
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__3647 = null;
      var G__3647__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b)
      };
      var G__3647__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c)
      };
      var G__3647__4 = function() {
        var G__3648__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c, ds)
        };
        var G__3648 = function(a, b, c, var_args) {
          var ds = null;
          if(goog.isDef(var_args)) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__3648__delegate.call(this, a, b, c, ds)
        };
        G__3648.cljs$lang$maxFixedArity = 3;
        G__3648.cljs$lang$applyTo = function(arglist__3649) {
          var a = cljs.core.first(arglist__3649);
          var b = cljs.core.first(cljs.core.next(arglist__3649));
          var c = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3649)));
          var ds = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3649)));
          return G__3648__delegate(a, b, c, ds)
        };
        G__3648.cljs$lang$arity$variadic = G__3648__delegate;
        return G__3648
      }();
      G__3647 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__3647__2.call(this, a, b);
          case 3:
            return G__3647__3.call(this, a, b, c);
          default:
            return G__3647__4.cljs$lang$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__3647.cljs$lang$maxFixedArity = 3;
      G__3647.cljs$lang$applyTo = G__3647__4.cljs$lang$applyTo;
      return G__3647
    }()
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__3650 = null;
      var G__3650__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b)
      };
      var G__3650__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c == null ? z : c)
      };
      var G__3650__4 = function() {
        var G__3651__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds)
        };
        var G__3651 = function(a, b, c, var_args) {
          var ds = null;
          if(goog.isDef(var_args)) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__3651__delegate.call(this, a, b, c, ds)
        };
        G__3651.cljs$lang$maxFixedArity = 3;
        G__3651.cljs$lang$applyTo = function(arglist__3652) {
          var a = cljs.core.first(arglist__3652);
          var b = cljs.core.first(cljs.core.next(arglist__3652));
          var c = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3652)));
          var ds = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3652)));
          return G__3651__delegate(a, b, c, ds)
        };
        G__3651.cljs$lang$arity$variadic = G__3651__delegate;
        return G__3651
      }();
      G__3650 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__3650__2.call(this, a, b);
          case 3:
            return G__3650__3.call(this, a, b, c);
          default:
            return G__3650__4.cljs$lang$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__3650.cljs$lang$maxFixedArity = 3;
      G__3650.cljs$lang$applyTo = G__3650__4.cljs$lang$applyTo;
      return G__3650
    }()
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$lang$arity$2 = fnil__2;
  fnil.cljs$lang$arity$3 = fnil__3;
  fnil.cljs$lang$arity$4 = fnil__4;
  return fnil
}();
cljs.core.map_indexed = function map_indexed(f, coll) {
  var mapi = function mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, false, function() {
      var temp__3974__auto__ = cljs.core.seq.call(null, coll__$1);
      if(temp__3974__auto__) {
        var s = temp__3974__auto__;
        if(cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__2535__auto__ = size;
          var i = 0;
          while(true) {
            if(i < n__2535__auto__) {
              cljs.core.chunk_append.call(null, b, f.call(null, idx + i, cljs.core._nth.call(null, c, i)));
              var G__3653 = i + 1;
              i = G__3653;
              continue
            }else {
            }
            break
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), mapi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)))
        }else {
          return cljs.core.cons.call(null, f.call(null, idx, cljs.core.first.call(null, s)), mapi.call(null, idx + 1, cljs.core.rest.call(null, s)))
        }
      }else {
        return null
      }
    }, null)
  };
  return mapi.call(null, 0, coll)
};
cljs.core.keep = function keep(f, coll) {
  return new cljs.core.LazySeq(null, false, function() {
    var temp__3974__auto__ = cljs.core.seq.call(null, coll);
    if(temp__3974__auto__) {
      var s = temp__3974__auto__;
      if(cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__2535__auto__ = size;
        var i = 0;
        while(true) {
          if(i < n__2535__auto__) {
            var x = f.call(null, cljs.core._nth.call(null, c, i));
            if(x == null) {
            }else {
              cljs.core.chunk_append.call(null, b, x)
            }
            var G__3654 = i + 1;
            i = G__3654;
            continue
          }else {
          }
          break
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keep.call(null, f, cljs.core.chunk_rest.call(null, s)))
      }else {
        var x = f.call(null, cljs.core.first.call(null, s));
        if(x == null) {
          return keep.call(null, f, cljs.core.rest.call(null, s))
        }else {
          return cljs.core.cons.call(null, x, keep.call(null, f, cljs.core.rest.call(null, s)))
        }
      }
    }else {
      return null
    }
  }, null)
};
cljs.core.keep_indexed = function keep_indexed(f, coll) {
  var keepi = function keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, false, function() {
      var temp__3974__auto__ = cljs.core.seq.call(null, coll__$1);
      if(temp__3974__auto__) {
        var s = temp__3974__auto__;
        if(cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__2535__auto__ = size;
          var i = 0;
          while(true) {
            if(i < n__2535__auto__) {
              var x = f.call(null, idx + i, cljs.core._nth.call(null, c, i));
              if(x == null) {
              }else {
                cljs.core.chunk_append.call(null, b, x)
              }
              var G__3661 = i + 1;
              i = G__3661;
              continue
            }else {
            }
            break
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keepi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)))
        }else {
          var x = f.call(null, idx, cljs.core.first.call(null, s));
          if(x == null) {
            return keepi.call(null, idx + 1, cljs.core.rest.call(null, s))
          }else {
            return cljs.core.cons.call(null, x, keepi.call(null, idx + 1, cljs.core.rest.call(null, s)))
          }
        }
      }else {
        return null
      }
    }, null)
  };
  return keepi.call(null, 0, coll)
};
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$.call(null, p.call(null, x))
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3822__auto__ = p.call(null, x);
          if(cljs.core.truth_(and__3822__auto__)) {
            return p.call(null, y)
          }else {
            return and__3822__auto__
          }
        }())
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3822__auto__ = p.call(null, x);
          if(cljs.core.truth_(and__3822__auto__)) {
            var and__3822__auto____$1 = p.call(null, y);
            if(cljs.core.truth_(and__3822__auto____$1)) {
              return p.call(null, z)
            }else {
              return and__3822__auto____$1
            }
          }else {
            return and__3822__auto__
          }
        }())
      };
      var ep1__4 = function() {
        var G__3668__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, function() {
            var and__3822__auto__ = ep1.call(null, x, y, z);
            if(cljs.core.truth_(and__3822__auto__)) {
              return cljs.core.every_QMARK_.call(null, p, args)
            }else {
              return and__3822__auto__
            }
          }())
        };
        var G__3668 = function(x, y, z, var_args) {
          var args = null;
          if(goog.isDef(var_args)) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__3668__delegate.call(this, x, y, z, args)
        };
        G__3668.cljs$lang$maxFixedArity = 3;
        G__3668.cljs$lang$applyTo = function(arglist__3669) {
          var x = cljs.core.first(arglist__3669);
          var y = cljs.core.first(cljs.core.next(arglist__3669));
          var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3669)));
          var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3669)));
          return G__3668__delegate(x, y, z, args)
        };
        G__3668.cljs$lang$arity$variadic = G__3668__delegate;
        return G__3668
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            return ep1__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$lang$arity$0 = ep1__0;
      ep1.cljs$lang$arity$1 = ep1__1;
      ep1.cljs$lang$arity$2 = ep1__2;
      ep1.cljs$lang$arity$3 = ep1__3;
      ep1.cljs$lang$arity$variadic = ep1__4.cljs$lang$arity$variadic;
      return ep1
    }()
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3822__auto__ = p1.call(null, x);
          if(cljs.core.truth_(and__3822__auto__)) {
            return p2.call(null, x)
          }else {
            return and__3822__auto__
          }
        }())
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3822__auto__ = p1.call(null, x);
          if(cljs.core.truth_(and__3822__auto__)) {
            var and__3822__auto____$1 = p1.call(null, y);
            if(cljs.core.truth_(and__3822__auto____$1)) {
              var and__3822__auto____$2 = p2.call(null, x);
              if(cljs.core.truth_(and__3822__auto____$2)) {
                return p2.call(null, y)
              }else {
                return and__3822__auto____$2
              }
            }else {
              return and__3822__auto____$1
            }
          }else {
            return and__3822__auto__
          }
        }())
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3822__auto__ = p1.call(null, x);
          if(cljs.core.truth_(and__3822__auto__)) {
            var and__3822__auto____$1 = p1.call(null, y);
            if(cljs.core.truth_(and__3822__auto____$1)) {
              var and__3822__auto____$2 = p1.call(null, z);
              if(cljs.core.truth_(and__3822__auto____$2)) {
                var and__3822__auto____$3 = p2.call(null, x);
                if(cljs.core.truth_(and__3822__auto____$3)) {
                  var and__3822__auto____$4 = p2.call(null, y);
                  if(cljs.core.truth_(and__3822__auto____$4)) {
                    return p2.call(null, z)
                  }else {
                    return and__3822__auto____$4
                  }
                }else {
                  return and__3822__auto____$3
                }
              }else {
                return and__3822__auto____$2
              }
            }else {
              return and__3822__auto____$1
            }
          }else {
            return and__3822__auto__
          }
        }())
      };
      var ep2__4 = function() {
        var G__3670__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, function() {
            var and__3822__auto__ = ep2.call(null, x, y, z);
            if(cljs.core.truth_(and__3822__auto__)) {
              return cljs.core.every_QMARK_.call(null, function(p1__3655_SHARP_) {
                var and__3822__auto____$1 = p1.call(null, p1__3655_SHARP_);
                if(cljs.core.truth_(and__3822__auto____$1)) {
                  return p2.call(null, p1__3655_SHARP_)
                }else {
                  return and__3822__auto____$1
                }
              }, args)
            }else {
              return and__3822__auto__
            }
          }())
        };
        var G__3670 = function(x, y, z, var_args) {
          var args = null;
          if(goog.isDef(var_args)) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__3670__delegate.call(this, x, y, z, args)
        };
        G__3670.cljs$lang$maxFixedArity = 3;
        G__3670.cljs$lang$applyTo = function(arglist__3671) {
          var x = cljs.core.first(arglist__3671);
          var y = cljs.core.first(cljs.core.next(arglist__3671));
          var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3671)));
          var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3671)));
          return G__3670__delegate(x, y, z, args)
        };
        G__3670.cljs$lang$arity$variadic = G__3670__delegate;
        return G__3670
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            return ep2__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$lang$arity$0 = ep2__0;
      ep2.cljs$lang$arity$1 = ep2__1;
      ep2.cljs$lang$arity$2 = ep2__2;
      ep2.cljs$lang$arity$3 = ep2__3;
      ep2.cljs$lang$arity$variadic = ep2__4.cljs$lang$arity$variadic;
      return ep2
    }()
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3822__auto__ = p1.call(null, x);
          if(cljs.core.truth_(and__3822__auto__)) {
            var and__3822__auto____$1 = p2.call(null, x);
            if(cljs.core.truth_(and__3822__auto____$1)) {
              return p3.call(null, x)
            }else {
              return and__3822__auto____$1
            }
          }else {
            return and__3822__auto__
          }
        }())
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3822__auto__ = p1.call(null, x);
          if(cljs.core.truth_(and__3822__auto__)) {
            var and__3822__auto____$1 = p2.call(null, x);
            if(cljs.core.truth_(and__3822__auto____$1)) {
              var and__3822__auto____$2 = p3.call(null, x);
              if(cljs.core.truth_(and__3822__auto____$2)) {
                var and__3822__auto____$3 = p1.call(null, y);
                if(cljs.core.truth_(and__3822__auto____$3)) {
                  var and__3822__auto____$4 = p2.call(null, y);
                  if(cljs.core.truth_(and__3822__auto____$4)) {
                    return p3.call(null, y)
                  }else {
                    return and__3822__auto____$4
                  }
                }else {
                  return and__3822__auto____$3
                }
              }else {
                return and__3822__auto____$2
              }
            }else {
              return and__3822__auto____$1
            }
          }else {
            return and__3822__auto__
          }
        }())
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3822__auto__ = p1.call(null, x);
          if(cljs.core.truth_(and__3822__auto__)) {
            var and__3822__auto____$1 = p2.call(null, x);
            if(cljs.core.truth_(and__3822__auto____$1)) {
              var and__3822__auto____$2 = p3.call(null, x);
              if(cljs.core.truth_(and__3822__auto____$2)) {
                var and__3822__auto____$3 = p1.call(null, y);
                if(cljs.core.truth_(and__3822__auto____$3)) {
                  var and__3822__auto____$4 = p2.call(null, y);
                  if(cljs.core.truth_(and__3822__auto____$4)) {
                    var and__3822__auto____$5 = p3.call(null, y);
                    if(cljs.core.truth_(and__3822__auto____$5)) {
                      var and__3822__auto____$6 = p1.call(null, z);
                      if(cljs.core.truth_(and__3822__auto____$6)) {
                        var and__3822__auto____$7 = p2.call(null, z);
                        if(cljs.core.truth_(and__3822__auto____$7)) {
                          return p3.call(null, z)
                        }else {
                          return and__3822__auto____$7
                        }
                      }else {
                        return and__3822__auto____$6
                      }
                    }else {
                      return and__3822__auto____$5
                    }
                  }else {
                    return and__3822__auto____$4
                  }
                }else {
                  return and__3822__auto____$3
                }
              }else {
                return and__3822__auto____$2
              }
            }else {
              return and__3822__auto____$1
            }
          }else {
            return and__3822__auto__
          }
        }())
      };
      var ep3__4 = function() {
        var G__3672__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, function() {
            var and__3822__auto__ = ep3.call(null, x, y, z);
            if(cljs.core.truth_(and__3822__auto__)) {
              return cljs.core.every_QMARK_.call(null, function(p1__3656_SHARP_) {
                var and__3822__auto____$1 = p1.call(null, p1__3656_SHARP_);
                if(cljs.core.truth_(and__3822__auto____$1)) {
                  var and__3822__auto____$2 = p2.call(null, p1__3656_SHARP_);
                  if(cljs.core.truth_(and__3822__auto____$2)) {
                    return p3.call(null, p1__3656_SHARP_)
                  }else {
                    return and__3822__auto____$2
                  }
                }else {
                  return and__3822__auto____$1
                }
              }, args)
            }else {
              return and__3822__auto__
            }
          }())
        };
        var G__3672 = function(x, y, z, var_args) {
          var args = null;
          if(goog.isDef(var_args)) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__3672__delegate.call(this, x, y, z, args)
        };
        G__3672.cljs$lang$maxFixedArity = 3;
        G__3672.cljs$lang$applyTo = function(arglist__3673) {
          var x = cljs.core.first(arglist__3673);
          var y = cljs.core.first(cljs.core.next(arglist__3673));
          var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3673)));
          var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3673)));
          return G__3672__delegate(x, y, z, args)
        };
        G__3672.cljs$lang$arity$variadic = G__3672__delegate;
        return G__3672
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            return ep3__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$lang$arity$0 = ep3__0;
      ep3.cljs$lang$arity$1 = ep3__1;
      ep3.cljs$lang$arity$2 = ep3__2;
      ep3.cljs$lang$arity$3 = ep3__3;
      ep3.cljs$lang$arity$variadic = ep3__4.cljs$lang$arity$variadic;
      return ep3
    }()
  };
  var every_pred__4 = function() {
    var G__3674__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var epn = null;
        var epn__0 = function() {
          return true
        };
        var epn__1 = function(x) {
          return cljs.core.every_QMARK_.call(null, function(p1__3657_SHARP_) {
            return p1__3657_SHARP_.call(null, x)
          }, ps__$1)
        };
        var epn__2 = function(x, y) {
          return cljs.core.every_QMARK_.call(null, function(p1__3658_SHARP_) {
            var and__3822__auto__ = p1__3658_SHARP_.call(null, x);
            if(cljs.core.truth_(and__3822__auto__)) {
              return p1__3658_SHARP_.call(null, y)
            }else {
              return and__3822__auto__
            }
          }, ps__$1)
        };
        var epn__3 = function(x, y, z) {
          return cljs.core.every_QMARK_.call(null, function(p1__3659_SHARP_) {
            var and__3822__auto__ = p1__3659_SHARP_.call(null, x);
            if(cljs.core.truth_(and__3822__auto__)) {
              var and__3822__auto____$1 = p1__3659_SHARP_.call(null, y);
              if(cljs.core.truth_(and__3822__auto____$1)) {
                return p1__3659_SHARP_.call(null, z)
              }else {
                return and__3822__auto____$1
              }
            }else {
              return and__3822__auto__
            }
          }, ps__$1)
        };
        var epn__4 = function() {
          var G__3675__delegate = function(x, y, z, args) {
            return cljs.core.boolean$.call(null, function() {
              var and__3822__auto__ = epn.call(null, x, y, z);
              if(cljs.core.truth_(and__3822__auto__)) {
                return cljs.core.every_QMARK_.call(null, function(p1__3660_SHARP_) {
                  return cljs.core.every_QMARK_.call(null, p1__3660_SHARP_, args)
                }, ps__$1)
              }else {
                return and__3822__auto__
              }
            }())
          };
          var G__3675 = function(x, y, z, var_args) {
            var args = null;
            if(goog.isDef(var_args)) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
            }
            return G__3675__delegate.call(this, x, y, z, args)
          };
          G__3675.cljs$lang$maxFixedArity = 3;
          G__3675.cljs$lang$applyTo = function(arglist__3676) {
            var x = cljs.core.first(arglist__3676);
            var y = cljs.core.first(cljs.core.next(arglist__3676));
            var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3676)));
            var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3676)));
            return G__3675__delegate(x, y, z, args)
          };
          G__3675.cljs$lang$arity$variadic = G__3675__delegate;
          return G__3675
        }();
        epn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return epn__0.call(this);
            case 1:
              return epn__1.call(this, x);
            case 2:
              return epn__2.call(this, x, y);
            case 3:
              return epn__3.call(this, x, y, z);
            default:
              return epn__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        epn.cljs$lang$maxFixedArity = 3;
        epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
        epn.cljs$lang$arity$0 = epn__0;
        epn.cljs$lang$arity$1 = epn__1;
        epn.cljs$lang$arity$2 = epn__2;
        epn.cljs$lang$arity$3 = epn__3;
        epn.cljs$lang$arity$variadic = epn__4.cljs$lang$arity$variadic;
        return epn
      }()
    };
    var G__3674 = function(p1, p2, p3, var_args) {
      var ps = null;
      if(goog.isDef(var_args)) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__3674__delegate.call(this, p1, p2, p3, ps)
    };
    G__3674.cljs$lang$maxFixedArity = 3;
    G__3674.cljs$lang$applyTo = function(arglist__3677) {
      var p1 = cljs.core.first(arglist__3677);
      var p2 = cljs.core.first(cljs.core.next(arglist__3677));
      var p3 = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3677)));
      var ps = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3677)));
      return G__3674__delegate(p1, p2, p3, ps)
    };
    G__3674.cljs$lang$arity$variadic = G__3674__delegate;
    return G__3674
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        return every_pred__4.cljs$lang$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$lang$arity$1 = every_pred__1;
  every_pred.cljs$lang$arity$2 = every_pred__2;
  every_pred.cljs$lang$arity$3 = every_pred__3;
  every_pred.cljs$lang$arity$variadic = every_pred__4.cljs$lang$arity$variadic;
  return every_pred
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null
      };
      var sp1__1 = function(x) {
        return p.call(null, x)
      };
      var sp1__2 = function(x, y) {
        var or__3824__auto__ = p.call(null, x);
        if(cljs.core.truth_(or__3824__auto__)) {
          return or__3824__auto__
        }else {
          return p.call(null, y)
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__3824__auto__ = p.call(null, x);
        if(cljs.core.truth_(or__3824__auto__)) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = p.call(null, y);
          if(cljs.core.truth_(or__3824__auto____$1)) {
            return or__3824__auto____$1
          }else {
            return p.call(null, z)
          }
        }
      };
      var sp1__4 = function() {
        var G__3679__delegate = function(x, y, z, args) {
          var or__3824__auto__ = sp1.call(null, x, y, z);
          if(cljs.core.truth_(or__3824__auto__)) {
            return or__3824__auto__
          }else {
            return cljs.core.some.call(null, p, args)
          }
        };
        var G__3679 = function(x, y, z, var_args) {
          var args = null;
          if(goog.isDef(var_args)) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__3679__delegate.call(this, x, y, z, args)
        };
        G__3679.cljs$lang$maxFixedArity = 3;
        G__3679.cljs$lang$applyTo = function(arglist__3680) {
          var x = cljs.core.first(arglist__3680);
          var y = cljs.core.first(cljs.core.next(arglist__3680));
          var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3680)));
          var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3680)));
          return G__3679__delegate(x, y, z, args)
        };
        G__3679.cljs$lang$arity$variadic = G__3679__delegate;
        return G__3679
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            return sp1__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$lang$arity$0 = sp1__0;
      sp1.cljs$lang$arity$1 = sp1__1;
      sp1.cljs$lang$arity$2 = sp1__2;
      sp1.cljs$lang$arity$3 = sp1__3;
      sp1.cljs$lang$arity$variadic = sp1__4.cljs$lang$arity$variadic;
      return sp1
    }()
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null
      };
      var sp2__1 = function(x) {
        var or__3824__auto__ = p1.call(null, x);
        if(cljs.core.truth_(or__3824__auto__)) {
          return or__3824__auto__
        }else {
          return p2.call(null, x)
        }
      };
      var sp2__2 = function(x, y) {
        var or__3824__auto__ = p1.call(null, x);
        if(cljs.core.truth_(or__3824__auto__)) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = p1.call(null, y);
          if(cljs.core.truth_(or__3824__auto____$1)) {
            return or__3824__auto____$1
          }else {
            var or__3824__auto____$2 = p2.call(null, x);
            if(cljs.core.truth_(or__3824__auto____$2)) {
              return or__3824__auto____$2
            }else {
              return p2.call(null, y)
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__3824__auto__ = p1.call(null, x);
        if(cljs.core.truth_(or__3824__auto__)) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = p1.call(null, y);
          if(cljs.core.truth_(or__3824__auto____$1)) {
            return or__3824__auto____$1
          }else {
            var or__3824__auto____$2 = p1.call(null, z);
            if(cljs.core.truth_(or__3824__auto____$2)) {
              return or__3824__auto____$2
            }else {
              var or__3824__auto____$3 = p2.call(null, x);
              if(cljs.core.truth_(or__3824__auto____$3)) {
                return or__3824__auto____$3
              }else {
                var or__3824__auto____$4 = p2.call(null, y);
                if(cljs.core.truth_(or__3824__auto____$4)) {
                  return or__3824__auto____$4
                }else {
                  return p2.call(null, z)
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__3681__delegate = function(x, y, z, args) {
          var or__3824__auto__ = sp2.call(null, x, y, z);
          if(cljs.core.truth_(or__3824__auto__)) {
            return or__3824__auto__
          }else {
            return cljs.core.some.call(null, function(p1__3662_SHARP_) {
              var or__3824__auto____$1 = p1.call(null, p1__3662_SHARP_);
              if(cljs.core.truth_(or__3824__auto____$1)) {
                return or__3824__auto____$1
              }else {
                return p2.call(null, p1__3662_SHARP_)
              }
            }, args)
          }
        };
        var G__3681 = function(x, y, z, var_args) {
          var args = null;
          if(goog.isDef(var_args)) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__3681__delegate.call(this, x, y, z, args)
        };
        G__3681.cljs$lang$maxFixedArity = 3;
        G__3681.cljs$lang$applyTo = function(arglist__3682) {
          var x = cljs.core.first(arglist__3682);
          var y = cljs.core.first(cljs.core.next(arglist__3682));
          var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3682)));
          var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3682)));
          return G__3681__delegate(x, y, z, args)
        };
        G__3681.cljs$lang$arity$variadic = G__3681__delegate;
        return G__3681
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            return sp2__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$lang$arity$0 = sp2__0;
      sp2.cljs$lang$arity$1 = sp2__1;
      sp2.cljs$lang$arity$2 = sp2__2;
      sp2.cljs$lang$arity$3 = sp2__3;
      sp2.cljs$lang$arity$variadic = sp2__4.cljs$lang$arity$variadic;
      return sp2
    }()
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null
      };
      var sp3__1 = function(x) {
        var or__3824__auto__ = p1.call(null, x);
        if(cljs.core.truth_(or__3824__auto__)) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = p2.call(null, x);
          if(cljs.core.truth_(or__3824__auto____$1)) {
            return or__3824__auto____$1
          }else {
            return p3.call(null, x)
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__3824__auto__ = p1.call(null, x);
        if(cljs.core.truth_(or__3824__auto__)) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = p2.call(null, x);
          if(cljs.core.truth_(or__3824__auto____$1)) {
            return or__3824__auto____$1
          }else {
            var or__3824__auto____$2 = p3.call(null, x);
            if(cljs.core.truth_(or__3824__auto____$2)) {
              return or__3824__auto____$2
            }else {
              var or__3824__auto____$3 = p1.call(null, y);
              if(cljs.core.truth_(or__3824__auto____$3)) {
                return or__3824__auto____$3
              }else {
                var or__3824__auto____$4 = p2.call(null, y);
                if(cljs.core.truth_(or__3824__auto____$4)) {
                  return or__3824__auto____$4
                }else {
                  return p3.call(null, y)
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__3824__auto__ = p1.call(null, x);
        if(cljs.core.truth_(or__3824__auto__)) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = p2.call(null, x);
          if(cljs.core.truth_(or__3824__auto____$1)) {
            return or__3824__auto____$1
          }else {
            var or__3824__auto____$2 = p3.call(null, x);
            if(cljs.core.truth_(or__3824__auto____$2)) {
              return or__3824__auto____$2
            }else {
              var or__3824__auto____$3 = p1.call(null, y);
              if(cljs.core.truth_(or__3824__auto____$3)) {
                return or__3824__auto____$3
              }else {
                var or__3824__auto____$4 = p2.call(null, y);
                if(cljs.core.truth_(or__3824__auto____$4)) {
                  return or__3824__auto____$4
                }else {
                  var or__3824__auto____$5 = p3.call(null, y);
                  if(cljs.core.truth_(or__3824__auto____$5)) {
                    return or__3824__auto____$5
                  }else {
                    var or__3824__auto____$6 = p1.call(null, z);
                    if(cljs.core.truth_(or__3824__auto____$6)) {
                      return or__3824__auto____$6
                    }else {
                      var or__3824__auto____$7 = p2.call(null, z);
                      if(cljs.core.truth_(or__3824__auto____$7)) {
                        return or__3824__auto____$7
                      }else {
                        return p3.call(null, z)
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__3683__delegate = function(x, y, z, args) {
          var or__3824__auto__ = sp3.call(null, x, y, z);
          if(cljs.core.truth_(or__3824__auto__)) {
            return or__3824__auto__
          }else {
            return cljs.core.some.call(null, function(p1__3663_SHARP_) {
              var or__3824__auto____$1 = p1.call(null, p1__3663_SHARP_);
              if(cljs.core.truth_(or__3824__auto____$1)) {
                return or__3824__auto____$1
              }else {
                var or__3824__auto____$2 = p2.call(null, p1__3663_SHARP_);
                if(cljs.core.truth_(or__3824__auto____$2)) {
                  return or__3824__auto____$2
                }else {
                  return p3.call(null, p1__3663_SHARP_)
                }
              }
            }, args)
          }
        };
        var G__3683 = function(x, y, z, var_args) {
          var args = null;
          if(goog.isDef(var_args)) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__3683__delegate.call(this, x, y, z, args)
        };
        G__3683.cljs$lang$maxFixedArity = 3;
        G__3683.cljs$lang$applyTo = function(arglist__3684) {
          var x = cljs.core.first(arglist__3684);
          var y = cljs.core.first(cljs.core.next(arglist__3684));
          var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3684)));
          var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3684)));
          return G__3683__delegate(x, y, z, args)
        };
        G__3683.cljs$lang$arity$variadic = G__3683__delegate;
        return G__3683
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            return sp3__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$lang$arity$0 = sp3__0;
      sp3.cljs$lang$arity$1 = sp3__1;
      sp3.cljs$lang$arity$2 = sp3__2;
      sp3.cljs$lang$arity$3 = sp3__3;
      sp3.cljs$lang$arity$variadic = sp3__4.cljs$lang$arity$variadic;
      return sp3
    }()
  };
  var some_fn__4 = function() {
    var G__3685__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var spn = null;
        var spn__0 = function() {
          return null
        };
        var spn__1 = function(x) {
          return cljs.core.some.call(null, function(p1__3664_SHARP_) {
            return p1__3664_SHARP_.call(null, x)
          }, ps__$1)
        };
        var spn__2 = function(x, y) {
          return cljs.core.some.call(null, function(p1__3665_SHARP_) {
            var or__3824__auto__ = p1__3665_SHARP_.call(null, x);
            if(cljs.core.truth_(or__3824__auto__)) {
              return or__3824__auto__
            }else {
              return p1__3665_SHARP_.call(null, y)
            }
          }, ps__$1)
        };
        var spn__3 = function(x, y, z) {
          return cljs.core.some.call(null, function(p1__3666_SHARP_) {
            var or__3824__auto__ = p1__3666_SHARP_.call(null, x);
            if(cljs.core.truth_(or__3824__auto__)) {
              return or__3824__auto__
            }else {
              var or__3824__auto____$1 = p1__3666_SHARP_.call(null, y);
              if(cljs.core.truth_(or__3824__auto____$1)) {
                return or__3824__auto____$1
              }else {
                return p1__3666_SHARP_.call(null, z)
              }
            }
          }, ps__$1)
        };
        var spn__4 = function() {
          var G__3686__delegate = function(x, y, z, args) {
            var or__3824__auto__ = spn.call(null, x, y, z);
            if(cljs.core.truth_(or__3824__auto__)) {
              return or__3824__auto__
            }else {
              return cljs.core.some.call(null, function(p1__3667_SHARP_) {
                return cljs.core.some.call(null, p1__3667_SHARP_, args)
              }, ps__$1)
            }
          };
          var G__3686 = function(x, y, z, var_args) {
            var args = null;
            if(goog.isDef(var_args)) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
            }
            return G__3686__delegate.call(this, x, y, z, args)
          };
          G__3686.cljs$lang$maxFixedArity = 3;
          G__3686.cljs$lang$applyTo = function(arglist__3687) {
            var x = cljs.core.first(arglist__3687);
            var y = cljs.core.first(cljs.core.next(arglist__3687));
            var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3687)));
            var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3687)));
            return G__3686__delegate(x, y, z, args)
          };
          G__3686.cljs$lang$arity$variadic = G__3686__delegate;
          return G__3686
        }();
        spn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return spn__0.call(this);
            case 1:
              return spn__1.call(this, x);
            case 2:
              return spn__2.call(this, x, y);
            case 3:
              return spn__3.call(this, x, y, z);
            default:
              return spn__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        spn.cljs$lang$maxFixedArity = 3;
        spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
        spn.cljs$lang$arity$0 = spn__0;
        spn.cljs$lang$arity$1 = spn__1;
        spn.cljs$lang$arity$2 = spn__2;
        spn.cljs$lang$arity$3 = spn__3;
        spn.cljs$lang$arity$variadic = spn__4.cljs$lang$arity$variadic;
        return spn
      }()
    };
    var G__3685 = function(p1, p2, p3, var_args) {
      var ps = null;
      if(goog.isDef(var_args)) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__3685__delegate.call(this, p1, p2, p3, ps)
    };
    G__3685.cljs$lang$maxFixedArity = 3;
    G__3685.cljs$lang$applyTo = function(arglist__3688) {
      var p1 = cljs.core.first(arglist__3688);
      var p2 = cljs.core.first(cljs.core.next(arglist__3688));
      var p3 = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3688)));
      var ps = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3688)));
      return G__3685__delegate(p1, p2, p3, ps)
    };
    G__3685.cljs$lang$arity$variadic = G__3685__delegate;
    return G__3685
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        return some_fn__4.cljs$lang$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$lang$arity$1 = some_fn__1;
  some_fn.cljs$lang$arity$2 = some_fn__2;
  some_fn.cljs$lang$arity$3 = some_fn__3;
  some_fn.cljs$lang$arity$variadic = some_fn__4.cljs$lang$arity$variadic;
  return some_fn
}();
cljs.core.map = function() {
  var map = null;
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, false, function() {
      var temp__3974__auto__ = cljs.core.seq.call(null, coll);
      if(temp__3974__auto__) {
        var s = temp__3974__auto__;
        if(cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__2535__auto__ = size;
          var i = 0;
          while(true) {
            if(i < n__2535__auto__) {
              cljs.core.chunk_append.call(null, b, f.call(null, cljs.core._nth.call(null, c, i)));
              var G__3689 = i + 1;
              i = G__3689;
              continue
            }else {
            }
            break
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), map.call(null, f, cljs.core.chunk_rest.call(null, s)))
        }else {
          return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s)), map.call(null, f, cljs.core.rest.call(null, s)))
        }
      }else {
        return null
      }
    }, null)
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, false, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if(function() {
        var and__3822__auto__ = s1;
        if(and__3822__auto__) {
          return s2
        }else {
          return and__3822__auto__
        }
      }()) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2)))
      }else {
        return null
      }
    }, null)
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, false, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      var s3 = cljs.core.seq.call(null, c3);
      if(function() {
        var and__3822__auto__ = s1;
        if(and__3822__auto__) {
          var and__3822__auto____$1 = s2;
          if(and__3822__auto____$1) {
            return s3
          }else {
            return and__3822__auto____$1
          }
        }else {
          return and__3822__auto__
        }
      }()) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2), cljs.core.first.call(null, s3)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2), cljs.core.rest.call(null, s3)))
      }else {
        return null
      }
    }, null)
  };
  var map__5 = function() {
    var G__3690__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, false, function() {
          var ss = map.call(null, cljs.core.seq, cs);
          if(cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
            return cljs.core.cons.call(null, map.call(null, cljs.core.first, ss), step.call(null, map.call(null, cljs.core.rest, ss)))
          }else {
            return null
          }
        }, null)
      };
      return map.call(null, function(p1__3678_SHARP_) {
        return cljs.core.apply.call(null, f, p1__3678_SHARP_)
      }, step.call(null, cljs.core.conj.call(null, colls, c3, c2, c1)))
    };
    var G__3690 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if(goog.isDef(var_args)) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0)
      }
      return G__3690__delegate.call(this, f, c1, c2, c3, colls)
    };
    G__3690.cljs$lang$maxFixedArity = 4;
    G__3690.cljs$lang$applyTo = function(arglist__3691) {
      var f = cljs.core.first(arglist__3691);
      var c1 = cljs.core.first(cljs.core.next(arglist__3691));
      var c2 = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3691)));
      var c3 = cljs.core.first(cljs.core.next(cljs.core.next(cljs.core.next(arglist__3691))));
      var colls = cljs.core.rest(cljs.core.next(cljs.core.next(cljs.core.next(arglist__3691))));
      return G__3690__delegate(f, c1, c2, c3, colls)
    };
    G__3690.cljs$lang$arity$variadic = G__3690__delegate;
    return G__3690
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        return map__5.cljs$lang$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$lang$arity$2 = map__2;
  map.cljs$lang$arity$3 = map__3;
  map.cljs$lang$arity$4 = map__4;
  map.cljs$lang$arity$variadic = map__5.cljs$lang$arity$variadic;
  return map
}();
cljs.core.take = function take(n, coll) {
  return new cljs.core.LazySeq(null, false, function() {
    if(n > 0) {
      var temp__3974__auto__ = cljs.core.seq.call(null, coll);
      if(temp__3974__auto__) {
        var s = temp__3974__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take.call(null, n - 1, cljs.core.rest.call(null, s)))
      }else {
        return null
      }
    }else {
      return null
    }
  }, null)
};
cljs.core.drop = function drop(n, coll) {
  var step = function(n__$1, coll__$1) {
    while(true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if(cljs.core.truth_(function() {
        var and__3822__auto__ = n__$1 > 0;
        if(and__3822__auto__) {
          return s
        }else {
          return and__3822__auto__
        }
      }())) {
        var G__3692 = n__$1 - 1;
        var G__3693 = cljs.core.rest.call(null, s);
        n__$1 = G__3692;
        coll__$1 = G__3693;
        continue
      }else {
        return s
      }
      break
    }
  };
  return new cljs.core.LazySeq(null, false, function() {
    return step.call(null, n, coll)
  }, null)
};
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.call(null, 1, s)
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.call(null, function(x, _) {
      return x
    }, s, cljs.core.drop.call(null, n, s))
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$lang$arity$1 = drop_last__1;
  drop_last.cljs$lang$arity$2 = drop_last__2;
  return drop_last
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq.call(null, coll);
  var lead = cljs.core.seq.call(null, cljs.core.drop.call(null, n, coll));
  while(true) {
    if(lead) {
      var G__3694 = cljs.core.next.call(null, s);
      var G__3695 = cljs.core.next.call(null, lead);
      s = G__3694;
      lead = G__3695;
      continue
    }else {
      return s
    }
    break
  }
};
cljs.core.drop_while = function drop_while(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while(true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if(cljs.core.truth_(function() {
        var and__3822__auto__ = s;
        if(and__3822__auto__) {
          return pred__$1.call(null, cljs.core.first.call(null, s))
        }else {
          return and__3822__auto__
        }
      }())) {
        var G__3696 = pred__$1;
        var G__3697 = cljs.core.rest.call(null, s);
        pred__$1 = G__3696;
        coll__$1 = G__3697;
        continue
      }else {
        return s
      }
      break
    }
  };
  return new cljs.core.LazySeq(null, false, function() {
    return step.call(null, pred, coll)
  }, null)
};
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, false, function() {
    var temp__3974__auto__ = cljs.core.seq.call(null, coll);
    if(temp__3974__auto__) {
      var s = temp__3974__auto__;
      return cljs.core.concat.call(null, s, cycle.call(null, s))
    }else {
      return null
    }
  }, null)
};
cljs.core.split_at = function split_at(n, coll) {
  return cljs.core.PersistentVector.fromArray([cljs.core.take.call(null, n, coll), cljs.core.drop.call(null, n, coll)], true)
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, false, function() {
      return cljs.core.cons.call(null, x, repeat.call(null, x))
    }, null)
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.call(null, n, repeat.call(null, x))
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$lang$arity$1 = repeat__1;
  repeat.cljs$lang$arity$2 = repeat__2;
  return repeat
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.call(null, n, cljs.core.repeat.call(null, x))
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, false, function() {
      return cljs.core.cons.call(null, f.call(null), repeatedly.call(null, f))
    }, null)
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.call(null, n, repeatedly.call(null, f))
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$lang$arity$1 = repeatedly__1;
  repeatedly.cljs$lang$arity$2 = repeatedly__2;
  return repeatedly
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons.call(null, x, new cljs.core.LazySeq(null, false, function() {
    return iterate.call(null, f, f.call(null, x))
  }, null))
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, false, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if(function() {
        var and__3822__auto__ = s1;
        if(and__3822__auto__) {
          return s2
        }else {
          return and__3822__auto__
        }
      }()) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))))
      }else {
        return null
      }
    }, null)
  };
  var interleave__3 = function() {
    var G__3698__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, false, function() {
        var ss = cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1));
        if(cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave, cljs.core.map.call(null, cljs.core.rest, ss)))
        }else {
          return null
        }
      }, null)
    };
    var G__3698 = function(c1, c2, var_args) {
      var colls = null;
      if(goog.isDef(var_args)) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3698__delegate.call(this, c1, c2, colls)
    };
    G__3698.cljs$lang$maxFixedArity = 2;
    G__3698.cljs$lang$applyTo = function(arglist__3699) {
      var c1 = cljs.core.first(arglist__3699);
      var c2 = cljs.core.first(cljs.core.next(arglist__3699));
      var colls = cljs.core.rest(cljs.core.next(arglist__3699));
      return G__3698__delegate(c1, c2, colls)
    };
    G__3698.cljs$lang$arity$variadic = G__3698__delegate;
    return G__3698
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        return interleave__3.cljs$lang$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$lang$arity$2 = interleave__2;
  interleave.cljs$lang$arity$variadic = interleave__3.cljs$lang$arity$variadic;
  return interleave
}();
cljs.core.interpose = function interpose(sep, coll) {
  return cljs.core.drop.call(null, 1, cljs.core.interleave.call(null, cljs.core.repeat.call(null, sep), coll))
};
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, false, function() {
      var temp__3971__auto__ = cljs.core.seq.call(null, coll);
      if(temp__3971__auto__) {
        var coll__$1 = temp__3971__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, coll__$1), cat.call(null, cljs.core.rest.call(null, coll__$1), colls__$1))
      }else {
        if(cljs.core.seq.call(null, colls__$1)) {
          return cat.call(null, cljs.core.first.call(null, colls__$1), cljs.core.rest.call(null, colls__$1))
        }else {
          return null
        }
      }
    }, null)
  };
  return cat.call(null, null, colls)
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__2 = function(f, coll) {
    return cljs.core.flatten1.call(null, cljs.core.map.call(null, f, coll))
  };
  var mapcat__3 = function() {
    var G__3700__delegate = function(f, coll, colls) {
      return cljs.core.flatten1.call(null, cljs.core.apply.call(null, cljs.core.map, f, coll, colls))
    };
    var G__3700 = function(f, coll, var_args) {
      var colls = null;
      if(goog.isDef(var_args)) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3700__delegate.call(this, f, coll, colls)
    };
    G__3700.cljs$lang$maxFixedArity = 2;
    G__3700.cljs$lang$applyTo = function(arglist__3701) {
      var f = cljs.core.first(arglist__3701);
      var coll = cljs.core.first(cljs.core.next(arglist__3701));
      var colls = cljs.core.rest(cljs.core.next(arglist__3701));
      return G__3700__delegate(f, coll, colls)
    };
    G__3700.cljs$lang$arity$variadic = G__3700__delegate;
    return G__3700
  }();
  mapcat = function(f, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapcat__2.call(this, f, coll);
      default:
        return mapcat__3.cljs$lang$arity$variadic(f, coll, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 2;
  mapcat.cljs$lang$applyTo = mapcat__3.cljs$lang$applyTo;
  mapcat.cljs$lang$arity$2 = mapcat__2;
  mapcat.cljs$lang$arity$variadic = mapcat__3.cljs$lang$arity$variadic;
  return mapcat
}();
cljs.core.filter = function filter(pred, coll) {
  return new cljs.core.LazySeq(null, false, function() {
    var temp__3974__auto__ = cljs.core.seq.call(null, coll);
    if(temp__3974__auto__) {
      var s = temp__3974__auto__;
      if(cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__2535__auto__ = size;
        var i = 0;
        while(true) {
          if(i < n__2535__auto__) {
            if(cljs.core.truth_(pred.call(null, cljs.core._nth.call(null, c, i)))) {
              cljs.core.chunk_append.call(null, b, cljs.core._nth.call(null, c, i))
            }else {
            }
            var G__3702 = i + 1;
            i = G__3702;
            continue
          }else {
          }
          break
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), filter.call(null, pred, cljs.core.chunk_rest.call(null, s)))
      }else {
        var f = cljs.core.first.call(null, s);
        var r = cljs.core.rest.call(null, s);
        if(cljs.core.truth_(pred.call(null, f))) {
          return cljs.core.cons.call(null, f, filter.call(null, pred, r))
        }else {
          return filter.call(null, pred, r)
        }
      }
    }else {
      return null
    }
  }, null)
};
cljs.core.remove = function remove(pred, coll) {
  return cljs.core.filter.call(null, cljs.core.complement.call(null, pred), coll)
};
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, false, function() {
      return cljs.core.cons.call(null, node, cljs.core.truth_(branch_QMARK_.call(null, node)) ? cljs.core.mapcat.call(null, walk, children.call(null, node)) : null)
    }, null)
  };
  return walk.call(null, root)
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.call(null, function(p1__3703_SHARP_) {
    return!cljs.core.sequential_QMARK_.call(null, p1__3703_SHARP_)
  }, cljs.core.rest.call(null, cljs.core.tree_seq.call(null, cljs.core.sequential_QMARK_, cljs.core.seq, x)))
};
cljs.core.into = function into(to, from) {
  if(function() {
    var G__3705 = to;
    if(G__3705) {
      if(function() {
        var or__3824__auto__ = G__3705.cljs$lang$protocol_mask$partition1$ & 4;
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          return G__3705.cljs$core$IEditableCollection$
        }
      }()) {
        return true
      }else {
        if(!G__3705.cljs$lang$protocol_mask$partition1$) {
          return cljs.core.type_satisfies_.call(null, cljs.core.IEditableCollection, G__3705)
        }else {
          return false
        }
      }
    }else {
      return cljs.core.type_satisfies_.call(null, cljs.core.IEditableCollection, G__3705)
    }
  }()) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core.transient$.call(null, to), from))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, to, from)
  }
};
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
      return cljs.core.conj_BANG_.call(null, v, f.call(null, o))
    }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll))
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2))
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2, c3))
  };
  var mapv__5 = function() {
    var G__3706__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.apply.call(null, cljs.core.map, f, c1, c2, c3, colls))
    };
    var G__3706 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if(goog.isDef(var_args)) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0)
      }
      return G__3706__delegate.call(this, f, c1, c2, c3, colls)
    };
    G__3706.cljs$lang$maxFixedArity = 4;
    G__3706.cljs$lang$applyTo = function(arglist__3707) {
      var f = cljs.core.first(arglist__3707);
      var c1 = cljs.core.first(cljs.core.next(arglist__3707));
      var c2 = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3707)));
      var c3 = cljs.core.first(cljs.core.next(cljs.core.next(cljs.core.next(arglist__3707))));
      var colls = cljs.core.rest(cljs.core.next(cljs.core.next(cljs.core.next(arglist__3707))));
      return G__3706__delegate(f, c1, c2, c3, colls)
    };
    G__3706.cljs$lang$arity$variadic = G__3706__delegate;
    return G__3706
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        return mapv__5.cljs$lang$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$lang$arity$2 = mapv__2;
  mapv.cljs$lang$arity$3 = mapv__3;
  mapv.cljs$lang$arity$4 = mapv__4;
  mapv.cljs$lang$arity$variadic = mapv__5.cljs$lang$arity$variadic;
  return mapv
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
    if(cljs.core.truth_(pred.call(null, o))) {
      return cljs.core.conj_BANG_.call(null, v, o)
    }else {
      return v
    }
  }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll))
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.call(null, n, n, coll)
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, false, function() {
      var temp__3974__auto__ = cljs.core.seq.call(null, coll);
      if(temp__3974__auto__) {
        var s = temp__3974__auto__;
        var p = cljs.core.take.call(null, n, s);
        if(n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, cljs.core.drop.call(null, step, s)))
        }else {
          return null
        }
      }else {
        return null
      }
    }, null)
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, false, function() {
      var temp__3974__auto__ = cljs.core.seq.call(null, coll);
      if(temp__3974__auto__) {
        var s = temp__3974__auto__;
        var p = cljs.core.take.call(null, n, s);
        if(n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, pad, cljs.core.drop.call(null, step, s)))
        }else {
          return cljs.core.list.call(null, cljs.core.take.call(null, n, cljs.core.concat.call(null, p, pad)))
        }
      }else {
        return null
      }
    }, null)
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$lang$arity$2 = partition__2;
  partition.cljs$lang$arity$3 = partition__3;
  partition.cljs$lang$arity$4 = partition__4;
  return partition
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return cljs.core.reduce.call(null, cljs.core.get, m, ks)
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq.call(null, ks);
    while(true) {
      if(ks__$1) {
        var m__$2 = cljs.core._lookup.call(null, m__$1, cljs.core.first.call(null, ks__$1), sentinel);
        if(sentinel === m__$2) {
          return not_found
        }else {
          var G__3708 = sentinel;
          var G__3709 = m__$2;
          var G__3710 = cljs.core.next.call(null, ks__$1);
          sentinel = G__3708;
          m__$1 = G__3709;
          ks__$1 = G__3710;
          continue
        }
      }else {
        return m__$1
      }
      break
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$lang$arity$2 = get_in__2;
  get_in.cljs$lang$arity$3 = get_in__3;
  return get_in
}();
cljs.core.assoc_in = function assoc_in(m, p__3711, v) {
  var vec__3713 = p__3711;
  var k = cljs.core.nth.call(null, vec__3713, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__3713, 1);
  if(cljs.core.truth_(ks)) {
    return cljs.core.assoc.call(null, m, k, assoc_in.call(null, cljs.core._lookup.call(null, m, k, null), ks, v))
  }else {
    return cljs.core.assoc.call(null, m, k, v)
  }
};
cljs.core.update_in = function() {
  var update_in__delegate = function(m, p__3714, f, args) {
    var vec__3716 = p__3714;
    var k = cljs.core.nth.call(null, vec__3716, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__3716, 1);
    if(cljs.core.truth_(ks)) {
      return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, update_in, cljs.core._lookup.call(null, m, k, null), ks, f, args))
    }else {
      return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core._lookup.call(null, m, k, null), args))
    }
  };
  var update_in = function(m, p__3714, f, var_args) {
    var args = null;
    if(goog.isDef(var_args)) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
    }
    return update_in__delegate.call(this, m, p__3714, f, args)
  };
  update_in.cljs$lang$maxFixedArity = 3;
  update_in.cljs$lang$applyTo = function(arglist__3717) {
    var m = cljs.core.first(arglist__3717);
    var p__3714 = cljs.core.first(cljs.core.next(arglist__3717));
    var f = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3717)));
    var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3717)));
    return update_in__delegate(m, p__3714, f, args)
  };
  update_in.cljs$lang$arity$variadic = update_in__delegate;
  return update_in
}();
goog.provide("cljs.core.Vector");
cljs.core.Vector = function(meta, array, __hash) {
  this.meta = meta;
  this.array = array;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32400159
};
cljs.core.Vector.cljs$lang$type = true;
cljs.core.Vector.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/Vector")
};
cljs.core.Vector.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/Vector")
};
cljs.core.Vector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.Vector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(coll, k, null)
};
cljs.core.Vector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(coll, k, not_found)
};
cljs.core.Vector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var new_array = self__.array.slice();
  new_array[k] = v;
  return new cljs.core.Vector(self__.meta, new_array, null)
};
cljs.core.Vector.prototype.call = function() {
  var G__3722 = null;
  var G__3722__2 = function(this_sym3720, k) {
    var self__ = this;
    var this_sym3720__$1 = this;
    var coll = this_sym3720__$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(coll, k)
  };
  var G__3722__3 = function(this_sym3721, k, not_found) {
    var self__ = this;
    var this_sym3721__$1 = this;
    var coll = this_sym3721__$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, not_found)
  };
  G__3722 = function(this_sym3721, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3722__2.call(this, this_sym3721, k);
      case 3:
        return G__3722__3.call(this, this_sym3721, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__3722
}();
cljs.core.Vector.prototype.apply = function(this_sym3718, args3719) {
  var self__ = this;
  return this_sym3718.call.apply(this_sym3718, [this_sym3718].concat(args3719.slice()))
};
cljs.core.Vector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var new_array = self__.array.slice();
  new_array.push(o);
  return new cljs.core.Vector(self__.meta, new_array, null)
};
cljs.core.Vector.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.Vector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, self__.array, f)
};
cljs.core.Vector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, start) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, self__.array, f, start)
};
cljs.core.Vector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  if(self__.array.length > 0) {
    var vector_seq = function vector_seq(i) {
      return new cljs.core.LazySeq(null, false, function() {
        if(i < self__.array.length) {
          return cljs.core.cons.call(null, self__.array[i], vector_seq.call(null, i + 1))
        }else {
          return null
        }
      }, null)
    };
    return vector_seq.call(null, 0)
  }else {
    return null
  }
};
cljs.core.Vector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return self__.array.length
};
cljs.core.Vector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var count = self__.array.length;
  if(count > 0) {
    return self__.array[count - 1]
  }else {
    return null
  }
};
cljs.core.Vector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  if(self__.array.length > 0) {
    var new_array = self__.array.slice();
    new_array.pop();
    return new cljs.core.Vector(self__.meta, new_array, null)
  }else {
    throw new Error("Can't pop empty vector");
  }
};
cljs.core.Vector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  return coll.cljs$core$IAssociative$_assoc$arity$3(coll, n, val)
};
cljs.core.Vector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.Vector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.Vector(meta__$1, self__.array, self__.__hash)
};
cljs.core.Vector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.Vector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  if(function() {
    var and__3822__auto__ = 0 <= n;
    if(and__3822__auto__) {
      return n < self__.array.length
    }else {
      return and__3822__auto__
    }
  }()) {
    return self__.array[n]
  }else {
    return null
  }
};
cljs.core.Vector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  if(function() {
    var and__3822__auto__ = 0 <= n;
    if(and__3822__auto__) {
      return n < self__.array.length
    }else {
      return and__3822__auto__
    }
  }()) {
    return self__.array[n]
  }else {
    return not_found
  }
};
cljs.core.Vector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.Vector.EMPTY, self__.meta)
};
cljs.core.Vector;
cljs.core.Vector.EMPTY = new cljs.core.Vector(null, [], 0);
cljs.core.Vector.fromArray = function(xs) {
  return new cljs.core.Vector(null, xs, null)
};
goog.provide("cljs.core.VectorNode");
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorPrSeq = function(this__2317__auto__) {
  return cljs.core.list.call(null, "cljs.core/VectorNode")
};
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__2317__auto__, writer__2318__auto__) {
  return cljs.core._write.call(null, writer__2318__auto__, "cljs.core/VectorNode")
};
cljs.core.VectorNode;
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, cljs.core.make_array.call(null, 32))
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx]
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, node.arr.slice())
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if(cnt < 32) {
    return 0
  }else {
    return cnt - 1 >>> 5 << 5
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while(true) {
    if(ll === 0) {
      return ret
    }else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node.call(null, edit);
      var _ = cljs.core.pv_aset.call(null, r, 0, embed);
      var G__3723 = ll - 5;
      var G__3724 = r;
      ll = G__3723;
      ret = G__3724;
      continue
    }
    break
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node.call(null, parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if(5 === level) {
    cljs.core.pv_aset.call(null, ret, subidx, tailnode);
    return ret
  }else {
    var child = cljs.core.pv_aget.call(null, parent, subidx);
    if(!(child == null)) {
      var node_to_insert = push_tail.call(null, pv, level - 5, child, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret
    }else {
      var node_to_insert = cljs.core.new_path.call(null, null, level - 5, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret
    }
  }
};
cljs.core.array_for = function array_for(pv, i) {
  if(function() {
    var and__3822__auto__ = 0 <= i;
    if(and__3822__auto__) {
      return i < pv.cnt
    }else {
      return and__3822__auto__
    }
  }()) {
    if(i >= cljs.core.tail_off.call(null, pv)) {
      return pv.tail
    }else {
      var node = pv.root;
      var level = pv.shift;
      while(true) {
        if(level > 0) {
          var G__3725 = cljs.core.pv_aget.call(null, node, i >>> level & 31);
          var G__3726 = level - 5;
          node = G__3725;
          level = G__3726;
          continue
        }else {
          return node.arr
        }
        break
      }
    }
  }else {
    throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(pv.cnt)].join(""));
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node.call(null, node);
  if(level === 0) {
    cljs.core.pv_aset.call(null, ret, i & 31, val);
    return ret
  }else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset.call(null, ret, subidx, do_assoc.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx), i, val));
    return ret
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if(level > 5) {
    var new_child = pop_tail.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx));
    if(function() {
      var and__3822__auto__ = new_child == null;
      if(and__3822__auto__) {
        return subidx === 0
      }else {
        return and__3822__auto__
      }
    }()) {
      return null
    }else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, new_child);
      return ret
    }
  }else {
    if(subidx === 0) {
      return null
    }else {
      if("\ufdd0'else") {
        var ret = cljs.core.pv_clone_node.call(null, node);
        cljs.core.pv_aset.call(null, ret, subidx, null);
        return ret
      }else {
        return null
      }
    }
  }
};
goog.provide("cljs.core.PersistentVector");
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 167668511
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/PersistentVector")
};
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/PersistentVector")
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.call(null, self__.tail))
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(coll, k, null)
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(coll, k, not_found)
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  if(function() {
    var and__3822__auto__ = 0 <= k;
    if(and__3822__auto__) {
      return k < self__.cnt
    }else {
      return and__3822__auto__
    }
  }()) {
    if(cljs.core.tail_off.call(null, coll) <= k) {
      var new_tail = self__.tail.slice();
      new_tail[k & 31] = v;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null)
    }else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc.call(null, coll, self__.shift, self__.root, k, v), self__.tail, null)
    }
  }else {
    if(k === self__.cnt) {
      return coll.cljs$core$ICollection$_conj$arity$2(coll, v)
    }else {
      if("\ufdd0'else") {
        throw new Error([cljs.core.str("Index "), cljs.core.str(k), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__3731 = null;
  var G__3731__2 = function(this_sym3729, k) {
    var self__ = this;
    var this_sym3729__$1 = this;
    var coll = this_sym3729__$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(coll, k)
  };
  var G__3731__3 = function(this_sym3730, k, not_found) {
    var self__ = this;
    var this_sym3730__$1 = this;
    var coll = this_sym3730__$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, not_found)
  };
  G__3731 = function(this_sym3730, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3731__2.call(this, this_sym3730, k);
      case 3:
        return G__3731__3.call(this, this_sym3730, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__3731
}();
cljs.core.PersistentVector.prototype.apply = function(this_sym3727, args3728) {
  var self__ = this;
  return this_sym3727.call.apply(this_sym3727, [this_sym3727].concat(args3728.slice()))
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var step_init = [0, init];
  var i = 0;
  while(true) {
    if(i < self__.cnt) {
      var arr = cljs.core.array_for.call(null, v, i);
      var len = arr.length;
      var init__$1 = function() {
        var j = 0;
        var init__$1 = step_init[1];
        while(true) {
          if(j < len) {
            var init__$2 = f.call(null, init__$1, j + i, arr[j]);
            if(cljs.core.reduced_QMARK_.call(null, init__$2)) {
              return init__$2
            }else {
              var G__3732 = j + 1;
              var G__3733 = init__$2;
              j = G__3732;
              init__$1 = G__3733;
              continue
            }
          }else {
            step_init[0] = len;
            step_init[1] = init__$1;
            return init__$1
          }
          break
        }
      }();
      if(cljs.core.reduced_QMARK_.call(null, init__$1)) {
        return cljs.core.deref.call(null, init__$1)
      }else {
        var G__3734 = i + step_init[0];
        i = G__3734;
        continue
      }
    }else {
      return step_init[1]
    }
    break
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  if(self__.cnt - cljs.core.tail_off.call(null, coll) < 32) {
    var new_tail = self__.tail.slice();
    new_tail.push(o);
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null)
  }else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node.call(null, null);
      cljs.core.pv_aset.call(null, n_r, 0, self__.root);
      cljs.core.pv_aset.call(null, n_r, 1, cljs.core.new_path.call(null, null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r
    }() : cljs.core.push_tail.call(null, coll, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null)
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  if(self__.cnt > 0) {
    return new cljs.core.RSeq(coll, self__.cnt - 1, null)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(coll, 0)
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(coll, 1)
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, v, f)
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, start) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, v, f, start)
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  if(self__.cnt === 0) {
    return null
  }else {
    return cljs.core.chunked_seq.call(null, coll, 0, 0)
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return self__.cnt
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  if(self__.cnt > 0) {
    return coll.cljs$core$IIndexed$_nth$arity$2(coll, self__.cnt - 1)
  }else {
    return null
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  if(self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  }else {
    if(1 === self__.cnt) {
      return cljs.core._with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta)
    }else {
      if(1 < self__.cnt - cljs.core.tail_off.call(null, coll)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null)
      }else {
        if("\ufdd0'else") {
          var new_tail = cljs.core.array_for.call(null, coll, self__.cnt - 2);
          var nr = cljs.core.pop_tail.call(null, coll, self__.shift, self__.root);
          var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
          var cnt_1 = self__.cnt - 1;
          if(function() {
            var and__3822__auto__ = 5 < self__.shift;
            if(and__3822__auto__) {
              return cljs.core.pv_aget.call(null, new_root, 1) == null
            }else {
              return and__3822__auto__
            }
          }()) {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget.call(null, new_root, 0), new_tail, null)
          }else {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null)
          }
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  return coll.cljs$core$IAssociative$_assoc$arity$3(coll, n, val)
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash)
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  return cljs.core.array_for.call(null, coll, n)[n & 31]
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  if(function() {
    var and__3822__auto__ = 0 <= n;
    if(and__3822__auto__) {
      return n < self__.cnt
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$IIndexed$_nth$arity$2(coll, n)
  }else {
    return not_found
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta)
};
cljs.core.PersistentVector;
cljs.core.PersistentVector.EMPTY_NODE = cljs.core.pv_fresh_node.call(null, null);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], 0);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone === true ? xs : xs.slice();
  if(l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null)
  }else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = cljs.core._as_transient.call(null, v);
    while(true) {
      if(i < l) {
        var G__3735 = i + 1;
        var G__3736 = cljs.core.conj_BANG_.call(null, out, xs__$1[i]);
        i = G__3735;
        out = G__3736;
        continue
      }else {
        return cljs.core.persistent_BANG_.call(null, out)
      }
      break
    }
  }
};
cljs.core.vec = function vec(coll) {
  return cljs.core._persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core._as_transient.call(null, cljs.core.PersistentVector.EMPTY), coll))
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    return cljs.core.vec.call(null, args)
  };
  var vector = function(var_args) {
    var args = null;
    if(goog.isDef(var_args)) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return vector__delegate.call(this, args)
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__3737) {
    var args = cljs.core.seq(arglist__3737);
    return vector__delegate(args)
  };
  vector.cljs$lang$arity$variadic = vector__delegate;
  return vector
}();
goog.provide("cljs.core.ChunkedSeq");
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31719660;
  this.cljs$lang$protocol_mask$partition1$ = 1536
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/ChunkedSeq")
};
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/ChunkedSeq")
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  if(self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if(s == null) {
      return null
    }else {
      return s
    }
  }else {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll)
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return cljs.core.cons.call(null, o, coll)
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  return coll
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  return self__.node[self__.off]
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  if(self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if(s == null) {
      return cljs.core.List.EMPTY
    }else {
      return s
    }
  }else {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll)
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if(s == null) {
    return null
  }else {
    return s
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  return cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.array_chunk.call(null, self__.node, self__.off)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if(s == null) {
    return cljs.core.List.EMPTY
  }else {
    return s
  }
};
cljs.core.ChunkedSeq;
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return chunked_seq.call(null, vec, cljs.core.array_for.call(null, vec, i), i, off, null)
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return chunked_seq.call(null, vec, node, i, off, null)
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null)
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$lang$arity$3 = chunked_seq__3;
  chunked_seq.cljs$lang$arity$4 = chunked_seq__4;
  chunked_seq.cljs$lang$arity$5 = chunked_seq__5;
  return chunked_seq
}();
goog.provide("cljs.core.Subvec");
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32400159
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/Subvec")
};
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/Subvec")
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(coll, k, null)
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(coll, k, not_found)
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var v_pos = self__.start + key;
  return new cljs.core.Subvec(self__.meta, cljs.core._assoc.call(null, self__.v, v_pos, val), self__.start, self__.end > v_pos + 1 ? self__.end : v_pos + 1, null)
};
cljs.core.Subvec.prototype.call = function() {
  var G__3742 = null;
  var G__3742__2 = function(this_sym3740, k) {
    var self__ = this;
    var this_sym3740__$1 = this;
    var coll = this_sym3740__$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(coll, k)
  };
  var G__3742__3 = function(this_sym3741, k, not_found) {
    var self__ = this;
    var this_sym3741__$1 = this;
    var coll = this_sym3741__$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, not_found)
  };
  G__3742 = function(this_sym3741, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3742__2.call(this, this_sym3741, k);
      case 3:
        return G__3742__3.call(this, this_sym3741, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__3742
}();
cljs.core.Subvec.prototype.apply = function(this_sym3738, args3739) {
  var self__ = this;
  return this_sym3738.call.apply(this_sym3738, [this_sym3738].concat(args3739.slice()))
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return new cljs.core.Subvec(self__.meta, cljs.core._assoc_n.call(null, self__.v, self__.end, o), self__.start, self__.end + 1, null)
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, coll, f)
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, coll, f, start__$1)
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var subvec_seq = function subvec_seq(i) {
    if(i === self__.end) {
      return null
    }else {
      return cljs.core.cons.call(null, cljs.core._nth.call(null, self__.v, i), new cljs.core.LazySeq(null, false, function() {
        return subvec_seq.call(null, i + 1)
      }, null))
    }
  };
  return subvec_seq.call(null, self__.start)
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return self__.end - self__.start
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core._nth.call(null, self__.v, self__.end - 1)
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  if(self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  }else {
    return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end - 1, null)
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  return coll.cljs$core$IAssociative$_assoc$arity$3(coll, n, val)
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.Subvec(meta__$1, self__.v, self__.start, self__.end, self__.__hash)
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  return cljs.core._nth.call(null, self__.v, self__.start + n)
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  return cljs.core._nth.call(null, self__.v, self__.start + n, not_found)
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.Vector.EMPTY, self__.meta)
};
cljs.core.Subvec;
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.call(null, v, start, cljs.core.count.call(null, v))
  };
  var subvec__3 = function(v, start, end) {
    return new cljs.core.Subvec(null, v, start, end, null)
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$lang$arity$2 = subvec__2;
  subvec.cljs$lang$arity$3 = subvec__3;
  return subvec
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if(edit === node.edit) {
    return node
  }else {
    return new cljs.core.VectorNode(edit, node.arr.slice())
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode({}, node.arr.slice())
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = cljs.core.make_array.call(null, 32);
  cljs.core.array_copy.call(null, tl, 0, ret, 0, tl.length);
  return ret
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable.call(null, tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset.call(null, ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget.call(null, ret, subidx);
    if(!(child == null)) {
      return tv_push_tail.call(null, tv, level - 5, child, tail_node)
    }else {
      return cljs.core.new_path.call(null, tv.root.edit, level - 5, tail_node)
    }
  }());
  return ret
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable.call(null, tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if(level > 5) {
    var new_child = tv_pop_tail.call(null, tv, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx));
    if(function() {
      var and__3822__auto__ = new_child == null;
      if(and__3822__auto__) {
        return subidx === 0
      }else {
        return and__3822__auto__
      }
    }()) {
      return null
    }else {
      cljs.core.pv_aset.call(null, node__$1, subidx, new_child);
      return node__$1
    }
  }else {
    if(subidx === 0) {
      return null
    }else {
      if("\ufdd0'else") {
        cljs.core.pv_aset.call(null, node__$1, subidx, null);
        return node__$1
      }else {
        return null
      }
    }
  }
};
cljs.core.editable_array_for = function editable_array_for(tv, i) {
  if(function() {
    var and__3822__auto__ = 0 <= i;
    if(and__3822__auto__) {
      return i < tv.cnt
    }else {
      return and__3822__auto__
    }
  }()) {
    if(i >= cljs.core.tail_off.call(null, tv)) {
      return tv.tail
    }else {
      var root = tv.root;
      var node = root;
      var level = tv.shift;
      while(true) {
        if(level > 0) {
          var G__3743 = cljs.core.tv_ensure_editable.call(null, root.edit, cljs.core.pv_aget.call(null, node, i >>> level & 31));
          var G__3744 = level - 5;
          node = G__3743;
          level = G__3744;
          continue
        }else {
          return node.arr
        }
        break
      }
    }
  }else {
    throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in transient vector of length "), cljs.core.str(tv.cnt)].join(""));
  }
};
goog.provide("cljs.core.TransientVector");
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/TransientVector")
};
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/TransientVector")
};
cljs.core.TransientVector.prototype.call = function() {
  var G__3749 = null;
  var G__3749__2 = function(this_sym3747, k) {
    var self__ = this;
    var this_sym3747__$1 = this;
    var coll = this_sym3747__$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(coll, k)
  };
  var G__3749__3 = function(this_sym3748, k, not_found) {
    var self__ = this;
    var this_sym3748__$1 = this;
    var coll = this_sym3748__$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, not_found)
  };
  G__3749 = function(this_sym3748, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3749__2.call(this, this_sym3748, k);
      case 3:
        return G__3749__3.call(this, this_sym3748, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__3749
}();
cljs.core.TransientVector.prototype.apply = function(this_sym3745, args3746) {
  var self__ = this;
  return this_sym3745.call.apply(this_sym3745, [this_sym3745].concat(args3746.slice()))
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(coll, k, null)
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(coll, k, not_found)
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  if(self__.root.edit) {
    return cljs.core.array_for.call(null, coll, n)[n & 31]
  }else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  if(function() {
    var and__3822__auto__ = 0 <= n;
    if(and__3822__auto__) {
      return n < self__.cnt
    }else {
      return and__3822__auto__
    }
  }()) {
    return coll.cljs$core$IIndexed$_nth$arity$2(coll, n)
  }else {
    return not_found
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  if(self__.root.edit) {
    return self__.cnt
  }else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  if(self__.root.edit) {
    if(function() {
      var and__3822__auto__ = 0 <= n;
      if(and__3822__auto__) {
        return n < self__.cnt
      }else {
        return and__3822__auto__
      }
    }()) {
      if(cljs.core.tail_off.call(null, tcoll) <= n) {
        self__.tail[n & 31] = val;
        return tcoll
      }else {
        var new_root = function go(level, node) {
          var node__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, node);
          if(level === 0) {
            cljs.core.pv_aset.call(null, node__$1, n & 31, val);
            return node__$1
          }else {
            var subidx = n >>> level & 31;
            cljs.core.pv_aset.call(null, node__$1, subidx, go.call(null, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx)));
            return node__$1
          }
        }.call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll
      }
    }else {
      if(n === self__.cnt) {
        return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val)
      }else {
        if("\ufdd0'else") {
          throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
        }else {
          return null
        }
      }
    }
  }else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  if(self__.root.edit) {
    if(self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    }else {
      if(1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll
      }else {
        if((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll
        }else {
          if("\ufdd0'else") {
            var new_tail = cljs.core.editable_array_for.call(null, tcoll, self__.cnt - 2);
            var new_root = function() {
              var nr = cljs.core.tv_pop_tail.call(null, tcoll, self__.shift, self__.root);
              if(!(nr == null)) {
                return nr
              }else {
                return new cljs.core.VectorNode(self__.root.edit, cljs.core.make_array.call(null, 32))
              }
            }();
            if(function() {
              var and__3822__auto__ = 5 < self__.shift;
              if(and__3822__auto__) {
                return cljs.core.pv_aget.call(null, new_root, 1) == null
              }else {
                return and__3822__auto__
              }
            }()) {
              var new_root__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, cljs.core.pv_aget.call(null, new_root, 0));
              self__.root = new_root__$1;
              self__.shift = self__.shift - 5;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll
            }else {
              self__.root = new_root;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll
            }
          }else {
            return null
          }
        }
      }
    }
  }else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, key, val)
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  if(self__.root.edit) {
    if(self__.cnt - cljs.core.tail_off.call(null, tcoll) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll
    }else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = cljs.core.make_array.call(null, 32);
      new_tail[0] = o;
      self__.tail = new_tail;
      if(self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = cljs.core.make_array.call(null, 32);
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path.call(null, self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll
      }else {
        var new_root = cljs.core.tv_push_tail.call(null, tcoll, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll
      }
    }
  }else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  if(self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off.call(null, tcoll);
    var trimmed_tail = cljs.core.make_array.call(null, len);
    cljs.core.array_copy.call(null, self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null)
  }else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientVector;
goog.provide("cljs.core.PersistentQueueSeq");
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/PersistentQueueSeq")
};
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/PersistentQueueSeq")
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return cljs.core.cons.call(null, o, coll)
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  return coll
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core._first.call(null, self__.front)
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var temp__3971__auto__ = cljs.core.next.call(null, self__.front);
  if(temp__3971__auto__) {
    var f1 = temp__3971__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null)
  }else {
    if(self__.rear == null) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll)
    }else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null)
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash)
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.PersistentQueueSeq;
goog.provide("cljs.core.PersistentQueue");
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31858766
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/PersistentQueue")
};
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/PersistentQueue")
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  if(cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.call(null, function() {
      var or__3824__auto__ = self__.rear;
      if(cljs.core.truth_(or__3824__auto__)) {
        return or__3824__auto__
      }else {
        return cljs.core.PersistentVector.EMPTY
      }
    }(), o), null)
  }else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.call(null, self__.front, o), cljs.core.PersistentVector.EMPTY, null)
  }
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var rear__$1 = cljs.core.seq.call(null, self__.rear);
  if(cljs.core.truth_(function() {
    var or__3824__auto__ = self__.front;
    if(cljs.core.truth_(or__3824__auto__)) {
      return or__3824__auto__
    }else {
      return rear__$1
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq.call(null, rear__$1), null)
  }else {
    return null
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return self__.count
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core._first.call(null, self__.front)
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  if(cljs.core.truth_(self__.front)) {
    var temp__3971__auto__ = cljs.core.next.call(null, self__.front);
    if(temp__3971__auto__) {
      var f1 = temp__3971__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null)
    }else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq.call(null, self__.rear), cljs.core.PersistentVector.EMPTY, null)
    }
  }else {
    return coll
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.first.call(null, self__.front)
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, coll))
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash)
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.PersistentQueue.EMPTY
};
cljs.core.PersistentQueue;
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, 0);
goog.provide("cljs.core.NeverEquiv");
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/NeverEquiv")
};
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/NeverEquiv")
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  return false
};
cljs.core.NeverEquiv;
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.map_QMARK_.call(null, y) ? cljs.core.count.call(null, x) === cljs.core.count.call(null, y) ? cljs.core.every_QMARK_.call(null, cljs.core.identity, cljs.core.map.call(null, function(xkv) {
    return cljs.core._EQ_.call(null, cljs.core._lookup.call(null, y, cljs.core.first.call(null, xkv), cljs.core.never_equiv), cljs.core.second.call(null, xkv))
  }, x)) : null : null)
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while(true) {
    if(i < len) {
      if(k === array[i]) {
        return i
      }else {
        var G__3750 = i + incr;
        i = G__3750;
        continue
      }
    }else {
      return null
    }
    break
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash.call(null, a);
  var b__$1 = cljs.core.hash.call(null, b);
  if(a__$1 < b__$1) {
    return-1
  }else {
    if(a__$1 > b__$1) {
      return 1
    }else {
      if("\ufdd0'else") {
        return 0
      }else {
        return null
      }
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var out = cljs.core.with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, cljs.core.meta.call(null, m));
  var i = 0;
  var out__$1 = cljs.core.transient$.call(null, out);
  while(true) {
    if(i < len) {
      var k__$1 = ks[i];
      var G__3751 = i + 1;
      var G__3752 = cljs.core.assoc_BANG_.call(null, out__$1, k__$1, so[k__$1]);
      i = G__3751;
      out__$1 = G__3752;
      continue
    }else {
      return cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, out__$1, k, v))
    }
    break
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = {};
  var l = ks.length;
  var i = 0;
  while(true) {
    if(i < l) {
      var k = ks[i];
      new_obj[k] = obj[k];
      var G__3754 = i + 1;
      i = G__3754;
      continue
    }else {
    }
    break
  }
  return new_obj
};
goog.provide("cljs.core.ObjMap");
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 15075087
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/ObjMap")
};
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/ObjMap")
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.hash_map.call(null), coll))
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_imap.call(null, coll);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, null)
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  if(function() {
    var and__3822__auto__ = goog.isString(k);
    if(and__3822__auto__) {
      return!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)
    }else {
      return and__3822__auto__
    }
  }()) {
    return self__.strobj[k]
  }else {
    return not_found
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  if(goog.isString(k)) {
    if(function() {
      var or__3824__auto__ = self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD;
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        return self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD
      }
    }()) {
      return cljs.core.obj_map__GT_hash_map.call(null, coll, k, v)
    }else {
      if(!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null)
      }else {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        var new_keys = self__.keys.slice();
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null)
      }
    }
  }else {
    return cljs.core.obj_map__GT_hash_map.call(null, coll, k, v)
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  if(function() {
    var and__3822__auto__ = goog.isString(k);
    if(and__3822__auto__) {
      return!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)
    }else {
      return and__3822__auto__
    }
  }()) {
    return true
  }else {
    return false
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__3759 = null;
  var G__3759__2 = function(this_sym3757, k) {
    var self__ = this;
    var this_sym3757__$1 = this;
    var coll = this_sym3757__$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(coll, k)
  };
  var G__3759__3 = function(this_sym3758, k, not_found) {
    var self__ = this;
    var this_sym3758__$1 = this;
    var coll = this_sym3758__$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, not_found)
  };
  G__3759 = function(this_sym3758, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3759__2.call(this, this_sym3758, k);
      case 3:
        return G__3759__3.call(this, this_sym3758, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__3759
}();
cljs.core.ObjMap.prototype.apply = function(this_sym3755, args3756) {
  var self__ = this;
  return this_sym3755.call.apply(this_sym3755, [this_sym3755].concat(args3756.slice()))
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  if(cljs.core.vector_QMARK_.call(null, entry)) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll, entry)
  }
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  if(self__.keys.length > 0) {
    return cljs.core.map.call(null, function(p1__3753_SHARP_) {
      return cljs.core.vector.call(null, p1__3753_SHARP_, self__.strobj[p1__3753_SHARP_])
    }, self__.keys.sort(cljs.core.obj_map_compare_keys))
  }else {
    return null
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return self__.keys.length
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_map.call(null, coll, other)
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash)
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.ObjMap.EMPTY, self__.meta)
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  if(function() {
    var and__3822__auto__ = goog.isString(k);
    if(and__3822__auto__) {
      return!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)
    }else {
      return and__3822__auto__
    }
  }()) {
    var new_keys = self__.keys.slice();
    var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array.call(null, 1, k, new_keys), 1);
    cljs.core.js_delete.call(null, new_strobj, k);
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null)
  }else {
    return coll
  }
};
cljs.core.ObjMap;
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], {}, 0, 0);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 32;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null)
};
goog.provide("cljs.core.HashMap");
cljs.core.HashMap = function(meta, count, hashobj, __hash) {
  this.meta = meta;
  this.count = count;
  this.hashobj = hashobj;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 15075087
};
cljs.core.HashMap.cljs$lang$type = true;
cljs.core.HashMap.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/HashMap")
};
cljs.core.HashMap.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/HashMap")
};
cljs.core.HashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_imap.call(null, coll);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.HashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, null)
};
cljs.core.HashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var bucket = self__.hashobj[cljs.core.hash.call(null, k)];
  var i = cljs.core.truth_(bucket) ? cljs.core.scan_array.call(null, 2, k, bucket) : null;
  if(cljs.core.truth_(i)) {
    return bucket[i + 1]
  }else {
    return not_found
  }
};
cljs.core.HashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var h = cljs.core.hash.call(null, k);
  var bucket = self__.hashobj[h];
  if(cljs.core.truth_(bucket)) {
    var new_bucket = bucket.slice();
    var new_hashobj = goog.object.clone(self__.hashobj);
    new_hashobj[h] = new_bucket;
    var temp__3971__auto__ = cljs.core.scan_array.call(null, 2, k, new_bucket);
    if(cljs.core.truth_(temp__3971__auto__)) {
      var i = temp__3971__auto__;
      new_bucket[i + 1] = v;
      return new cljs.core.HashMap(self__.meta, self__.count, new_hashobj, null)
    }else {
      new_bucket.push(k, v);
      return new cljs.core.HashMap(self__.meta, self__.count + 1, new_hashobj, null)
    }
  }else {
    var new_hashobj = goog.object.clone(self__.hashobj);
    new_hashobj[h] = [k, v];
    return new cljs.core.HashMap(self__.meta, self__.count + 1, new_hashobj, null)
  }
};
cljs.core.HashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var bucket = self__.hashobj[cljs.core.hash.call(null, k)];
  var i = cljs.core.truth_(bucket) ? cljs.core.scan_array.call(null, 2, k, bucket) : null;
  if(cljs.core.truth_(i)) {
    return true
  }else {
    return false
  }
};
cljs.core.HashMap.prototype.call = function() {
  var G__3765 = null;
  var G__3765__2 = function(this_sym3763, k) {
    var self__ = this;
    var this_sym3763__$1 = this;
    var coll = this_sym3763__$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(coll, k)
  };
  var G__3765__3 = function(this_sym3764, k, not_found) {
    var self__ = this;
    var this_sym3764__$1 = this;
    var coll = this_sym3764__$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, not_found)
  };
  G__3765 = function(this_sym3764, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3765__2.call(this, this_sym3764, k);
      case 3:
        return G__3765__3.call(this, this_sym3764, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__3765
}();
cljs.core.HashMap.prototype.apply = function(this_sym3761, args3762) {
  var self__ = this;
  return this_sym3761.call.apply(this_sym3761, [this_sym3761].concat(args3762.slice()))
};
cljs.core.HashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  if(cljs.core.vector_QMARK_.call(null, entry)) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll, entry)
  }
};
cljs.core.HashMap.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.HashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  if(self__.count > 0) {
    var hashes = cljs.core.js_keys.call(null, self__.hashobj).sort();
    return cljs.core.mapcat.call(null, function(p1__3760_SHARP_) {
      return cljs.core.map.call(null, cljs.core.vec, cljs.core.partition.call(null, 2, self__.hashobj[p1__3760_SHARP_]))
    }, hashes)
  }else {
    return null
  }
};
cljs.core.HashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return self__.count
};
cljs.core.HashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_map.call(null, coll, other)
};
cljs.core.HashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.HashMap(meta__$1, self__.count, self__.hashobj, self__.__hash)
};
cljs.core.HashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.HashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.HashMap.EMPTY, self__.meta)
};
cljs.core.HashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var h = cljs.core.hash.call(null, k);
  var bucket = self__.hashobj[h];
  var i = cljs.core.truth_(bucket) ? cljs.core.scan_array.call(null, 2, k, bucket) : null;
  if(cljs.core.not.call(null, i)) {
    return coll
  }else {
    var new_hashobj = goog.object.clone(self__.hashobj);
    if(3 > bucket.length) {
      cljs.core.js_delete.call(null, new_hashobj, h)
    }else {
      var new_bucket = bucket.slice();
      new_bucket.splice(i, 2);
      new_hashobj[h] = new_bucket
    }
    return new cljs.core.HashMap(self__.meta, self__.count - 1, new_hashobj, null)
  }
};
cljs.core.HashMap;
cljs.core.HashMap.EMPTY = new cljs.core.HashMap(null, 0, {}, 0);
cljs.core.HashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.HashMap.EMPTY;
  while(true) {
    if(i < len) {
      var G__3766 = i + 1;
      var G__3767 = cljs.core.assoc.call(null, out, ks[i], vs[i]);
      i = G__3766;
      out = G__3767;
      continue
    }else {
      return out
    }
    break
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  var len = arr.length;
  var i = 0;
  while(true) {
    if(len <= i) {
      return-1
    }else {
      if(cljs.core._EQ_.call(null, arr[i], k)) {
        return i
      }else {
        if("\ufdd0'else") {
          var G__3768 = i + 2;
          i = G__3768;
          continue
        }else {
          return null
        }
      }
    }
    break
  }
};
goog.provide("cljs.core.PersistentArrayMap");
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/PersistentArrayMap")
};
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/PersistentArrayMap")
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  return new cljs.core.TransientArrayMap({}, self__.arr.length, self__.arr.slice())
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_imap.call(null, coll);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, null)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var idx = cljs.core.array_map_index_of.call(null, coll, k);
  if(idx === -1) {
    return not_found
  }else {
    return self__.arr[idx + 1]
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var idx = cljs.core.array_map_index_of.call(null, coll, k);
  if(idx === -1) {
    if(self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, function() {
        var G__3771 = self__.arr.slice();
        G__3771.push(k);
        G__3771.push(v);
        return G__3771
      }(), null)
    }else {
      return cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll)), k, v))
    }
  }else {
    if(v === self__.arr[idx + 1]) {
      return coll
    }else {
      if("\ufdd0'else") {
        return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, function() {
          var G__3772 = self__.arr.slice();
          G__3772[idx + 1] = v;
          return G__3772
        }(), null)
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  return!(cljs.core.array_map_index_of.call(null, coll, k) === -1)
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__3775 = null;
  var G__3775__2 = function(this_sym3773, k) {
    var self__ = this;
    var this_sym3773__$1 = this;
    var coll = this_sym3773__$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(coll, k)
  };
  var G__3775__3 = function(this_sym3774, k, not_found) {
    var self__ = this;
    var this_sym3774__$1 = this;
    var coll = this_sym3774__$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, not_found)
  };
  G__3775 = function(this_sym3774, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3775__2.call(this, this_sym3774, k);
      case 3:
        return G__3775__3.call(this, this_sym3774, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__3775
}();
cljs.core.PersistentArrayMap.prototype.apply = function(this_sym3769, args3770) {
  var self__ = this;
  return this_sym3769.call.apply(this_sym3769, [this_sym3769].concat(args3770.slice()))
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while(true) {
    if(i < len) {
      var init__$2 = f.call(null, init__$1, self__.arr[i], self__.arr[i + 1]);
      if(cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2)
      }else {
        var G__3776 = i + 2;
        var G__3777 = init__$2;
        i = G__3776;
        init__$1 = G__3777;
        continue
      }
    }else {
      return null
    }
    break
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  if(cljs.core.vector_QMARK_.call(null, entry)) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll, entry)
  }
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  if(self__.cnt > 0) {
    var len = self__.arr.length;
    var array_map_seq = function array_map_seq(i) {
      return new cljs.core.LazySeq(null, false, function() {
        if(i < len) {
          return cljs.core.cons.call(null, cljs.core.PersistentVector.fromArray([self__.arr[i], self__.arr[i + 1]], true), array_map_seq.call(null, i + 2))
        }else {
          return null
        }
      }, null)
    };
    return array_map_seq.call(null, 0)
  }else {
    return null
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return self__.cnt
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_map.call(null, coll, other)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentArrayMap.EMPTY, self__.meta)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var idx = cljs.core.array_map_index_of.call(null, coll, k);
  if(idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if(new_len === 0) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll)
    }else {
      var new_arr = cljs.core.make_array.call(null, new_len);
      var s = 0;
      var d = 0;
      while(true) {
        if(s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null)
        }else {
          if(cljs.core._EQ_.call(null, k, self__.arr[s])) {
            var G__3778 = s + 2;
            var G__3779 = d;
            s = G__3778;
            d = G__3779;
            continue
          }else {
            if("\ufdd0'else") {
              new_arr[d] = self__.arr[s];
              new_arr[d + 1] = self__.arr[s + 1];
              var G__3780 = s + 2;
              var G__3781 = d + 2;
              s = G__3780;
              d = G__3781;
              continue
            }else {
              return null
            }
          }
        }
        break
      }
    }
  }else {
    return coll
  }
};
cljs.core.PersistentArrayMap;
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], null);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 16;
cljs.core.PersistentArrayMap.fromArrays = function(ks, vs) {
  var len = cljs.core.count.call(null, ks);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
  while(true) {
    if(i < len) {
      var G__3782 = i + 1;
      var G__3783 = cljs.core.assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__3782;
      out = G__3783;
      continue
    }else {
      return cljs.core.persistent_BANG_.call(null, out)
    }
    break
  }
};
goog.provide("cljs.core.TransientArrayMap");
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/TransientArrayMap")
};
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/TransientArrayMap")
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  if(cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll, key);
    if(idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__3784 = self__.arr;
      G__3784.pop();
      G__3784.pop();
      G__3784;
      self__.len = self__.len - 2
    }else {
    }
    return tcoll
  }else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  if(cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll, key);
    if(idx === -1) {
      if(self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll
      }else {
        return cljs.core.assoc_BANG_.call(null, cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val)
      }
    }else {
      if(val === self__.arr[idx + 1]) {
        return tcoll
      }else {
        self__.arr[idx + 1] = val;
        return tcoll
      }
    }
  }else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  if(cljs.core.truth_(self__.editable_QMARK_)) {
    if(function() {
      var G__3785 = o;
      if(G__3785) {
        if(function() {
          var or__3824__auto__ = G__3785.cljs$lang$protocol_mask$partition0$ & 2048;
          if(or__3824__auto__) {
            return or__3824__auto__
          }else {
            return G__3785.cljs$core$IMapEntry$
          }
        }()) {
          return true
        }else {
          if(!G__3785.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.type_satisfies_.call(null, cljs.core.IMapEntry, G__3785)
          }else {
            return false
          }
        }
      }else {
        return cljs.core.type_satisfies_.call(null, cljs.core.IMapEntry, G__3785)
      }
    }()) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, cljs.core.key.call(null, o), cljs.core.val.call(null, o))
    }else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while(true) {
        var temp__3971__auto__ = cljs.core.first.call(null, es);
        if(cljs.core.truth_(temp__3971__auto__)) {
          var e = temp__3971__auto__;
          var G__3786 = cljs.core.next.call(null, es);
          var G__3787 = tcoll__$1.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll__$1, cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__3786;
          tcoll__$1 = G__3787;
          continue
        }else {
          return tcoll__$1
        }
        break
      }
    }
  }else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  if(cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, self__.len, 2), self__.arr, null)
  }else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  return tcoll.cljs$core$ILookup$_lookup$arity$3(tcoll, k, null)
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  if(cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll, k);
    if(idx === -1) {
      return not_found
    }else {
      return self__.arr[idx + 1]
    }
  }else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  if(cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot.call(null, self__.len, 2)
  }else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientArrayMap;
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$.call(null, cljs.core.ObjMap.EMPTY);
  var i = 0;
  while(true) {
    if(i < len) {
      var G__3788 = cljs.core.assoc_BANG_.call(null, out, arr[i], arr[i + 1]);
      var G__3789 = i + 2;
      out = G__3788;
      i = G__3789;
      continue
    }else {
      return out
    }
    break
  }
};
goog.provide("cljs.core.Box");
cljs.core.Box = function(val) {
  this.val = val
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorPrSeq = function(this__2317__auto__) {
  return cljs.core.list.call(null, "cljs.core/Box")
};
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__2317__auto__, writer__2318__auto__) {
  return cljs.core._write.call(null, writer__2318__auto__, "cljs.core/Box")
};
cljs.core.Box;
cljs.core.key_test = function key_test(key, other) {
  if(goog.isString(key)) {
    return key === other
  }else {
    return cljs.core._EQ_.call(null, key, other)
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__3792 = arr.slice();
    G__3792[i] = a;
    return G__3792
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__3793 = arr.slice();
    G__3793[i] = a;
    G__3793[j] = b;
    return G__3793
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$lang$arity$3 = clone_and_set__3;
  clone_and_set.cljs$lang$arity$5 = clone_and_set__5;
  return clone_and_set
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = cljs.core.make_array.call(null, arr.length - 2);
  cljs.core.array_copy.call(null, arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy.call(null, arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count.call(null, bitmap & bit - 1)
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31)
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$lang$arity$4 = edit_and_set__4;
  edit_and_set.cljs$lang$arity$6 = edit_and_set__6;
  return edit_and_set
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while(true) {
    if(i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if(!(k == null)) {
          return f.call(null, init__$1, k, arr[i + 1])
        }else {
          var node = arr[i + 1];
          if(!(node == null)) {
            return node.kv_reduce(f, init__$1)
          }else {
            return init__$1
          }
        }
      }();
      if(cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2)
      }else {
        var G__3794 = i + 2;
        var G__3795 = init__$2;
        i = G__3794;
        init__$1 = G__3795;
        continue
      }
    }else {
      return init__$1
    }
    break
  }
};
goog.provide("cljs.core.BitmapIndexedNode");
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/BitmapIndexedNode")
};
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/BitmapIndexedNode")
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if(self__.bitmap === bit) {
    return null
  }else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy.call(null, earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if(2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward.call(null, earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable
    }else {
      if(n >= 16) {
        var nodes = cljs.core.make_array.call(null, 32);
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i = 0;
        var j = 0;
        while(true) {
          if(i < 32) {
            if((self__.bitmap >>> i & 1) === 0) {
              var G__3796 = i + 1;
              var G__3797 = j;
              i = G__3796;
              j = G__3797;
              continue
            }else {
              nodes[i] = !(self__.arr[j] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash.call(null, self__.arr[j]), self__.arr[j], self__.arr[j + 1], added_leaf_QMARK_) : self__.arr[j + 1];
              var G__3798 = i + 1;
              var G__3799 = j + 2;
              i = G__3798;
              j = G__3799;
              continue
            }
          }else {
          }
          break
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes)
      }else {
        if("\ufdd0'else") {
          var new_arr = cljs.core.make_array.call(null, 2 * (n + 4));
          cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
          new_arr[2 * idx] = key;
          new_arr[2 * idx + 1] = val;
          cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
          added_leaf_QMARK_.val = true;
          var editable = inode.ensure_editable(edit__$1);
          editable.arr = new_arr;
          editable.bitmap = editable.bitmap | bit;
          return editable
        }else {
          return null
        }
      }
    }
  }else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if(key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if(n === val_or_node) {
        return inode
      }else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n)
      }
    }else {
      if(cljs.core.key_test.call(null, key, key_or_nil)) {
        if(val === val_or_node) {
          return inode
        }else {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, val)
        }
      }else {
        if("\ufdd0'else") {
          added_leaf_QMARK_.val = true;
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, edit__$1, shift + 5, key_or_nil, val_or_node, hash, key, val))
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr)
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if((self__.bitmap & bit) === 0) {
    return inode
  }else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if(key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if(n === val_or_node) {
        return inode
      }else {
        if(!(n == null)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n)
        }else {
          if(self__.bitmap === bit) {
            return null
          }else {
            if("\ufdd0'else") {
              return inode.edit_and_remove_pair(edit__$1, bit, idx)
            }else {
              return null
            }
          }
        }
      }
    }else {
      if(cljs.core.key_test.call(null, key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx)
      }else {
        if("\ufdd0'else") {
          return inode
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if(e === self__.edit) {
    return inode
  }else {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    var new_arr = cljs.core.make_array.call(null, n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr)
  }
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init)
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if((self__.bitmap & bit) === 0) {
    return not_found
  }else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if(key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found)
    }else {
      if(cljs.core.key_test.call(null, key, key_or_nil)) {
        return cljs.core.PersistentVector.fromArray([key_or_nil, val_or_node], true)
      }else {
        if("\ufdd0'else") {
          return not_found
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if((self__.bitmap & bit) === 0) {
    return inode
  }else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if(key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if(n === val_or_node) {
        return inode
      }else {
        if(!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n))
        }else {
          if(self__.bitmap === bit) {
            return null
          }else {
            if("\ufdd0'else") {
              return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx))
            }else {
              return null
            }
          }
        }
      }
    }else {
      if(cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx))
      }else {
        if("\ufdd0'else") {
          return inode
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if(n >= 16) {
      var nodes = cljs.core.make_array.call(null, 32);
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i = 0;
      var j = 0;
      while(true) {
        if(i < 32) {
          if((self__.bitmap >>> i & 1) === 0) {
            var G__3800 = i + 1;
            var G__3801 = j;
            i = G__3800;
            j = G__3801;
            continue
          }else {
            nodes[i] = !(self__.arr[j] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash.call(null, self__.arr[j]), self__.arr[j], self__.arr[j + 1], added_leaf_QMARK_) : self__.arr[j + 1];
            var G__3802 = i + 1;
            var G__3803 = j + 2;
            i = G__3802;
            j = G__3803;
            continue
          }
        }else {
        }
        break
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes)
    }else {
      var new_arr = cljs.core.make_array.call(null, 2 * (n + 1));
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr)
    }
  }else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if(key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if(n === val_or_node) {
        return inode
      }else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n))
      }
    }else {
      if(cljs.core.key_test.call(null, key, key_or_nil)) {
        if(val === val_or_node) {
          return inode
        }else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, val))
        }
      }else {
        if("\ufdd0'else") {
          added_leaf_QMARK_.val = true;
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, shift + 5, key_or_nil, val_or_node, hash, key, val)))
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if((self__.bitmap & bit) === 0) {
    return not_found
  }else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if(key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found)
    }else {
      if(cljs.core.key_test.call(null, key, key_or_nil)) {
        return val_or_node
      }else {
        if("\ufdd0'else") {
          return not_found
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode;
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, cljs.core.make_array.call(null, 0));
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = 2 * (array_node.cnt - 1);
  var new_arr = cljs.core.make_array.call(null, len);
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while(true) {
    if(i < len) {
      if(function() {
        var and__3822__auto__ = !(i === idx);
        if(and__3822__auto__) {
          return!(arr[i] == null)
        }else {
          return and__3822__auto__
        }
      }()) {
        new_arr[j] = arr[i];
        var G__3804 = i + 1;
        var G__3805 = j + 2;
        var G__3806 = bitmap | 1 << i;
        i = G__3804;
        j = G__3805;
        bitmap = G__3806;
        continue
      }else {
        var G__3807 = i + 1;
        var G__3808 = j;
        var G__3809 = bitmap;
        i = G__3807;
        j = G__3808;
        bitmap = G__3809;
        continue
      }
    }else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr)
    }
    break
  }
};
goog.provide("cljs.core.ArrayNode");
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/ArrayNode")
};
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/ArrayNode")
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if(node == null) {
    var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable
  }else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if(n === node) {
      return inode
    }else {
      return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n)
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.call(null, self__.arr)
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if(node == null) {
    return inode
  }else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if(n === node) {
      return inode
    }else {
      if(n == null) {
        if(self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, edit__$1, idx)
        }else {
          var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable
        }
      }else {
        if("\ufdd0'else") {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n)
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if(e === self__.edit) {
    return inode
  }else {
    return new cljs.core.ArrayNode(e, self__.cnt, self__.arr.slice())
  }
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while(true) {
    if(i < len) {
      var node = self__.arr[i];
      if(!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if(cljs.core.reduced_QMARK_.call(null, init__$2)) {
          return cljs.core.deref.call(null, init__$2)
        }else {
          var G__3810 = i + 1;
          var G__3811 = init__$2;
          i = G__3810;
          init__$1 = G__3811;
          continue
        }
      }else {
        return null
      }
    }else {
      return init__$1
    }
    break
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if(!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found)
  }else {
    return not_found
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if(!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if(n === node) {
      return inode
    }else {
      if(n == null) {
        if(self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, null, idx)
        }else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.call(null, self__.arr, idx, n))
        }
      }else {
        if("\ufdd0'else") {
          return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n))
        }else {
          return null
        }
      }
    }
  }else {
    return inode
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if(node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.call(null, self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)))
  }else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if(n === node) {
      return inode
    }else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n))
    }
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if(!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found)
  }else {
    return not_found
  }
};
cljs.core.ArrayNode;
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while(true) {
    if(i < lim) {
      if(cljs.core.key_test.call(null, key, arr[i])) {
        return i
      }else {
        var G__3812 = i + 2;
        i = G__3812;
        continue
      }
    }else {
      return-1
    }
    break
  }
};
goog.provide("cljs.core.HashCollisionNode");
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/HashCollisionNode")
};
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/HashCollisionNode")
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if(hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if(idx === -1) {
      if(self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable
      }else {
        var len = self__.arr.length;
        var new_arr = cljs.core.make_array.call(null, len + 2);
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr)
      }
    }else {
      if(self__.arr[idx + 1] === val) {
        return inode
      }else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx + 1, val)
      }
    }
  }else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_)
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr)
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if(idx === -1) {
    return inode
  }else {
    removed_leaf_QMARK_[0] = true;
    if(self__.cnt === 1) {
      return null
    }else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if(e === self__.edit) {
    return inode
  }else {
    var new_arr = cljs.core.make_array.call(null, 2 * (self__.cnt + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr)
  }
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init)
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if(idx < 0) {
    return not_found
  }else {
    if(cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return cljs.core.PersistentVector.fromArray([self__.arr[idx], self__.arr[idx + 1]], true)
    }else {
      if("\ufdd0'else") {
        return not_found
      }else {
        return null
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if(idx === -1) {
    return inode
  }else {
    if(self__.cnt === 1) {
      return null
    }else {
      if("\ufdd0'else") {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair.call(null, self__.arr, cljs.core.quot.call(null, idx, 2)))
      }else {
        return null
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if(hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if(idx === -1) {
      var len = self__.arr.length;
      var new_arr = cljs.core.make_array.call(null, len + 2);
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr)
    }else {
      if(cljs.core._EQ_.call(null, self__.arr[idx], val)) {
        return inode
      }else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx + 1, val))
      }
    }
  }else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_)
  }
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if(idx < 0) {
    return not_found
  }else {
    if(cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return self__.arr[idx + 1]
    }else {
      if("\ufdd0'else") {
        return not_found
      }else {
        return null
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if(e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode
  }else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array)
  }
};
cljs.core.HashCollisionNode;
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if(key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2])
    }else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_)
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if(key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2])
    }else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_)
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$lang$arity$6 = create_node__6;
  create_node.cljs$lang$arity$7 = create_node__7;
  return create_node
}();
goog.provide("cljs.core.NodeSeq");
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/NodeSeq")
};
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/NodeSeq")
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return cljs.core.cons.call(null, o, coll)
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  return this$
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  if(self__.s == null) {
    return cljs.core.PersistentVector.fromArray([self__.nodes[self__.i], self__.nodes[self__.i + 1]], true)
  }else {
    return cljs.core.first.call(null, self__.s)
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  if(self__.s == null) {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i + 2, null)
  }else {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s))
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash)
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.NodeSeq;
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.call(null, nodes, 0, null)
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if(s == null) {
      var len = nodes.length;
      var j = i;
      while(true) {
        if(j < len) {
          if(!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null)
          }else {
            var temp__3971__auto__ = nodes[j + 1];
            if(cljs.core.truth_(temp__3971__auto__)) {
              var node = temp__3971__auto__;
              var temp__3971__auto____$1 = node.inode_seq();
              if(cljs.core.truth_(temp__3971__auto____$1)) {
                var node_seq = temp__3971__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null)
              }else {
                var G__3813 = j + 2;
                j = G__3813;
                continue
              }
            }else {
              var G__3814 = j + 2;
              j = G__3814;
              continue
            }
          }
        }else {
          return null
        }
        break
      }
    }else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null)
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$lang$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$lang$arity$3 = create_inode_seq__3;
  return create_inode_seq
}();
goog.provide("cljs.core.ArrayNodeSeq");
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/ArrayNodeSeq")
};
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/ArrayNodeSeq")
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return cljs.core.cons.call(null, o, coll)
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  return this$
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.first.call(null, self__.s)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.create_array_node_seq.call(null, null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s))
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.ArrayNodeSeq;
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.call(null, null, nodes, 0, null)
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if(s == null) {
      var len = nodes.length;
      var j = i;
      while(true) {
        if(j < len) {
          var temp__3971__auto__ = nodes[j];
          if(cljs.core.truth_(temp__3971__auto__)) {
            var nj = temp__3971__auto__;
            var temp__3971__auto____$1 = nj.inode_seq();
            if(cljs.core.truth_(temp__3971__auto____$1)) {
              var ns = temp__3971__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null)
            }else {
              var G__3815 = j + 1;
              j = G__3815;
              continue
            }
          }else {
            var G__3816 = j + 1;
            j = G__3816;
            continue
          }
        }else {
          return null
        }
        break
      }
    }else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null)
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$lang$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$lang$arity$4 = create_array_node_seq__4;
  return create_array_node_seq
}();
goog.provide("cljs.core.PersistentHashMap");
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/PersistentHashMap")
};
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/PersistentHashMap")
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  return new cljs.core.TransientHashMap({}, self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val)
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_imap.call(null, coll);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, null)
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  if(k == null) {
    if(self__.has_nil_QMARK_) {
      return self__.nil_val
    }else {
      return not_found
    }
  }else {
    if(self__.root == null) {
      return not_found
    }else {
      if("\ufdd0'else") {
        return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found)
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  if(k == null) {
    if(function() {
      var and__3822__auto__ = self__.has_nil_QMARK_;
      if(and__3822__auto__) {
        return v === self__.nil_val
      }else {
        return and__3822__auto__
      }
    }()) {
      return coll
    }else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null)
    }
  }else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
    if(new_root === self__.root) {
      return coll
    }else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null)
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  if(k == null) {
    return self__.has_nil_QMARK_
  }else {
    if(self__.root == null) {
      return false
    }else {
      if("\ufdd0'else") {
        return!(self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel)
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__3821 = null;
  var G__3821__2 = function(this_sym3819, k) {
    var self__ = this;
    var this_sym3819__$1 = this;
    var coll = this_sym3819__$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(coll, k)
  };
  var G__3821__3 = function(this_sym3820, k, not_found) {
    var self__ = this;
    var this_sym3820__$1 = this;
    var coll = this_sym3820__$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, not_found)
  };
  G__3821 = function(this_sym3820, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3821__2.call(this, this_sym3820, k);
      case 3:
        return G__3821__3.call(this, this_sym3820, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__3821
}();
cljs.core.PersistentHashMap.prototype.apply = function(this_sym3817, args3818) {
  var self__ = this;
  return this_sym3817.call.apply(this_sym3817, [this_sym3817].concat(args3818.slice()))
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.call(null, init, null, self__.nil_val) : init;
  if(cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1)
  }else {
    if(!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1)
    }else {
      if("\ufdd0'else") {
        return init__$1
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  if(cljs.core.vector_QMARK_.call(null, entry)) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll, entry)
  }
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  if(self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if(self__.has_nil_QMARK_) {
      return cljs.core.cons.call(null, cljs.core.PersistentVector.fromArray([null, self__.nil_val], true), s)
    }else {
      return s
    }
  }else {
    return null
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return self__.cnt
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_map.call(null, coll, other)
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash)
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, self__.meta)
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  if(k == null) {
    if(self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null)
    }else {
      return coll
    }
  }else {
    if(self__.root == null) {
      return coll
    }else {
      if("\ufdd0'else") {
        var new_root = self__.root.inode_without(0, cljs.core.hash.call(null, k), k);
        if(new_root === self__.root) {
          return coll
        }else {
          return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null)
        }
      }else {
        return null
      }
    }
  }
};
cljs.core.PersistentHashMap;
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, 0);
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while(true) {
    if(i < len) {
      var G__3822 = i + 1;
      var G__3823 = cljs.core.assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__3822;
      out = G__3823;
      continue
    }else {
      return cljs.core.persistent_BANG_.call(null, out)
    }
    break
  }
};
goog.provide("cljs.core.TransientHashMap");
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/TransientHashMap")
};
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/TransientHashMap")
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  return tcoll.without_BANG_(key)
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  return tcoll.assoc_BANG_(key, val)
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  return tcoll.conj_BANG_(val)
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  return tcoll.persistent_BANG_()
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  if(k == null) {
    if(self__.has_nil_QMARK_) {
      return self__.nil_val
    }else {
      return null
    }
  }else {
    if(self__.root == null) {
      return null
    }else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k)
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  if(k == null) {
    if(self__.has_nil_QMARK_) {
      return self__.nil_val
    }else {
      return not_found
    }
  }else {
    if(self__.root == null) {
      return not_found
    }else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found)
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  if(self__.edit) {
    return self__.count
  }else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if(self__.edit) {
    if(function() {
      var G__3824 = o;
      if(G__3824) {
        if(function() {
          var or__3824__auto__ = G__3824.cljs$lang$protocol_mask$partition0$ & 2048;
          if(or__3824__auto__) {
            return or__3824__auto__
          }else {
            return G__3824.cljs$core$IMapEntry$
          }
        }()) {
          return true
        }else {
          if(!G__3824.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.type_satisfies_.call(null, cljs.core.IMapEntry, G__3824)
          }else {
            return false
          }
        }
      }else {
        return cljs.core.type_satisfies_.call(null, cljs.core.IMapEntry, G__3824)
      }
    }()) {
      return tcoll.assoc_BANG_(cljs.core.key.call(null, o), cljs.core.val.call(null, o))
    }else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while(true) {
        var temp__3971__auto__ = cljs.core.first.call(null, es);
        if(cljs.core.truth_(temp__3971__auto__)) {
          var e = temp__3971__auto__;
          var G__3825 = cljs.core.next.call(null, es);
          var G__3826 = tcoll__$1.assoc_BANG_(cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__3825;
          tcoll__$1 = G__3826;
          continue
        }else {
          return tcoll__$1
        }
        break
      }
    }
  }else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if(self__.edit) {
    if(k == null) {
      if(self__.nil_val === v) {
      }else {
        self__.nil_val = v
      }
      if(self__.has_nil_QMARK_) {
      }else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true
      }
      return tcoll
    }else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
      if(node === self__.root) {
      }else {
        self__.root = node
      }
      if(added_leaf_QMARK_.val) {
        self__.count = self__.count + 1
      }else {
      }
      return tcoll
    }
  }else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if(self__.edit) {
    if(k == null) {
      if(self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll
      }else {
        return tcoll
      }
    }else {
      if(self__.root == null) {
        return tcoll
      }else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, removed_leaf_QMARK_);
        if(node === self__.root) {
        }else {
          self__.root = node
        }
        if(cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1
        }else {
        }
        return tcoll
      }
    }
  }else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if(self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null)
  }else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientHashMap;
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while(true) {
    if(!(t == null)) {
      var G__3827 = ascending_QMARK_ ? t.left : t.right;
      var G__3828 = cljs.core.conj.call(null, stack__$1, t);
      t = G__3827;
      stack__$1 = G__3828;
      continue
    }else {
      return stack__$1
    }
    break
  }
};
goog.provide("cljs.core.PersistentTreeMapSeq");
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850574
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/PersistentTreeMapSeq")
};
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/PersistentTreeMapSeq")
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return cljs.core.cons.call(null, o, coll)
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  return this$
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  if(self__.cnt < 0) {
    return cljs.core.count.call(null, cljs.core.next.call(null, coll)) + 1
  }else {
    return self__.cnt
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  return cljs.core.peek.call(null, self__.stack)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var t = cljs.core.first.call(null, self__.stack);
  var next_stack = cljs.core.tree_map_seq_push.call(null, self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next.call(null, self__.stack), self__.ascending_QMARK_);
  if(!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.PersistentTreeMapSeq;
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push.call(null, tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null)
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, ins)) {
    if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, ins.left)) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null)
    }else {
      if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, ins.right)) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null)
      }else {
        if("\ufdd0'else") {
          return new cljs.core.BlackNode(key, val, ins, right, null)
        }else {
          return null
        }
      }
    }
  }else {
    return new cljs.core.BlackNode(key, val, ins, right, null)
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, ins)) {
    if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, ins.right)) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null)
    }else {
      if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, ins.left)) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null)
      }else {
        if("\ufdd0'else") {
          return new cljs.core.BlackNode(key, val, left, ins, null)
        }else {
          return null
        }
      }
    }
  }else {
    return new cljs.core.BlackNode(key, val, left, ins, null)
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, del)) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null)
  }else {
    if(cljs.core.instance_QMARK_.call(null, cljs.core.BlackNode, right)) {
      return cljs.core.balance_right.call(null, key, val, del, right.redden())
    }else {
      if(function() {
        var and__3822__auto__ = cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, right);
        if(and__3822__auto__) {
          return cljs.core.instance_QMARK_.call(null, cljs.core.BlackNode, right.left)
        }else {
          return and__3822__auto__
        }
      }()) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right.call(null, right.key, right.val, right.left.right, right.right.redden()), null)
      }else {
        if("\ufdd0'else") {
          throw new Error("red-black tree invariant violation");
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, del)) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null)
  }else {
    if(cljs.core.instance_QMARK_.call(null, cljs.core.BlackNode, left)) {
      return cljs.core.balance_left.call(null, key, val, left.redden(), del)
    }else {
      if(function() {
        var and__3822__auto__ = cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, left);
        if(and__3822__auto__) {
          return cljs.core.instance_QMARK_.call(null, cljs.core.BlackNode, left.right)
        }else {
          return and__3822__auto__
        }
      }()) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left.call(null, left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null)
      }else {
        if("\ufdd0'else") {
          throw new Error("red-black tree invariant violation");
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = f.call(null, init, node.key, node.val);
  if(cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1)
  }else {
    var init__$2 = !(node.left == null) ? tree_map_kv_reduce.call(null, node.left, f, init__$1) : init__$1;
    if(cljs.core.reduced_QMARK_.call(null, init__$2)) {
      return cljs.core.deref.call(null, init__$2)
    }else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce.call(null, node.right, f, init__$2) : init__$2;
      if(cljs.core.reduced_QMARK_.call(null, init__$3)) {
        return cljs.core.deref.call(null, init__$3)
      }else {
        return init__$3
      }
    }
  }
};
goog.provide("cljs.core.BlackNode");
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/BlackNode")
};
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/BlackNode")
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  return node.cljs$core$IIndexed$_nth$arity$3(node, k, null)
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  return node.cljs$core$IIndexed$_nth$arity$3(node, k, not_found)
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  return cljs.core.assoc.call(null, cljs.core.PersistentVector.fromArray([self__.key, self__.val], true), k, v)
};
cljs.core.BlackNode.prototype.call = function() {
  var G__3833 = null;
  var G__3833__2 = function(this_sym3831, k) {
    var self__ = this;
    var this_sym3831__$1 = this;
    var node = this_sym3831__$1;
    return node.cljs$core$ILookup$_lookup$arity$2(node, k)
  };
  var G__3833__3 = function(this_sym3832, k, not_found) {
    var self__ = this;
    var this_sym3832__$1 = this;
    var node = this_sym3832__$1;
    return node.cljs$core$ILookup$_lookup$arity$3(node, k, not_found)
  };
  G__3833 = function(this_sym3832, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3833__2.call(this, this_sym3832, k);
      case 3:
        return G__3833__3.call(this, this_sym3832, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__3833
}();
cljs.core.BlackNode.prototype.apply = function(this_sym3829, args3830) {
  var self__ = this;
  return this_sym3829.call.apply(this_sym3829, [this_sym3829].concat(args3830.slice()))
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  return cljs.core.PersistentVector.fromArray([self__.key, self__.val, o], true)
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  return self__.key
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  return self__.val
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node)
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null)
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del.call(null, self__.key, self__.val, self__.left, del)
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null)
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init)
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del.call(null, self__.key, self__.val, del, self__.right)
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node)
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null)
};
cljs.core.BlackNode.prototype.toString = function() {
  var G__3834 = null;
  var G__3834__0 = function() {
    var self__ = this;
    var this$ = this;
    return cljs.core.pr_str.call(null, this$)
  };
  G__3834 = function() {
    switch(arguments.length) {
      case 0:
        return G__3834__0.call(this)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__3834
}();
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null)
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, node, f)
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, node, f, start)
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  return cljs.core.list.call(null, self__.key, self__.val)
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  return 2
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  return self__.val
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  return cljs.core.PersistentVector.fromArray([self__.key], true)
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  return cljs.core._assoc_n.call(null, cljs.core.PersistentVector.fromArray([self__.key, self__.val], true), n, v)
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.fromArray([self__.key, self__.val], true), meta)
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  return null
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  if(n === 0) {
    return self__.key
  }else {
    if(n === 1) {
      return self__.val
    }else {
      if("\ufdd0'else") {
        return null
      }else {
        return null
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  if(n === 0) {
    return self__.key
  }else {
    if(n === 1) {
      return self__.val
    }else {
      if("\ufdd0'else") {
        return not_found
      }else {
        return null
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  return cljs.core.PersistentVector.EMPTY
};
cljs.core.BlackNode;
goog.provide("cljs.core.RedNode");
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/RedNode")
};
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/RedNode")
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_coll.call(null, coll);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  return node.cljs$core$IIndexed$_nth$arity$3(node, k, null)
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  return node.cljs$core$IIndexed$_nth$arity$3(node, k, not_found)
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  return cljs.core.assoc.call(null, cljs.core.PersistentVector.fromArray([self__.key, self__.val], true), k, v)
};
cljs.core.RedNode.prototype.call = function() {
  var G__3839 = null;
  var G__3839__2 = function(this_sym3837, k) {
    var self__ = this;
    var this_sym3837__$1 = this;
    var node = this_sym3837__$1;
    return node.cljs$core$ILookup$_lookup$arity$2(node, k)
  };
  var G__3839__3 = function(this_sym3838, k, not_found) {
    var self__ = this;
    var this_sym3838__$1 = this;
    var node = this_sym3838__$1;
    return node.cljs$core$ILookup$_lookup$arity$3(node, k, not_found)
  };
  G__3839 = function(this_sym3838, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3839__2.call(this, this_sym3838, k);
      case 3:
        return G__3839__3.call(this, this_sym3838, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__3839
}();
cljs.core.RedNode.prototype.apply = function(this_sym3835, args3836) {
  var self__ = this;
  return this_sym3835.call.apply(this_sym3835, [this_sym3835].concat(args3836.slice()))
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  return cljs.core.PersistentVector.fromArray([self__.key, self__.val, o], true)
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  return self__.key
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  return self__.val
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null)
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null)
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null)
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init)
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null)
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null)
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, self__.left)) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null)
  }else {
    if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, self__.right)) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null)
    }else {
      if("\ufdd0'else") {
        return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null)
      }else {
        return null
      }
    }
  }
};
cljs.core.RedNode.prototype.toString = function() {
  var G__3840 = null;
  var G__3840__0 = function() {
    var self__ = this;
    var this$ = this;
    return cljs.core.pr_str.call(null, this$)
  };
  G__3840 = function() {
    switch(arguments.length) {
      case 0:
        return G__3840__0.call(this)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__3840
}();
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, self__.right)) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null)
  }else {
    if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, self__.left)) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null)
    }else {
      if("\ufdd0'else") {
        return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null)
      }else {
        return null
      }
    }
  }
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null)
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, node, f)
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, node, f, start)
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  return cljs.core.list.call(null, self__.key, self__.val)
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  return 2
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  return self__.val
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  return cljs.core.PersistentVector.fromArray([self__.key], true)
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  return cljs.core._assoc_n.call(null, cljs.core.PersistentVector.fromArray([self__.key, self__.val], true), n, v)
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, coll, other)
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.fromArray([self__.key, self__.val], true), meta)
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  return null
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  if(n === 0) {
    return self__.key
  }else {
    if(n === 1) {
      return self__.val
    }else {
      if("\ufdd0'else") {
        return null
      }else {
        return null
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  if(n === 0) {
    return self__.key
  }else {
    if(n === 1) {
      return self__.val
    }else {
      if("\ufdd0'else") {
        return not_found
      }else {
        return null
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  return cljs.core.PersistentVector.EMPTY
};
cljs.core.RedNode;
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if(tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null)
  }else {
    var c = comp.call(null, k, tree.key);
    if(c === 0) {
      found[0] = tree;
      return null
    }else {
      if(c < 0) {
        var ins = tree_map_add.call(null, comp, tree.left, k, v, found);
        if(!(ins == null)) {
          return tree.add_left(ins)
        }else {
          return null
        }
      }else {
        if("\ufdd0'else") {
          var ins = tree_map_add.call(null, comp, tree.right, k, v, found);
          if(!(ins == null)) {
            return tree.add_right(ins)
          }else {
            return null
          }
        }else {
          return null
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if(left == null) {
    return right
  }else {
    if(right == null) {
      return left
    }else {
      if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, left)) {
        if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, right)) {
          var app = tree_map_append.call(null, left.right, right.left);
          if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, app)) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null)
          }else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null)
          }
        }else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append.call(null, left.right, right), null)
        }
      }else {
        if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, right)) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append.call(null, left, right.left), right.right, null)
        }else {
          if("\ufdd0'else") {
            var app = tree_map_append.call(null, left.right, right.left);
            if(cljs.core.instance_QMARK_.call(null, cljs.core.RedNode, app)) {
              return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null)
            }else {
              return cljs.core.balance_left_del.call(null, left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null))
            }
          }else {
            return null
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if(!(tree == null)) {
    var c = comp.call(null, k, tree.key);
    if(c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append.call(null, tree.left, tree.right)
    }else {
      if(c < 0) {
        var del = tree_map_remove.call(null, comp, tree.left, k, found);
        if(function() {
          var or__3824__auto__ = !(del == null);
          if(or__3824__auto__) {
            return or__3824__auto__
          }else {
            return!(found[0] == null)
          }
        }()) {
          if(cljs.core.instance_QMARK_.call(null, cljs.core.BlackNode, tree.left)) {
            return cljs.core.balance_left_del.call(null, tree.key, tree.val, del, tree.right)
          }else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null)
          }
        }else {
          return null
        }
      }else {
        if("\ufdd0'else") {
          var del = tree_map_remove.call(null, comp, tree.right, k, found);
          if(function() {
            var or__3824__auto__ = !(del == null);
            if(or__3824__auto__) {
              return or__3824__auto__
            }else {
              return!(found[0] == null)
            }
          }()) {
            if(cljs.core.instance_QMARK_.call(null, cljs.core.BlackNode, tree.right)) {
              return cljs.core.balance_right_del.call(null, tree.key, tree.val, tree.left, del)
            }else {
              return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null)
            }
          }else {
            return null
          }
        }else {
          return null
        }
      }
    }
  }else {
    return null
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.call(null, k, tk);
  if(c === 0) {
    return tree.replace(tk, v, tree.left, tree.right)
  }else {
    if(c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace.call(null, comp, tree.left, k, v), tree.right)
    }else {
      if("\ufdd0'else") {
        return tree.replace(tk, tree.val, tree.left, tree_map_replace.call(null, comp, tree.right, k, v))
      }else {
        return null
      }
    }
  }
};
goog.provide("cljs.core.PersistentTreeMap");
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 418776847
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/PersistentTreeMap")
};
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/PersistentTreeMap")
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_imap.call(null, coll);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, null)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var n = coll.entry_at(k);
  if(!(n == null)) {
    return n.val
  }else {
    return not_found
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var found = [null];
  var t = cljs.core.tree_map_add.call(null, self__.comp, self__.tree, k, v, found);
  if(t == null) {
    var found_node = cljs.core.nth.call(null, found, 0);
    if(cljs.core._EQ_.call(null, v, found_node.val)) {
      return coll
    }else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace.call(null, self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null)
    }
  }else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null)
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  return!(coll.entry_at(k) == null)
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__3845 = null;
  var G__3845__2 = function(this_sym3843, k) {
    var self__ = this;
    var this_sym3843__$1 = this;
    var coll = this_sym3843__$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(coll, k)
  };
  var G__3845__3 = function(this_sym3844, k, not_found) {
    var self__ = this;
    var this_sym3844__$1 = this;
    var coll = this_sym3844__$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, not_found)
  };
  G__3845 = function(this_sym3844, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3845__2.call(this, this_sym3844, k);
      case 3:
        return G__3845__3.call(this, this_sym3844, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__3845
}();
cljs.core.PersistentTreeMap.prototype.apply = function(this_sym3841, args3842) {
  var self__ = this;
  return this_sym3841.call.apply(this_sym3841, [this_sym3841].concat(args3842.slice()))
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  if(!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce.call(null, self__.tree, f, init)
  }else {
    return init
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  if(cljs.core.vector_QMARK_.call(null, entry)) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll, entry)
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  if(self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, false, self__.cnt)
  }else {
    return null
  }
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while(true) {
    if(!(t == null)) {
      var c = self__.comp.call(null, k, t.key);
      if(c === 0) {
        return t
      }else {
        if(c < 0) {
          var G__3846 = t.left;
          t = G__3846;
          continue
        }else {
          if("\ufdd0'else") {
            var G__3847 = t.right;
            t = G__3847;
            continue
          }else {
            return null
          }
        }
      }
    }else {
      return null
    }
    break
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  if(self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, ascending_QMARK_, self__.cnt)
  }else {
    return null
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  if(self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while(true) {
      if(!(t == null)) {
        var c = self__.comp.call(null, k, t.key);
        if(c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.call(null, stack, t), ascending_QMARK_, -1, null)
        }else {
          if(cljs.core.truth_(ascending_QMARK_)) {
            if(c < 0) {
              var G__3848 = cljs.core.conj.call(null, stack, t);
              var G__3849 = t.left;
              stack = G__3848;
              t = G__3849;
              continue
            }else {
              var G__3850 = stack;
              var G__3851 = t.right;
              stack = G__3850;
              t = G__3851;
              continue
            }
          }else {
            if("\ufdd0'else") {
              if(c > 0) {
                var G__3852 = cljs.core.conj.call(null, stack, t);
                var G__3853 = t.right;
                stack = G__3852;
                t = G__3853;
                continue
              }else {
                var G__3854 = stack;
                var G__3855 = t.left;
                stack = G__3854;
                t = G__3855;
                continue
              }
            }else {
              return null
            }
          }
        }
      }else {
        if(stack == null) {
          return null
        }else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null)
        }
      }
      break
    }
  }else {
    return null
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  return cljs.core.key.call(null, entry)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  return self__.comp
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  if(self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, true, self__.cnt)
  }else {
    return null
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return self__.cnt
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  return cljs.core.equiv_map.call(null, coll, other)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeMap.EMPTY, self__.meta)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var found = [null];
  var t = cljs.core.tree_map_remove.call(null, self__.comp, self__.tree, k, found);
  if(t == null) {
    if(cljs.core.nth.call(null, found, 0) == null) {
      return coll
    }else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null)
    }
  }else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null)
  }
};
cljs.core.PersistentTreeMap;
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, 0);
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
    while(true) {
      if(in$) {
        var G__3856 = cljs.core.nnext.call(null, in$);
        var G__3857 = cljs.core.assoc_BANG_.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__3856;
        out = G__3857;
        continue
      }else {
        return cljs.core.persistent_BANG_.call(null, out)
      }
      break
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if(goog.isDef(var_args)) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return hash_map__delegate.call(this, keyvals)
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__3858) {
    var keyvals = cljs.core.seq(arglist__3858);
    return hash_map__delegate(keyvals)
  };
  hash_map.cljs$lang$arity$variadic = hash_map__delegate;
  return hash_map
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, cljs.core.count.call(null, keyvals), 2), cljs.core.apply.call(null, cljs.core.array, keyvals), null)
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if(goog.isDef(var_args)) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return array_map__delegate.call(this, keyvals)
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__3859) {
    var keyvals = cljs.core.seq(arglist__3859);
    return array_map__delegate(keyvals)
  };
  array_map.cljs$lang$arity$variadic = array_map__delegate;
  return array_map
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = {};
    var kvs = cljs.core.seq.call(null, keyvals);
    while(true) {
      if(kvs) {
        ks.push(cljs.core.first.call(null, kvs));
        obj[cljs.core.first.call(null, kvs)] = cljs.core.second.call(null, kvs);
        var G__3860 = cljs.core.nnext.call(null, kvs);
        kvs = G__3860;
        continue
      }else {
        return cljs.core.ObjMap.fromObject.call(null, ks, obj)
      }
      break
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if(goog.isDef(var_args)) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return obj_map__delegate.call(this, keyvals)
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__3861) {
    var keyvals = cljs.core.seq(arglist__3861);
    return obj_map__delegate(keyvals)
  };
  obj_map.cljs$lang$arity$variadic = obj_map__delegate;
  return obj_map
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while(true) {
      if(in$) {
        var G__3862 = cljs.core.nnext.call(null, in$);
        var G__3863 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__3862;
        out = G__3863;
        continue
      }else {
        return out
      }
      break
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if(goog.isDef(var_args)) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return sorted_map__delegate.call(this, keyvals)
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__3864) {
    var keyvals = cljs.core.seq(arglist__3864);
    return sorted_map__delegate(keyvals)
  };
  sorted_map.cljs$lang$arity$variadic = sorted_map__delegate;
  return sorted_map
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator.call(null, comparator), null, 0, null, 0);
    while(true) {
      if(in$) {
        var G__3865 = cljs.core.nnext.call(null, in$);
        var G__3866 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__3865;
        out = G__3866;
        continue
      }else {
        return out
      }
      break
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if(goog.isDef(var_args)) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals)
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__3867) {
    var comparator = cljs.core.first(arglist__3867);
    var keyvals = cljs.core.rest(arglist__3867);
    return sorted_map_by__delegate(comparator, keyvals)
  };
  sorted_map_by.cljs$lang$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by
}();
cljs.core.keys = function keys(hash_map) {
  return cljs.core.seq.call(null, cljs.core.map.call(null, cljs.core.first, hash_map))
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key.call(null, map_entry)
};
cljs.core.vals = function vals(hash_map) {
  return cljs.core.seq.call(null, cljs.core.map.call(null, cljs.core.second, hash_map))
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val.call(null, map_entry)
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if(cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      return cljs.core.reduce.call(null, function(p1__3868_SHARP_, p2__3869_SHARP_) {
        return cljs.core.conj.call(null, function() {
          var or__3824__auto__ = p1__3868_SHARP_;
          if(cljs.core.truth_(or__3824__auto__)) {
            return or__3824__auto__
          }else {
            return cljs.core.ObjMap.EMPTY
          }
        }(), p2__3869_SHARP_)
      }, maps)
    }else {
      return null
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if(goog.isDef(var_args)) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return merge__delegate.call(this, maps)
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__3870) {
    var maps = cljs.core.seq(arglist__3870);
    return merge__delegate(maps)
  };
  merge.cljs$lang$arity$variadic = merge__delegate;
  return merge
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if(cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first.call(null, e);
        var v = cljs.core.second.call(null, e);
        if(cljs.core.contains_QMARK_.call(null, m, k)) {
          return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core._lookup.call(null, m, k, null), v))
        }else {
          return cljs.core.assoc.call(null, m, k, v)
        }
      };
      var merge2 = function(m1, m2) {
        return cljs.core.reduce.call(null, merge_entry, function() {
          var or__3824__auto__ = m1;
          if(cljs.core.truth_(or__3824__auto__)) {
            return or__3824__auto__
          }else {
            return cljs.core.ObjMap.EMPTY
          }
        }(), cljs.core.seq.call(null, m2))
      };
      return cljs.core.reduce.call(null, merge2, maps)
    }else {
      return null
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if(goog.isDef(var_args)) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return merge_with__delegate.call(this, f, maps)
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__3871) {
    var f = cljs.core.first(arglist__3871);
    var maps = cljs.core.rest(arglist__3871);
    return merge_with__delegate(f, maps)
  };
  merge_with.cljs$lang$arity$variadic = merge_with__delegate;
  return merge_with
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.ObjMap.EMPTY;
  var keys = cljs.core.seq.call(null, keyseq);
  while(true) {
    if(keys) {
      var key = cljs.core.first.call(null, keys);
      var entry = cljs.core._lookup.call(null, map, key, "\ufdd0'cljs.core/not-found");
      var G__3872 = cljs.core.not_EQ_.call(null, entry, "\ufdd0'cljs.core/not-found") ? cljs.core.assoc.call(null, ret, key, entry) : ret;
      var G__3873 = cljs.core.next.call(null, keys);
      ret = G__3872;
      keys = G__3873;
      continue
    }else {
      return ret
    }
    break
  }
};
goog.provide("cljs.core.PersistentHashSet");
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 15077647
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/PersistentHashSet")
};
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/PersistentHashSet")
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  return new cljs.core.TransientHashSet(cljs.core.transient$.call(null, self__.hash_map))
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_iset.call(null, coll);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(coll, v, null)
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  if(cljs.core.truth_(cljs.core._contains_key_QMARK_.call(null, self__.hash_map, v))) {
    return v
  }else {
    return not_found
  }
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__3879 = null;
  var G__3879__2 = function(this_sym3877, k) {
    var self__ = this;
    var this_sym3877__$1 = this;
    var coll = this_sym3877__$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(coll, k)
  };
  var G__3879__3 = function(this_sym3878, k, not_found) {
    var self__ = this;
    var this_sym3878__$1 = this;
    var coll = this_sym3878__$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, not_found)
  };
  G__3879 = function(this_sym3878, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3879__2.call(this, this_sym3878, k);
      case 3:
        return G__3879__3.call(this, this_sym3878, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__3879
}();
cljs.core.PersistentHashSet.prototype.apply = function(this_sym3875, args3876) {
  var self__ = this;
  return this_sym3875.call.apply(this_sym3875, [this_sym3875].concat(args3876.slice()))
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.call(null, self__.hash_map, o, null), null)
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.keys.call(null, self__.hash_map)
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.dissoc.call(null, self__.hash_map, v), null)
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.count.call(null, cljs.core.seq.call(null, coll))
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var and__3822__auto__ = cljs.core.set_QMARK_.call(null, other);
  if(and__3822__auto__) {
    var and__3822__auto____$1 = cljs.core.count.call(null, coll) === cljs.core.count.call(null, other);
    if(and__3822__auto____$1) {
      return cljs.core.every_QMARK_.call(null, function(p1__3874_SHARP_) {
        return cljs.core.contains_QMARK_.call(null, coll, p1__3874_SHARP_)
      }, other)
    }else {
      return and__3822__auto____$1
    }
  }else {
    return and__3822__auto__
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash)
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, self__.meta)
};
cljs.core.PersistentHashSet;
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.hash_map.call(null), 0);
cljs.core.PersistentHashSet.fromArray = function(items) {
  var len = cljs.core.count.call(null, items);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
  while(true) {
    if(i < len) {
      var G__3880 = i + 1;
      var G__3881 = cljs.core.conj_BANG_.call(null, out, items[i]);
      i = G__3880;
      out = G__3881;
      continue
    }else {
      return cljs.core.persistent_BANG_.call(null, out)
    }
    break
  }
};
goog.provide("cljs.core.TransientHashSet");
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/TransientHashSet")
};
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/TransientHashSet")
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__3887 = null;
  var G__3887__2 = function(this_sym3885, k) {
    var self__ = this;
    var this_sym3885__$1 = this;
    var tcoll = this_sym3885__$1;
    if(cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null
    }else {
      return k
    }
  };
  var G__3887__3 = function(this_sym3886, k, not_found) {
    var self__ = this;
    var this_sym3886__$1 = this;
    var tcoll = this_sym3886__$1;
    if(cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found
    }else {
      return k
    }
  };
  G__3887 = function(this_sym3886, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3887__2.call(this, this_sym3886, k);
      case 3:
        return G__3887__3.call(this, this_sym3886, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__3887
}();
cljs.core.TransientHashSet.prototype.apply = function(this_sym3883, args3884) {
  var self__ = this;
  return this_sym3883.call.apply(this_sym3883, [this_sym3883].concat(args3884.slice()))
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  return tcoll.cljs$core$ILookup$_lookup$arity$3(tcoll, v, null)
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  if(cljs.core._lookup.call(null, self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found
  }else {
    return v
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  return cljs.core.count.call(null, self__.transient_map)
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  self__.transient_map = cljs.core.dissoc_BANG_.call(null, self__.transient_map, v);
  return tcoll
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  self__.transient_map = cljs.core.assoc_BANG_.call(null, self__.transient_map, o, null);
  return tcoll
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_.call(null, self__.transient_map), null)
};
cljs.core.TransientHashSet;
goog.provide("cljs.core.PersistentTreeSet");
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 417730831
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/PersistentTreeSet")
};
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/PersistentTreeSet")
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_iset.call(null, coll);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(coll, v, null)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var n = self__.tree_map.entry_at(v);
  if(!(n == null)) {
    return n.key
  }else {
    return not_found
  }
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__3892 = null;
  var G__3892__2 = function(this_sym3890, k) {
    var self__ = this;
    var this_sym3890__$1 = this;
    var coll = this_sym3890__$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(coll, k)
  };
  var G__3892__3 = function(this_sym3891, k, not_found) {
    var self__ = this;
    var this_sym3891__$1 = this;
    var coll = this_sym3891__$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(coll, k, not_found)
  };
  G__3892 = function(this_sym3891, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__3892__2.call(this, this_sym3891, k);
      case 3:
        return G__3892__3.call(this, this_sym3891, k, not_found)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__3892
}();
cljs.core.PersistentTreeSet.prototype.apply = function(this_sym3888, args3889) {
  var self__ = this;
  return this_sym3888.call.apply(this_sym3888, [this_sym3888].concat(args3889.slice()))
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.call(null, self__.tree_map, o, null), null)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core.rseq.call(null, self__.tree_map))
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq.call(null, self__.tree_map, ascending_QMARK_))
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq_from.call(null, self__.tree_map, k, ascending_QMARK_))
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  return entry
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core._comparator.call(null, self__.tree_map)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.keys.call(null, self__.tree_map)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.call(null, self__.tree_map, v), null)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.count.call(null, self__.tree_map)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var and__3822__auto__ = cljs.core.set_QMARK_.call(null, other);
  if(and__3822__auto__) {
    var and__3822__auto____$1 = cljs.core.count.call(null, coll) === cljs.core.count.call(null, other);
    if(and__3822__auto____$1) {
      return cljs.core.every_QMARK_.call(null, function(p1__3882_SHARP_) {
        return cljs.core.contains_QMARK_.call(null, coll, p1__3882_SHARP_)
      }, other)
    }else {
      return and__3822__auto____$1
    }
  }else {
    return and__3822__auto__
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  return self__.meta
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeSet.EMPTY, self__.meta)
};
cljs.core.PersistentTreeSet;
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map.call(null), 0);
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY
  };
  var hash_set__1 = function() {
    var G__3893__delegate = function(keys) {
      var in$ = cljs.core.seq.call(null, keys);
      var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
      while(true) {
        if(cljs.core.seq.call(null, in$)) {
          var G__3894 = cljs.core.next.call(null, in$);
          var G__3895 = cljs.core.conj_BANG_.call(null, out, cljs.core.first.call(null, in$));
          in$ = G__3894;
          out = G__3895;
          continue
        }else {
          return cljs.core.persistent_BANG_.call(null, out)
        }
        break
      }
    };
    var G__3893 = function(var_args) {
      var keys = null;
      if(goog.isDef(var_args)) {
        keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
      }
      return G__3893__delegate.call(this, keys)
    };
    G__3893.cljs$lang$maxFixedArity = 0;
    G__3893.cljs$lang$applyTo = function(arglist__3896) {
      var keys = cljs.core.seq(arglist__3896);
      return G__3893__delegate(keys)
    };
    G__3893.cljs$lang$arity$variadic = G__3893__delegate;
    return G__3893
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        return hash_set__1.cljs$lang$arity$variadic(cljs.core.array_seq(arguments, 0))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$lang$arity$0 = hash_set__0;
  hash_set.cljs$lang$arity$variadic = hash_set__1.cljs$lang$arity$variadic;
  return hash_set
}();
cljs.core.set = function set(coll) {
  return cljs.core.apply.call(null, cljs.core.hash_set, coll)
};
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys)
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if(goog.isDef(var_args)) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return sorted_set__delegate.call(this, keys)
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__3897) {
    var keys = cljs.core.seq(arglist__3897);
    return sorted_set__delegate(keys)
  };
  sorted_set.cljs$lang$arity$variadic = sorted_set__delegate;
  return sorted_set
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by.call(null, comparator), 0), keys)
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if(goog.isDef(var_args)) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return sorted_set_by__delegate.call(this, comparator, keys)
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__3899) {
    var comparator = cljs.core.first(arglist__3899);
    var keys = cljs.core.rest(arglist__3899);
    return sorted_set_by__delegate(comparator, keys)
  };
  sorted_set_by.cljs$lang$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by
}();
cljs.core.replace = function replace(smap, coll) {
  if(cljs.core.vector_QMARK_.call(null, coll)) {
    var n = cljs.core.count.call(null, coll);
    return cljs.core.reduce.call(null, function(v, i) {
      var temp__3971__auto__ = cljs.core.find.call(null, smap, cljs.core.nth.call(null, v, i));
      if(cljs.core.truth_(temp__3971__auto__)) {
        var e = temp__3971__auto__;
        return cljs.core.assoc.call(null, v, i, cljs.core.second.call(null, e))
      }else {
        return v
      }
    }, coll, cljs.core.take.call(null, n, cljs.core.iterate.call(null, cljs.core.inc, 0)))
  }else {
    return cljs.core.map.call(null, function(p1__3898_SHARP_) {
      var temp__3971__auto__ = cljs.core.find.call(null, smap, p1__3898_SHARP_);
      if(cljs.core.truth_(temp__3971__auto__)) {
        var e = temp__3971__auto__;
        return cljs.core.second.call(null, e)
      }else {
        return p1__3898_SHARP_
      }
    }, coll)
  }
};
cljs.core.distinct = function distinct(coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, false, function() {
      return function(p__3906, seen__$1) {
        while(true) {
          var vec__3907 = p__3906;
          var f = cljs.core.nth.call(null, vec__3907, 0, null);
          var xs__$1 = vec__3907;
          var temp__3974__auto__ = cljs.core.seq.call(null, xs__$1);
          if(temp__3974__auto__) {
            var s = temp__3974__auto__;
            if(cljs.core.contains_QMARK_.call(null, seen__$1, f)) {
              var G__3908 = cljs.core.rest.call(null, s);
              var G__3909 = seen__$1;
              p__3906 = G__3908;
              seen__$1 = G__3909;
              continue
            }else {
              return cljs.core.cons.call(null, f, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, f)))
            }
          }else {
            return null
          }
          break
        }
      }.call(null, xs, seen)
    }, null)
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY)
};
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while(true) {
    if(cljs.core.next.call(null, s__$1)) {
      var G__3910 = cljs.core.conj.call(null, ret, cljs.core.first.call(null, s__$1));
      var G__3911 = cljs.core.next.call(null, s__$1);
      ret = G__3910;
      s__$1 = G__3911;
      continue
    }else {
      return cljs.core.seq.call(null, ret)
    }
    break
  }
};
cljs.core.name = function name(x) {
  if(cljs.core.string_QMARK_.call(null, x)) {
    return x
  }else {
    if(function() {
      var or__3824__auto__ = cljs.core.keyword_QMARK_.call(null, x);
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        return cljs.core.symbol_QMARK_.call(null, x)
      }
    }()) {
      var i = x.lastIndexOf("/");
      if(i < 0) {
        return cljs.core.subs.call(null, x, 2)
      }else {
        return cljs.core.subs.call(null, x, i + 1)
      }
    }else {
      if("\ufdd0'else") {
        throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
      }else {
        return null
      }
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if(function() {
    var or__3824__auto__ = cljs.core.keyword_QMARK_.call(null, x);
    if(or__3824__auto__) {
      return or__3824__auto__
    }else {
      return cljs.core.symbol_QMARK_.call(null, x)
    }
  }()) {
    var i = x.lastIndexOf("/");
    if(i > -1) {
      return cljs.core.subs.call(null, x, 2, i)
    }else {
      return null
    }
  }else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.ObjMap.EMPTY;
  var ks = cljs.core.seq.call(null, keys);
  var vs = cljs.core.seq.call(null, vals);
  while(true) {
    if(function() {
      var and__3822__auto__ = ks;
      if(and__3822__auto__) {
        return vs
      }else {
        return and__3822__auto__
      }
    }()) {
      var G__3914 = cljs.core.assoc.call(null, map, cljs.core.first.call(null, ks), cljs.core.first.call(null, vs));
      var G__3915 = cljs.core.next.call(null, ks);
      var G__3916 = cljs.core.next.call(null, vs);
      map = G__3914;
      ks = G__3915;
      vs = G__3916;
      continue
    }else {
      return map
    }
    break
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x
  };
  var max_key__3 = function(k, x, y) {
    if(k.call(null, x) > k.call(null, y)) {
      return x
    }else {
      return y
    }
  };
  var max_key__4 = function() {
    var G__3919__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__3912_SHARP_, p2__3913_SHARP_) {
        return max_key.call(null, k, p1__3912_SHARP_, p2__3913_SHARP_)
      }, max_key.call(null, k, x, y), more)
    };
    var G__3919 = function(k, x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__3919__delegate.call(this, k, x, y, more)
    };
    G__3919.cljs$lang$maxFixedArity = 3;
    G__3919.cljs$lang$applyTo = function(arglist__3920) {
      var k = cljs.core.first(arglist__3920);
      var x = cljs.core.first(cljs.core.next(arglist__3920));
      var y = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3920)));
      var more = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3920)));
      return G__3919__delegate(k, x, y, more)
    };
    G__3919.cljs$lang$arity$variadic = G__3919__delegate;
    return G__3919
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        return max_key__4.cljs$lang$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$lang$arity$2 = max_key__2;
  max_key.cljs$lang$arity$3 = max_key__3;
  max_key.cljs$lang$arity$variadic = max_key__4.cljs$lang$arity$variadic;
  return max_key
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x
  };
  var min_key__3 = function(k, x, y) {
    if(k.call(null, x) < k.call(null, y)) {
      return x
    }else {
      return y
    }
  };
  var min_key__4 = function() {
    var G__3921__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__3917_SHARP_, p2__3918_SHARP_) {
        return min_key.call(null, k, p1__3917_SHARP_, p2__3918_SHARP_)
      }, min_key.call(null, k, x, y), more)
    };
    var G__3921 = function(k, x, y, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__3921__delegate.call(this, k, x, y, more)
    };
    G__3921.cljs$lang$maxFixedArity = 3;
    G__3921.cljs$lang$applyTo = function(arglist__3922) {
      var k = cljs.core.first(arglist__3922);
      var x = cljs.core.first(cljs.core.next(arglist__3922));
      var y = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3922)));
      var more = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3922)));
      return G__3921__delegate(k, x, y, more)
    };
    G__3921.cljs$lang$arity$variadic = G__3921__delegate;
    return G__3921
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        return min_key__4.cljs$lang$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$lang$arity$2 = min_key__2;
  min_key.cljs$lang$arity$3 = min_key__3;
  min_key.cljs$lang$arity$variadic = min_key__4.cljs$lang$arity$variadic;
  return min_key
}();
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__2 = function(n, coll) {
    return partition_all.call(null, n, n, coll)
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, false, function() {
      var temp__3974__auto__ = cljs.core.seq.call(null, coll);
      if(temp__3974__auto__) {
        var s = temp__3974__auto__;
        return cljs.core.cons.call(null, cljs.core.take.call(null, n, s), partition_all.call(null, n, step, cljs.core.drop.call(null, step, s)))
      }else {
        return null
      }
    }, null)
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$lang$arity$2 = partition_all__2;
  partition_all.cljs$lang$arity$3 = partition_all__3;
  return partition_all
}();
cljs.core.take_while = function take_while(pred, coll) {
  return new cljs.core.LazySeq(null, false, function() {
    var temp__3974__auto__ = cljs.core.seq.call(null, coll);
    if(temp__3974__auto__) {
      var s = temp__3974__auto__;
      if(cljs.core.truth_(pred.call(null, cljs.core.first.call(null, s)))) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_while.call(null, pred, cljs.core.rest.call(null, s)))
      }else {
        return null
      }
    }else {
      return null
    }
  }, null)
};
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator.call(null, sc);
    return test.call(null, comp.call(null, cljs.core._entry_key.call(null, sc, e), key), 0)
  }
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if(cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_]).call(null, test))) {
      var temp__3974__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, true);
      if(cljs.core.truth_(temp__3974__auto__)) {
        var vec__3925 = temp__3974__auto__;
        var e = cljs.core.nth.call(null, vec__3925, 0, null);
        var s = vec__3925;
        if(cljs.core.truth_(include.call(null, e))) {
          return s
        }else {
          return cljs.core.next.call(null, s)
        }
      }else {
        return null
      }
    }else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, true))
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__3974__auto__ = cljs.core._sorted_seq_from.call(null, sc, start_key, true);
    if(cljs.core.truth_(temp__3974__auto__)) {
      var vec__3926 = temp__3974__auto__;
      var e = cljs.core.nth.call(null, vec__3926, 0, null);
      var s = vec__3926;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, start_test, start_key).call(null, e)) ? s : cljs.core.next.call(null, s))
    }else {
      return null
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$lang$arity$3 = subseq__3;
  subseq.cljs$lang$arity$5 = subseq__5;
  return subseq
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if(cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_]).call(null, test))) {
      var temp__3974__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, false);
      if(cljs.core.truth_(temp__3974__auto__)) {
        var vec__3929 = temp__3974__auto__;
        var e = cljs.core.nth.call(null, vec__3929, 0, null);
        var s = vec__3929;
        if(cljs.core.truth_(include.call(null, e))) {
          return s
        }else {
          return cljs.core.next.call(null, s)
        }
      }else {
        return null
      }
    }else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, false))
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__3974__auto__ = cljs.core._sorted_seq_from.call(null, sc, end_key, false);
    if(cljs.core.truth_(temp__3974__auto__)) {
      var vec__3930 = temp__3974__auto__;
      var e = cljs.core.nth.call(null, vec__3930, 0, null);
      var s = vec__3930;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, end_test, end_key).call(null, e)) ? s : cljs.core.next.call(null, s))
    }else {
      return null
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$lang$arity$3 = rsubseq__3;
  rsubseq.cljs$lang$arity$5 = rsubseq__5;
  return rsubseq
}();
goog.provide("cljs.core.Range");
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32375006
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/Range")
};
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/Range")
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_coll.call(null, rng);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  if(self__.step > 0) {
    if(self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null)
    }else {
      return null
    }
  }else {
    if(self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null)
    }else {
      return null
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  return cljs.core.cons.call(null, o, rng)
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, rng, f)
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, s) {
  var self__ = this;
  return cljs.core.ci_reduce.call(null, rng, f, s)
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  if(self__.step > 0) {
    if(self__.start < self__.end) {
      return rng
    }else {
      return null
    }
  }else {
    if(self__.start > self__.end) {
      return rng
    }else {
      return null
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  if(cljs.core.not.call(null, rng.cljs$core$ISeqable$_seq$arity$1(rng))) {
    return 0
  }else {
    return Math.ceil((self__.end - self__.start) / self__.step)
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  return self__.start
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  if(!(rng.cljs$core$ISeqable$_seq$arity$1(rng) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null)
  }else {
    return cljs.core.List.EMPTY
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  return cljs.core.equiv_sequential.call(null, rng, other)
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash)
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  return self__.meta
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  if(n < rng.cljs$core$ICounted$_count$arity$1(rng)) {
    return self__.start + n * self__.step
  }else {
    if(function() {
      var and__3822__auto__ = self__.start > self__.end;
      if(and__3822__auto__) {
        return self__.step === 0
      }else {
        return and__3822__auto__
      }
    }()) {
      return self__.start
    }else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  if(n < rng.cljs$core$ICounted$_count$arity$1(rng)) {
    return self__.start + n * self__.step
  }else {
    if(function() {
      var and__3822__auto__ = self__.start > self__.end;
      if(and__3822__auto__) {
        return self__.step === 0
      }else {
        return and__3822__auto__
      }
    }()) {
      return self__.start
    }else {
      return not_found
    }
  }
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta)
};
cljs.core.Range;
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.call(null, 0, Number.MAX_VALUE, 1)
  };
  var range__1 = function(end) {
    return range.call(null, 0, end, 1)
  };
  var range__2 = function(start, end) {
    return range.call(null, start, end, 1)
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null)
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$lang$arity$0 = range__0;
  range.cljs$lang$arity$1 = range__1;
  range.cljs$lang$arity$2 = range__2;
  range.cljs$lang$arity$3 = range__3;
  return range
}();
cljs.core.take_nth = function take_nth(n, coll) {
  return new cljs.core.LazySeq(null, false, function() {
    var temp__3974__auto__ = cljs.core.seq.call(null, coll);
    if(temp__3974__auto__) {
      var s = temp__3974__auto__;
      return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_nth.call(null, n, cljs.core.drop.call(null, n, s)))
    }else {
      return null
    }
  }, null)
};
cljs.core.split_with = function split_with(pred, coll) {
  return cljs.core.PersistentVector.fromArray([cljs.core.take_while.call(null, pred, coll), cljs.core.drop_while.call(null, pred, coll)], true)
};
cljs.core.partition_by = function partition_by(f, coll) {
  return new cljs.core.LazySeq(null, false, function() {
    var temp__3974__auto__ = cljs.core.seq.call(null, coll);
    if(temp__3974__auto__) {
      var s = temp__3974__auto__;
      var fst = cljs.core.first.call(null, s);
      var fv = f.call(null, fst);
      var run = cljs.core.cons.call(null, fst, cljs.core.take_while.call(null, function(p1__3931_SHARP_) {
        return cljs.core._EQ_.call(null, fv, f.call(null, p1__3931_SHARP_))
      }, cljs.core.next.call(null, s)));
      return cljs.core.cons.call(null, run, partition_by.call(null, f, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, run), s))))
    }else {
      return null
    }
  }, null)
};
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(counts, x) {
    return cljs.core.assoc_BANG_.call(null, counts, x, cljs.core._lookup.call(null, counts, x, 0) + 1)
  }, cljs.core.transient$.call(null, cljs.core.ObjMap.EMPTY), coll))
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, false, function() {
      var temp__3971__auto__ = cljs.core.seq.call(null, coll);
      if(temp__3971__auto__) {
        var s = temp__3971__auto__;
        return reductions.call(null, f, cljs.core.first.call(null, s), cljs.core.rest.call(null, s))
      }else {
        return cljs.core.list.call(null, f.call(null))
      }
    }, null)
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons.call(null, init, new cljs.core.LazySeq(null, false, function() {
      var temp__3974__auto__ = cljs.core.seq.call(null, coll);
      if(temp__3974__auto__) {
        var s = temp__3974__auto__;
        return reductions.call(null, f, f.call(null, init, cljs.core.first.call(null, s)), cljs.core.rest.call(null, s))
      }else {
        return null
      }
    }, null))
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$lang$arity$2 = reductions__2;
  reductions.cljs$lang$arity$3 = reductions__3;
  return reductions
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__3942 = null;
      var G__3942__0 = function() {
        return cljs.core.vector.call(null, f.call(null))
      };
      var G__3942__1 = function(x) {
        return cljs.core.vector.call(null, f.call(null, x))
      };
      var G__3942__2 = function(x, y) {
        return cljs.core.vector.call(null, f.call(null, x, y))
      };
      var G__3942__3 = function(x, y, z) {
        return cljs.core.vector.call(null, f.call(null, x, y, z))
      };
      var G__3942__4 = function() {
        var G__3943__delegate = function(x, y, z, args) {
          return cljs.core.vector.call(null, cljs.core.apply.call(null, f, x, y, z, args))
        };
        var G__3943 = function(x, y, z, var_args) {
          var args = null;
          if(goog.isDef(var_args)) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__3943__delegate.call(this, x, y, z, args)
        };
        G__3943.cljs$lang$maxFixedArity = 3;
        G__3943.cljs$lang$applyTo = function(arglist__3944) {
          var x = cljs.core.first(arglist__3944);
          var y = cljs.core.first(cljs.core.next(arglist__3944));
          var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3944)));
          var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3944)));
          return G__3943__delegate(x, y, z, args)
        };
        G__3943.cljs$lang$arity$variadic = G__3943__delegate;
        return G__3943
      }();
      G__3942 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__3942__0.call(this);
          case 1:
            return G__3942__1.call(this, x);
          case 2:
            return G__3942__2.call(this, x, y);
          case 3:
            return G__3942__3.call(this, x, y, z);
          default:
            return G__3942__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__3942.cljs$lang$maxFixedArity = 3;
      G__3942.cljs$lang$applyTo = G__3942__4.cljs$lang$applyTo;
      return G__3942
    }()
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__3945 = null;
      var G__3945__0 = function() {
        return cljs.core.vector.call(null, f.call(null), g.call(null))
      };
      var G__3945__1 = function(x) {
        return cljs.core.vector.call(null, f.call(null, x), g.call(null, x))
      };
      var G__3945__2 = function(x, y) {
        return cljs.core.vector.call(null, f.call(null, x, y), g.call(null, x, y))
      };
      var G__3945__3 = function(x, y, z) {
        return cljs.core.vector.call(null, f.call(null, x, y, z), g.call(null, x, y, z))
      };
      var G__3945__4 = function() {
        var G__3946__delegate = function(x, y, z, args) {
          return cljs.core.vector.call(null, cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args))
        };
        var G__3946 = function(x, y, z, var_args) {
          var args = null;
          if(goog.isDef(var_args)) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__3946__delegate.call(this, x, y, z, args)
        };
        G__3946.cljs$lang$maxFixedArity = 3;
        G__3946.cljs$lang$applyTo = function(arglist__3947) {
          var x = cljs.core.first(arglist__3947);
          var y = cljs.core.first(cljs.core.next(arglist__3947));
          var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3947)));
          var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3947)));
          return G__3946__delegate(x, y, z, args)
        };
        G__3946.cljs$lang$arity$variadic = G__3946__delegate;
        return G__3946
      }();
      G__3945 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__3945__0.call(this);
          case 1:
            return G__3945__1.call(this, x);
          case 2:
            return G__3945__2.call(this, x, y);
          case 3:
            return G__3945__3.call(this, x, y, z);
          default:
            return G__3945__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__3945.cljs$lang$maxFixedArity = 3;
      G__3945.cljs$lang$applyTo = G__3945__4.cljs$lang$applyTo;
      return G__3945
    }()
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__3948 = null;
      var G__3948__0 = function() {
        return cljs.core.vector.call(null, f.call(null), g.call(null), h.call(null))
      };
      var G__3948__1 = function(x) {
        return cljs.core.vector.call(null, f.call(null, x), g.call(null, x), h.call(null, x))
      };
      var G__3948__2 = function(x, y) {
        return cljs.core.vector.call(null, f.call(null, x, y), g.call(null, x, y), h.call(null, x, y))
      };
      var G__3948__3 = function(x, y, z) {
        return cljs.core.vector.call(null, f.call(null, x, y, z), g.call(null, x, y, z), h.call(null, x, y, z))
      };
      var G__3948__4 = function() {
        var G__3949__delegate = function(x, y, z, args) {
          return cljs.core.vector.call(null, cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args), cljs.core.apply.call(null, h, x, y, z, args))
        };
        var G__3949 = function(x, y, z, var_args) {
          var args = null;
          if(goog.isDef(var_args)) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
          }
          return G__3949__delegate.call(this, x, y, z, args)
        };
        G__3949.cljs$lang$maxFixedArity = 3;
        G__3949.cljs$lang$applyTo = function(arglist__3950) {
          var x = cljs.core.first(arglist__3950);
          var y = cljs.core.first(cljs.core.next(arglist__3950));
          var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3950)));
          var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3950)));
          return G__3949__delegate(x, y, z, args)
        };
        G__3949.cljs$lang$arity$variadic = G__3949__delegate;
        return G__3949
      }();
      G__3948 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__3948__0.call(this);
          case 1:
            return G__3948__1.call(this, x);
          case 2:
            return G__3948__2.call(this, x, y);
          case 3:
            return G__3948__3.call(this, x, y, z);
          default:
            return G__3948__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__3948.cljs$lang$maxFixedArity = 3;
      G__3948.cljs$lang$applyTo = G__3948__4.cljs$lang$applyTo;
      return G__3948
    }()
  };
  var juxt__4 = function() {
    var G__3951__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.call(null, f, g, h, fs);
      return function() {
        var G__3952 = null;
        var G__3952__0 = function() {
          return cljs.core.reduce.call(null, function(p1__3932_SHARP_, p2__3933_SHARP_) {
            return cljs.core.conj.call(null, p1__3932_SHARP_, p2__3933_SHARP_.call(null))
          }, cljs.core.PersistentVector.EMPTY, fs__$1)
        };
        var G__3952__1 = function(x) {
          return cljs.core.reduce.call(null, function(p1__3934_SHARP_, p2__3935_SHARP_) {
            return cljs.core.conj.call(null, p1__3934_SHARP_, p2__3935_SHARP_.call(null, x))
          }, cljs.core.PersistentVector.EMPTY, fs__$1)
        };
        var G__3952__2 = function(x, y) {
          return cljs.core.reduce.call(null, function(p1__3936_SHARP_, p2__3937_SHARP_) {
            return cljs.core.conj.call(null, p1__3936_SHARP_, p2__3937_SHARP_.call(null, x, y))
          }, cljs.core.PersistentVector.EMPTY, fs__$1)
        };
        var G__3952__3 = function(x, y, z) {
          return cljs.core.reduce.call(null, function(p1__3938_SHARP_, p2__3939_SHARP_) {
            return cljs.core.conj.call(null, p1__3938_SHARP_, p2__3939_SHARP_.call(null, x, y, z))
          }, cljs.core.PersistentVector.EMPTY, fs__$1)
        };
        var G__3952__4 = function() {
          var G__3953__delegate = function(x, y, z, args) {
            return cljs.core.reduce.call(null, function(p1__3940_SHARP_, p2__3941_SHARP_) {
              return cljs.core.conj.call(null, p1__3940_SHARP_, cljs.core.apply.call(null, p2__3941_SHARP_, x, y, z, args))
            }, cljs.core.PersistentVector.EMPTY, fs__$1)
          };
          var G__3953 = function(x, y, z, var_args) {
            var args = null;
            if(goog.isDef(var_args)) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
            }
            return G__3953__delegate.call(this, x, y, z, args)
          };
          G__3953.cljs$lang$maxFixedArity = 3;
          G__3953.cljs$lang$applyTo = function(arglist__3954) {
            var x = cljs.core.first(arglist__3954);
            var y = cljs.core.first(cljs.core.next(arglist__3954));
            var z = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3954)));
            var args = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3954)));
            return G__3953__delegate(x, y, z, args)
          };
          G__3953.cljs$lang$arity$variadic = G__3953__delegate;
          return G__3953
        }();
        G__3952 = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return G__3952__0.call(this);
            case 1:
              return G__3952__1.call(this, x);
            case 2:
              return G__3952__2.call(this, x, y);
            case 3:
              return G__3952__3.call(this, x, y, z);
            default:
              return G__3952__4.cljs$lang$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3))
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__3952.cljs$lang$maxFixedArity = 3;
        G__3952.cljs$lang$applyTo = G__3952__4.cljs$lang$applyTo;
        return G__3952
      }()
    };
    var G__3951 = function(f, g, h, var_args) {
      var fs = null;
      if(goog.isDef(var_args)) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0)
      }
      return G__3951__delegate.call(this, f, g, h, fs)
    };
    G__3951.cljs$lang$maxFixedArity = 3;
    G__3951.cljs$lang$applyTo = function(arglist__3955) {
      var f = cljs.core.first(arglist__3955);
      var g = cljs.core.first(cljs.core.next(arglist__3955));
      var h = cljs.core.first(cljs.core.next(cljs.core.next(arglist__3955)));
      var fs = cljs.core.rest(cljs.core.next(cljs.core.next(arglist__3955)));
      return G__3951__delegate(f, g, h, fs)
    };
    G__3951.cljs$lang$arity$variadic = G__3951__delegate;
    return G__3951
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        return juxt__4.cljs$lang$arity$variadic(f, g, h, cljs.core.array_seq(arguments, 3))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$lang$arity$1 = juxt__1;
  juxt.cljs$lang$arity$2 = juxt__2;
  juxt.cljs$lang$arity$3 = juxt__3;
  juxt.cljs$lang$arity$variadic = juxt__4.cljs$lang$arity$variadic;
  return juxt
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while(true) {
      if(cljs.core.seq.call(null, coll)) {
        var G__3956 = cljs.core.next.call(null, coll);
        coll = G__3956;
        continue
      }else {
        return null
      }
      break
    }
  };
  var dorun__2 = function(n, coll) {
    while(true) {
      if(cljs.core.truth_(function() {
        var and__3822__auto__ = cljs.core.seq.call(null, coll);
        if(and__3822__auto__) {
          return n > 0
        }else {
          return and__3822__auto__
        }
      }())) {
        var G__3957 = n - 1;
        var G__3958 = cljs.core.next.call(null, coll);
        n = G__3957;
        coll = G__3958;
        continue
      }else {
        return null
      }
      break
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$lang$arity$1 = dorun__1;
  dorun.cljs$lang$arity$2 = dorun__2;
  return dorun
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.call(null, coll);
    return coll
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.call(null, n, coll);
    return coll
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$lang$arity$1 = doall__1;
  doall.cljs$lang$arity$2 = doall__2;
  return doall
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp
};
cljs.core.re_matches = function re_matches(re, s) {
  var matches = re.exec(s);
  if(cljs.core._EQ_.call(null, cljs.core.first.call(null, matches), s)) {
    if(cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches)
    }else {
      return cljs.core.vec.call(null, matches)
    }
  }else {
    return null
  }
};
cljs.core.re_find = function re_find(re, s) {
  var matches = re.exec(s);
  if(matches == null) {
    return null
  }else {
    if(cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches)
    }else {
      return cljs.core.vec.call(null, matches)
    }
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find.call(null, re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_.call(null, match_data) ? cljs.core.first.call(null, match_data) : match_data;
  var post_match = cljs.core.subs.call(null, s, match_idx + cljs.core.count.call(null, match_str));
  if(cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, false, function() {
      return cljs.core.cons.call(null, match_data, re_seq.call(null, re, post_match))
    }, null)
  }else {
    return null
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  var vec__3961 = cljs.core.re_find.call(null, /^(?:\(\?([idmsux]*)\))?(.*)/, s);
  var _ = cljs.core.nth.call(null, vec__3961, 0, null);
  var flags = cljs.core.nth.call(null, vec__3961, 1, null);
  var pattern = cljs.core.nth.call(null, vec__3961, 2, null);
  return new RegExp(pattern, flags)
};
cljs.core.pr_sequential = function pr_sequential(print_one, begin, sep, end, opts, coll) {
  return cljs.core.concat.call(null, cljs.core.PersistentVector.fromArray([begin], true), cljs.core.flatten1.call(null, cljs.core.interpose.call(null, cljs.core.PersistentVector.fromArray([sep], true), cljs.core.map.call(null, function(p1__3959_SHARP_) {
    return print_one.call(null, p1__3959_SHARP_, opts)
  }, coll))), cljs.core.PersistentVector.fromArray([end], true))
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  cljs.core._write.call(null, writer, begin);
  if(cljs.core.seq.call(null, coll)) {
    print_one.call(null, cljs.core.first.call(null, coll), writer, opts)
  }else {
  }
  var G__3963 = cljs.core.seq.call(null, cljs.core.next.call(null, coll));
  while(true) {
    if(G__3963) {
      var o = cljs.core.first.call(null, G__3963);
      cljs.core._write.call(null, writer, sep);
      print_one.call(null, o, writer, opts);
      var G__3964 = cljs.core.next.call(null, G__3963);
      G__3963 = G__3964;
      continue
    }else {
    }
    break
  }
  return cljs.core._write.call(null, writer, end)
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var G__3966 = cljs.core.seq.call(null, ss);
    while(true) {
      if(G__3966) {
        var s = cljs.core.first.call(null, G__3966);
        cljs.core._write.call(null, writer, s);
        var G__3967 = cljs.core.next.call(null, G__3966);
        G__3966 = G__3967;
        continue
      }else {
        return null
      }
      break
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if(goog.isDef(var_args)) {
      ss = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return write_all__delegate.call(this, writer, ss)
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__3968) {
    var writer = cljs.core.first(arglist__3968);
    var ss = cljs.core.rest(arglist__3968);
    return write_all__delegate(writer, ss)
  };
  write_all.cljs$lang$arity$variadic = write_all__delegate;
  return write_all
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null
};
cljs.core.flush = function flush() {
  return null
};
goog.provide("cljs.core.StringBufferWriter");
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/StringBufferWriter")
};
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/StringBufferWriter")
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  return self__.sb.append(s)
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  return null
};
cljs.core.StringBufferWriter;
cljs.core.pr_seq = function pr_seq(obj, opts) {
  if(obj == null) {
    return cljs.core.list.call(null, "nil")
  }else {
    if(void 0 === obj) {
      return cljs.core.list.call(null, "#<undefined>")
    }else {
      if("\ufdd0'else") {
        return cljs.core.concat.call(null, cljs.core.truth_(function() {
          var and__3822__auto__ = cljs.core._lookup.call(null, opts, "\ufdd0'meta", null);
          if(cljs.core.truth_(and__3822__auto__)) {
            var and__3822__auto____$1 = function() {
              var G__3971 = obj;
              if(G__3971) {
                if(function() {
                  var or__3824__auto__ = G__3971.cljs$lang$protocol_mask$partition0$ & 131072;
                  if(or__3824__auto__) {
                    return or__3824__auto__
                  }else {
                    return G__3971.cljs$core$IMeta$
                  }
                }()) {
                  return true
                }else {
                  if(!G__3971.cljs$lang$protocol_mask$partition0$) {
                    return cljs.core.type_satisfies_.call(null, cljs.core.IMeta, G__3971)
                  }else {
                    return false
                  }
                }
              }else {
                return cljs.core.type_satisfies_.call(null, cljs.core.IMeta, G__3971)
              }
            }();
            if(cljs.core.truth_(and__3822__auto____$1)) {
              return cljs.core.meta.call(null, obj)
            }else {
              return and__3822__auto____$1
            }
          }else {
            return and__3822__auto__
          }
        }()) ? cljs.core.concat.call(null, cljs.core.PersistentVector.fromArray(["^"], true), pr_seq.call(null, cljs.core.meta.call(null, obj), opts), cljs.core.PersistentVector.fromArray([" "], true)) : null, function() {
          var and__3822__auto__ = !(obj == null);
          if(and__3822__auto__) {
            return obj.cljs$lang$type
          }else {
            return and__3822__auto__
          }
        }() ? obj.cljs$lang$ctorPrSeq(obj) : function() {
          var G__3972 = obj;
          if(G__3972) {
            if(function() {
              var or__3824__auto__ = G__3972.cljs$lang$protocol_mask$partition0$ & 536870912;
              if(or__3824__auto__) {
                return or__3824__auto__
              }else {
                return G__3972.cljs$core$IPrintable$
              }
            }()) {
              return true
            }else {
              if(!G__3972.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.type_satisfies_.call(null, cljs.core.IPrintable, G__3972)
              }else {
                return false
              }
            }
          }else {
            return cljs.core.type_satisfies_.call(null, cljs.core.IPrintable, G__3972)
          }
        }() ? cljs.core._pr_seq.call(null, obj, opts) : cljs.core.truth_(cljs.core.regexp_QMARK_.call(null, obj)) ? cljs.core.list.call(null, '#"', obj.source, '"') : "\ufdd0'else" ? cljs.core.list.call(null, "#<", [cljs.core.str(obj)].join(""), ">") : null)
      }else {
        return null
      }
    }
  }
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  if(obj == null) {
    return cljs.core._write.call(null, writer, "nil")
  }else {
    if(void 0 === obj) {
      return cljs.core._write.call(null, writer, "#<undefined>")
    }else {
      if("\ufdd0'else") {
        if(cljs.core.truth_(function() {
          var and__3822__auto__ = cljs.core._lookup.call(null, opts, "\ufdd0'meta", null);
          if(cljs.core.truth_(and__3822__auto__)) {
            var and__3822__auto____$1 = function() {
              var G__3976 = obj;
              if(G__3976) {
                if(function() {
                  var or__3824__auto__ = G__3976.cljs$lang$protocol_mask$partition0$ & 131072;
                  if(or__3824__auto__) {
                    return or__3824__auto__
                  }else {
                    return G__3976.cljs$core$IMeta$
                  }
                }()) {
                  return true
                }else {
                  if(!G__3976.cljs$lang$protocol_mask$partition0$) {
                    return cljs.core.type_satisfies_.call(null, cljs.core.IMeta, G__3976)
                  }else {
                    return false
                  }
                }
              }else {
                return cljs.core.type_satisfies_.call(null, cljs.core.IMeta, G__3976)
              }
            }();
            if(cljs.core.truth_(and__3822__auto____$1)) {
              return cljs.core.meta.call(null, obj)
            }else {
              return and__3822__auto____$1
            }
          }else {
            return and__3822__auto__
          }
        }())) {
          cljs.core._write.call(null, writer, "^");
          pr_writer.call(null, cljs.core.meta.call(null, obj), writer, opts);
          cljs.core._write.call(null, writer, " ")
        }else {
        }
        if(function() {
          var and__3822__auto__ = !(obj == null);
          if(and__3822__auto__) {
            return obj.cljs$lang$type
          }else {
            return and__3822__auto__
          }
        }()) {
          return obj.cljs$lang$ctorPrWriter(writer, opts)
        }else {
          if(function() {
            var G__3977 = obj;
            if(G__3977) {
              if(function() {
                var or__3824__auto__ = G__3977.cljs$lang$protocol_mask$partition0$ & 2147483648;
                if(or__3824__auto__) {
                  return or__3824__auto__
                }else {
                  return G__3977.cljs$core$IPrintWithWriter$
                }
              }()) {
                return true
              }else {
                if(!G__3977.cljs$lang$protocol_mask$partition0$) {
                  return cljs.core.type_satisfies_.call(null, cljs.core.IPrintWithWriter, G__3977)
                }else {
                  return false
                }
              }
            }else {
              return cljs.core.type_satisfies_.call(null, cljs.core.IPrintWithWriter, G__3977)
            }
          }()) {
            return cljs.core._pr_writer.call(null, obj, writer, opts)
          }else {
            if(function() {
              var G__3978 = obj;
              if(G__3978) {
                if(function() {
                  var or__3824__auto__ = G__3978.cljs$lang$protocol_mask$partition0$ & 536870912;
                  if(or__3824__auto__) {
                    return or__3824__auto__
                  }else {
                    return G__3978.cljs$core$IPrintable$
                  }
                }()) {
                  return true
                }else {
                  if(!G__3978.cljs$lang$protocol_mask$partition0$) {
                    return cljs.core.type_satisfies_.call(null, cljs.core.IPrintable, G__3978)
                  }else {
                    return false
                  }
                }
              }else {
                return cljs.core.type_satisfies_.call(null, cljs.core.IPrintable, G__3978)
              }
            }()) {
              return cljs.core.apply.call(null, cljs.core.write_all, writer, cljs.core._pr_seq.call(null, obj, opts))
            }else {
              if(cljs.core.truth_(cljs.core.regexp_QMARK_.call(null, obj))) {
                return cljs.core.write_all.call(null, writer, '#"', obj.source, '"')
              }else {
                if("\ufdd0'else") {
                  return cljs.core.write_all.call(null, writer, "#<", [cljs.core.str(obj)].join(""), ">")
                }else {
                  return null
                }
              }
            }
          }
        }
      }else {
        return null
      }
    }
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer.call(null, cljs.core.first.call(null, objs), writer, opts);
  var G__3980 = cljs.core.seq.call(null, cljs.core.next.call(null, objs));
  while(true) {
    if(G__3980) {
      var obj = cljs.core.first.call(null, G__3980);
      cljs.core._write.call(null, writer, " ");
      cljs.core.pr_writer.call(null, obj, writer, opts);
      var G__3981 = cljs.core.next.call(null, G__3980);
      G__3980 = G__3981;
      continue
    }else {
      return null
    }
    break
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer.call(null, objs, writer, opts);
  cljs.core._flush.call(null, writer);
  return sb
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if(cljs.core.empty_QMARK_.call(null, objs)) {
    return""
  }else {
    return[cljs.core.str(cljs.core.pr_sb_with_opts.call(null, objs, opts))].join("")
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if(cljs.core.empty_QMARK_.call(null, objs)) {
    return"\n"
  }else {
    var sb = cljs.core.pr_sb_with_opts.call(null, objs, opts);
    sb.append("\n");
    return[cljs.core.str(sb)].join("")
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print.call(null, cljs.core.pr_str_with_opts.call(null, objs, opts))
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print.call(null, "\n");
  if(cljs.core.truth_(cljs.core._lookup.call(null, opts, "\ufdd0'flush-on-newline", null))) {
    return cljs.core.flush.call(null)
  }else {
    return null
  }
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core.pr_opts = function pr_opts() {
  return cljs.core.ObjMap.fromObject(["\ufdd0'flush-on-newline", "\ufdd0'readably", "\ufdd0'meta", "\ufdd0'dup"], {"\ufdd0'flush-on-newline":cljs.core._STAR_flush_on_newline_STAR_, "\ufdd0'readably":cljs.core._STAR_print_readably_STAR_, "\ufdd0'meta":cljs.core._STAR_print_meta_STAR_, "\ufdd0'dup":cljs.core._STAR_print_dup_STAR_})
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null))
  };
  var pr_str = function(var_args) {
    var objs = null;
    if(goog.isDef(var_args)) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return pr_str__delegate.call(this, objs)
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__3982) {
    var objs = cljs.core.seq(arglist__3982);
    return pr_str__delegate(objs)
  };
  pr_str.cljs$lang$arity$variadic = pr_str__delegate;
  return pr_str
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null))
  };
  var prn_str = function(var_args) {
    var objs = null;
    if(goog.isDef(var_args)) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return prn_str__delegate.call(this, objs)
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__3983) {
    var objs = cljs.core.seq(arglist__3983);
    return prn_str__delegate(objs)
  };
  prn_str.cljs$lang$arity$variadic = prn_str__delegate;
  return prn_str
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null))
  };
  var pr = function(var_args) {
    var objs = null;
    if(goog.isDef(var_args)) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return pr__delegate.call(this, objs)
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__3984) {
    var objs = cljs.core.seq(arglist__3984);
    return pr__delegate(objs)
  };
  pr.cljs$lang$arity$variadic = pr__delegate;
  return pr
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), "\ufdd0'readably", false))
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if(goog.isDef(var_args)) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return cljs_core_print__delegate.call(this, objs)
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__3985) {
    var objs = cljs.core.seq(arglist__3985);
    return cljs_core_print__delegate(objs)
  };
  cljs_core_print.cljs$lang$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), "\ufdd0'readably", false))
  };
  var print_str = function(var_args) {
    var objs = null;
    if(goog.isDef(var_args)) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return print_str__delegate.call(this, objs)
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__3986) {
    var objs = cljs.core.seq(arglist__3986);
    return print_str__delegate(objs)
  };
  print_str.cljs$lang$arity$variadic = print_str__delegate;
  return print_str
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), "\ufdd0'readably", false));
    return cljs.core.newline.call(null, cljs.core.pr_opts.call(null))
  };
  var println = function(var_args) {
    var objs = null;
    if(goog.isDef(var_args)) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return println__delegate.call(this, objs)
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__3987) {
    var objs = cljs.core.seq(arglist__3987);
    return println__delegate(objs)
  };
  println.cljs$lang$arity$variadic = println__delegate;
  return println
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), "\ufdd0'readably", false))
  };
  var println_str = function(var_args) {
    var objs = null;
    if(goog.isDef(var_args)) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return println_str__delegate.call(this, objs)
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__3988) {
    var objs = cljs.core.seq(arglist__3988);
    return println_str__delegate(objs)
  };
  println_str.cljs$lang$arity$variadic = println_str__delegate;
  return println_str
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
    return cljs.core.newline.call(null, cljs.core.pr_opts.call(null))
  };
  var prn = function(var_args) {
    var objs = null;
    if(goog.isDef(var_args)) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
    }
    return prn__delegate.call(this, objs)
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__3989) {
    var objs = cljs.core.seq(arglist__3989);
    return prn__delegate(objs)
  };
  prn.cljs$lang$arity$variadic = prn__delegate;
  return prn
}();
cljs.core.printf = function() {
  var printf__delegate = function(fmt, args) {
    return cljs.core.print.call(null, cljs.core.apply.call(null, cljs.core.format, fmt, args))
  };
  var printf = function(fmt, var_args) {
    var args = null;
    if(goog.isDef(var_args)) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return printf__delegate.call(this, fmt, args)
  };
  printf.cljs$lang$maxFixedArity = 1;
  printf.cljs$lang$applyTo = function(arglist__3990) {
    var fmt = cljs.core.first(arglist__3990);
    var args = cljs.core.rest(arglist__3990);
    return printf__delegate(fmt, args)
  };
  printf.cljs$lang$arity$variadic = printf__delegate;
  return printf
}();
cljs.core.HashMap.prototype.cljs$core$IPrintable$ = true;
cljs.core.HashMap.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential.call(null, pr_pair, "{", ", ", "}", opts, coll)
};
cljs.core.IPrintable["number"] = true;
cljs.core._pr_seq["number"] = function(n, opts) {
  return cljs.core.list.call(null, [cljs.core.str(n)].join(""))
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "(", " ", ")", opts, coll)
};
cljs.core.Subvec.prototype.cljs$core$IPrintable$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "[", " ", "]", opts, coll)
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintable$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "(", " ", ")", opts, coll)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintable$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential.call(null, pr_pair, "{", ", ", "}", opts, coll)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential.call(null, pr_pair, "{", ", ", "}", opts, coll)
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintable$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll))
};
cljs.core.LazySeq.prototype.cljs$core$IPrintable$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "(", " ", ")", opts, coll)
};
cljs.core.RSeq.prototype.cljs$core$IPrintable$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "(", " ", ")", opts, coll)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintable$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "#{", " ", "}", opts, coll)
};
cljs.core.IPrintable["boolean"] = true;
cljs.core._pr_seq["boolean"] = function(bool, opts) {
  return cljs.core.list.call(null, [cljs.core.str(bool)].join(""))
};
cljs.core.IPrintable["string"] = true;
cljs.core._pr_seq["string"] = function(obj, opts) {
  if(cljs.core.keyword_QMARK_.call(null, obj)) {
    return cljs.core.list.call(null, [cljs.core.str(":"), cljs.core.str(function() {
      var temp__3974__auto__ = cljs.core.namespace.call(null, obj);
      if(cljs.core.truth_(temp__3974__auto__)) {
        var nspc = temp__3974__auto__;
        return[cljs.core.str(nspc), cljs.core.str("/")].join("")
      }else {
        return null
      }
    }()), cljs.core.str(cljs.core.name.call(null, obj))].join(""))
  }else {
    if(cljs.core.symbol_QMARK_.call(null, obj)) {
      return cljs.core.list.call(null, [cljs.core.str(function() {
        var temp__3974__auto__ = cljs.core.namespace.call(null, obj);
        if(cljs.core.truth_(temp__3974__auto__)) {
          var nspc = temp__3974__auto__;
          return[cljs.core.str(nspc), cljs.core.str("/")].join("")
        }else {
          return null
        }
      }()), cljs.core.str(cljs.core.name.call(null, obj))].join(""))
    }else {
      if("\ufdd0'else") {
        return cljs.core.list.call(null, cljs.core.truth_((new cljs.core.Keyword("\ufdd0'readably")).call(null, opts)) ? goog.string.quote(obj) : obj)
      }else {
        return null
      }
    }
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintable$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "(", " ", ")", opts, coll)
};
cljs.core.RedNode.prototype.cljs$core$IPrintable$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "[", " ", "]", opts, coll)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintable$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "(", " ", ")", opts, coll)
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintable$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential.call(null, pr_pair, "{", ", ", "}", opts, coll)
};
cljs.core.Vector.prototype.cljs$core$IPrintable$ = true;
cljs.core.Vector.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "[", " ", "]", opts, coll)
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintable$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "#{", " ", "}", opts, coll)
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "[", " ", "]", opts, coll)
};
cljs.core.List.prototype.cljs$core$IPrintable$ = true;
cljs.core.List.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "(", " ", ")", opts, coll)
};
cljs.core.IPrintable["array"] = true;
cljs.core._pr_seq["array"] = function(a, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "#<Array [", ", ", "]>", opts, a)
};
cljs.core.IPrintable["function"] = true;
cljs.core._pr_seq["function"] = function(this$) {
  return cljs.core.list.call(null, "#<", [cljs.core.str(this$)].join(""), ">")
};
cljs.core.EmptyList.prototype.cljs$core$IPrintable$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.list.call(null, "()")
};
cljs.core.BlackNode.prototype.cljs$core$IPrintable$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "[", " ", "]", opts, coll)
};
Date.prototype.cljs$core$IPrintable$ = true;
Date.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(d, _) {
  var normalize = function(n, len) {
    var ns = [cljs.core.str(n)].join("");
    while(true) {
      if(cljs.core.count.call(null, ns) < len) {
        var G__3991 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
        ns = G__3991;
        continue
      }else {
        return ns
      }
      break
    }
  };
  return cljs.core.list.call(null, [cljs.core.str('#inst "'), cljs.core.str(d.getUTCFullYear()), cljs.core.str("-"), cljs.core.str(normalize.call(null, d.getUTCMonth() + 1, 2)), cljs.core.str("-"), cljs.core.str(normalize.call(null, d.getUTCDate(), 2)), cljs.core.str("T"), cljs.core.str(normalize.call(null, d.getUTCHours(), 2)), cljs.core.str(":"), cljs.core.str(normalize.call(null, d.getUTCMinutes(), 2)), cljs.core.str(":"), cljs.core.str(normalize.call(null, d.getUTCSeconds(), 2)), cljs.core.str("."), 
  cljs.core.str(normalize.call(null, d.getUTCMilliseconds(), 3)), cljs.core.str("-"), cljs.core.str('00:00"')].join(""))
};
cljs.core.Cons.prototype.cljs$core$IPrintable$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "(", " ", ")", opts, coll)
};
cljs.core.Range.prototype.cljs$core$IPrintable$ = true;
cljs.core.Range.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "(", " ", ")", opts, coll)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintable$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "(", " ", ")", opts, coll)
};
cljs.core.ObjMap.prototype.cljs$core$IPrintable$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential.call(null, pr_pair, "{", ", ", "}", opts, coll)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintable$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(coll, opts) {
  return cljs.core.pr_sequential.call(null, cljs.core.pr_seq, "(", " ", ")", opts, coll)
};
cljs.core.HashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.HashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll)
};
cljs.core.IPrintWithWriter["number"] = true;
cljs.core._pr_writer["number"] = function(n, writer, opts) {
  1 / 0;
  return cljs.core._write.call(null, writer, [cljs.core.str(n)].join(""))
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll)
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll)
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll))
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll)
};
cljs.core.IPrintWithWriter["boolean"] = true;
cljs.core._pr_writer["boolean"] = function(bool, writer, opts) {
  return cljs.core._write.call(null, writer, [cljs.core.str(bool)].join(""))
};
cljs.core.IPrintWithWriter["string"] = true;
cljs.core._pr_writer["string"] = function(obj, writer, opts) {
  if(cljs.core.keyword_QMARK_.call(null, obj)) {
    cljs.core._write.call(null, writer, ":");
    var temp__3974__auto__ = cljs.core.namespace.call(null, obj);
    if(cljs.core.truth_(temp__3974__auto__)) {
      var nspc = temp__3974__auto__;
      cljs.core.write_all.call(null, writer, [cljs.core.str(nspc)].join(""), "/")
    }else {
    }
    return cljs.core._write.call(null, writer, cljs.core.name.call(null, obj))
  }else {
    if(cljs.core.symbol_QMARK_.call(null, obj)) {
      var temp__3974__auto__ = cljs.core.namespace.call(null, obj);
      if(cljs.core.truth_(temp__3974__auto__)) {
        var nspc = temp__3974__auto__;
        cljs.core.write_all.call(null, writer, [cljs.core.str(nspc)].join(""), "/")
      }else {
      }
      return cljs.core._write.call(null, writer, cljs.core.name.call(null, obj))
    }else {
      if("\ufdd0'else") {
        if(cljs.core.truth_((new cljs.core.Keyword("\ufdd0'readably")).call(null, opts))) {
          return cljs.core._write.call(null, writer, goog.string.quote(obj))
        }else {
          return cljs.core._write.call(null, writer, obj)
        }
      }else {
        return null
      }
    }
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll)
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll)
};
cljs.core.Vector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Vector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll)
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll)
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll)
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.IPrintWithWriter["array"] = true;
cljs.core._pr_writer["array"] = function(a, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#<Array [", ", ", "]>", opts, a)
};
cljs.core.IPrintWithWriter["function"] = true;
cljs.core._pr_writer["function"] = function(this$, writer, _) {
  return cljs.core.write_all.call(null, writer, "#<", [cljs.core.str(this$)].join(""), ">")
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core._write.call(null, writer, "()")
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll)
};
Date.prototype.cljs$core$IPrintWithWriter$ = true;
Date.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(d, writer, _) {
  var normalize = function(n, len) {
    var ns = [cljs.core.str(n)].join("");
    while(true) {
      if(cljs.core.count.call(null, ns) < len) {
        var G__3992 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
        ns = G__3992;
        continue
      }else {
        return ns
      }
      break
    }
  };
  return cljs.core.write_all.call(null, writer, '#inst "', [cljs.core.str(d.getUTCFullYear())].join(""), "-", normalize.call(null, d.getUTCMonth() + 1, 2), "-", normalize.call(null, d.getUTCDate(), 2), "T", normalize.call(null, d.getUTCHours(), 2), ":", normalize.call(null, d.getUTCMinutes(), 2), ":", normalize.call(null, d.getUTCSeconds(), 2), ".", normalize.call(null, d.getUTCMilliseconds(), 3), "-", '00:00"')
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval)
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll)
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll)
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  return cljs.core.compare_indexed.call(null, x, y)
};
goog.provide("cljs.core.Atom");
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2690809856;
  this.cljs$lang$protocol_mask$partition1$ = 2
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/Atom")
};
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/Atom")
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  return goog.getUid(this$)
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var G__3993 = cljs.core.seq.call(null, self__.watches);
  while(true) {
    if(G__3993) {
      var vec__3994 = cljs.core.first.call(null, G__3993);
      var key = cljs.core.nth.call(null, vec__3994, 0, null);
      var f = cljs.core.nth.call(null, vec__3994, 1, null);
      f.call(null, key, this$, oldval, newval);
      var G__3995 = cljs.core.next.call(null, G__3993);
      G__3993 = G__3995;
      continue
    }else {
      return null
    }
    break
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  return this$.watches = cljs.core.assoc.call(null, self__.watches, key, f)
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  return this$.watches = cljs.core.dissoc.call(null, self__.watches, key)
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  cljs.core._write.call(null, writer, "#<Atom: ");
  cljs.core._pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, ">")
};
cljs.core.Atom.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(a, opts) {
  var self__ = this;
  return cljs.core.concat.call(null, cljs.core.PersistentVector.fromArray(["#<Atom: "], true), cljs.core._pr_seq.call(null, self__.state, opts), ">")
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  return self__.meta
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  return self__.state
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  return o === other
};
cljs.core.Atom;
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null)
  };
  var atom__2 = function() {
    var G__3999__delegate = function(x, p__3996) {
      var map__3998 = p__3996;
      var map__3998__$1 = cljs.core.seq_QMARK_.call(null, map__3998) ? cljs.core.apply.call(null, cljs.core.hash_map, map__3998) : map__3998;
      var validator = cljs.core._lookup.call(null, map__3998__$1, "\ufdd0'validator", null);
      var meta = cljs.core._lookup.call(null, map__3998__$1, "\ufdd0'meta", null);
      return new cljs.core.Atom(x, meta, validator, null)
    };
    var G__3999 = function(x, var_args) {
      var p__3996 = null;
      if(goog.isDef(var_args)) {
        p__3996 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
      }
      return G__3999__delegate.call(this, x, p__3996)
    };
    G__3999.cljs$lang$maxFixedArity = 1;
    G__3999.cljs$lang$applyTo = function(arglist__4000) {
      var x = cljs.core.first(arglist__4000);
      var p__3996 = cljs.core.rest(arglist__4000);
      return G__3999__delegate(x, p__3996)
    };
    G__3999.cljs$lang$arity$variadic = G__3999__delegate;
    return G__3999
  }();
  atom = function(x, var_args) {
    var p__3996 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$lang$arity$variadic(x, cljs.core.array_seq(arguments, 1))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$lang$arity$1 = atom__1;
  atom.cljs$lang$arity$variadic = atom__2.cljs$lang$arity$variadic;
  return atom
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  var temp__3974__auto__ = a.validator;
  if(cljs.core.truth_(temp__3974__auto__)) {
    var validate = temp__3974__auto__;
    if(cljs.core.truth_(validate.call(null, new_value))) {
    }else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'validate", "\ufdd1'new-value"), cljs.core.hash_map("\ufdd0'line", 6685))))].join(""));
    }
  }else {
  }
  var old_value = a.state;
  a.state = new_value;
  cljs.core._notify_watches.call(null, a, old_value, new_value);
  return new_value
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state))
  };
  var swap_BANG___3 = function(a, f, x) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x))
  };
  var swap_BANG___4 = function(a, f, x, y) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y))
  };
  var swap_BANG___5 = function(a, f, x, y, z) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y, z))
  };
  var swap_BANG___6 = function() {
    var G__4001__delegate = function(a, f, x, y, z, more) {
      return cljs.core.reset_BANG_.call(null, a, cljs.core.apply.call(null, f, a.state, x, y, z, more))
    };
    var G__4001 = function(a, f, x, y, z, var_args) {
      var more = null;
      if(goog.isDef(var_args)) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0)
      }
      return G__4001__delegate.call(this, a, f, x, y, z, more)
    };
    G__4001.cljs$lang$maxFixedArity = 5;
    G__4001.cljs$lang$applyTo = function(arglist__4002) {
      var a = cljs.core.first(arglist__4002);
      var f = cljs.core.first(cljs.core.next(arglist__4002));
      var x = cljs.core.first(cljs.core.next(cljs.core.next(arglist__4002)));
      var y = cljs.core.first(cljs.core.next(cljs.core.next(cljs.core.next(arglist__4002))));
      var z = cljs.core.first(cljs.core.next(cljs.core.next(cljs.core.next(cljs.core.next(arglist__4002)))));
      var more = cljs.core.rest(cljs.core.next(cljs.core.next(cljs.core.next(cljs.core.next(arglist__4002)))));
      return G__4001__delegate(a, f, x, y, z, more)
    };
    G__4001.cljs$lang$arity$variadic = G__4001__delegate;
    return G__4001
  }();
  swap_BANG_ = function(a, f, x, y, z, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      case 5:
        return swap_BANG___5.call(this, a, f, x, y, z);
      default:
        return swap_BANG___6.cljs$lang$arity$variadic(a, f, x, y, z, cljs.core.array_seq(arguments, 5))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 5;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___6.cljs$lang$applyTo;
  swap_BANG_.cljs$lang$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$lang$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$lang$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$lang$arity$5 = swap_BANG___5;
  swap_BANG_.cljs$lang$arity$variadic = swap_BANG___6.cljs$lang$arity$variadic;
  return swap_BANG_
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if(cljs.core._EQ_.call(null, a.state, oldval)) {
    cljs.core.reset_BANG_.call(null, a, newval);
    return true
  }else {
    return false
  }
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref.call(null, o)
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.call(null, f, iref.meta, args)
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if(goog.isDef(var_args)) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args)
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__4003) {
    var iref = cljs.core.first(arglist__4003);
    var f = cljs.core.first(cljs.core.next(arglist__4003));
    var args = cljs.core.rest(cljs.core.next(arglist__4003));
    return alter_meta_BANG___delegate(iref, f, args)
  };
  alter_meta_BANG_.cljs$lang$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  return cljs.core._add_watch.call(null, iref, key, f)
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  return cljs.core._remove_watch.call(null, iref, key)
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.call(null, "G__")
  };
  var gensym__1 = function(prefix_string) {
    if(cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = cljs.core.atom.call(null, 0)
    }else {
    }
    return cljs.core.symbol.call(null, [cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.call(null, cljs.core.gensym_counter, cljs.core.inc))].join(""))
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$lang$arity$0 = gensym__0;
  gensym.cljs$lang$arity$1 = gensym__1;
  return gensym
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
goog.provide("cljs.core.Delay");
cljs.core.Delay = function(state, f) {
  this.state = state;
  this.f = f;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/Delay")
};
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/Delay")
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  return(new cljs.core.Keyword("\ufdd0'done")).call(null, cljs.core.deref.call(null, self__.state))
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  return(new cljs.core.Keyword("\ufdd0'value")).call(null, cljs.core.swap_BANG_.call(null, self__.state, function(p__4004) {
    var map__4005 = p__4004;
    var map__4005__$1 = cljs.core.seq_QMARK_.call(null, map__4005) ? cljs.core.apply.call(null, cljs.core.hash_map, map__4005) : map__4005;
    var curr_state = map__4005__$1;
    var done = cljs.core._lookup.call(null, map__4005__$1, "\ufdd0'done", null);
    if(cljs.core.truth_(done)) {
      return curr_state
    }else {
      return cljs.core.ObjMap.fromObject(["\ufdd0'done", "\ufdd0'value"], {"\ufdd0'done":true, "\ufdd0'value":self__.f.call(null)})
    }
  }))
};
cljs.core.Delay;
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return cljs.core.instance_QMARK_.call(null, cljs.core.Delay, x)
};
cljs.core.force = function force(x) {
  if(cljs.core.delay_QMARK_.call(null, x)) {
    return cljs.core.deref.call(null, x)
  }else {
    return x
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_.call(null, d)
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj__delegate = function(x, options) {
    var map__4011 = options;
    var map__4011__$1 = cljs.core.seq_QMARK_.call(null, map__4011) ? cljs.core.apply.call(null, cljs.core.hash_map, map__4011) : map__4011;
    var keywordize_keys = cljs.core._lookup.call(null, map__4011__$1, "\ufdd0'keywordize-keys", null);
    var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
    var f = function thisfn(x__$1) {
      if(cljs.core.seq_QMARK_.call(null, x__$1)) {
        return cljs.core.doall.call(null, cljs.core.map.call(null, thisfn, x__$1))
      }else {
        if(cljs.core.coll_QMARK_.call(null, x__$1)) {
          return cljs.core.into.call(null, cljs.core.empty.call(null, x__$1), cljs.core.map.call(null, thisfn, x__$1))
        }else {
          if(cljs.core.truth_(goog.isArray(x__$1))) {
            return cljs.core.vec.call(null, cljs.core.map.call(null, thisfn, x__$1))
          }else {
            if(cljs.core.type.call(null, x__$1) === Object) {
              return cljs.core.into.call(null, cljs.core.ObjMap.EMPTY, function() {
                var iter__2470__auto__ = function iter__4014(s__4015) {
                  return new cljs.core.LazySeq(null, false, function() {
                    var s__4015__$1 = s__4015;
                    while(true) {
                      if(cljs.core.seq.call(null, s__4015__$1)) {
                        var k = cljs.core.first.call(null, s__4015__$1);
                        return cljs.core.cons.call(null, cljs.core.PersistentVector.fromArray([keyfn.call(null, k), thisfn.call(null, x__$1[k])], true), iter__4014.call(null, cljs.core.rest.call(null, s__4015__$1)))
                      }else {
                        return null
                      }
                      break
                    }
                  }, null)
                };
                return iter__2470__auto__.call(null, cljs.core.js_keys.call(null, x__$1))
              }())
            }else {
              if("\ufdd0'else") {
                return x__$1
              }else {
                return null
              }
            }
          }
        }
      }
    };
    return f.call(null, x)
  };
  var js__GT_clj = function(x, var_args) {
    var options = null;
    if(goog.isDef(var_args)) {
      options = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return js__GT_clj__delegate.call(this, x, options)
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = function(arglist__4016) {
    var x = cljs.core.first(arglist__4016);
    var options = cljs.core.rest(arglist__4016);
    return js__GT_clj__delegate(x, options)
  };
  js__GT_clj.cljs$lang$arity$variadic = js__GT_clj__delegate;
  return js__GT_clj
}();
cljs.core.memoize = function memoize(f) {
  var mem = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  return function() {
    var G__4017__delegate = function(args) {
      var temp__3971__auto__ = cljs.core._lookup.call(null, cljs.core.deref.call(null, mem), args, null);
      if(cljs.core.truth_(temp__3971__auto__)) {
        var v = temp__3971__auto__;
        return v
      }else {
        var ret = cljs.core.apply.call(null, f, args);
        cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, args, ret);
        return ret
      }
    };
    var G__4017 = function(var_args) {
      var args = null;
      if(goog.isDef(var_args)) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0)
      }
      return G__4017__delegate.call(this, args)
    };
    G__4017.cljs$lang$maxFixedArity = 0;
    G__4017.cljs$lang$applyTo = function(arglist__4018) {
      var args = cljs.core.seq(arglist__4018);
      return G__4017__delegate(args)
    };
    G__4017.cljs$lang$arity$variadic = G__4017__delegate;
    return G__4017
  }()
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while(true) {
      var ret = f.call(null);
      if(cljs.core.fn_QMARK_.call(null, ret)) {
        var G__4019 = ret;
        f = G__4019;
        continue
      }else {
        return ret
      }
      break
    }
  };
  var trampoline__2 = function() {
    var G__4020__delegate = function(f, args) {
      return trampoline.call(null, function() {
        return cljs.core.apply.call(null, f, args)
      })
    };
    var G__4020 = function(f, var_args) {
      var args = null;
      if(goog.isDef(var_args)) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
      }
      return G__4020__delegate.call(this, f, args)
    };
    G__4020.cljs$lang$maxFixedArity = 1;
    G__4020.cljs$lang$applyTo = function(arglist__4021) {
      var f = cljs.core.first(arglist__4021);
      var args = cljs.core.rest(arglist__4021);
      return G__4020__delegate(f, args)
    };
    G__4020.cljs$lang$arity$variadic = G__4020__delegate;
    return G__4020
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        return trampoline__2.cljs$lang$arity$variadic(f, cljs.core.array_seq(arguments, 1))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$lang$arity$1 = trampoline__1;
  trampoline.cljs$lang$arity$variadic = trampoline__2.cljs$lang$arity$variadic;
  return trampoline
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.call(null, 1)
  };
  var rand__1 = function(n) {
    return Math.random.call(null) * n
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$lang$arity$0 = rand__0;
  rand.cljs$lang$arity$1 = rand__1;
  return rand
}();
cljs.core.rand_int = function rand_int(n) {
  return Math.floor.call(null, Math.random.call(null) * n)
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.call(null, coll, cljs.core.rand_int.call(null, cljs.core.count.call(null, coll)))
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.reduce.call(null, function(ret, x) {
    var k = f.call(null, x);
    return cljs.core.assoc.call(null, ret, k, cljs.core.conj.call(null, cljs.core._lookup.call(null, ret, k, cljs.core.PersistentVector.EMPTY), x))
  }, cljs.core.ObjMap.EMPTY, coll)
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return cljs.core.ObjMap.fromObject(["\ufdd0'parents", "\ufdd0'descendants", "\ufdd0'ancestors"], {"\ufdd0'parents":cljs.core.ObjMap.EMPTY, "\ufdd0'descendants":cljs.core.ObjMap.EMPTY, "\ufdd0'ancestors":cljs.core.ObjMap.EMPTY})
};
cljs.core.global_hierarchy = cljs.core.atom.call(null, cljs.core.make_hierarchy.call(null));
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.call(null, cljs.core.deref.call(null, cljs.core.global_hierarchy), child, parent)
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__3824__auto__ = cljs.core._EQ_.call(null, child, parent);
    if(or__3824__auto__) {
      return or__3824__auto__
    }else {
      var or__3824__auto____$1 = cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword("\ufdd0'ancestors")).call(null, h).call(null, child), parent);
      if(or__3824__auto____$1) {
        return or__3824__auto____$1
      }else {
        var and__3822__auto__ = cljs.core.vector_QMARK_.call(null, parent);
        if(and__3822__auto__) {
          var and__3822__auto____$1 = cljs.core.vector_QMARK_.call(null, child);
          if(and__3822__auto____$1) {
            var and__3822__auto____$2 = cljs.core.count.call(null, parent) === cljs.core.count.call(null, child);
            if(and__3822__auto____$2) {
              var ret = true;
              var i = 0;
              while(true) {
                if(function() {
                  var or__3824__auto____$2 = cljs.core.not.call(null, ret);
                  if(or__3824__auto____$2) {
                    return or__3824__auto____$2
                  }else {
                    return i === cljs.core.count.call(null, parent)
                  }
                }()) {
                  return ret
                }else {
                  var G__4022 = isa_QMARK_.call(null, h, child.call(null, i), parent.call(null, i));
                  var G__4023 = i + 1;
                  ret = G__4022;
                  i = G__4023;
                  continue
                }
                break
              }
            }else {
              return and__3822__auto____$2
            }
          }else {
            return and__3822__auto____$1
          }
        }else {
          return and__3822__auto__
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$lang$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$lang$arity$3 = isa_QMARK___3;
  return isa_QMARK_
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.call(null, cljs.core.deref.call(null, cljs.core.global_hierarchy), tag)
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core._lookup.call(null, (new cljs.core.Keyword("\ufdd0'parents")).call(null, h), tag, null))
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$lang$arity$1 = parents__1;
  parents.cljs$lang$arity$2 = parents__2;
  return parents
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.call(null, cljs.core.deref.call(null, cljs.core.global_hierarchy), tag)
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core._lookup.call(null, (new cljs.core.Keyword("\ufdd0'ancestors")).call(null, h), tag, null))
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$lang$arity$1 = ancestors__1;
  ancestors.cljs$lang$arity$2 = ancestors__2;
  return ancestors
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.call(null, cljs.core.deref.call(null, cljs.core.global_hierarchy), tag)
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core._lookup.call(null, (new cljs.core.Keyword("\ufdd0'descendants")).call(null, h), tag, null))
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$lang$arity$1 = descendants__1;
  descendants.cljs$lang$arity$2 = descendants__2;
  return descendants
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if(cljs.core.truth_(cljs.core.namespace.call(null, parent))) {
    }else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'namespace", "\ufdd1'parent"), cljs.core.hash_map("\ufdd0'line", 6969))))].join(""));
    }
    cljs.core.swap_BANG_.call(null, cljs.core.global_hierarchy, derive, tag, parent);
    return null
  };
  var derive__3 = function(h, tag, parent) {
    if(cljs.core.not_EQ_.call(null, tag, parent)) {
    }else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'not=", "\ufdd1'tag", "\ufdd1'parent"), cljs.core.hash_map("\ufdd0'line", 6973))))].join(""));
    }
    var tp = (new cljs.core.Keyword("\ufdd0'parents")).call(null, h);
    var td = (new cljs.core.Keyword("\ufdd0'descendants")).call(null, h);
    var ta = (new cljs.core.Keyword("\ufdd0'ancestors")).call(null, h);
    var tf = function(m, source, sources, target, targets) {
      return cljs.core.reduce.call(null, function(ret, k) {
        return cljs.core.assoc.call(null, ret, k, cljs.core.reduce.call(null, cljs.core.conj, cljs.core._lookup.call(null, targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons.call(null, target, targets.call(null, target))))
      }, m, cljs.core.cons.call(null, source, sources.call(null, source)))
    };
    var or__3824__auto__ = cljs.core.contains_QMARK_.call(null, tp.call(null, tag), parent) ? null : function() {
      if(cljs.core.contains_QMARK_.call(null, ta.call(null, tag), parent)) {
        throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
      }else {
      }
      if(cljs.core.contains_QMARK_.call(null, ta.call(null, parent), tag)) {
        throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
      }else {
      }
      return cljs.core.ObjMap.fromObject(["\ufdd0'parents", "\ufdd0'ancestors", "\ufdd0'descendants"], {"\ufdd0'parents":cljs.core.assoc.call(null, (new cljs.core.Keyword("\ufdd0'parents")).call(null, h), tag, cljs.core.conj.call(null, cljs.core._lookup.call(null, tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), "\ufdd0'ancestors":tf.call(null, (new cljs.core.Keyword("\ufdd0'ancestors")).call(null, h), tag, td, parent, ta), "\ufdd0'descendants":tf.call(null, (new cljs.core.Keyword("\ufdd0'descendants")).call(null, 
      h), parent, ta, tag, td)})
    }();
    if(cljs.core.truth_(or__3824__auto__)) {
      return or__3824__auto__
    }else {
      return h
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$lang$arity$2 = derive__2;
  derive.cljs$lang$arity$3 = derive__3;
  return derive
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_BANG_.call(null, cljs.core.global_hierarchy, underive, tag, parent);
    return null
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword("\ufdd0'parents")).call(null, h);
    var childsParents = cljs.core.truth_(parentMap.call(null, tag)) ? cljs.core.disj.call(null, parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty.call(null, childsParents)) ? cljs.core.assoc.call(null, parentMap, tag, childsParents) : cljs.core.dissoc.call(null, parentMap, tag);
    var deriv_seq = cljs.core.flatten.call(null, cljs.core.map.call(null, function(p1__4024_SHARP_) {
      return cljs.core.cons.call(null, cljs.core.first.call(null, p1__4024_SHARP_), cljs.core.interpose.call(null, cljs.core.first.call(null, p1__4024_SHARP_), cljs.core.second.call(null, p1__4024_SHARP_)))
    }, cljs.core.seq.call(null, newParents)));
    if(cljs.core.contains_QMARK_.call(null, parentMap.call(null, tag), parent)) {
      return cljs.core.reduce.call(null, function(p1__4025_SHARP_, p2__4026_SHARP_) {
        return cljs.core.apply.call(null, cljs.core.derive, p1__4025_SHARP_, p2__4026_SHARP_)
      }, cljs.core.make_hierarchy.call(null), cljs.core.partition.call(null, 2, deriv_seq))
    }else {
      return h
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$lang$arity$2 = underive__2;
  underive.cljs$lang$arity$3 = underive__3;
  return underive
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.call(null, method_cache, function(_) {
    return cljs.core.deref.call(null, method_table)
  });
  return cljs.core.swap_BANG_.call(null, cached_hierarchy, function(_) {
    return cljs.core.deref.call(null, hierarchy)
  })
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = cljs.core.deref.call(null, prefer_table).call(null, x);
  var or__3824__auto__ = cljs.core.truth_(function() {
    var and__3822__auto__ = xprefs;
    if(cljs.core.truth_(and__3822__auto__)) {
      return xprefs.call(null, y)
    }else {
      return and__3822__auto__
    }
  }()) ? true : null;
  if(cljs.core.truth_(or__3824__auto__)) {
    return or__3824__auto__
  }else {
    var or__3824__auto____$1 = function() {
      var ps = cljs.core.parents.call(null, y);
      while(true) {
        if(cljs.core.count.call(null, ps) > 0) {
          if(cljs.core.truth_(prefers_STAR_.call(null, x, cljs.core.first.call(null, ps), prefer_table))) {
          }else {
          }
          var G__4027 = cljs.core.rest.call(null, ps);
          ps = G__4027;
          continue
        }else {
          return null
        }
        break
      }
    }();
    if(cljs.core.truth_(or__3824__auto____$1)) {
      return or__3824__auto____$1
    }else {
      var or__3824__auto____$2 = function() {
        var ps = cljs.core.parents.call(null, x);
        while(true) {
          if(cljs.core.count.call(null, ps) > 0) {
            if(cljs.core.truth_(prefers_STAR_.call(null, cljs.core.first.call(null, ps), y, prefer_table))) {
            }else {
            }
            var G__4028 = cljs.core.rest.call(null, ps);
            ps = G__4028;
            continue
          }else {
            return null
          }
          break
        }
      }();
      if(cljs.core.truth_(or__3824__auto____$2)) {
        return or__3824__auto____$2
      }else {
        return false
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__3824__auto__ = cljs.core.prefers_STAR_.call(null, x, y, prefer_table);
  if(cljs.core.truth_(or__3824__auto__)) {
    return or__3824__auto__
  }else {
    return cljs.core.isa_QMARK_.call(null, x, y)
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.call(null, function(be, p__4031) {
    var vec__4032 = p__4031;
    var k = cljs.core.nth.call(null, vec__4032, 0, null);
    var _ = cljs.core.nth.call(null, vec__4032, 1, null);
    var e = vec__4032;
    if(cljs.core.isa_QMARK_.call(null, dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__3824__auto__ = be == null;
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          return cljs.core.dominates.call(null, k, cljs.core.first.call(null, be), prefer_table)
        }
      }()) ? e : be;
      if(cljs.core.truth_(cljs.core.dominates.call(null, cljs.core.first.call(null, be2), k, prefer_table))) {
      }else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -> "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first.call(null, be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2
    }else {
      return be
    }
  }, null, cljs.core.deref.call(null, method_table));
  if(cljs.core.truth_(best_entry)) {
    if(cljs.core._EQ_.call(null, cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.call(null, method_cache, cljs.core.assoc, dispatch_val, cljs.core.second.call(null, best_entry));
      return cljs.core.second.call(null, best_entry)
    }else {
      cljs.core.reset_cache.call(null, method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy)
    }
  }else {
    return null
  }
};
cljs.core.IMultiFn = {};
cljs.core._reset = function _reset(mf) {
  if(function() {
    var and__3822__auto__ = mf;
    if(and__3822__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf)
  }else {
    var x__2373__auto__ = mf == null ? null : mf;
    return function() {
      var or__3824__auto__ = cljs.core._reset[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._reset["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf)
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if(function() {
    var and__3822__auto__ = mf;
    if(and__3822__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method)
  }else {
    var x__2373__auto__ = mf == null ? null : mf;
    return function() {
      var or__3824__auto__ = cljs.core._add_method[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._add_method["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method)
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if(function() {
    var and__3822__auto__ = mf;
    if(and__3822__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val)
  }else {
    var x__2373__auto__ = mf == null ? null : mf;
    return function() {
      var or__3824__auto__ = cljs.core._remove_method[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._remove_method["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val)
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if(function() {
    var and__3822__auto__ = mf;
    if(and__3822__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y)
  }else {
    var x__2373__auto__ = mf == null ? null : mf;
    return function() {
      var or__3824__auto__ = cljs.core._prefer_method[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._prefer_method["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y)
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if(function() {
    var and__3822__auto__ = mf;
    if(and__3822__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val)
  }else {
    var x__2373__auto__ = mf == null ? null : mf;
    return function() {
      var or__3824__auto__ = cljs.core._get_method[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._get_method["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val)
  }
};
cljs.core._methods = function _methods(mf) {
  if(function() {
    var and__3822__auto__ = mf;
    if(and__3822__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf)
  }else {
    var x__2373__auto__ = mf == null ? null : mf;
    return function() {
      var or__3824__auto__ = cljs.core._methods[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._methods["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf)
  }
};
cljs.core._prefers = function _prefers(mf) {
  if(function() {
    var and__3822__auto__ = mf;
    if(and__3822__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf)
  }else {
    var x__2373__auto__ = mf == null ? null : mf;
    return function() {
      var or__3824__auto__ = cljs.core._prefers[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._prefers["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf)
  }
};
cljs.core._dispatch = function _dispatch(mf, args) {
  if(function() {
    var and__3822__auto__ = mf;
    if(and__3822__auto__) {
      return mf.cljs$core$IMultiFn$_dispatch$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return mf.cljs$core$IMultiFn$_dispatch$arity$2(mf, args)
  }else {
    var x__2373__auto__ = mf == null ? null : mf;
    return function() {
      var or__3824__auto__ = cljs.core._dispatch[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core._dispatch["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-dispatch", mf);
        }
      }
    }().call(null, mf, args)
  }
};
cljs.core.do_dispatch = function do_dispatch(mf, dispatch_fn, args) {
  var dispatch_val = cljs.core.apply.call(null, dispatch_fn, args);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if(cljs.core.truth_(target_fn)) {
  }else {
    throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(cljs.core.name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
  }
  return cljs.core.apply.call(null, target_fn, args)
};
goog.provide("cljs.core.MultiFn");
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194304;
  this.cljs$lang$protocol_mask$partition1$ = 256
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/MultiFn")
};
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/MultiFn")
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  return goog.getUid(this$)
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, function(mf__$1) {
    return cljs.core.ObjMap.EMPTY
  });
  cljs.core.swap_BANG_.call(null, self__.method_cache, function(mf__$1) {
    return cljs.core.ObjMap.EMPTY
  });
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$1) {
    return cljs.core.ObjMap.EMPTY
  });
  cljs.core.swap_BANG_.call(null, self__.cached_hierarchy, function(mf__$1) {
    return null
  });
  return mf
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  if(cljs.core._EQ_.call(null, cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.call(null, self__.hierarchy))) {
  }else {
    cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy)
  }
  var temp__3971__auto__ = cljs.core.deref.call(null, self__.method_cache).call(null, dispatch_val);
  if(cljs.core.truth_(temp__3971__auto__)) {
    var target_fn = temp__3971__auto__;
    return target_fn
  }else {
    var temp__3971__auto____$1 = cljs.core.find_and_cache_best_method.call(null, self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if(cljs.core.truth_(temp__3971__auto____$1)) {
      var target_fn = temp__3971__auto____$1;
      return target_fn
    }else {
      return cljs.core.deref.call(null, self__.method_table).call(null, self__.default_dispatch_val)
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  if(cljs.core.truth_(cljs.core.prefers_STAR_.call(null, dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  }else {
  }
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(old) {
    return cljs.core.assoc.call(null, old, dispatch_val_x, cljs.core.conj.call(null, cljs.core._lookup.call(null, old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y))
  });
  return cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy)
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  return cljs.core.deref.call(null, self__.method_table)
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  return cljs.core.deref.call(null, self__.prefer_table)
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch$arity$2 = function(mf, args) {
  var self__ = this;
  return cljs.core.do_dispatch.call(null, mf, self__.dispatch_fn, args)
};
cljs.core.MultiFn;
cljs.core.MultiFn.prototype.call = function() {
  var G__4033__delegate = function(_, args) {
    var self = this;
    return cljs.core._dispatch.call(null, self, args)
  };
  var G__4033 = function(_, var_args) {
    var args = null;
    if(goog.isDef(var_args)) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0)
    }
    return G__4033__delegate.call(this, _, args)
  };
  G__4033.cljs$lang$maxFixedArity = 1;
  G__4033.cljs$lang$applyTo = function(arglist__4034) {
    var _ = cljs.core.first(arglist__4034);
    var args = cljs.core.rest(arglist__4034);
    return G__4033__delegate(_, args)
  };
  G__4033.cljs$lang$arity$variadic = G__4033__delegate;
  return G__4033
}();
cljs.core.MultiFn.prototype.apply = function(_, args) {
  var self = this;
  return cljs.core._dispatch.call(null, self, args)
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset.call(null, multifn)
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method.call(null, multifn, dispatch_val)
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method.call(null, multifn, dispatch_val_x, dispatch_val_y)
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods.call(null, multifn)
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method.call(null, multifn, dispatch_val)
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers.call(null, multifn)
};
goog.provide("cljs.core.UUID");
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2690646016
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core/UUID")
};
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core/UUID")
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  return goog.string.hashCode(cljs.core.pr_str.call(null, this$))
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  return cljs.core._write.call(null, writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""))
};
cljs.core.UUID.prototype.cljs$core$IPrintable$_pr_seq$arity$2 = function(_, ___$1) {
  var self__ = this;
  return cljs.core.list.call(null, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""))
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var and__3822__auto__ = cljs.core.instance_QMARK_.call(null, cljs.core.UUID, other);
  if(and__3822__auto__) {
    return self__.uuid === other.uuid
  }else {
    return and__3822__auto__
  }
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.UUID;
goog.provide("clojure.walk");
goog.require("cljs.core");
clojure.walk.walk = function walk(inner, outer, form) {
  if(cljs.core.seq_QMARK_.call(null, form)) {
    return outer.call(null, cljs.core.doall.call(null, cljs.core.map.call(null, inner, form)))
  }else {
    if(cljs.core.coll_QMARK_.call(null, form)) {
      return outer.call(null, cljs.core.into.call(null, cljs.core.empty.call(null, form), cljs.core.map.call(null, inner, form)))
    }else {
      if("\ufdd0'else") {
        return outer.call(null, form)
      }else {
        return null
      }
    }
  }
};
clojure.walk.postwalk = function postwalk(f, form) {
  return clojure.walk.walk.call(null, cljs.core.partial.call(null, postwalk, f), f, form)
};
clojure.walk.prewalk = function prewalk(f, form) {
  return clojure.walk.walk.call(null, cljs.core.partial.call(null, prewalk, f), cljs.core.identity, f.call(null, form))
};
clojure.walk.keywordize_keys = function keywordize_keys(m) {
  var f = function(p__4037) {
    var vec__4038 = p__4037;
    var k = cljs.core.nth.call(null, vec__4038, 0, null);
    var v = cljs.core.nth.call(null, vec__4038, 1, null);
    if(cljs.core.string_QMARK_.call(null, k)) {
      return cljs.core.PersistentVector.fromArray([cljs.core.keyword.call(null, k), v], true)
    }else {
      return cljs.core.PersistentVector.fromArray([k, v], true)
    }
  };
  return clojure.walk.postwalk.call(null, function(x) {
    if(cljs.core.map_QMARK_.call(null, x)) {
      return cljs.core.into.call(null, cljs.core.ObjMap.EMPTY, cljs.core.map.call(null, f, x))
    }else {
      return x
    }
  }, m)
};
clojure.walk.stringify_keys = function stringify_keys(m) {
  var f = function(p__4041) {
    var vec__4042 = p__4041;
    var k = cljs.core.nth.call(null, vec__4042, 0, null);
    var v = cljs.core.nth.call(null, vec__4042, 1, null);
    if(cljs.core.keyword_QMARK_.call(null, k)) {
      return cljs.core.PersistentVector.fromArray([cljs.core.name.call(null, k), v], true)
    }else {
      return cljs.core.PersistentVector.fromArray([k, v], true)
    }
  };
  return clojure.walk.postwalk.call(null, function(x) {
    if(cljs.core.map_QMARK_.call(null, x)) {
      return cljs.core.into.call(null, cljs.core.ObjMap.EMPTY, cljs.core.map.call(null, f, x))
    }else {
      return x
    }
  }, m)
};
clojure.walk.prewalk_replace = function prewalk_replace(smap, form) {
  return clojure.walk.prewalk.call(null, function(x) {
    if(cljs.core.contains_QMARK_.call(null, smap, x)) {
      return smap.call(null, x)
    }else {
      return x
    }
  }, form)
};
clojure.walk.postwalk_replace = function postwalk_replace(smap, form) {
  return clojure.walk.postwalk.call(null, function(x) {
    if(cljs.core.contains_QMARK_.call(null, smap, x)) {
      return smap.call(null, x)
    }else {
      return x
    }
  }, form)
};
goog.provide("clojure.set");
goog.require("cljs.core");
clojure.set.bubble_max_key = function bubble_max_key(k, coll) {
  var max = cljs.core.apply.call(null, cljs.core.max_key, k, coll);
  return cljs.core.cons.call(null, max, cljs.core.remove.call(null, function(p1__4043_SHARP_) {
    return max === p1__4043_SHARP_
  }, coll))
};
clojure.set.union = function() {
  var union = null;
  var union__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY
  };
  var union__1 = function(s1) {
    return s1
  };
  var union__2 = function(s1, s2) {
    if(cljs.core.count.call(null, s1) < cljs.core.count.call(null, s2)) {
      return cljs.core.reduce.call(null, cljs.core.conj, s2, s1)
    }else {
      return cljs.core.reduce.call(null, cljs.core.conj, s1, s2)
    }
  };
  var union__3 = function() {
    var G__4045__delegate = function(s1, s2, sets) {
      var bubbled_sets = clojure.set.bubble_max_key.call(null, cljs.core.count, cljs.core.conj.call(null, sets, s2, s1));
      return cljs.core.reduce.call(null, cljs.core.into, cljs.core.first.call(null, bubbled_sets), cljs.core.rest.call(null, bubbled_sets))
    };
    var G__4045 = function(s1, s2, var_args) {
      var sets = null;
      if(goog.isDef(var_args)) {
        sets = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__4045__delegate.call(this, s1, s2, sets)
    };
    G__4045.cljs$lang$maxFixedArity = 2;
    G__4045.cljs$lang$applyTo = function(arglist__4046) {
      var s1 = cljs.core.first(arglist__4046);
      var s2 = cljs.core.first(cljs.core.next(arglist__4046));
      var sets = cljs.core.rest(cljs.core.next(arglist__4046));
      return G__4045__delegate(s1, s2, sets)
    };
    G__4045.cljs$lang$arity$variadic = G__4045__delegate;
    return G__4045
  }();
  union = function(s1, s2, var_args) {
    var sets = var_args;
    switch(arguments.length) {
      case 0:
        return union__0.call(this);
      case 1:
        return union__1.call(this, s1);
      case 2:
        return union__2.call(this, s1, s2);
      default:
        return union__3.cljs$lang$arity$variadic(s1, s2, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  union.cljs$lang$maxFixedArity = 2;
  union.cljs$lang$applyTo = union__3.cljs$lang$applyTo;
  union.cljs$lang$arity$0 = union__0;
  union.cljs$lang$arity$1 = union__1;
  union.cljs$lang$arity$2 = union__2;
  union.cljs$lang$arity$variadic = union__3.cljs$lang$arity$variadic;
  return union
}();
clojure.set.intersection = function() {
  var intersection = null;
  var intersection__1 = function(s1) {
    return s1
  };
  var intersection__2 = function(s1, s2) {
    while(true) {
      if(cljs.core.count.call(null, s2) < cljs.core.count.call(null, s1)) {
        var G__4047 = s2;
        var G__4048 = s1;
        s1 = G__4047;
        s2 = G__4048;
        continue
      }else {
        return cljs.core.reduce.call(null, function(s1, s2) {
          return function(result, item) {
            if(cljs.core.contains_QMARK_.call(null, s2, item)) {
              return result
            }else {
              return cljs.core.disj.call(null, result, item)
            }
          }
        }(s1, s2), s1, s1)
      }
      break
    }
  };
  var intersection__3 = function() {
    var G__4049__delegate = function(s1, s2, sets) {
      var bubbled_sets = clojure.set.bubble_max_key.call(null, function(p1__4044_SHARP_) {
        return-cljs.core.count.call(null, p1__4044_SHARP_)
      }, cljs.core.conj.call(null, sets, s2, s1));
      return cljs.core.reduce.call(null, intersection, cljs.core.first.call(null, bubbled_sets), cljs.core.rest.call(null, bubbled_sets))
    };
    var G__4049 = function(s1, s2, var_args) {
      var sets = null;
      if(goog.isDef(var_args)) {
        sets = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__4049__delegate.call(this, s1, s2, sets)
    };
    G__4049.cljs$lang$maxFixedArity = 2;
    G__4049.cljs$lang$applyTo = function(arglist__4050) {
      var s1 = cljs.core.first(arglist__4050);
      var s2 = cljs.core.first(cljs.core.next(arglist__4050));
      var sets = cljs.core.rest(cljs.core.next(arglist__4050));
      return G__4049__delegate(s1, s2, sets)
    };
    G__4049.cljs$lang$arity$variadic = G__4049__delegate;
    return G__4049
  }();
  intersection = function(s1, s2, var_args) {
    var sets = var_args;
    switch(arguments.length) {
      case 1:
        return intersection__1.call(this, s1);
      case 2:
        return intersection__2.call(this, s1, s2);
      default:
        return intersection__3.cljs$lang$arity$variadic(s1, s2, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  intersection.cljs$lang$maxFixedArity = 2;
  intersection.cljs$lang$applyTo = intersection__3.cljs$lang$applyTo;
  intersection.cljs$lang$arity$1 = intersection__1;
  intersection.cljs$lang$arity$2 = intersection__2;
  intersection.cljs$lang$arity$variadic = intersection__3.cljs$lang$arity$variadic;
  return intersection
}();
clojure.set.difference = function() {
  var difference = null;
  var difference__1 = function(s1) {
    return s1
  };
  var difference__2 = function(s1, s2) {
    if(cljs.core.count.call(null, s1) < cljs.core.count.call(null, s2)) {
      return cljs.core.reduce.call(null, function(result, item) {
        if(cljs.core.contains_QMARK_.call(null, s2, item)) {
          return cljs.core.disj.call(null, result, item)
        }else {
          return result
        }
      }, s1, s1)
    }else {
      return cljs.core.reduce.call(null, cljs.core.disj, s1, s2)
    }
  };
  var difference__3 = function() {
    var G__4051__delegate = function(s1, s2, sets) {
      return cljs.core.reduce.call(null, difference, s1, cljs.core.conj.call(null, sets, s2))
    };
    var G__4051 = function(s1, s2, var_args) {
      var sets = null;
      if(goog.isDef(var_args)) {
        sets = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__4051__delegate.call(this, s1, s2, sets)
    };
    G__4051.cljs$lang$maxFixedArity = 2;
    G__4051.cljs$lang$applyTo = function(arglist__4052) {
      var s1 = cljs.core.first(arglist__4052);
      var s2 = cljs.core.first(cljs.core.next(arglist__4052));
      var sets = cljs.core.rest(cljs.core.next(arglist__4052));
      return G__4051__delegate(s1, s2, sets)
    };
    G__4051.cljs$lang$arity$variadic = G__4051__delegate;
    return G__4051
  }();
  difference = function(s1, s2, var_args) {
    var sets = var_args;
    switch(arguments.length) {
      case 1:
        return difference__1.call(this, s1);
      case 2:
        return difference__2.call(this, s1, s2);
      default:
        return difference__3.cljs$lang$arity$variadic(s1, s2, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  difference.cljs$lang$maxFixedArity = 2;
  difference.cljs$lang$applyTo = difference__3.cljs$lang$applyTo;
  difference.cljs$lang$arity$1 = difference__1;
  difference.cljs$lang$arity$2 = difference__2;
  difference.cljs$lang$arity$variadic = difference__3.cljs$lang$arity$variadic;
  return difference
}();
clojure.set.select = function select(pred, xset) {
  return cljs.core.reduce.call(null, function(s, k) {
    if(cljs.core.truth_(pred.call(null, k))) {
      return s
    }else {
      return cljs.core.disj.call(null, s, k)
    }
  }, xset, xset)
};
clojure.set.project = function project(xrel, ks) {
  return cljs.core.set.call(null, cljs.core.map.call(null, function(p1__4053_SHARP_) {
    return cljs.core.select_keys.call(null, p1__4053_SHARP_, ks)
  }, xrel))
};
clojure.set.rename_keys = function rename_keys(map, kmap) {
  return cljs.core.reduce.call(null, function(m, p__4057) {
    var vec__4058 = p__4057;
    var old = cljs.core.nth.call(null, vec__4058, 0, null);
    var new$ = cljs.core.nth.call(null, vec__4058, 1, null);
    if(function() {
      var and__3822__auto__ = cljs.core.not_EQ_.call(null, old, new$);
      if(and__3822__auto__) {
        return cljs.core.contains_QMARK_.call(null, m, old)
      }else {
        return and__3822__auto__
      }
    }()) {
      return cljs.core.dissoc.call(null, cljs.core.assoc.call(null, m, new$, cljs.core._lookup.call(null, m, old, null)), old)
    }else {
      return m
    }
  }, map, kmap)
};
clojure.set.rename = function rename(xrel, kmap) {
  return cljs.core.set.call(null, cljs.core.map.call(null, function(p1__4054_SHARP_) {
    return clojure.set.rename_keys.call(null, p1__4054_SHARP_, kmap)
  }, xrel))
};
clojure.set.index = function index(xrel, ks) {
  return cljs.core.reduce.call(null, function(m, x) {
    var ik = cljs.core.select_keys.call(null, x, ks);
    return cljs.core.assoc.call(null, m, ik, cljs.core.conj.call(null, cljs.core._lookup.call(null, m, ik, cljs.core.PersistentHashSet.EMPTY), x))
  }, cljs.core.ObjMap.EMPTY, xrel)
};
clojure.set.map_invert = function map_invert(m) {
  return cljs.core.reduce.call(null, function(m__$1, p__4065) {
    var vec__4066 = p__4065;
    var k = cljs.core.nth.call(null, vec__4066, 0, null);
    var v = cljs.core.nth.call(null, vec__4066, 1, null);
    return cljs.core.assoc.call(null, m__$1, v, k)
  }, cljs.core.ObjMap.EMPTY, m)
};
clojure.set.join = function() {
  var join = null;
  var join__2 = function(xrel, yrel) {
    if(function() {
      var and__3822__auto__ = cljs.core.seq.call(null, xrel);
      if(and__3822__auto__) {
        return cljs.core.seq.call(null, yrel)
      }else {
        return and__3822__auto__
      }
    }()) {
      var ks = clojure.set.intersection.call(null, cljs.core.set.call(null, cljs.core.keys.call(null, cljs.core.first.call(null, xrel))), cljs.core.set.call(null, cljs.core.keys.call(null, cljs.core.first.call(null, yrel))));
      var vec__4070 = cljs.core.count.call(null, xrel) <= cljs.core.count.call(null, yrel) ? cljs.core.PersistentVector.fromArray([xrel, yrel], true) : cljs.core.PersistentVector.fromArray([yrel, xrel], true);
      var r = cljs.core.nth.call(null, vec__4070, 0, null);
      var s = cljs.core.nth.call(null, vec__4070, 1, null);
      var idx = clojure.set.index.call(null, r, ks);
      return cljs.core.reduce.call(null, function(ret, x) {
        var found = idx.call(null, cljs.core.select_keys.call(null, x, ks));
        if(cljs.core.truth_(found)) {
          return cljs.core.reduce.call(null, function(p1__4059_SHARP_, p2__4060_SHARP_) {
            return cljs.core.conj.call(null, p1__4059_SHARP_, cljs.core.merge.call(null, p2__4060_SHARP_, x))
          }, ret, found)
        }else {
          return ret
        }
      }, cljs.core.PersistentHashSet.EMPTY, s)
    }else {
      return cljs.core.PersistentHashSet.EMPTY
    }
  };
  var join__3 = function(xrel, yrel, km) {
    var vec__4071 = cljs.core.count.call(null, xrel) <= cljs.core.count.call(null, yrel) ? cljs.core.PersistentVector.fromArray([xrel, yrel, clojure.set.map_invert.call(null, km)], true) : cljs.core.PersistentVector.fromArray([yrel, xrel, km], true);
    var r = cljs.core.nth.call(null, vec__4071, 0, null);
    var s = cljs.core.nth.call(null, vec__4071, 1, null);
    var k = cljs.core.nth.call(null, vec__4071, 2, null);
    var idx = clojure.set.index.call(null, r, cljs.core.vals.call(null, k));
    return cljs.core.reduce.call(null, function(ret, x) {
      var found = idx.call(null, clojure.set.rename_keys.call(null, cljs.core.select_keys.call(null, x, cljs.core.keys.call(null, k)), k));
      if(cljs.core.truth_(found)) {
        return cljs.core.reduce.call(null, function(p1__4061_SHARP_, p2__4062_SHARP_) {
          return cljs.core.conj.call(null, p1__4061_SHARP_, cljs.core.merge.call(null, p2__4062_SHARP_, x))
        }, ret, found)
      }else {
        return ret
      }
    }, cljs.core.PersistentHashSet.EMPTY, s)
  };
  join = function(xrel, yrel, km) {
    switch(arguments.length) {
      case 2:
        return join__2.call(this, xrel, yrel);
      case 3:
        return join__3.call(this, xrel, yrel, km)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$lang$arity$2 = join__2;
  join.cljs$lang$arity$3 = join__3;
  return join
}();
clojure.set.subset_QMARK_ = function subset_QMARK_(set1, set2) {
  var and__3822__auto__ = cljs.core.count.call(null, set1) <= cljs.core.count.call(null, set2);
  if(and__3822__auto__) {
    return cljs.core.every_QMARK_.call(null, function(p1__4067_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, set2, p1__4067_SHARP_)
    }, set1)
  }else {
    return and__3822__auto__
  }
};
clojure.set.superset_QMARK_ = function superset_QMARK_(set1, set2) {
  var and__3822__auto__ = cljs.core.count.call(null, set1) >= cljs.core.count.call(null, set2);
  if(and__3822__auto__) {
    return cljs.core.every_QMARK_.call(null, function(p1__4072_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, set1, p1__4072_SHARP_)
    }, set2)
  }else {
    return and__3822__auto__
  }
};
goog.provide("cljs.core.logic");
goog.require("cljs.core");
goog.require("clojure.walk");
goog.require("clojure.walk");
goog.require("clojure.set");
cljs.core.logic._STAR_occurs_check_STAR_ = true;
cljs.core.logic.IUnifyTerms = {};
cljs.core.logic._unify_terms = function _unify_terms(u, v, s) {
  if(function() {
    var and__3822__auto__ = u;
    if(and__3822__auto__) {
      return u.cljs$core$logic$IUnifyTerms$_unify_terms$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return u.cljs$core$logic$IUnifyTerms$_unify_terms$arity$3(u, v, s)
  }else {
    var x__2373__auto__ = u == null ? null : u;
    return function() {
      var or__3824__auto__ = cljs.core.logic._unify_terms[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._unify_terms["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IUnifyTerms.-unify-terms", u);
        }
      }
    }().call(null, u, v, s)
  }
};
cljs.core.logic.IUnifyWithNil = {};
cljs.core.logic._unify_with_nil = function _unify_with_nil(v, u, s) {
  if(function() {
    var and__3822__auto__ = v;
    if(and__3822__auto__) {
      return v.cljs$core$logic$IUnifyWithNil$_unify_with_nil$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return v.cljs$core$logic$IUnifyWithNil$_unify_with_nil$arity$3(v, u, s)
  }else {
    var x__2373__auto__ = v == null ? null : v;
    return function() {
      var or__3824__auto__ = cljs.core.logic._unify_with_nil[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._unify_with_nil["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IUnifyWithNil.-unify-with-nil", v);
        }
      }
    }().call(null, v, u, s)
  }
};
cljs.core.logic.IUnifyWithObject = {};
cljs.core.logic._unify_with_object = function _unify_with_object(v, u, s) {
  if(function() {
    var and__3822__auto__ = v;
    if(and__3822__auto__) {
      return v.cljs$core$logic$IUnifyWithObject$_unify_with_object$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return v.cljs$core$logic$IUnifyWithObject$_unify_with_object$arity$3(v, u, s)
  }else {
    var x__2373__auto__ = v == null ? null : v;
    return function() {
      var or__3824__auto__ = cljs.core.logic._unify_with_object[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._unify_with_object["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IUnifyWithObject.-unify-with-object", v);
        }
      }
    }().call(null, v, u, s)
  }
};
cljs.core.logic.IUnifyWithLVar = {};
cljs.core.logic._unify_with_lvar = function _unify_with_lvar(v, u, s) {
  if(function() {
    var and__3822__auto__ = v;
    if(and__3822__auto__) {
      return v.cljs$core$logic$IUnifyWithLVar$_unify_with_lvar$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return v.cljs$core$logic$IUnifyWithLVar$_unify_with_lvar$arity$3(v, u, s)
  }else {
    var x__2373__auto__ = v == null ? null : v;
    return function() {
      var or__3824__auto__ = cljs.core.logic._unify_with_lvar[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._unify_with_lvar["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IUnifyWithLVar.-unify-with-lvar", v);
        }
      }
    }().call(null, v, u, s)
  }
};
cljs.core.logic.IUnifyWithLSeq = {};
cljs.core.logic._unify_with_lseq = function _unify_with_lseq(v, u, s) {
  if(function() {
    var and__3822__auto__ = v;
    if(and__3822__auto__) {
      return v.cljs$core$logic$IUnifyWithLSeq$_unify_with_lseq$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return v.cljs$core$logic$IUnifyWithLSeq$_unify_with_lseq$arity$3(v, u, s)
  }else {
    var x__2373__auto__ = v == null ? null : v;
    return function() {
      var or__3824__auto__ = cljs.core.logic._unify_with_lseq[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._unify_with_lseq["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IUnifyWithLSeq.-unify-with-lseq", v);
        }
      }
    }().call(null, v, u, s)
  }
};
cljs.core.logic.IUnifyWithSequential = {};
cljs.core.logic._unify_with_seq = function _unify_with_seq(v, u, s) {
  if(function() {
    var and__3822__auto__ = v;
    if(and__3822__auto__) {
      return v.cljs$core$logic$IUnifyWithSequential$_unify_with_seq$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return v.cljs$core$logic$IUnifyWithSequential$_unify_with_seq$arity$3(v, u, s)
  }else {
    var x__2373__auto__ = v == null ? null : v;
    return function() {
      var or__3824__auto__ = cljs.core.logic._unify_with_seq[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._unify_with_seq["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IUnifyWithSequential.-unify-with-seq", v);
        }
      }
    }().call(null, v, u, s)
  }
};
cljs.core.logic.IUnifyWithMap = {};
cljs.core.logic._unify_with_map = function _unify_with_map(v, u, s) {
  if(function() {
    var and__3822__auto__ = v;
    if(and__3822__auto__) {
      return v.cljs$core$logic$IUnifyWithMap$_unify_with_map$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return v.cljs$core$logic$IUnifyWithMap$_unify_with_map$arity$3(v, u, s)
  }else {
    var x__2373__auto__ = v == null ? null : v;
    return function() {
      var or__3824__auto__ = cljs.core.logic._unify_with_map[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._unify_with_map["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IUnifyWithMap.-unify-with-map", v);
        }
      }
    }().call(null, v, u, s)
  }
};
cljs.core.logic.IUnifyWithSet = {};
cljs.core.logic._unify_with_set = function _unify_with_set(v, u, s) {
  if(function() {
    var and__3822__auto__ = v;
    if(and__3822__auto__) {
      return v.cljs$core$logic$IUnifyWithSet$_unify_with_set$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return v.cljs$core$logic$IUnifyWithSet$_unify_with_set$arity$3(v, u, s)
  }else {
    var x__2373__auto__ = v == null ? null : v;
    return function() {
      var or__3824__auto__ = cljs.core.logic._unify_with_set[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._unify_with_set["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IUnifyWithSet.-unify-with-set", v);
        }
      }
    }().call(null, v, u, s)
  }
};
cljs.core.logic.IReifyTerm = {};
cljs.core.logic._reify_term = function _reify_term(v, s) {
  if(function() {
    var and__3822__auto__ = v;
    if(and__3822__auto__) {
      return v.cljs$core$logic$IReifyTerm$_reify_term$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return v.cljs$core$logic$IReifyTerm$_reify_term$arity$2(v, s)
  }else {
    var x__2373__auto__ = v == null ? null : v;
    return function() {
      var or__3824__auto__ = cljs.core.logic._reify_term[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._reify_term["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IReifyTerm.-reify-term", v);
        }
      }
    }().call(null, v, s)
  }
};
cljs.core.logic.IWalkTerm = {};
cljs.core.logic._walk_term = function _walk_term(v, s) {
  if(function() {
    var and__3822__auto__ = v;
    if(and__3822__auto__) {
      return v.cljs$core$logic$IWalkTerm$_walk_term$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return v.cljs$core$logic$IWalkTerm$_walk_term$arity$2(v, s)
  }else {
    var x__2373__auto__ = v == null ? null : v;
    return function() {
      var or__3824__auto__ = cljs.core.logic._walk_term[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._walk_term["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IWalkTerm.-walk-term", v);
        }
      }
    }().call(null, v, s)
  }
};
cljs.core.logic.IOccursCheckTerm = {};
cljs.core.logic._occurs_check_term = function _occurs_check_term(v, x, s) {
  if(function() {
    var and__3822__auto__ = v;
    if(and__3822__auto__) {
      return v.cljs$core$logic$IOccursCheckTerm$_occurs_check_term$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return v.cljs$core$logic$IOccursCheckTerm$_occurs_check_term$arity$3(v, x, s)
  }else {
    var x__2373__auto__ = v == null ? null : v;
    return function() {
      var or__3824__auto__ = cljs.core.logic._occurs_check_term[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._occurs_check_term["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IOccursCheckTerm.-occurs-check-term", v);
        }
      }
    }().call(null, v, x, s)
  }
};
cljs.core.logic.IBuildTerm = {};
cljs.core.logic._build_term = function _build_term(u, s) {
  if(function() {
    var and__3822__auto__ = u;
    if(and__3822__auto__) {
      return u.cljs$core$logic$IBuildTerm$_build_term$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return u.cljs$core$logic$IBuildTerm$_build_term$arity$2(u, s)
  }else {
    var x__2373__auto__ = u == null ? null : u;
    return function() {
      var or__3824__auto__ = cljs.core.logic._build_term[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._build_term["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IBuildTerm.-build-term", u);
        }
      }
    }().call(null, u, s)
  }
};
cljs.core.logic.IBind = {};
cljs.core.logic._bind = function _bind(this$, g) {
  if(function() {
    var and__3822__auto__ = this$;
    if(and__3822__auto__) {
      return this$.cljs$core$logic$IBind$_bind$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return this$.cljs$core$logic$IBind$_bind$arity$2(this$, g)
  }else {
    var x__2373__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3824__auto__ = cljs.core.logic._bind[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._bind["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IBind.-bind", this$);
        }
      }
    }().call(null, this$, g)
  }
};
cljs.core.logic.IMPlus = {};
cljs.core.logic._mplus = function _mplus(a, f) {
  if(function() {
    var and__3822__auto__ = a;
    if(and__3822__auto__) {
      return a.cljs$core$logic$IMPlus$_mplus$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return a.cljs$core$logic$IMPlus$_mplus$arity$2(a, f)
  }else {
    var x__2373__auto__ = a == null ? null : a;
    return function() {
      var or__3824__auto__ = cljs.core.logic._mplus[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._mplus["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IMPlus.-mplus", a);
        }
      }
    }().call(null, a, f)
  }
};
cljs.core.logic.ITake = {};
cljs.core.logic._take_STAR_ = function _take_STAR_(a) {
  if(function() {
    var and__3822__auto__ = a;
    if(and__3822__auto__) {
      return a.cljs$core$logic$ITake$_take_STAR_$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return a.cljs$core$logic$ITake$_take_STAR_$arity$1(a)
  }else {
    var x__2373__auto__ = a == null ? null : a;
    return function() {
      var or__3824__auto__ = cljs.core.logic._take_STAR_[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._take_STAR_["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ITake.-take*", a);
        }
      }
    }().call(null, a)
  }
};
cljs.core.logic.IPair = {};
cljs.core.logic._lhs = function _lhs(this$) {
  if(function() {
    var and__3822__auto__ = this$;
    if(and__3822__auto__) {
      return this$.cljs$core$logic$IPair$_lhs$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return this$.cljs$core$logic$IPair$_lhs$arity$1(this$)
  }else {
    var x__2373__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3824__auto__ = cljs.core.logic._lhs[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._lhs["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IPair.-lhs", this$);
        }
      }
    }().call(null, this$)
  }
};
cljs.core.logic._rhs = function _rhs(this$) {
  if(function() {
    var and__3822__auto__ = this$;
    if(and__3822__auto__) {
      return this$.cljs$core$logic$IPair$_rhs$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return this$.cljs$core$logic$IPair$_rhs$arity$1(this$)
  }else {
    var x__2373__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3824__auto__ = cljs.core.logic._rhs[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._rhs["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IPair.-rhs", this$);
        }
      }
    }().call(null, this$)
  }
};
goog.provide("cljs.core.logic.Pair");
cljs.core.logic.Pair = function(lhs, rhs) {
  this.lhs = lhs;
  this.rhs = rhs;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2149580818
};
cljs.core.logic.Pair.cljs$lang$type = true;
cljs.core.logic.Pair.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core.logic/Pair")
};
cljs.core.logic.Pair.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core.logic/Pair")
};
cljs.core.logic.Pair.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  return cljs.core._write.call(null, writer, [cljs.core.str("("), cljs.core.str(self__.lhs), cljs.core.str(" . "), cljs.core.str(self__.rhs), cljs.core.str(")")].join(""))
};
cljs.core.logic.Pair.prototype.cljs$core$logic$IPair$ = true;
cljs.core.logic.Pair.prototype.cljs$core$logic$IPair$_lhs$arity$1 = function(_) {
  var self__ = this;
  return self__.lhs
};
cljs.core.logic.Pair.prototype.cljs$core$logic$IPair$_rhs$arity$1 = function(_) {
  var self__ = this;
  return self__.rhs
};
cljs.core.logic.Pair.prototype.cljs$core$IIndexed$_nth$arity$2 = function(_, i) {
  var self__ = this;
  var pred__3285 = cljs.core._EQ_;
  var expr__3286 = i;
  if(pred__3285.call(null, 0, expr__3286)) {
    return self__.lhs
  }else {
    if(pred__3285.call(null, 1, expr__3286)) {
      return self__.rhs
    }else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.logic.Pair.prototype.cljs$core$IIndexed$_nth$arity$3 = function(_, i, not_found) {
  var self__ = this;
  var pred__3288 = cljs.core._EQ_;
  var expr__3289 = i;
  if(pred__3288.call(null, 0, expr__3289)) {
    return self__.lhs
  }else {
    if(pred__3288.call(null, 1, expr__3289)) {
      return self__.rhs
    }else {
      return not_found
    }
  }
};
cljs.core.logic.Pair.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  return 2
};
cljs.core.logic.Pair.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var and__3822__auto__ = cljs.core._EQ_.call(null, self__.lhs, other.lhs);
  if(and__3822__auto__) {
    return cljs.core._EQ_.call(null, self__.rhs, other.rhs)
  }else {
    return and__3822__auto__
  }
};
cljs.core.logic.Pair;
cljs.core.logic.pair = function pair(lhs, rhs) {
  return new cljs.core.logic.Pair(lhs, rhs)
};
cljs.core.logic.ISubstitutions = {};
cljs.core.logic._occurs_check = function _occurs_check(this$, u, v) {
  if(function() {
    var and__3822__auto__ = this$;
    if(and__3822__auto__) {
      return this$.cljs$core$logic$ISubstitutions$_occurs_check$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return this$.cljs$core$logic$ISubstitutions$_occurs_check$arity$3(this$, u, v)
  }else {
    var x__2373__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3824__auto__ = cljs.core.logic._occurs_check[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._occurs_check["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISubstitutions.-occurs-check", this$);
        }
      }
    }().call(null, this$, u, v)
  }
};
cljs.core.logic._ext = function _ext(this$, u, v) {
  if(function() {
    var and__3822__auto__ = this$;
    if(and__3822__auto__) {
      return this$.cljs$core$logic$ISubstitutions$_ext$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return this$.cljs$core$logic$ISubstitutions$_ext$arity$3(this$, u, v)
  }else {
    var x__2373__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3824__auto__ = cljs.core.logic._ext[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._ext["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISubstitutions.-ext", this$);
        }
      }
    }().call(null, this$, u, v)
  }
};
cljs.core.logic._ext_no_check = function _ext_no_check(this$, u, v) {
  if(function() {
    var and__3822__auto__ = this$;
    if(and__3822__auto__) {
      return this$.cljs$core$logic$ISubstitutions$_ext_no_check$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return this$.cljs$core$logic$ISubstitutions$_ext_no_check$arity$3(this$, u, v)
  }else {
    var x__2373__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3824__auto__ = cljs.core.logic._ext_no_check[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._ext_no_check["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISubstitutions.-ext-no-check", this$);
        }
      }
    }().call(null, this$, u, v)
  }
};
cljs.core.logic._walk = function _walk(this$, v) {
  if(function() {
    var and__3822__auto__ = this$;
    if(and__3822__auto__) {
      return this$.cljs$core$logic$ISubstitutions$_walk$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return this$.cljs$core$logic$ISubstitutions$_walk$arity$2(this$, v)
  }else {
    var x__2373__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3824__auto__ = cljs.core.logic._walk[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._walk["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISubstitutions.-walk", this$);
        }
      }
    }().call(null, this$, v)
  }
};
cljs.core.logic._walk_STAR_ = function _walk_STAR_(this$, v) {
  if(function() {
    var and__3822__auto__ = this$;
    if(and__3822__auto__) {
      return this$.cljs$core$logic$ISubstitutions$_walk_STAR_$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return this$.cljs$core$logic$ISubstitutions$_walk_STAR_$arity$2(this$, v)
  }else {
    var x__2373__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3824__auto__ = cljs.core.logic._walk_STAR_[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._walk_STAR_["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISubstitutions.-walk*", this$);
        }
      }
    }().call(null, this$, v)
  }
};
cljs.core.logic._unify = function _unify(this$, u, v) {
  if(function() {
    var and__3822__auto__ = this$;
    if(and__3822__auto__) {
      return this$.cljs$core$logic$ISubstitutions$_unify$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return this$.cljs$core$logic$ISubstitutions$_unify$arity$3(this$, u, v)
  }else {
    var x__2373__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3824__auto__ = cljs.core.logic._unify[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._unify["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISubstitutions.-unify", this$);
        }
      }
    }().call(null, this$, u, v)
  }
};
cljs.core.logic._reify_lvar_name = function _reify_lvar_name(_) {
  if(function() {
    var and__3822__auto__ = _;
    if(and__3822__auto__) {
      return _.cljs$core$logic$ISubstitutions$_reify_lvar_name$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return _.cljs$core$logic$ISubstitutions$_reify_lvar_name$arity$1(_)
  }else {
    var x__2373__auto__ = _ == null ? null : _;
    return function() {
      var or__3824__auto__ = cljs.core.logic._reify_lvar_name[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._reify_lvar_name["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISubstitutions.-reify-lvar-name", _);
        }
      }
    }().call(null, _)
  }
};
cljs.core.logic._reify_STAR_ = function _reify_STAR_(this$, v) {
  if(function() {
    var and__3822__auto__ = this$;
    if(and__3822__auto__) {
      return this$.cljs$core$logic$ISubstitutions$_reify_STAR_$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return this$.cljs$core$logic$ISubstitutions$_reify_STAR_$arity$2(this$, v)
  }else {
    var x__2373__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3824__auto__ = cljs.core.logic._reify_STAR_[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._reify_STAR_["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISubstitutions.-reify*", this$);
        }
      }
    }().call(null, this$, v)
  }
};
cljs.core.logic._reify = function _reify(this$, v) {
  if(function() {
    var and__3822__auto__ = this$;
    if(and__3822__auto__) {
      return this$.cljs$core$logic$ISubstitutions$_reify$arity$2
    }else {
      return and__3822__auto__
    }
  }()) {
    return this$.cljs$core$logic$ISubstitutions$_reify$arity$2(this$, v)
  }else {
    var x__2373__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3824__auto__ = cljs.core.logic._reify[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._reify["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "ISubstitutions.-reify", this$);
        }
      }
    }().call(null, this$, v)
  }
};
cljs.core.logic.not_found = {};
cljs.core.logic.assq = function assq(k, xs) {
  var xs__$1 = cljs.core._seq.call(null, xs);
  while(true) {
    if(xs__$1 == null) {
      return cljs.core.logic.not_found
    }else {
      var xs__$2 = xs__$1;
      var x = cljs.core._first.call(null, xs__$2);
      var lhs = x.lhs;
      if(k === lhs) {
        return x.rhs
      }else {
        var G__3291 = cljs.core._next.call(null, xs__$2);
        xs__$1 = G__3291;
        continue
      }
    }
    break
  }
};
goog.provide("cljs.core.logic.Substitutions");
cljs.core.logic.Substitutions = function(s) {
  this.s = s;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2149580800
};
cljs.core.logic.Substitutions.cljs$lang$type = true;
cljs.core.logic.Substitutions.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core.logic/Substitutions")
};
cljs.core.logic.Substitutions.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core.logic/Substitutions")
};
cljs.core.logic.Substitutions.prototype.cljs$core$logic$ITake$ = true;
cljs.core.logic.Substitutions.prototype.cljs$core$logic$ITake$_take_STAR_$arity$1 = function(this$) {
  var self__ = this;
  return this$
};
cljs.core.logic.Substitutions.prototype.cljs$core$logic$IMPlus$ = true;
cljs.core.logic.Substitutions.prototype.cljs$core$logic$IMPlus$_mplus$arity$2 = function(this$, f) {
  var self__ = this;
  return cljs.core.logic.choice.call(null, this$, f)
};
cljs.core.logic.Substitutions.prototype.cljs$core$logic$IBind$ = true;
cljs.core.logic.Substitutions.prototype.cljs$core$logic$IBind$_bind$arity$2 = function(this$, g) {
  var self__ = this;
  return g.call(null, this$)
};
cljs.core.logic.Substitutions.prototype.cljs$core$logic$ISubstitutions$ = true;
cljs.core.logic.Substitutions.prototype.cljs$core$logic$ISubstitutions$_walk$arity$2 = function(this$, v) {
  var self__ = this;
  if(cljs.core.truth_(cljs.core.logic.lvar_QMARK_.call(null, v))) {
    var rhs = cljs.core.logic.assq.call(null, v, self__.s);
    var vp = this$.cljs$core$logic$ISubstitutions$_walk$arity$2(this$, rhs);
    if(cljs.core.logic.not_found === vp) {
      return v
    }else {
      return vp
    }
  }else {
    if("\ufdd0'else") {
      return v
    }else {
      return null
    }
  }
};
cljs.core.logic.Substitutions.prototype.cljs$core$logic$ISubstitutions$_reify_STAR_$arity$2 = function(this$, v) {
  var self__ = this;
  var v__$1 = this$.cljs$core$logic$ISubstitutions$_walk$arity$2(this$, v);
  return cljs.core.logic._reify_term.call(null, v__$1, this$)
};
cljs.core.logic.Substitutions.prototype.cljs$core$logic$ISubstitutions$_walk_STAR_$arity$2 = function(this$, v) {
  var self__ = this;
  var v__$1 = this$.cljs$core$logic$ISubstitutions$_walk$arity$2(this$, v);
  return cljs.core.logic._walk_term.call(null, v__$1, this$)
};
cljs.core.logic.Substitutions.prototype.cljs$core$logic$ISubstitutions$_reify_lvar_name$arity$1 = function(this$) {
  var self__ = this;
  return cljs.core.symbol.call(null, [cljs.core.str("_."), cljs.core.str(cljs.core.count.call(null, self__.s))].join(""))
};
cljs.core.logic.Substitutions.prototype.cljs$core$logic$ISubstitutions$_reify$arity$2 = function(this$, v) {
  var self__ = this;
  var v__$1 = this$.cljs$core$logic$ISubstitutions$_walk_STAR_$arity$2(this$, v);
  return cljs.core.logic._walk_STAR_.call(null, cljs.core.logic._reify_STAR_.call(null, cljs.core.logic.empty_s, v__$1), v__$1)
};
cljs.core.logic.Substitutions.prototype.cljs$core$logic$ISubstitutions$_unify$arity$3 = function(this$, u, v) {
  var self__ = this;
  if(u === v) {
    return this$
  }else {
    var u__$1 = this$.cljs$core$logic$ISubstitutions$_walk$arity$2(this$, u);
    var v__$1 = this$.cljs$core$logic$ISubstitutions$_walk$arity$2(this$, v);
    if(u__$1 === v__$1) {
      return this$
    }else {
      return cljs.core.logic._unify_terms.call(null, u__$1, v__$1, this$)
    }
  }
};
cljs.core.logic.Substitutions.prototype.cljs$core$logic$ISubstitutions$_ext$arity$3 = function(this$, u, v) {
  var self__ = this;
  if(cljs.core.truth_(function() {
    var and__3822__auto__ = cljs.core.logic._STAR_occurs_check_STAR_;
    if(cljs.core.truth_(and__3822__auto__)) {
      return this$.cljs$core$logic$ISubstitutions$_occurs_check$arity$3(this$, u, v)
    }else {
      return and__3822__auto__
    }
  }())) {
    return null
  }else {
    return this$.cljs$core$logic$ISubstitutions$_ext_no_check$arity$3(this$, u, v)
  }
};
cljs.core.logic.Substitutions.prototype.cljs$core$logic$ISubstitutions$_ext_no_check$arity$3 = function(this$, u, v) {
  var self__ = this;
  return new cljs.core.logic.Substitutions(cljs.core.conj.call(null, self__.s, new cljs.core.logic.Pair(u, v)))
};
cljs.core.logic.Substitutions.prototype.cljs$core$logic$ISubstitutions$_occurs_check$arity$3 = function(this$, u, v) {
  var self__ = this;
  var v__$1 = this$.cljs$core$logic$ISubstitutions$_walk$arity$2(this$, v);
  return cljs.core.logic._occurs_check_term.call(null, v__$1, u, this$)
};
cljs.core.logic.Substitutions.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this$, writer, opts) {
  var self__ = this;
  return cljs.core._pr_writer.call(null, self__.s, writer, opts)
};
cljs.core.logic.Substitutions.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, o) {
  var self__ = this;
  var or__3824__auto__ = this$ === o;
  if(or__3824__auto__) {
    return or__3824__auto__
  }else {
    var and__3822__auto__ = cljs.core.instance_QMARK_.call(null, cljs.core.logic.Substitutions, o);
    if(and__3822__auto__) {
      return cljs.core._EQ_.call(null, self__.s, o.s)
    }else {
      return and__3822__auto__
    }
  }
};
cljs.core.logic.Substitutions;
cljs.core.logic.make_s = function make_s(s) {
  return new cljs.core.logic.Substitutions(s)
};
cljs.core.logic.empty_s = cljs.core.logic.make_s.call(null, cljs.core.List.EMPTY);
cljs.core.logic.subst_QMARK_ = function subst_QMARK_(x) {
  return cljs.core.instance_QMARK_.call(null, cljs.core.logic.Substitutions, x)
};
cljs.core.logic.to_s = function to_s(v) {
  var s = cljs.core.reduce.call(null, function(l, p__3294) {
    var vec__3295 = p__3294;
    var k = cljs.core.nth.call(null, vec__3295, 0, null);
    var v__$1 = cljs.core.nth.call(null, vec__3295, 1, null);
    return cljs.core.conj.call(null, l, cljs.core.logic.pair.call(null, k, v__$1))
  }, cljs.core.List.EMPTY, v);
  return cljs.core.logic.make_s.call(null, s)
};
goog.provide("cljs.core.logic.LVar");
cljs.core.logic.LVar = function(name, meta) {
  this.name = name;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2154168320
};
cljs.core.logic.LVar.cljs$lang$type = true;
cljs.core.logic.LVar.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core.logic/LVar")
};
cljs.core.logic.LVar.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core.logic/LVar")
};
cljs.core.logic.LVar.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  return cljs.core._hash.call(null, self__.name)
};
cljs.core.logic.LVar.prototype.cljs$core$logic$IUnifyWithLVar$ = true;
cljs.core.logic.LVar.prototype.cljs$core$logic$IUnifyWithLVar$_unify_with_lvar$arity$3 = function(v, u, s) {
  var self__ = this;
  return cljs.core.logic._ext_no_check.call(null, s, u, v)
};
cljs.core.logic.LVar.prototype.cljs$core$logic$IUnifyWithSequential$ = true;
cljs.core.logic.LVar.prototype.cljs$core$logic$IUnifyWithSequential$_unify_with_seq$arity$3 = function(v, u, s) {
  var self__ = this;
  return cljs.core.logic._ext.call(null, s, v, u)
};
cljs.core.logic.LVar.prototype.cljs$core$logic$IReifyTerm$ = true;
cljs.core.logic.LVar.prototype.cljs$core$logic$IReifyTerm$_reify_term$arity$2 = function(v, s) {
  var self__ = this;
  return cljs.core.logic._ext.call(null, s, v, cljs.core.logic._reify_lvar_name.call(null, s))
};
cljs.core.logic.LVar.prototype.cljs$core$logic$IUnifyTerms$ = true;
cljs.core.logic.LVar.prototype.cljs$core$logic$IUnifyTerms$_unify_terms$arity$3 = function(u, v, s) {
  var self__ = this;
  return cljs.core.logic._unify_with_lvar.call(null, v, u, s)
};
cljs.core.logic.LVar.prototype.cljs$core$logic$IUnifyWithNil$ = true;
cljs.core.logic.LVar.prototype.cljs$core$logic$IUnifyWithNil$_unify_with_nil$arity$3 = function(v, u, s) {
  var self__ = this;
  return cljs.core.logic._ext_no_check.call(null, s, v, u)
};
cljs.core.logic.LVar.prototype.cljs$core$logic$IUnifyWithMap$ = true;
cljs.core.logic.LVar.prototype.cljs$core$logic$IUnifyWithMap$_unify_with_map$arity$3 = function(v, u, s) {
  var self__ = this;
  return cljs.core.logic._ext.call(null, s, v, u)
};
cljs.core.logic.LVar.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, opts) {
  var self__ = this;
  return cljs.core._write.call(null, writer, [cljs.core.str("<lvar:"), cljs.core.str(self__.name), cljs.core.str(">")].join(""))
};
cljs.core.logic.LVar.prototype.cljs$core$logic$IOccursCheckTerm$ = true;
cljs.core.logic.LVar.prototype.cljs$core$logic$IOccursCheckTerm$_occurs_check_term$arity$3 = function(v, x, s) {
  var self__ = this;
  return cljs.core._EQ_.call(null, cljs.core.logic._walk.call(null, s, v), x)
};
cljs.core.logic.LVar.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$)
};
cljs.core.logic.LVar.prototype.cljs$core$logic$IUnifyWithSet$ = true;
cljs.core.logic.LVar.prototype.cljs$core$logic$IUnifyWithSet$_unify_with_set$arity$3 = function(v, u, s) {
  var self__ = this;
  return cljs.core.logic._ext.call(null, s, v, u)
};
cljs.core.logic.LVar.prototype.cljs$core$logic$IWalkTerm$ = true;
cljs.core.logic.LVar.prototype.cljs$core$logic$IWalkTerm$_walk_term$arity$2 = function(v, s) {
  var self__ = this;
  return v
};
cljs.core.logic.LVar.prototype.cljs$core$logic$IUnifyWithObject$ = true;
cljs.core.logic.LVar.prototype.cljs$core$logic$IUnifyWithObject$_unify_with_object$arity$3 = function(v, u, s) {
  var self__ = this;
  return cljs.core.logic._ext.call(null, s, v, u)
};
cljs.core.logic.LVar.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, o) {
  var self__ = this;
  var and__3822__auto__ = cljs.core.instance_QMARK_.call(null, cljs.core.logic.LVar, o);
  if(and__3822__auto__) {
    var o__$1 = o;
    return self__.name === o__$1.name
  }else {
    return and__3822__auto__
  }
};
cljs.core.logic.LVar.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this$, new_meta) {
  var self__ = this;
  return new cljs.core.logic.LVar(self__.name, self__.meta)
};
cljs.core.logic.LVar.prototype.cljs$core$IMeta$_meta$arity$1 = function(this$) {
  var self__ = this;
  return self__.meta
};
cljs.core.logic.LVar.prototype.cljs$core$logic$IUnifyWithLSeq$ = true;
cljs.core.logic.LVar.prototype.cljs$core$logic$IUnifyWithLSeq$_unify_with_lseq$arity$3 = function(v, u, s) {
  var self__ = this;
  return cljs.core.logic._ext.call(null, s, v, u)
};
cljs.core.logic.LVar;
cljs.core.logic.lvar_sym_counter = cljs.core.atom.call(null, 0);
cljs.core.logic.lvar = function() {
  var lvar = null;
  var lvar__0 = function() {
    return lvar.call(null, "\ufdd1'gen")
  };
  var lvar__1 = function(name) {
    var name__$1 = name.substring(2, name.length) + "_" + cljs.core.swap_BANG_.call(null, cljs.core.logic.lvar_sym_counter, cljs.core.inc);
    return new cljs.core.logic.LVar(name__$1, null)
  };
  lvar = function(name) {
    switch(arguments.length) {
      case 0:
        return lvar__0.call(this);
      case 1:
        return lvar__1.call(this, name)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  lvar.cljs$lang$arity$0 = lvar__0;
  lvar.cljs$lang$arity$1 = lvar__1;
  return lvar
}();
cljs.core.logic.lvar_QMARK_ = function lvar_QMARK_(x) {
  return cljs.core.instance_QMARK_.call(null, cljs.core.logic.LVar, x)
};
cljs.core.logic.LConsSeq = {};
cljs.core.logic._lfirst = function _lfirst(this$) {
  if(function() {
    var and__3822__auto__ = this$;
    if(and__3822__auto__) {
      return this$.cljs$core$logic$LConsSeq$_lfirst$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return this$.cljs$core$logic$LConsSeq$_lfirst$arity$1(this$)
  }else {
    var x__2373__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3824__auto__ = cljs.core.logic._lfirst[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._lfirst["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "LConsSeq.-lfirst", this$);
        }
      }
    }().call(null, this$)
  }
};
cljs.core.logic._lnext = function _lnext(this$) {
  if(function() {
    var and__3822__auto__ = this$;
    if(and__3822__auto__) {
      return this$.cljs$core$logic$LConsSeq$_lnext$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return this$.cljs$core$logic$LConsSeq$_lnext$arity$1(this$)
  }else {
    var x__2373__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3824__auto__ = cljs.core.logic._lnext[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._lnext["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "LConsSeq.-lnext", this$);
        }
      }
    }().call(null, this$)
  }
};
cljs.core.logic.lcons_pr_seq = function lcons_pr_seq(x) {
  if(cljs.core.truth_(cljs.core.logic.lcons_QMARK_.call(null, x))) {
    return new cljs.core.LazySeq(null, false, function() {
      return cljs.core.cons.call(null, cljs.core.logic._lfirst.call(null, x), lcons_pr_seq.call(null, cljs.core.logic._lnext.call(null, x)))
    }, null)
  }else {
    if("\ufdd0'else") {
      return cljs.core.list.call(null, "\ufdd1'.", x)
    }else {
      return null
    }
  }
};
goog.provide("cljs.core.logic.LCons");
cljs.core.logic.LCons = function(a, d, meta) {
  this.a = a;
  this.d = d;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2149974016
};
cljs.core.logic.LCons.cljs$lang$type = true;
cljs.core.logic.LCons.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core.logic/LCons")
};
cljs.core.logic.LCons.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core.logic/LCons")
};
cljs.core.logic.LCons.prototype.cljs$core$logic$IUnifyWithSequential$ = true;
cljs.core.logic.LCons.prototype.cljs$core$logic$IUnifyWithSequential$_unify_with_seq$arity$3 = function(v, u, s) {
  var self__ = this;
  return cljs.core.logic._unify_with_lseq.call(null, u, v, s)
};
cljs.core.logic.LCons.prototype.cljs$core$logic$IReifyTerm$ = true;
cljs.core.logic.LCons.prototype.cljs$core$logic$IReifyTerm$_reify_term$arity$2 = function(v, s) {
  var self__ = this;
  var v__$1 = v;
  var s__$1 = s;
  while(true) {
    if(cljs.core.truth_(cljs.core.logic.lcons_QMARK_.call(null, v__$1))) {
      var G__3296 = v__$1.cljs$core$logic$LConsSeq$_lnext$arity$1(v__$1);
      var G__3297 = cljs.core.logic._reify_STAR_.call(null, s__$1, v__$1.cljs$core$logic$LConsSeq$_lfirst$arity$1(v__$1));
      v__$1 = G__3296;
      s__$1 = G__3297;
      continue
    }else {
      return cljs.core.logic._reify_STAR_.call(null, s__$1, v__$1)
    }
    break
  }
};
cljs.core.logic.LCons.prototype.cljs$core$logic$IUnifyTerms$ = true;
cljs.core.logic.LCons.prototype.cljs$core$logic$IUnifyTerms$_unify_terms$arity$3 = function(u, v, s) {
  var self__ = this;
  return cljs.core.logic._unify_with_lseq.call(null, v, u, s)
};
cljs.core.logic.LCons.prototype.cljs$core$logic$IUnifyWithNil$ = true;
cljs.core.logic.LCons.prototype.cljs$core$logic$IUnifyWithNil$_unify_with_nil$arity$3 = function(v, u, s) {
  var self__ = this;
  return false
};
cljs.core.logic.LCons.prototype.cljs$core$logic$IUnifyWithMap$ = true;
cljs.core.logic.LCons.prototype.cljs$core$logic$IUnifyWithMap$_unify_with_map$arity$3 = function(v, u, s) {
  var self__ = this;
  return false
};
cljs.core.logic.LCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this$, writer, opts) {
  var self__ = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, cljs.core.logic.lcons_pr_seq.call(null, this$))
};
cljs.core.logic.LCons.prototype.cljs$core$logic$IOccursCheckTerm$ = true;
cljs.core.logic.LCons.prototype.cljs$core$logic$IOccursCheckTerm$_occurs_check_term$arity$3 = function(v, x, s) {
  var self__ = this;
  var v__$1 = v;
  var x__$1 = x;
  var s__$1 = s;
  while(true) {
    if(cljs.core.truth_(cljs.core.logic.lcons_QMARK_.call(null, v__$1))) {
      var or__3824__auto__ = cljs.core.logic._occurs_check.call(null, s__$1, x__$1, v__$1.cljs$core$logic$LConsSeq$_lfirst$arity$1(v__$1));
      if(cljs.core.truth_(or__3824__auto__)) {
        return or__3824__auto__
      }else {
        var G__3298 = v__$1.cljs$core$logic$LConsSeq$_lnext$arity$1(v__$1);
        var G__3299 = x__$1;
        var G__3300 = s__$1;
        v__$1 = G__3298;
        x__$1 = G__3299;
        s__$1 = G__3300;
        continue
      }
    }else {
      return cljs.core.logic._occurs_check.call(null, s__$1, x__$1, v__$1)
    }
    break
  }
};
cljs.core.logic.LCons.prototype.cljs$core$logic$IUnifyWithSet$ = true;
cljs.core.logic.LCons.prototype.cljs$core$logic$IUnifyWithSet$_unify_with_set$arity$3 = function(v, u, s) {
  var self__ = this;
  return false
};
cljs.core.logic.LCons.prototype.cljs$core$logic$IWalkTerm$ = true;
cljs.core.logic.LCons.prototype.cljs$core$logic$IWalkTerm$_walk_term$arity$2 = function(v, s) {
  var self__ = this;
  return cljs.core.logic.lcons.call(null, cljs.core.logic._walk_STAR_.call(null, s, v.cljs$core$logic$LConsSeq$_lfirst$arity$1(v)), cljs.core.logic._walk_STAR_.call(null, s, v.cljs$core$logic$LConsSeq$_lnext$arity$1(v)))
};
cljs.core.logic.LCons.prototype.cljs$core$logic$IUnifyWithObject$ = true;
cljs.core.logic.LCons.prototype.cljs$core$logic$IUnifyWithObject$_unify_with_object$arity$3 = function(v, u, s) {
  var self__ = this;
  return false
};
cljs.core.logic.LCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, o) {
  var self__ = this;
  var or__3824__auto__ = this$ === o;
  if(or__3824__auto__) {
    return or__3824__auto__
  }else {
    var and__3822__auto__ = cljs.core.instance_QMARK_.call(null, cljs.core.logic.LCons, o);
    if(and__3822__auto__) {
      var me = this$;
      var you = o;
      while(true) {
        if(me == null) {
          return you == null
        }else {
          if(cljs.core.logic.lvar_QMARK_.call(null, me)) {
            return true
          }else {
            if(cljs.core.logic.lvar_QMARK_.call(null, you)) {
              return true
            }else {
              if(cljs.core.truth_(function() {
                var and__3822__auto____$1 = cljs.core.logic.lcons_QMARK_.call(null, me);
                if(cljs.core.truth_(and__3822__auto____$1)) {
                  return cljs.core.logic.lcons_QMARK_.call(null, you)
                }else {
                  return and__3822__auto____$1
                }
              }())) {
                var mef = me.cljs$core$logic$LConsSeq$_lfirst$arity$1(me);
                var youf = cljs.core.logic._lfirst.call(null, you);
                var and__3822__auto____$1 = function() {
                  var or__3824__auto____$1 = cljs.core._EQ_.call(null, mef, youf);
                  if(or__3824__auto____$1) {
                    return or__3824__auto____$1
                  }else {
                    var or__3824__auto____$2 = cljs.core.logic.lvar_QMARK_.call(null, mef);
                    if(or__3824__auto____$2) {
                      return or__3824__auto____$2
                    }else {
                      return cljs.core.logic.lvar_QMARK_.call(null, youf)
                    }
                  }
                }();
                if(cljs.core.truth_(and__3822__auto____$1)) {
                  var G__3301 = me.cljs$core$logic$LConsSeq$_lnext$arity$1(me);
                  var G__3302 = cljs.core.logic._lnext.call(null, you);
                  me = G__3301;
                  you = G__3302;
                  continue
                }else {
                  return and__3822__auto____$1
                }
              }else {
                if("\ufdd0'else") {
                  return cljs.core._EQ_.call(null, me, you)
                }else {
                  return null
                }
              }
            }
          }
        }
        break
      }
    }else {
      return and__3822__auto__
    }
  }
};
cljs.core.logic.LCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this$, new_meta) {
  var self__ = this;
  return new cljs.core.logic.LCons(self__.a, self__.d, new_meta)
};
cljs.core.logic.LCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(this$) {
  var self__ = this;
  return self__.meta
};
cljs.core.logic.LCons.prototype.cljs$core$logic$LConsSeq$ = true;
cljs.core.logic.LCons.prototype.cljs$core$logic$LConsSeq$_lfirst$arity$1 = function(_) {
  var self__ = this;
  return self__.a
};
cljs.core.logic.LCons.prototype.cljs$core$logic$LConsSeq$_lnext$arity$1 = function(_) {
  var self__ = this;
  return self__.d
};
cljs.core.logic.LCons.prototype.cljs$core$logic$IUnifyWithLSeq$ = true;
cljs.core.logic.LCons.prototype.cljs$core$logic$IUnifyWithLSeq$_unify_with_lseq$arity$3 = function(v, u, s) {
  var self__ = this;
  var u__$1 = u;
  var v__$1 = v;
  var s__$1 = s;
  while(true) {
    if(cljs.core.logic.lvar_QMARK_.call(null, u__$1)) {
      return cljs.core.logic._unify.call(null, s__$1, u__$1, v__$1)
    }else {
      if(cljs.core.logic.lvar_QMARK_.call(null, v__$1)) {
        return cljs.core.logic._unify.call(null, s__$1, v__$1, u__$1)
      }else {
        if(cljs.core.truth_(function() {
          var and__3822__auto__ = cljs.core.logic.lcons_QMARK_.call(null, u__$1);
          if(cljs.core.truth_(and__3822__auto__)) {
            return cljs.core.logic.lcons_QMARK_.call(null, v__$1)
          }else {
            return and__3822__auto__
          }
        }())) {
          var temp__3971__auto__ = cljs.core.logic._unify.call(null, s__$1, cljs.core.logic._lfirst.call(null, u__$1), v__$1.cljs$core$logic$LConsSeq$_lfirst$arity$1(v__$1));
          if(cljs.core.truth_(temp__3971__auto__)) {
            var s__$2 = temp__3971__auto__;
            var G__3303 = cljs.core.logic._lnext.call(null, u__$1);
            var G__3304 = v__$1.cljs$core$logic$LConsSeq$_lnext$arity$1(v__$1);
            var G__3305 = s__$2;
            u__$1 = G__3303;
            v__$1 = G__3304;
            s__$1 = G__3305;
            continue
          }else {
            return false
          }
        }else {
          if("\ufdd0'else") {
            return cljs.core.logic._unify.call(null, s__$1, u__$1, v__$1)
          }else {
            return null
          }
        }
      }
    }
    break
  }
};
cljs.core.logic.LCons;
cljs.core.logic.lcons = function lcons(a, d) {
  if(function() {
    var or__3824__auto__ = cljs.core.coll_QMARK_.call(null, d);
    if(or__3824__auto__) {
      return or__3824__auto__
    }else {
      return d == null
    }
  }()) {
    return cljs.core.cons.call(null, a, cljs.core.seq.call(null, d))
  }else {
    return new cljs.core.logic.LCons(a, d, null)
  }
};
cljs.core.logic.lcons_QMARK_ = function lcons_QMARK_(x) {
  return cljs.core.instance_QMARK_.call(null, cljs.core.logic.LCons, x)
};
cljs.core.PersistentHashSet.prototype.cljs$core$logic$IUnifyTerms$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$logic$IUnifyTerms$_unify_terms$arity$3 = function(u, v, s) {
  return cljs.core.logic._unify_with_set.call(null, v, u, s)
};
cljs.core.PersistentHashMap.prototype.cljs$core$logic$IUnifyTerms$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$logic$IUnifyTerms$_unify_terms$arity$3 = function(u, v, s) {
  return cljs.core.logic._unify_with_map.call(null, v, u, s)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$logic$IUnifyTerms$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$logic$IUnifyTerms$_unify_terms$arity$3 = function(u, v, s) {
  return cljs.core.logic._unify_with_map.call(null, v, u, s)
};
cljs.core.ObjMap.prototype.cljs$core$logic$IUnifyTerms$ = true;
cljs.core.ObjMap.prototype.cljs$core$logic$IUnifyTerms$_unify_terms$arity$3 = function(u, v, s) {
  return cljs.core.logic._unify_with_map.call(null, v, u, s)
};
cljs.core.logic.IUnifyTerms["_"] = true;
cljs.core.logic._unify_terms["_"] = function(u, v, s) {
  if(cljs.core.sequential_QMARK_.call(null, u)) {
    return cljs.core.logic._unify_with_seq.call(null, v, u, s)
  }else {
    return cljs.core.logic._unify_with_object.call(null, v, u, s)
  }
};
cljs.core.logic.IUnifyTerms["null"] = true;
cljs.core.logic._unify_terms["null"] = function(u, v, s) {
  return cljs.core.logic._unify_with_nil.call(null, v, u, s)
};
cljs.core.logic.IUnifyWithNil["_"] = true;
cljs.core.logic._unify_with_nil["_"] = function(v, u, s) {
  return false
};
cljs.core.logic.IUnifyWithNil["null"] = true;
cljs.core.logic._unify_with_nil["null"] = function(v, u, s) {
  return s
};
cljs.core.logic.IUnifyWithObject["_"] = true;
cljs.core.logic._unify_with_object["_"] = function(v, u, s) {
  if(cljs.core._EQ_.call(null, u, v)) {
    return s
  }else {
    return false
  }
};
cljs.core.logic.IUnifyWithObject["null"] = true;
cljs.core.logic._unify_with_object["null"] = function(v, u, s) {
  return false
};
cljs.core.logic.IUnifyWithLVar["_"] = true;
cljs.core.logic._unify_with_lvar["_"] = function(v, u, s) {
  return cljs.core.logic._ext.call(null, s, u, v)
};
cljs.core.logic.IUnifyWithLVar["null"] = true;
cljs.core.logic._unify_with_lvar["null"] = function(v, u, s) {
  return cljs.core.logic._ext_no_check.call(null, s, u, v)
};
cljs.core.logic.IUnifyWithLSeq["_"] = true;
cljs.core.logic._unify_with_lseq["_"] = function(v, u, s) {
  if(cljs.core.sequential_QMARK_.call(null, v)) {
    var u__$1 = u;
    var v__$1 = v;
    var s__$1 = s;
    while(true) {
      if(cljs.core.seq.call(null, v__$1)) {
        if(cljs.core.logic.lcons_QMARK_.call(null, u__$1)) {
          var temp__3971__auto__ = cljs.core.logic._unify.call(null, s__$1, cljs.core.logic._lfirst.call(null, u__$1), cljs.core.first.call(null, v__$1));
          if(cljs.core.truth_(temp__3971__auto__)) {
            var s__$2 = temp__3971__auto__;
            var G__3306 = cljs.core.logic._lnext.call(null, u__$1);
            var G__3307 = cljs.core.next.call(null, v__$1);
            var G__3308 = s__$2;
            u__$1 = G__3306;
            v__$1 = G__3307;
            s__$1 = G__3308;
            continue
          }else {
            return false
          }
        }else {
          return cljs.core.logic._unify.call(null, s__$1, u__$1, v__$1)
        }
      }else {
        if(cljs.core.logic.lvar_QMARK_.call(null, u__$1)) {
          return cljs.core.logic._unify.call(null, s__$1, u__$1, cljs.core.List.EMPTY)
        }else {
          return false
        }
      }
      break
    }
  }else {
    return false
  }
};
cljs.core.logic.IUnifyWithLSeq["null"] = true;
cljs.core.logic._unify_with_lseq["null"] = function(v, u, s) {
  return false
};
cljs.core.logic.IUnifyWithSequential["_"] = true;
cljs.core.logic._unify_with_seq["_"] = function(v, u, s) {
  if(cljs.core.sequential_QMARK_.call(null, v)) {
    var u__$1 = u;
    var v__$1 = v;
    var s__$1 = s;
    while(true) {
      if(cljs.core.seq.call(null, u__$1)) {
        if(cljs.core.seq.call(null, v__$1)) {
          var temp__3971__auto__ = cljs.core.logic._unify.call(null, s__$1, cljs.core.first.call(null, u__$1), cljs.core.first.call(null, v__$1));
          if(cljs.core.truth_(temp__3971__auto__)) {
            var s__$2 = temp__3971__auto__;
            var G__3309 = cljs.core.next.call(null, u__$1);
            var G__3310 = cljs.core.next.call(null, v__$1);
            var G__3311 = s__$2;
            u__$1 = G__3309;
            v__$1 = G__3310;
            s__$1 = G__3311;
            continue
          }else {
            return false
          }
        }else {
          return false
        }
      }else {
        if(cljs.core.seq.call(null, v__$1)) {
          return false
        }else {
          return s__$1
        }
      }
      break
    }
  }else {
    return false
  }
};
cljs.core.logic.IUnifyWithSequential["null"] = true;
cljs.core.logic._unify_with_seq["null"] = function(v, u, s) {
  return false
};
cljs.core.logic.not_found = {};
cljs.core.logic.unify_with_map_STAR_ = function unify_with_map_STAR_(v, u, s) {
  if(!(cljs.core.count.call(null, v) === cljs.core.count.call(null, u))) {
    return false
  }else {
    var ks = cljs.core.seq.call(null, cljs.core.keys.call(null, u));
    var s__$1 = s;
    while(true) {
      if(ks) {
        var kf = cljs.core.first.call(null, ks);
        var vf = cljs.core._lookup.call(null, v, kf, cljs.core.logic.not_found);
        if(vf === cljs.core.logic.not_found) {
          return false
        }else {
          var temp__3971__auto__ = cljs.core.logic._unify.call(null, s__$1, cljs.core._lookup.call(null, u, kf, null), vf);
          if(cljs.core.truth_(temp__3971__auto__)) {
            var s__$2 = temp__3971__auto__;
            var G__3312 = cljs.core.next.call(null, ks);
            var G__3313 = s__$2;
            ks = G__3312;
            s__$1 = G__3313;
            continue
          }else {
            return false
          }
        }
      }else {
        return s__$1
      }
      break
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$logic$IUnifyWithMap$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$logic$IUnifyWithMap$_unify_with_map$arity$3 = function(v, u, s) {
  return cljs.core.logic.unify_with_map_STAR_.call(null, v, u, s)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$logic$IUnifyWithMap$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$logic$IUnifyWithMap$_unify_with_map$arity$3 = function(v, u, s) {
  return cljs.core.logic.unify_with_map_STAR_.call(null, v, u, s)
};
cljs.core.ObjMap.prototype.cljs$core$logic$IUnifyWithMap$ = true;
cljs.core.ObjMap.prototype.cljs$core$logic$IUnifyWithMap$_unify_with_map$arity$3 = function(v, u, s) {
  return cljs.core.logic.unify_with_map_STAR_.call(null, v, u, s)
};
cljs.core.logic.IUnifyWithMap["_"] = true;
cljs.core.logic._unify_with_map["_"] = function(v, u, s) {
  return false
};
cljs.core.logic.IUnifyWithMap["null"] = true;
cljs.core.logic._unify_with_map["null"] = function(v, u, s) {
  return false
};
cljs.core.PersistentHashSet.prototype.cljs$core$logic$IUnifyWithSet$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$logic$IUnifyWithSet$_unify_with_set$arity$3 = function(v, u, s) {
  var u__$1 = u;
  var v__$1 = v;
  var ulvars = cljs.core.PersistentVector.EMPTY;
  var umissing = cljs.core.PersistentVector.EMPTY;
  while(true) {
    if(cljs.core.seq.call(null, u__$1)) {
      if(cljs.core.seq.call(null, v__$1)) {
        var uf = cljs.core.first.call(null, u__$1);
        if(cljs.core.logic.lvar_QMARK_.call(null, uf)) {
          var G__3314 = cljs.core.disj.call(null, u__$1, uf);
          var G__3315 = v__$1;
          var G__3316 = cljs.core.conj.call(null, ulvars, uf);
          var G__3317 = umissing;
          u__$1 = G__3314;
          v__$1 = G__3315;
          ulvars = G__3316;
          umissing = G__3317;
          continue
        }else {
          if(cljs.core.contains_QMARK_.call(null, v__$1, uf)) {
            var G__3318 = cljs.core.disj.call(null, u__$1, uf);
            var G__3319 = cljs.core.disj.call(null, v__$1, uf);
            var G__3320 = ulvars;
            var G__3321 = umissing;
            u__$1 = G__3318;
            v__$1 = G__3319;
            ulvars = G__3320;
            umissing = G__3321;
            continue
          }else {
            var G__3322 = cljs.core.disj.call(null, u__$1, uf);
            var G__3323 = v__$1;
            var G__3324 = ulvars;
            var G__3325 = cljs.core.conj.call(null, umissing, uf);
            u__$1 = G__3322;
            v__$1 = G__3323;
            ulvars = G__3324;
            umissing = G__3325;
            continue
          }
        }
      }else {
        return false
      }
    }else {
      if(cljs.core.seq.call(null, v__$1)) {
        if(cljs.core.seq.call(null, ulvars)) {
          var v__$2 = v__$1;
          var vlvars = cljs.core.PersistentVector.EMPTY;
          var vmissing = cljs.core.PersistentVector.EMPTY;
          while(true) {
            if(cljs.core.seq.call(null, v__$2)) {
              var vf = cljs.core.first.call(null, v__$2);
              if(cljs.core.logic.lvar_QMARK_.call(null, vf)) {
                var G__3326 = cljs.core.disj.call(null, v__$2, vf);
                var G__3327 = cljs.core.conj.call(null, vlvars, vf);
                var G__3328 = vmissing;
                v__$2 = G__3326;
                vlvars = G__3327;
                vmissing = G__3328;
                continue
              }else {
                var G__3329 = cljs.core.disj.call(null, v__$2, vf);
                var G__3330 = vlvars;
                var G__3331 = cljs.core.conj.call(null, vmissing, vf);
                v__$2 = G__3329;
                vlvars = G__3330;
                vmissing = G__3331;
                continue
              }
            }else {
              return cljs.core.logic._unify.call(null, s, cljs.core.concat.call(null, ulvars, umissing), cljs.core.concat.call(null, vmissing, vlvars))
            }
            break
          }
        }else {
          return false
        }
      }else {
        return s
      }
    }
    break
  }
};
cljs.core.logic.IUnifyWithSet["_"] = true;
cljs.core.logic._unify_with_set["_"] = function(v, u, s) {
  return false
};
cljs.core.logic.IUnifyWithSet["null"] = true;
cljs.core.logic._unify_with_set["null"] = function(v, u, s) {
  return false
};
cljs.core.logic.IReifyTerm["_"] = true;
cljs.core.logic._reify_term["_"] = function(v, s) {
  if(cljs.core.sequential_QMARK_.call(null, v)) {
    var v__$1 = v;
    var s__$1 = s;
    while(true) {
      if(cljs.core.seq.call(null, v__$1)) {
        var G__3332 = cljs.core.next.call(null, v__$1);
        var G__3333 = cljs.core.logic._reify_STAR_.call(null, s__$1, cljs.core.first.call(null, v__$1));
        v__$1 = G__3332;
        s__$1 = G__3333;
        continue
      }else {
        return s__$1
      }
      break
    }
  }else {
    return s
  }
};
cljs.core.logic.IReifyTerm["null"] = true;
cljs.core.logic._reify_term["null"] = function(v, s) {
  return s
};
cljs.core.logic.walk_term_map_STAR_ = function walk_term_map_STAR_(v, s) {
  var v__$1 = v;
  var r = cljs.core.ObjMap.EMPTY;
  while(true) {
    if(cljs.core.seq.call(null, v__$1)) {
      var vec__3336 = cljs.core.first.call(null, v__$1);
      var vfk = cljs.core.nth.call(null, vec__3336, 0, null);
      var vfv = cljs.core.nth.call(null, vec__3336, 1, null);
      var G__3337 = cljs.core.next.call(null, v__$1);
      var G__3338 = cljs.core.assoc.call(null, r, vfk, cljs.core.logic._walk_STAR_.call(null, s, vfv));
      v__$1 = G__3337;
      r = G__3338;
      continue
    }else {
      return r
    }
    break
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$logic$IWalkTerm$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$logic$IWalkTerm$_walk_term$arity$2 = function(v, s) {
  var v__$1 = v;
  var r = cljs.core.ObjMap.EMPTY;
  while(true) {
    if(cljs.core.seq.call(null, v__$1)) {
      var G__3339 = cljs.core.next.call(null, v__$1);
      var G__3340 = cljs.core.conj.call(null, r, cljs.core.logic._walk_STAR_.call(null, s, cljs.core.first.call(null, v__$1)));
      v__$1 = G__3339;
      r = G__3340;
      continue
    }else {
      return r
    }
    break
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$logic$IWalkTerm$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$logic$IWalkTerm$_walk_term$arity$2 = function(v, s) {
  return cljs.core.logic.walk_term_map_STAR_.call(null, v, s)
};
cljs.core.ObjMap.prototype.cljs$core$logic$IWalkTerm$ = true;
cljs.core.ObjMap.prototype.cljs$core$logic$IWalkTerm$_walk_term$arity$2 = function(v, s) {
  return cljs.core.logic.walk_term_map_STAR_.call(null, v, s)
};
cljs.core.PersistentVector.prototype.cljs$core$logic$IWalkTerm$ = true;
cljs.core.PersistentVector.prototype.cljs$core$logic$IWalkTerm$_walk_term$arity$2 = function(v, s) {
  var v__$1 = v;
  var r = cljs.core.PersistentVector.EMPTY;
  while(true) {
    if(cljs.core.seq.call(null, v__$1)) {
      var G__3341 = cljs.core.next.call(null, v__$1);
      var G__3342 = cljs.core.conj.call(null, r, cljs.core.logic._walk_STAR_.call(null, s, cljs.core.first.call(null, v__$1)));
      v__$1 = G__3341;
      r = G__3342;
      continue
    }else {
      return r
    }
    break
  }
};
cljs.core.logic.IWalkTerm["_"] = true;
cljs.core.logic._walk_term["_"] = function(v, s) {
  if(cljs.core.sequential_QMARK_.call(null, v)) {
    return cljs.core.map.call(null, function(p1__3334_SHARP_) {
      return cljs.core.logic._walk_STAR_.call(null, s, p1__3334_SHARP_)
    }, v)
  }else {
    return v
  }
};
cljs.core.logic.IWalkTerm["null"] = true;
cljs.core.logic._walk_term["null"] = function(v, s) {
  return null
};
cljs.core.logic.IOccursCheckTerm["_"] = true;
cljs.core.logic._occurs_check_term["_"] = function(v, x, s) {
  if(cljs.core.sequential_QMARK_.call(null, v)) {
    var v__$1 = v;
    var x__$1 = x;
    var s__$1 = s;
    while(true) {
      if(cljs.core.seq.call(null, v__$1)) {
        var or__3824__auto__ = cljs.core.logic._occurs_check.call(null, s__$1, x__$1, cljs.core.first.call(null, v__$1));
        if(cljs.core.truth_(or__3824__auto__)) {
          return or__3824__auto__
        }else {
          var G__3343 = cljs.core.next.call(null, v__$1);
          var G__3344 = x__$1;
          var G__3345 = s__$1;
          v__$1 = G__3343;
          x__$1 = G__3344;
          s__$1 = G__3345;
          continue
        }
      }else {
        return false
      }
      break
    }
  }else {
    return false
  }
};
cljs.core.logic.IOccursCheckTerm["null"] = true;
cljs.core.logic._occurs_check_term["null"] = function(v, x, s) {
  return false
};
cljs.core.logic.ITake["_"] = true;
cljs.core.logic._take_STAR_["_"] = function(this$) {
  return this$
};
goog.provide("cljs.core.logic.Choice");
cljs.core.logic.Choice = function(a, f) {
  this.a = a;
  this.f = f
};
cljs.core.logic.Choice.cljs$lang$type = true;
cljs.core.logic.Choice.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core.logic/Choice")
};
cljs.core.logic.Choice.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core.logic/Choice")
};
cljs.core.logic.Choice.prototype.cljs$core$logic$ITake$ = true;
cljs.core.logic.Choice.prototype.cljs$core$logic$ITake$_take_STAR_$arity$1 = function(this$) {
  var self__ = this;
  return new cljs.core.LazySeq(null, false, function() {
    return cljs.core.cons.call(null, cljs.core.first.call(null, self__.a), new cljs.core.LazySeq(null, false, function() {
      return cljs.core.logic._take_STAR_.call(null, self__.f)
    }, null))
  }, null)
};
cljs.core.logic.Choice.prototype.cljs$core$logic$IMPlus$ = true;
cljs.core.logic.Choice.prototype.cljs$core$logic$IMPlus$_mplus$arity$2 = function(this$, fp) {
  var self__ = this;
  return new cljs.core.logic.Choice(self__.a, new cljs.core.logic.Inc(function() {
    return cljs.core.logic._mplus.call(null, fp.call(null), self__.f)
  }))
};
cljs.core.logic.Choice.prototype.cljs$core$logic$IBind$ = true;
cljs.core.logic.Choice.prototype.cljs$core$logic$IBind$_bind$arity$2 = function(this$, g) {
  var self__ = this;
  return cljs.core.logic._mplus.call(null, g.call(null, self__.a), new cljs.core.logic.Inc(function() {
    return cljs.core.logic._bind.call(null, self__.f, g)
  }))
};
cljs.core.logic.Choice;
cljs.core.logic.choice = function choice(a, f) {
  return new cljs.core.logic.Choice(a, f)
};
cljs.core.logic.IBind["null"] = true;
cljs.core.logic._bind["null"] = function(_, g) {
  return null
};
cljs.core.logic.IMPlus["null"] = true;
cljs.core.logic._mplus["null"] = function(_, b) {
  return b
};
cljs.core.logic.ITake["null"] = true;
cljs.core.logic._take_STAR_["null"] = function(_) {
  return cljs.core.List.EMPTY
};
cljs.core.logic.IMPlus["_"] = true;
cljs.core.logic._mplus["_"] = function(this$, f) {
  return new cljs.core.logic.Choice(this$, f)
};
goog.provide("cljs.core.logic.Inc");
cljs.core.logic.Inc = function(f) {
  this.f = f;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1
};
cljs.core.logic.Inc.cljs$lang$type = true;
cljs.core.logic.Inc.cljs$lang$ctorPrSeq = function(this__2315__auto__) {
  return cljs.core.list.call(null, "cljs.core.logic/Inc")
};
cljs.core.logic.Inc.cljs$lang$ctorPrWriter = function(this__2315__auto__, writer__2316__auto__) {
  return cljs.core._write.call(null, writer__2316__auto__, "cljs.core.logic/Inc")
};
cljs.core.logic.Inc.prototype.cljs$core$logic$ITake$ = true;
cljs.core.logic.Inc.prototype.cljs$core$logic$ITake$_take_STAR_$arity$1 = function(this$) {
  var self__ = this;
  return new cljs.core.LazySeq(null, false, function() {
    return cljs.core.logic._take_STAR_.call(null, self__.f.call(null))
  }, null)
};
cljs.core.logic.Inc.prototype.cljs$core$logic$IMPlus$ = true;
cljs.core.logic.Inc.prototype.cljs$core$logic$IMPlus$_mplus$arity$2 = function(this$, fp) {
  var self__ = this;
  return new cljs.core.logic.Inc(function() {
    return cljs.core.logic._mplus.call(null, fp.call(null), this$)
  })
};
cljs.core.logic.Inc.prototype.cljs$core$logic$IBind$ = true;
cljs.core.logic.Inc.prototype.cljs$core$logic$IBind$_bind$arity$2 = function(this$, g) {
  var self__ = this;
  return new cljs.core.logic.Inc(function() {
    return cljs.core.logic._bind.call(null, self__.f.call(null), g)
  })
};
cljs.core.logic.Inc.prototype.call = function(this_sym3348) {
  var self__ = this;
  var this_sym3348__$1 = this;
  var _ = this_sym3348__$1;
  return self__.f.call(null)
};
cljs.core.logic.Inc.prototype.apply = function(this_sym3346, args3347) {
  var self__ = this;
  return this_sym3346.call.apply(this_sym3346, [this_sym3346].concat(args3347.slice()))
};
cljs.core.logic.Inc;
cljs.core.logic.succeed = function succeed(a) {
  return a
};
cljs.core.logic.fail = function fail(a) {
  return null
};
cljs.core.logic.s_SHARP_ = cljs.core.logic.succeed;
cljs.core.logic.u_SHARP_ = cljs.core.logic.fail;
cljs.core.logic.IIfA = {};
cljs.core.logic._ifa = function _ifa(b, gs, c) {
  if(function() {
    var and__3822__auto__ = b;
    if(and__3822__auto__) {
      return b.cljs$core$logic$IIfA$_ifa$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return b.cljs$core$logic$IIfA$_ifa$arity$3(b, gs, c)
  }else {
    var x__2373__auto__ = b == null ? null : b;
    return function() {
      var or__3824__auto__ = cljs.core.logic._ifa[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._ifa["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IIfA.-ifa", b);
        }
      }
    }().call(null, b, gs, c)
  }
};
cljs.core.logic.IIfU = {};
cljs.core.logic._ifu = function _ifu(b, gs, c) {
  if(function() {
    var and__3822__auto__ = b;
    if(and__3822__auto__) {
      return b.cljs$core$logic$IIfU$_ifu$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return b.cljs$core$logic$IIfU$_ifu$arity$3(b, gs, c)
  }else {
    var x__2373__auto__ = b == null ? null : b;
    return function() {
      var or__3824__auto__ = cljs.core.logic._ifu[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic._ifu["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IIfU.-ifu", b);
        }
      }
    }().call(null, b, gs, c)
  }
};
cljs.core.logic.IIfA["null"] = true;
cljs.core.logic._ifa["null"] = function(b, gs, c) {
  if(cljs.core.truth_(c)) {
    return cljs.core.force.call(null, c)
  }else {
    return null
  }
};
cljs.core.logic.IIfU["null"] = true;
cljs.core.logic._ifu["null"] = function(b, gs, c) {
  if(cljs.core.truth_(c)) {
    return cljs.core.force.call(null, c)
  }else {
    return null
  }
};
cljs.core.logic.Substitutions.prototype.cljs$core$logic$IIfA$ = true;
cljs.core.logic.Substitutions.prototype.cljs$core$logic$IIfA$_ifa$arity$3 = function(b, gs, c) {
  var b__$1 = b;
  var G__3350 = gs;
  var vec__3351 = G__3350;
  var g0 = cljs.core.nth.call(null, vec__3351, 0, null);
  var gr = cljs.core.nthnext.call(null, vec__3351, 1);
  var b__$2 = b__$1;
  var G__3350__$1 = G__3350;
  while(true) {
    var b__$3 = b__$2;
    var vec__3352 = G__3350__$1;
    var g0__$1 = cljs.core.nth.call(null, vec__3352, 0, null);
    var gr__$1 = cljs.core.nthnext.call(null, vec__3352, 1);
    if(cljs.core.truth_(g0__$1)) {
      var temp__3974__auto__ = g0__$1.call(null, b__$3);
      if(cljs.core.truth_(temp__3974__auto__)) {
        var b__$4 = temp__3974__auto__;
        var G__3353 = b__$4;
        var G__3354 = gr__$1;
        b__$2 = G__3353;
        G__3350__$1 = G__3354;
        continue
      }else {
        return null
      }
    }else {
      return b__$3
    }
    break
  }
};
cljs.core.logic.Substitutions.prototype.cljs$core$logic$IIfU$ = true;
cljs.core.logic.Substitutions.prototype.cljs$core$logic$IIfU$_ifu$arity$3 = function(b, gs, c) {
  var b__$1 = b;
  var G__3356 = gs;
  var vec__3357 = G__3356;
  var g0 = cljs.core.nth.call(null, vec__3357, 0, null);
  var gr = cljs.core.nthnext.call(null, vec__3357, 1);
  var b__$2 = b__$1;
  var G__3356__$1 = G__3356;
  while(true) {
    var b__$3 = b__$2;
    var vec__3358 = G__3356__$1;
    var g0__$1 = cljs.core.nth.call(null, vec__3358, 0, null);
    var gr__$1 = cljs.core.nthnext.call(null, vec__3358, 1);
    if(cljs.core.truth_(g0__$1)) {
      var temp__3974__auto__ = g0__$1.call(null, b__$3);
      if(cljs.core.truth_(temp__3974__auto__)) {
        var b__$4 = temp__3974__auto__;
        var G__3359 = b__$4;
        var G__3360 = gr__$1;
        b__$2 = G__3359;
        G__3356__$1 = G__3360;
        continue
      }else {
        return null
      }
    }else {
      return b__$3
    }
    break
  }
};
cljs.core.logic.Inc.prototype.cljs$core$logic$IIfU$ = true;
cljs.core.logic.Inc.prototype.cljs$core$logic$IIfU$_ifu$arity$3 = function(b, gs, c) {
  return new cljs.core.logic.Inc(function() {
    return cljs.core.logic._ifu.call(null, b.call(null), gs, c)
  })
};
cljs.core.logic.Inc.prototype.cljs$core$logic$IIfA$ = true;
cljs.core.logic.Inc.prototype.cljs$core$logic$IIfA$_ifa$arity$3 = function(b, gs, c) {
  return new cljs.core.logic.Inc(function() {
    return cljs.core.logic._ifa.call(null, b.call(null), gs, c)
  })
};
cljs.core.logic.Choice.prototype.cljs$core$logic$IIfA$ = true;
cljs.core.logic.Choice.prototype.cljs$core$logic$IIfA$_ifa$arity$3 = function(b, gs, c) {
  return cljs.core.reduce.call(null, cljs.core.logic._bind, b, gs)
};
cljs.core.logic.Choice.prototype.cljs$core$logic$IIfU$ = true;
cljs.core.logic.Choice.prototype.cljs$core$logic$IIfU$_ifu$arity$3 = function(b, gs, c) {
  return cljs.core.reduce.call(null, cljs.core.logic._bind, b.a, gs)
};
cljs.core.logic.nilo = function nilo(a) {
  return function(a__2885__auto__) {
    var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, null, a);
    if(cljs.core.truth_(temp__3971__auto__)) {
      var b__2886__auto__ = temp__3971__auto__;
      return b__2886__auto__
    }else {
      return null
    }
  }
};
cljs.core.logic.emptyo = function emptyo(a) {
  return function(a__2885__auto__) {
    var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, cljs.core.List.EMPTY, a);
    if(cljs.core.truth_(temp__3971__auto__)) {
      var b__2886__auto__ = temp__3971__auto__;
      return b__2886__auto__
    }else {
      return null
    }
  }
};
cljs.core.logic.conso = function conso(a, d, l) {
  return function(a__2885__auto__) {
    var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, cljs.core.logic.lcons.call(null, a, d), l);
    if(cljs.core.truth_(temp__3971__auto__)) {
      var b__2886__auto__ = temp__3971__auto__;
      return b__2886__auto__
    }else {
      return null
    }
  }
};
cljs.core.logic.firsto = function firsto(l, a) {
  return function(a__2897__auto__) {
    return new cljs.core.logic.Inc(function() {
      var d = cljs.core.logic.lvar.call(null, "\ufdd1'd");
      return cljs.core.logic._bind.call(null, a__2897__auto__, cljs.core.logic.conso.call(null, a, d, l))
    })
  }
};
cljs.core.logic.resto = function resto(l, d) {
  return function(a__2897__auto__) {
    return new cljs.core.logic.Inc(function() {
      var a = cljs.core.logic.lvar.call(null, "\ufdd1'a");
      return cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2885__auto__) {
        var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, cljs.core.logic.lcons.call(null, a, d), l);
        if(cljs.core.truth_(temp__3971__auto__)) {
          var b__2886__auto__ = temp__3971__auto__;
          return b__2886__auto__
        }else {
          return null
        }
      })
    })
  }
};
cljs.core.logic.membero = function membero(x, l) {
  return function(a3362) {
    return new cljs.core.logic.Inc(function() {
      return cljs.core.logic._mplus.call(null, cljs.core.logic._bind.call(null, a3362, function(a__2897__auto__) {
        return new cljs.core.logic.Inc(function() {
          var tail = cljs.core.logic.lvar.call(null, "\ufdd1'tail");
          return cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2885__auto__) {
            var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, cljs.core.logic.lcons.call(null, x, tail), l);
            if(cljs.core.truth_(temp__3971__auto__)) {
              var b__2886__auto__ = temp__3971__auto__;
              return b__2886__auto__
            }else {
              return null
            }
          })
        })
      }), new cljs.core.logic.Inc(function() {
        return cljs.core.logic._bind.call(null, a3362, function(a__2897__auto__) {
          return new cljs.core.logic.Inc(function() {
            var head = cljs.core.logic.lvar.call(null, "\ufdd1'head");
            var tail = cljs.core.logic.lvar.call(null, "\ufdd1'tail");
            return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2885__auto__) {
              var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, cljs.core.logic.lcons.call(null, head, tail), l);
              if(cljs.core.truth_(temp__3971__auto__)) {
                var b__2886__auto__ = temp__3971__auto__;
                return b__2886__auto__
              }else {
                return null
              }
            }), membero.call(null, x, tail))
          })
        })
      }))
    })
  }
};
cljs.core.logic.appendo = function appendo(x, y, z) {
  return function(a3364) {
    return new cljs.core.logic.Inc(function() {
      return cljs.core.logic._mplus.call(null, cljs.core.logic._bind.call(null, a3364, function(a__2897__auto__) {
        return new cljs.core.logic.Inc(function() {
          return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2885__auto__) {
            var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, cljs.core.List.EMPTY, x);
            if(cljs.core.truth_(temp__3971__auto__)) {
              var b__2886__auto__ = temp__3971__auto__;
              return b__2886__auto__
            }else {
              return null
            }
          }), function(a__2897__auto____$1) {
            return new cljs.core.logic.Inc(function() {
              return cljs.core.logic._bind.call(null, a__2897__auto____$1, function(a__2885__auto__) {
                var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, y, z);
                if(cljs.core.truth_(temp__3971__auto__)) {
                  var b__2886__auto__ = temp__3971__auto__;
                  return b__2886__auto__
                }else {
                  return null
                }
              })
            })
          })
        })
      }), new cljs.core.logic.Inc(function() {
        return cljs.core.logic._bind.call(null, a3364, function(a__2897__auto__) {
          return new cljs.core.logic.Inc(function() {
            var a = cljs.core.logic.lvar.call(null, "\ufdd1'a");
            var d = cljs.core.logic.lvar.call(null, "\ufdd1'd");
            return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2885__auto__) {
              var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, cljs.core.logic.lcons.call(null, a, d), x);
              if(cljs.core.truth_(temp__3971__auto__)) {
                var b__2886__auto__ = temp__3971__auto__;
                return b__2886__auto__
              }else {
                return null
              }
            }), function(a__2897__auto____$1) {
              return new cljs.core.logic.Inc(function() {
                var r = cljs.core.logic.lvar.call(null, "\ufdd1'r");
                return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto____$1, function(a__2885__auto__) {
                  var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, cljs.core.logic.lcons.call(null, a, r), z);
                  if(cljs.core.truth_(temp__3971__auto__)) {
                    var b__2886__auto__ = temp__3971__auto__;
                    return b__2886__auto__
                  }else {
                    return null
                  }
                }), appendo.call(null, d, y, r))
              })
            })
          })
        })
      }))
    })
  }
};
cljs.core.logic.prefix = function prefix(s, _LT_s) {
  if(cljs.core._EQ_.call(null, s, _LT_s)) {
    return cljs.core.List.EMPTY
  }else {
    return cljs.core.conj.call(null, prefix.call(null, cljs.core.rest.call(null, s), _LT_s), cljs.core.first.call(null, s))
  }
};
cljs.core.logic.IUnifyWithPMap = {};
cljs.core.logic.unify_with_pmap = function unify_with_pmap(pmap, u, s) {
  if(function() {
    var and__3822__auto__ = pmap;
    if(and__3822__auto__) {
      return pmap.cljs$core$logic$IUnifyWithPMap$unify_with_pmap$arity$3
    }else {
      return and__3822__auto__
    }
  }()) {
    return pmap.cljs$core$logic$IUnifyWithPMap$unify_with_pmap$arity$3(pmap, u, s)
  }else {
    var x__2373__auto__ = pmap == null ? null : pmap;
    return function() {
      var or__3824__auto__ = cljs.core.logic.unify_with_pmap[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = cljs.core.logic.unify_with_pmap["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IUnifyWithPMap.unify-with-pmap", pmap);
        }
      }
    }().call(null, pmap, u, s)
  }
};
goog.provide("cljs.core.logic.PMap");
cljs.core.logic.PMap = function(__meta, __extmap) {
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  if(arguments.length > 0) {
    this.__meta = __meta;
    this.__extmap = __extmap
  }else {
    this.__meta = null;
    this.__extmap = null
  }
};
cljs.core.logic.PMap.prototype.cljs$core$logic$IUnifyWithPMap$ = true;
cljs.core.logic.PMap.prototype.cljs$core$logic$IUnifyWithPMap$unify_with_pmap$arity$3 = function(v, u, s) {
  var self__ = this;
  return v.cljs$core$logic$IUnifyWithMap$_unify_with_map$arity$3(v, u, s)
};
cljs.core.logic.PMap.prototype.cljs$core$IHash$_hash$arity$1 = function(this__2326__auto__) {
  var self__ = this;
  var h__2196__auto__ = self__.__hash;
  if(!(h__2196__auto__ == null)) {
    return h__2196__auto__
  }else {
    var h__2196__auto____$1 = cljs.core.hash_imap.call(null, this__2326__auto__);
    self__.__hash = h__2196__auto____$1;
    return h__2196__auto____$1
  }
};
cljs.core.logic.PMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__2331__auto__, k__2332__auto__) {
  var self__ = this;
  return this__2331__auto__.cljs$core$ILookup$_lookup$arity$3(this__2331__auto__, k__2332__auto__, null)
};
cljs.core.logic.PMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__2333__auto__, k3366, else__2334__auto__) {
  var self__ = this;
  if("\ufdd0'else") {
    return cljs.core._lookup.call(null, self__.__extmap, k3366, else__2334__auto__)
  }else {
    return null
  }
};
cljs.core.logic.PMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__2338__auto__, k__2339__auto__, G__3365) {
  var self__ = this;
  var pred__3368 = cljs.core.identical_QMARK_;
  var expr__3369 = k__2339__auto__;
  return new cljs.core.logic.PMap(self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__2339__auto__, G__3365), null)
};
cljs.core.logic.PMap.prototype.cljs$core$logic$IUnifyWithLVar$ = true;
cljs.core.logic.PMap.prototype.cljs$core$logic$IUnifyWithLVar$_unify_with_lvar$arity$3 = function(v, u, s) {
  var self__ = this;
  return cljs.core.logic._ext_no_check.call(null, s, u, v)
};
cljs.core.logic.PMap.prototype.cljs$core$logic$IUnifyTerms$ = true;
cljs.core.logic.PMap.prototype.cljs$core$logic$IUnifyTerms$_unify_terms$arity$3 = function(u, v, s) {
  var self__ = this;
  return cljs.core.logic.unify_with_pmap.call(null, v, u, s)
};
cljs.core.logic.PMap.prototype.cljs$core$logic$IUnifyWithMap$ = true;
cljs.core.logic.PMap.prototype.cljs$core$logic$IUnifyWithMap$_unify_with_map$arity$3 = function(v, u, s) {
  var self__ = this;
  var ks = cljs.core.keys.call(null, v);
  var s__$1 = s;
  while(true) {
    if(cljs.core.seq.call(null, ks)) {
      var kf = cljs.core.first.call(null, ks);
      var uf = cljs.core._lookup.call(null, u, kf, "\ufdd0'cljs.core.logic/not-found");
      if(cljs.core._EQ_.call(null, uf, "\ufdd0'cljs.core.logic/not-found")) {
        return null
      }else {
        var temp__3971__auto__ = cljs.core.logic._unify.call(null, s__$1, v.cljs$core$ILookup$_lookup$arity$3(v, kf, null), uf);
        if(cljs.core.truth_(temp__3971__auto__)) {
          var s__$2 = temp__3971__auto__;
          var G__3371 = cljs.core.next.call(null, ks);
          var G__3372 = s__$2;
          ks = G__3371;
          s__$1 = G__3372;
          continue
        }else {
          return null
        }
      }
    }else {
      return s__$1
    }
    break
  }
};
cljs.core.logic.PMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__2345__auto__, writer__2346__auto__, opts__2347__auto__) {
  var self__ = this;
  var pr_pair__2348__auto__ = function(keyval__2349__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__2346__auto__, cljs.core.pr_writer, "", " ", "", opts__2347__auto__, keyval__2349__auto__)
  };
  return cljs.core.pr_sequential_writer.call(null, writer__2346__auto__, pr_pair__2348__auto__, [cljs.core.str("#"), cljs.core.str("PMap"), cljs.core.str("{")].join(""), ", ", "}", opts__2347__auto__, cljs.core.concat.call(null, cljs.core.PersistentVector.EMPTY, self__.__extmap))
};
cljs.core.logic.PMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__2336__auto__, entry__2337__auto__) {
  var self__ = this;
  if(cljs.core.vector_QMARK_.call(null, entry__2337__auto__)) {
    return this__2336__auto__.cljs$core$IAssociative$_assoc$arity$3(this__2336__auto__, cljs.core._nth.call(null, entry__2337__auto__, 0), cljs.core._nth.call(null, entry__2337__auto__, 1))
  }else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__2336__auto__, entry__2337__auto__)
  }
};
cljs.core.logic.PMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__2343__auto__) {
  var self__ = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core.PersistentVector.EMPTY, self__.__extmap))
};
cljs.core.logic.PMap.prototype.cljs$core$logic$IWalkTerm$ = true;
cljs.core.logic.PMap.prototype.cljs$core$logic$IWalkTerm$_walk_term$arity$2 = function(v, s) {
  var self__ = this;
  return cljs.core.logic.walk_term_map_STAR_.call(null, v, s)
};
cljs.core.logic.PMap.prototype.cljs$core$ICounted$_count$arity$1 = function(this__2335__auto__) {
  var self__ = this;
  return 0 + cljs.core.count.call(null, self__.__extmap)
};
cljs.core.logic.PMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__2327__auto__, other__2328__auto__) {
  var self__ = this;
  if(cljs.core.truth_(function() {
    var and__3822__auto__ = other__2328__auto__;
    if(cljs.core.truth_(and__3822__auto__)) {
      var and__3822__auto____$1 = this__2327__auto__.constructor === other__2328__auto__.constructor;
      if(and__3822__auto____$1) {
        return cljs.core.equiv_map.call(null, this__2327__auto__, other__2328__auto__)
      }else {
        return and__3822__auto____$1
      }
    }else {
      return and__3822__auto__
    }
  }())) {
    return true
  }else {
    return false
  }
};
cljs.core.logic.PMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__2330__auto__, G__3365) {
  var self__ = this;
  return new cljs.core.logic.PMap(G__3365, self__.__extmap, self__.__hash)
};
cljs.core.logic.PMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__2329__auto__) {
  var self__ = this;
  return self__.__meta
};
cljs.core.logic.PMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__2340__auto__, k__2341__auto__) {
  var self__ = this;
  if(cljs.core.contains_QMARK_.call(null, cljs.core.PersistentHashSet.EMPTY, k__2341__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.ObjMap.EMPTY, this__2340__auto__), self__.__meta), k__2341__auto__)
  }else {
    return new cljs.core.logic.PMap(self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__2341__auto__)), null)
  }
};
cljs.core.logic.PMap.cljs$lang$type = true;
cljs.core.logic.PMap.cljs$lang$ctorPrSeq = function(this__2366__auto__) {
  return cljs.core.list.call(null, "cljs.core.logic/PMap")
};
cljs.core.logic.PMap.cljs$lang$ctorPrWriter = function(this__2366__auto__, writer__2367__auto__) {
  return cljs.core._write.call(null, writer__2367__auto__, "cljs.core.logic/PMap")
};
cljs.core.logic.__GT_PMap = function __GT_PMap() {
  return new cljs.core.logic.PMap
};
cljs.core.logic.map__GT_PMap = function map__GT_PMap(G__3367) {
  return new cljs.core.logic.PMap(null, cljs.core.dissoc.call(null, G__3367))
};
cljs.core.logic.PMap;
cljs.core.PersistentHashMap.prototype.cljs$core$logic$IUnifyWithPMap$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$logic$IUnifyWithPMap$unify_with_pmap$arity$3 = function(v, u, s) {
  return cljs.core.logic._unify_with_map.call(null, u, v, s)
};
cljs.core.PersistentArrayMap.prototype.cljs$core$logic$IUnifyWithPMap$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$logic$IUnifyWithPMap$unify_with_pmap$arity$3 = function(v, u, s) {
  return cljs.core.logic._unify_with_map.call(null, u, v, s)
};
cljs.core.ObjMap.prototype.cljs$core$logic$IUnifyWithPMap$ = true;
cljs.core.ObjMap.prototype.cljs$core$logic$IUnifyWithPMap$unify_with_pmap$arity$3 = function(v, u, s) {
  return cljs.core.logic._unify_with_map.call(null, u, v, s)
};
cljs.core.logic.LVar.prototype.cljs$core$logic$IUnifyWithPMap$ = true;
cljs.core.logic.LVar.prototype.cljs$core$logic$IUnifyWithPMap$unify_with_pmap$arity$3 = function(v, u, s) {
  return cljs.core.logic._ext.call(null, s, v, u)
};
Object.prototype.cljs$core$logic$IUnifyWithPMap$ = true;
Object.prototype.cljs$core$logic$IUnifyWithPMap$unify_with_pmap$arity$3 = function(v, u, s) {
  return null
};
cljs.core.logic.IUnifyWithPMap["null"] = true;
cljs.core.logic.unify_with_pmap["null"] = function(v, u, s) {
  return null
};
cljs.core.logic.partial_map = function partial_map(m) {
  return cljs.core.logic.map__GT_PMap.call(null, m)
};
cljs.core.logic.lvarq_sym_QMARK_ = function lvarq_sym_QMARK_(s) {
  var and__3822__auto__ = cljs.core.symbol_QMARK_.call(null, s);
  if(and__3822__auto__) {
    return cljs.core._EQ_.call(null, cljs.core.first.call(null, [cljs.core.str(s)].join("")), "?")
  }else {
    return and__3822__auto__
  }
};
cljs.core.logic.proc_lvar = function proc_lvar(lvar_expr, store) {
  var v = function() {
    var temp__3971__auto__ = cljs.core.deref.call(null, store).call(null, lvar_expr);
    if(cljs.core.truth_(temp__3971__auto__)) {
      var u = temp__3971__auto__;
      return u
    }else {
      return cljs.core.logic.lvar.call(null, lvar_expr)
    }
  }();
  cljs.core.swap_BANG_.call(null, store, cljs.core.conj, cljs.core.PersistentVector.fromArray([lvar_expr, v], true));
  return v
};
cljs.core.logic.lcons_expr_QMARK_ = function lcons_expr_QMARK_(expr) {
  var and__3822__auto__ = cljs.core.seq_QMARK_.call(null, expr);
  if(and__3822__auto__) {
    return cljs.core.some.call(null, cljs.core.set(["\ufdd1'."]), cljs.core.set.call(null, expr))
  }else {
    return and__3822__auto__
  }
};
cljs.core.logic.replace_lvar = function replace_lvar(store) {
  return function(expr) {
    if(cljs.core.truth_(cljs.core.logic.lvarq_sym_QMARK_.call(null, expr))) {
      return cljs.core.logic.proc_lvar.call(null, expr, store)
    }else {
      if(cljs.core.truth_(cljs.core.logic.lcons_expr_QMARK_.call(null, expr))) {
        return cljs.core.logic.prep_STAR_.call(null, expr, store)
      }else {
        return expr
      }
    }
  }
};
cljs.core.logic.prep_STAR_ = function() {
  var prep_STAR_ = null;
  var prep_STAR___2 = function(expr, store) {
    return prep_STAR_.call(null, expr, store, false, false)
  };
  var prep_STAR___3 = function(expr, store, lcons_QMARK_) {
    return prep_STAR_.call(null, expr, store, lcons_QMARK_, false)
  };
  var prep_STAR___4 = function(expr, store, lcons_QMARK_, last_QMARK_) {
    var expr__$1 = cljs.core.truth_(function() {
      var and__3822__auto__ = last_QMARK_;
      if(cljs.core.truth_(and__3822__auto__)) {
        return cljs.core.seq.call(null, expr)
      }else {
        return and__3822__auto__
      }
    }()) ? cljs.core.first.call(null, expr) : expr;
    if(cljs.core.truth_(cljs.core.logic.lvarq_sym_QMARK_.call(null, expr__$1))) {
      return cljs.core.logic.proc_lvar.call(null, expr__$1, store)
    }else {
      if(cljs.core.seq_QMARK_.call(null, expr__$1)) {
        if(cljs.core.truth_(function() {
          var or__3824__auto__ = lcons_QMARK_;
          if(cljs.core.truth_(or__3824__auto__)) {
            return or__3824__auto__
          }else {
            return cljs.core.logic.lcons_expr_QMARK_.call(null, expr__$1)
          }
        }())) {
          var vec__3374 = expr__$1;
          var f = cljs.core.nth.call(null, vec__3374, 0, null);
          var n = cljs.core.nthnext.call(null, vec__3374, 1);
          var skip = cljs.core._EQ_.call(null, f, "\ufdd1'.");
          var tail = prep_STAR_.call(null, n, store, lcons_QMARK_, skip);
          if(skip) {
            return tail
          }else {
            return cljs.core.logic.lcons.call(null, prep_STAR_.call(null, f, store), tail)
          }
        }else {
          return clojure.walk.postwalk.call(null, cljs.core.logic.replace_lvar.call(null, store), expr__$1)
        }
      }else {
        if("\ufdd0'else") {
          return expr__$1
        }else {
          return null
        }
      }
    }
  };
  prep_STAR_ = function(expr, store, lcons_QMARK_, last_QMARK_) {
    switch(arguments.length) {
      case 2:
        return prep_STAR___2.call(this, expr, store);
      case 3:
        return prep_STAR___3.call(this, expr, store, lcons_QMARK_);
      case 4:
        return prep_STAR___4.call(this, expr, store, lcons_QMARK_, last_QMARK_)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prep_STAR_.cljs$lang$arity$2 = prep_STAR___2;
  prep_STAR_.cljs$lang$arity$3 = prep_STAR___3;
  prep_STAR_.cljs$lang$arity$4 = prep_STAR___4;
  return prep_STAR_
}();
cljs.core.logic.prep = function prep(expr) {
  var lvars = cljs.core.atom.call(null, cljs.core.ObjMap.EMPTY);
  var prepped = cljs.core.truth_(cljs.core.logic.lcons_expr_QMARK_.call(null, expr)) ? cljs.core.logic.prep_STAR_.call(null, expr, lvars, true) : clojure.walk.postwalk.call(null, cljs.core.logic.replace_lvar.call(null, lvars), expr);
  return cljs.core.with_meta.call(null, prepped, cljs.core.ObjMap.fromObject(["\ufdd0'lvars"], {"\ufdd0'lvars":cljs.core.deref.call(null, lvars)}))
};
cljs.core.logic.unify = function unify(s, u, v) {
  if(u === v) {
    return s
  }else {
    var u__$1 = cljs.core.logic._walk.call(null, s, u);
    var v__$1 = cljs.core.logic._walk.call(null, s, v);
    if(u__$1 === v__$1) {
      return s
    }else {
      return cljs.core.logic._unify_terms.call(null, u__$1, v__$1, s)
    }
  }
};
cljs.core.logic.unifier_STAR_ = function() {
  var unifier_STAR_ = null;
  var unifier_STAR___2 = function(u, w) {
    return cljs.core.first.call(null, cljs.core.doall.call(null, function() {
      var xs__2905__auto__ = cljs.core.logic._take_STAR_.call(null, new cljs.core.logic.Inc(function() {
        return function(a__2897__auto__) {
          return new cljs.core.logic.Inc(function() {
            var q = cljs.core.logic.lvar.call(null, "\ufdd1'q");
            return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2885__auto__) {
              var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, u, w);
              if(cljs.core.truth_(temp__3971__auto__)) {
                var b__2886__auto__ = temp__3971__auto__;
                return b__2886__auto__
              }else {
                return null
              }
            }), function(a__2885__auto__) {
              var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, u, q);
              if(cljs.core.truth_(temp__3971__auto__)) {
                var b__2886__auto__ = temp__3971__auto__;
                return b__2886__auto__
              }else {
                return null
              }
            }), function(a__2906__auto__) {
              return cljs.core.cons.call(null, cljs.core.logic._reify.call(null, a__2906__auto__, q), cljs.core.List.EMPTY)
            })
          })
        }.call(null, cljs.core.logic.empty_s)
      }));
      if(false) {
        return cljs.core.take.call(null, false, xs__2905__auto__)
      }else {
        return xs__2905__auto__
      }
    }()))
  };
  var unifier_STAR___3 = function() {
    var G__3375__delegate = function(u, w, ts) {
      return cljs.core.apply.call(null, unifier_STAR_, unifier_STAR_.call(null, u, w), ts)
    };
    var G__3375 = function(u, w, var_args) {
      var ts = null;
      if(goog.isDef(var_args)) {
        ts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3375__delegate.call(this, u, w, ts)
    };
    G__3375.cljs$lang$maxFixedArity = 2;
    G__3375.cljs$lang$applyTo = function(arglist__3376) {
      var u = cljs.core.first(arglist__3376);
      var w = cljs.core.first(cljs.core.next(arglist__3376));
      var ts = cljs.core.rest(cljs.core.next(arglist__3376));
      return G__3375__delegate(u, w, ts)
    };
    G__3375.cljs$lang$arity$variadic = G__3375__delegate;
    return G__3375
  }();
  unifier_STAR_ = function(u, w, var_args) {
    var ts = var_args;
    switch(arguments.length) {
      case 2:
        return unifier_STAR___2.call(this, u, w);
      default:
        return unifier_STAR___3.cljs$lang$arity$variadic(u, w, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unifier_STAR_.cljs$lang$maxFixedArity = 2;
  unifier_STAR_.cljs$lang$applyTo = unifier_STAR___3.cljs$lang$applyTo;
  unifier_STAR_.cljs$lang$arity$2 = unifier_STAR___2;
  unifier_STAR_.cljs$lang$arity$variadic = unifier_STAR___3.cljs$lang$arity$variadic;
  return unifier_STAR_
}();
cljs.core.logic.binding_map_STAR_ = function() {
  var binding_map_STAR_ = null;
  var binding_map_STAR___2 = function(u, w) {
    var lvars = cljs.core.merge.call(null, (new cljs.core.Keyword("\ufdd0'lvars")).call(null, cljs.core.meta.call(null, u)), (new cljs.core.Keyword("\ufdd0'lvars")).call(null, cljs.core.meta.call(null, w)));
    var s = cljs.core.logic.unify.call(null, cljs.core.logic.empty_s, u, w);
    if(cljs.core.truth_(s)) {
      return cljs.core.into.call(null, cljs.core.ObjMap.EMPTY, cljs.core.map.call(null, function(p__3379) {
        var vec__3380 = p__3379;
        var k = cljs.core.nth.call(null, vec__3380, 0, null);
        var v = cljs.core.nth.call(null, vec__3380, 1, null);
        return cljs.core.PersistentVector.fromArray([k, cljs.core.logic._reify.call(null, s, v)], true)
      }, lvars))
    }else {
      return null
    }
  };
  var binding_map_STAR___3 = function() {
    var G__3381__delegate = function(u, w, ts) {
      return cljs.core.apply.call(null, binding_map_STAR_, binding_map_STAR_.call(null, u, w), ts)
    };
    var G__3381 = function(u, w, var_args) {
      var ts = null;
      if(goog.isDef(var_args)) {
        ts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3381__delegate.call(this, u, w, ts)
    };
    G__3381.cljs$lang$maxFixedArity = 2;
    G__3381.cljs$lang$applyTo = function(arglist__3382) {
      var u = cljs.core.first(arglist__3382);
      var w = cljs.core.first(cljs.core.next(arglist__3382));
      var ts = cljs.core.rest(cljs.core.next(arglist__3382));
      return G__3381__delegate(u, w, ts)
    };
    G__3381.cljs$lang$arity$variadic = G__3381__delegate;
    return G__3381
  }();
  binding_map_STAR_ = function(u, w, var_args) {
    var ts = var_args;
    switch(arguments.length) {
      case 2:
        return binding_map_STAR___2.call(this, u, w);
      default:
        return binding_map_STAR___3.cljs$lang$arity$variadic(u, w, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  binding_map_STAR_.cljs$lang$maxFixedArity = 2;
  binding_map_STAR_.cljs$lang$applyTo = binding_map_STAR___3.cljs$lang$applyTo;
  binding_map_STAR_.cljs$lang$arity$2 = binding_map_STAR___2;
  binding_map_STAR_.cljs$lang$arity$variadic = binding_map_STAR___3.cljs$lang$arity$variadic;
  return binding_map_STAR_
}();
cljs.core.logic.unifier = function() {
  var unifier = null;
  var unifier__2 = function(u, w) {
    if(!cljs.core.logic.lcons_QMARK_.call(null, u)) {
    }else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list("\ufdd1'lcons?", "\ufdd1'u"), cljs.core.hash_map("\ufdd0'line", 980))), cljs.core.hash_map("\ufdd0'line", 980))))].join(""));
    }
    if(!cljs.core.logic.lcons_QMARK_.call(null, w)) {
    }else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list("\ufdd1'lcons?", "\ufdd1'w"), cljs.core.hash_map("\ufdd0'line", 981))), cljs.core.hash_map("\ufdd0'line", 981))))].join(""));
    }
    var up = cljs.core.logic.prep.call(null, u);
    var wp = cljs.core.logic.prep.call(null, w);
    return cljs.core.logic.unifier_STAR_.call(null, up, wp)
  };
  var unifier__3 = function() {
    var G__3383__delegate = function(u, w, ts) {
      return cljs.core.apply.call(null, unifier, unifier.call(null, u, w), ts)
    };
    var G__3383 = function(u, w, var_args) {
      var ts = null;
      if(goog.isDef(var_args)) {
        ts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3383__delegate.call(this, u, w, ts)
    };
    G__3383.cljs$lang$maxFixedArity = 2;
    G__3383.cljs$lang$applyTo = function(arglist__3384) {
      var u = cljs.core.first(arglist__3384);
      var w = cljs.core.first(cljs.core.next(arglist__3384));
      var ts = cljs.core.rest(cljs.core.next(arglist__3384));
      return G__3383__delegate(u, w, ts)
    };
    G__3383.cljs$lang$arity$variadic = G__3383__delegate;
    return G__3383
  }();
  unifier = function(u, w, var_args) {
    var ts = var_args;
    switch(arguments.length) {
      case 2:
        return unifier__2.call(this, u, w);
      default:
        return unifier__3.cljs$lang$arity$variadic(u, w, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unifier.cljs$lang$maxFixedArity = 2;
  unifier.cljs$lang$applyTo = unifier__3.cljs$lang$applyTo;
  unifier.cljs$lang$arity$2 = unifier__2;
  unifier.cljs$lang$arity$variadic = unifier__3.cljs$lang$arity$variadic;
  return unifier
}();
cljs.core.logic.binding_map = function() {
  var binding_map = null;
  var binding_map__2 = function(u, w) {
    if(!cljs.core.logic.lcons_QMARK_.call(null, u)) {
    }else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list("\ufdd1'lcons?", "\ufdd1'u"), cljs.core.hash_map("\ufdd0'line", 992))), cljs.core.hash_map("\ufdd0'line", 992))))].join(""));
    }
    if(!cljs.core.logic.lcons_QMARK_.call(null, w)) {
    }else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.with_meta(cljs.core.list("\ufdd1'not", cljs.core.with_meta(cljs.core.list("\ufdd1'lcons?", "\ufdd1'w"), cljs.core.hash_map("\ufdd0'line", 993))), cljs.core.hash_map("\ufdd0'line", 993))))].join(""));
    }
    var up = cljs.core.logic.prep.call(null, u);
    var wp = cljs.core.logic.prep.call(null, w);
    return cljs.core.logic.binding_map_STAR_.call(null, up, wp)
  };
  var binding_map__3 = function() {
    var G__3385__delegate = function(u, w, ts) {
      return cljs.core.apply.call(null, binding_map, binding_map.call(null, u, w), ts)
    };
    var G__3385 = function(u, w, var_args) {
      var ts = null;
      if(goog.isDef(var_args)) {
        ts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0)
      }
      return G__3385__delegate.call(this, u, w, ts)
    };
    G__3385.cljs$lang$maxFixedArity = 2;
    G__3385.cljs$lang$applyTo = function(arglist__3386) {
      var u = cljs.core.first(arglist__3386);
      var w = cljs.core.first(cljs.core.next(arglist__3386));
      var ts = cljs.core.rest(cljs.core.next(arglist__3386));
      return G__3385__delegate(u, w, ts)
    };
    G__3385.cljs$lang$arity$variadic = G__3385__delegate;
    return G__3385
  }();
  binding_map = function(u, w, var_args) {
    var ts = var_args;
    switch(arguments.length) {
      case 2:
        return binding_map__2.call(this, u, w);
      default:
        return binding_map__3.cljs$lang$arity$variadic(u, w, cljs.core.array_seq(arguments, 2))
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  binding_map.cljs$lang$maxFixedArity = 2;
  binding_map.cljs$lang$applyTo = binding_map__3.cljs$lang$applyTo;
  binding_map.cljs$lang$arity$2 = binding_map__2;
  binding_map.cljs$lang$arity$variadic = binding_map__3.cljs$lang$arity$variadic;
  return binding_map
}();
goog.provide("jipda");
function Time(time) {
  this.time = time || []
}
Time.prototype.toString = function() {
  return this.time.toString()
};
Time.prototype.equals = function(object) {
  if(this === object) {
    return true
  }
  return this.time.equals(object.time)
};
Time.prototype.tick = function(value, k) {
  var newTime = this.time.slice(0);
  newTime.push(value);
  if(newTime.length > k) {
    newTime.shift()
  }
  return new Time(newTime)
};
function StoreValue(aval, fresh) {
  assertDefinedNotNull(aval);
  assertDefinedNotNull(aval.join);
  assertDefinedNotNull(aval.equals);
  assertDefinedNotNull(aval.compareTo);
  this.aval = aval;
  this.fresh = fresh === undefined ? 1 : fresh
}
StoreValue.aval = function(storeValue) {
  return storeValue.aval
};
StoreValue.prototype.equals = function(x) {
  if(this === x) {
    return true
  }
  return this.aval.equals(x.aval)
};
StoreValue.prototype.compareTo = function(x) {
  return this.aval.compareTo(x.aval)
};
StoreValue.prototype.toString = function() {
  return this.aval.toString()
};
StoreValue.prototype.update = function(aval) {
  if(this.fresh === 1) {
    return this.strongUpdate(aval)
  }
  return this.weakUpdate(aval)
};
StoreValue.prototype.strongUpdate = function(aval) {
  return new StoreValue(aval, 1)
};
StoreValue.prototype.weakUpdate = function(aval) {
  return new StoreValue(this.aval.join(aval), 2)
};
StoreValue.prototype.reset = function() {
  return new StoreValue(BOT, 0)
};
function Store(entries) {
  this.entries = entries || []
}
Store.prototype.equals = function(x) {
  return this.compareTo(x) === 0
};
Store.prototype.compareTo = function(x) {
  return Lattice.subsumeComparison(this, x)
};
Store.prototype.subsumes = function(x) {
  for(var i = 0;i < x.entries.length;i++) {
    var xentry = x.entries[i];
    var address = xentry[0];
    var thisEntry = this.entries.getEntry(address);
    if(!thisEntry) {
      return false
    }
    var xStoreValue = xentry[1];
    var xThisValue = thisEntry[1];
    var c = xStoreValue.compareTo(xThisValue);
    if(c === undefined || c > 0) {
      return false
    }
  }
  return true
};
Store.prototype.diff = function(x) {
  var diff = [];
  for(var i = 0;i < this.entries.length;i++) {
    var entry = this.entries[i];
    var address = entry[0];
    var value = entry[1];
    var xentry = x.entries.getEntry(address);
    if(xentry) {
      var xvalue = xentry[1];
      if(!value.equals(xvalue)) {
        diff.push(address + ":\n\t" + value + " (" + value.fresh + ")\n\t" + xvalue + " (" + xvalue.fresh + ")")
      }
    }else {
      diff.push(address + ":\n\t" + value + " (" + value.fresh + ")\n\t<undefined>")
    }
  }
  for(i = 0;i < x.entries.length;i++) {
    xentry = x.entries[i];
    address = xentry[0];
    xvalue = xentry[1];
    var entry = this.entries.getEntry(address);
    if(!entry) {
      diff.push(address + ":\n\t<undefined>\n\t" + xvalue + " (" + xvalue.fresh + ")")
    }
  }
  return diff.join("\n")
};
Store.prototype.toString = function() {
  return"{" + this.entries.map(function(entry) {
    return entry[0] + " =" + entry[1].fresh + "=> " + entry[1]
  }).join(",") + "}"
};
Store.prototype.nice = function() {
  return"\n{\n" + this.entries.map(function(entry) {
    return entry[0] + " =" + entry[1].fresh + "=> " + entry[1]
  }).join("\n") + "\n}"
};
Store.prototype.getValue = function(address) {
  var entry = this.entries.getEntry(address);
  return entry ? entry[1] : BOT
};
Store.prototype.lookupAval = function(address) {
  var entry = this.entries.getEntry(address);
  if(entry) {
    return entry[1].aval
  }
  throw new Error("Store.lookupAval: no abstract value for address " + address + "\n" + this.nice());
};
Store.prototype.allocAval = function(address, aval) {
  assertDefinedNotNull(address);
  assertTrue(aval instanceof JipdaValue || aval.isBenv, "need JipdaValue or Benv");
  var entry = this.entries.getEntry(address);
  if(entry && entry.fresh !== 0) {
    var weaklyUpdatedValue = entry[1].weakUpdate(aval);
    var store = new Store(this.entries.updateEntry(address, weaklyUpdatedValue));
    store.weak = true;
    return store
  }
  var newValue = new StoreValue(aval);
  return new Store(this.entries.updateEntry(address, newValue))
};
Store.prototype.updateAval = function(address, aval, msg) {
  assertTrue(aval instanceof JipdaValue || aval.isBenv, "need JipdaValue or Benv");
  var entry = this.entries.getEntry(address);
  if(entry) {
    var updatedValue = entry[1].update(aval);
    return new Store(this.entries.updateEntry(address, updatedValue))
  }
  throw new Error("Store.updateAval: no abstract value at address " + address);
};
Store.prototype.join = function(store) {
  if(store === BOT) {
    return this
  }
  var result = [];
  var addresses = this.entries.entryKeys().concat(store.entries.entryKeys()).toSet();
  var that = this;
  addresses.forEach(function(address) {
    var thisValue = that.getValue(address);
    var otherValue = store.getValue(address);
    if(thisValue === BOT) {
      result = result.addEntry(address, otherValue)
    }else {
      if(otherValue === BOT) {
        result = result.addEntry(address, thisValue)
      }else {
        if(thisValue.equals(otherValue)) {
          result = result.addEntry(address, thisValue)
        }else {
          var joinedValue = new StoreValue(thisValue.aval.join(otherValue.aval), Math.min(thisValue.fresh + otherValue.fresh, 2));
          result = result.addEntry(address, joinedValue)
        }
      }
    }
  });
  return new Store(result)
};
Store.prototype.narrow = function(addresses) {
  var entries = this.entries.flatMap(function(entry) {
    var address = entry[0];
    if(addresses.memberAt(address) > -1) {
      return[entry]
    }
    if(address instanceof Addr) {
      return[]
    }
    return[]
  });
  return new Store(entries)
};
function Cont(memento, benva, proc, applications, handler) {
  this.memento = memento;
  this.benva = benva;
  this.proc = proc;
  this.applications = applications || [];
  this.handler = handler
}
Cont.prototype.equals = function(other) {
  return this.memento.equals(other.memento) && this.benva.equals(other.benva)
};
Cont.prototype.toString = function() {
  return this.memento
};
Cont.prototype.execute = function(stack, store, time, state) {
  if(!(store instanceof Store)) {
    throw new Error("no or wrong store:" + store);
  }
  if(!(time instanceof Time)) {
    throw new Error("no or wrong time:" + time);
  }
  if(!(state instanceof State)) {
    throw new Error("no or wrong state:" + state);
  }
  return this.proc(stack, store, time, state)
};
Cont.prototype.addApplication = function(application) {
  var newApplications = this.applications.remove(application).addFirst(application);
  var cont = new Cont(this.memento, this.benva, this.proc, newApplications, this.handler);
  return cont
};
Cont.prototype.setHandler = function(handler) {
  var cont = new Cont(this.memento, this.benva, this.proc, this.applications, handler);
  return cont
};
function Task(msg, proc) {
  this.msg = msg;
  this.proc = proc
}
Task.prototype.toString = function() {
  return this.msg
};
Task.prototype.execute = function() {
  return this.proc()
};
function gc(store, stack, benva) {
  function benvReachable(benv, reachable) {
    if(benv.isFunction()) {
      benv.Call.forEach(function(Call) {
        reachable = addressesReachable(Call.addresses(), reachable)
      })
    }
    if(benv.isObject()) {
      reachable = valueReachable(benv.Prototype, reachable)
    }
    reachable = addressesReachable(benv.parents, reachable);
    return addressesReachable(benv.addresses(), reachable)
  }
  function contReachable(cont, reachable) {
    return addressReachable(cont.benva, reachable)
  }
  function valueReachable(value, reachable) {
    if(value instanceof JipdaValue) {
      return addressesReachable(value.addresses(), reachable)
    }
    if(value instanceof Addr) {
      return addressReachable(value, reachable)
    }
    if(value.isBenv) {
      return benvReachable(value, reachable)
    }
    if(value instanceof Cont) {
      return contReachable(value, reachable)
    }
    if(Array.isArray(value)) {
      return valuesReachable(value, reachable)
    }
    return reachable
  }
  function valuesReachable(values, reachable) {
    for(var i = 0;i < values.length;i++) {
      reachable = valueReachable(values[i], reachable)
    }
    return reachable
  }
  function addressReachable(address, reachable) {
    if(address === null) {
      return reachable
    }
    if(reachable.memberAt(address) > -1) {
      return reachable
    }
    var aval = store.lookupAval(address);
    assertDefinedNotNull(aval);
    return valueReachable(aval, reachable.addLast(address))
  }
  function addressesReachable(addresses, reachable) {
    for(var i = 0;i < addresses.length;i++) {
      reachable = addressReachable(addresses[i], reachable)
    }
    return reachable
  }
  var reachable = addressReachable(benva, valuesReachable(stack, []));
  return store.narrow(reachable)
}
function JipdaLattice(userLattice) {
  assertDefinedNotNull(userLattice);
  this.userLattice = userLattice
}
JipdaLattice.prototype = new Lattice;
JipdaLattice.prototype.toString = function() {
  return"[JipdaLattice (" + this.userLattice + ")]"
};
JipdaLattice.prototype.abst = function(cvalues) {
  return cvalues.map(JipdaLattice.prototype.abst1, this).reduce(Lattice.join)
};
JipdaLattice.prototype.abst1 = function(cvalue) {
  if(cvalue instanceof Addr) {
    return new JipdaValue(BOT, [cvalue])
  }
  return new JipdaValue(this.userLattice.abst1(cvalue), [])
};
JipdaLattice.prototype.isFalse = function(value) {
  throw new Error;
};
JipdaLattice.prototype.isTrue = function(value) {
  throw new Error;
};
function JipdaValue(user, as) {
  assertDefinedNotNull(user);
  assertDefinedNotNull(as);
  this.user = user;
  this.as = as
}
JipdaValue.prototype = new LatticeValue;
JipdaValue.prototype.accept = function(visitor) {
  return visitor.visitJipdaValue(this)
};
JipdaValue.prototype.addresses = function() {
  return this.as.slice(0)
};
JipdaValue.prototype.isAddress = function() {
  return this.user === BOT
};
JipdaValue.prototype.toString = function(printer) {
  return"[" + this.user.toString(printer) + ", " + (printer ? this.as.map(printer) : this.as) + "]"
};
JipdaValue.prototype.join = function(x) {
  if(x === BOT) {
    return this
  }
  return new JipdaValue(this.user.join(x.user), this.as.concat(x.as).toSet())
};
JipdaValue.prototype.compareTo = function(x) {
  if(x === BOT) {
    return 1
  }
  if(x === this) {
    return 0
  }
  var c1 = this.user.compareTo(x.user);
  if(c1 === undefined) {
    return undefined
  }
  var c2 = Lattice.subsumeComparison(this.as, x.as);
  return Lattice.joinCompareResults(c1, c2)
};
function toUserString(j, store) {
  var objs = j.as.map(Store.prototype.lookupAval, store);
  var vals = objs.map(function(o) {
    return o.DefaultValue("string")
  });
  var u = j.user.join(vals.reduce(Lattice.join, BOT)).ToString();
  return u
}
function toUserNumber(j, store) {
  var objs = j.as.map(Store.prototype.lookupAval, store);
  var vals = objs.map(function(o) {
    return o.DefaultValue("number")
  });
  var u = j.user.join(vals.reduce(Lattice.join, BOT)).ToNumber();
  return u
}
function toUserInt32(j, store) {
  var objs = j.as.map(Store.prototype.lookupAval, store);
  var vals = objs.map(function(o) {
    return o.DefaultValue("number")
  });
  var r = j.user.join(vals.reduce(Lattice.join, BOT));
  var u = j.user.join(vals.reduce(Lattice.join, BOT)).ToInt32();
  return u
}
function toUserBoolean(j) {
  return j.user.ToBoolean().join(j.as.length === 0 ? BOT : userLattice.abst1(true))
}
function ipdaEval(node0, state0, config) {
  var performGc = config.performGc === undefined ? true : config.performGc;
  var k = config.k === undefined ? 1 : config.k;
  var userLattice = config.lattice;
  var lattice = new JipdaLattice(userLattice);
  var ag = config.ag;
  var visited = config.visited || new DefaultVisitedStrategy(performGc ? gc : function(store) {
    return store
  });
  var benvFactory = config.benv || new DefaultBenv;
  assertDefinedNotNull(k);
  assertDefinedNotNull(userLattice);
  assertDefinedNotNull(ag);
  assertDefinedNotNull(visited);
  var J_UNDEFINED = lattice.abst1(undefined);
  var J_NULL = lattice.abst1(null);
  var J_0 = lattice.abst1(0);
  var J_1 = lattice.abst1(1);
  var U_0 = userLattice.abst1(0);
  var U_1 = userLattice.abst1(1);
  var U_TRUE = userLattice.abst1(true);
  var U_FALSE = userLattice.abst1(false);
  var U_THIS = userLattice.abst1("this");
  var U_PROTOTYPE = userLattice.abst1("prototype");
  var U_LENGTH = userLattice.abst1("length");
  var result = BOT;
  var tasks = false;
  function createEnvironment(parenta, sourceNode, declarationNode, state) {
    var benv = benvFactory.createEnvironment(parenta, sourceNode, declarationNode);
    state2 = state.createsEnvironment(sourceNode, declarationNode, benv);
    return{benv:benv, state:state2}
  }
  function createObject(Prototype) {
    var benv = benvFactory.createObject(Prototype);
    return benv
  }
  function createArray() {
    var benv = benvFactory.createArray(ARRAYPA);
    return benv
  }
  function createClosure(node, scope) {
    var benv = benvFactory.createFunction(new BenvClosureCall(node, scope), FUNCTIONPA);
    return benv
  }
  function createPrimitive(applyFunction) {
    var benv = benvFactory.createFunction(new BenvPrimitiveCall(applyFunction), FUNCTIONPA);
    return benv
  }
  function allocAval(address, value, stack, store, state) {
    var store2 = store.allocAval(address, value);
    var state2 = state.allocsAddress(address, value, store2.weak, stack);
    return{store:store2, state:state2}
  }
  function lookupAval(address, stack, store, state) {
    var result = store.lookupAval(address);
    var state2 = state.readsAddress(address, result, stack);
    return{value:result, state:state2}
  }
  function updateAval(address, value, stack, store, state) {
    var store2 = store.updateAval(address, value);
    var state2 = state.writesAddress(address, value, stack);
    return{store:store2, state:state2}
  }
  function sideEffectAval(address, value, stack, store, state) {
    var store2 = store.updateAval(address, value);
    var state2 = state.writesAddress(address, value, stack);
    return{store:store2, state:state2}
  }
  function doLookupAddresses(addresses, stack, store, state) {
    var result = BOT;
    addresses.forEach(function(address) {
      var lookupResult = lookupAval(address, stack, store, state);
      var aval = lookupResult.value;
      result = result.join(aval);
      state = lookupResult.state
    });
    return{value:result, state:state}
  }
  function doScopeLookup(name, stack, benva, store, state) {
    var resultas = [];
    var benvas = [benva];
    while(benvas.length !== 0) {
      var a = benvas[0];
      benvas = benvas.slice(1);
      var lookupResult = lookupAval(a, stack, store, state);
      var benv = lookupResult.value;
      state = lookupResult.state;
      var lookup = benv.lookup(name);
      resultas = resultas.concat(lookup.addresses);
      if(lookup.directMatch) {
        break
      }
      benvas = benvas.concat(benv.parents)
    }
    return{as:resultas.toSet(), state:state}
  }
  function doProtoLookup(object, propertyName, stack, store, state, fcont) {
    var objects = [object];
    var result = BOT;
    while(objects.length > 0) {
      var object = objects[0];
      objects = objects.slice(1);
      var lookup = object.lookup(propertyName);
      var propertyAddresses = lookup.addresses;
      if(propertyAddresses.length === 0) {
        if(object.Prototype.equals(J_NULL)) {
          result = result.join(J_UNDEFINED)
        }else {
          var cprotoAddresses = object.Prototype.addresses();
          if(!cprotoAddresses) {
            throw new Error("doProtoLookup: no addresses for " + object.Prototype);
          }
          cprotoAddresses.forEach(function(protoAddress) {
            var lookupResult = lookupAval(protoAddress, stack, store, state);
            var protoObject = lookupResult.value;
            state = lookupResult.state;
            objects = objects.addLast(protoObject)
          })
        }
      }else {
        var laResult = doLookupAddresses(propertyAddresses, stack, store, state);
        result = result.join(laResult.value);
        state = laResult.state;
        if(lookup.directMatch) {
          break
        }
      }
    }
    return fcont(result, state)
  }
  function hoist(nodes) {
    function varsAndDecls(nodes) {
      return nodes.flatMap(function(node) {
        if(isVariableDeclaration(node)) {
          if(node.kind === "var") {
            return node.declarations
          }
        }else {
          if(isFunctionDeclaration(node)) {
            return[node]
          }else {
            if(isFunctionExpression(node)) {
              return[]
            }else {
              var cs = children(node);
              return varsAndDecls(cs)
            }
          }
        }
      })
    }
    var vds = varsAndDecls(nodes);
    var decls = [];
    var vars = [];
    vds.reverse().forEach(function(vd) {
      var name = vd.id.name;
      var exists = false;
      if(isFunctionDeclaration(vd)) {
        decls.forEach(function(d) {
          if(d.id.name === name) {
            exists = true
          }
        });
        if(!exists) {
          decls = decls.addLast(vd)
        }
      }else {
        if(isVariableDeclarator(vd)) {
          vars.forEach(function(v) {
            if(v.id.name === name) {
              exists = true
            }
          });
          if(!exists) {
            decls.forEach(function(d) {
              if(d.id.name === name) {
                exists = true
              }
            })
          }
          if(!exists) {
            vars = vars.addLast(vd)
          }
        }
      }
    });
    return{funs:decls, vars:vars}
  }
  function DefaultValue(objectAddresses, primPostProcessor, node, stack, benva, store, time, state) {
    return DefaultValueNumber(objectAddresses, primPostProcessor, node, stack, benva, store, time, state)
  }
  function DefaultValueString(objectAddresses, primPostProcessor, node, stack, benva, store, time, state) {
    return defaultValue("toString", "valueOf", objectAddresses, primPostProcessor, node, stack, benva, store, time, state)
  }
  function DefaultValueNumber(objectAddresses, primPostProcessor, node, stack, benva, store, time, state) {
    return defaultValue("valueOf", "toString", objectAddresses, primPostProcessor, node, stack, benva, store, time, state)
  }
  function defaultValue(methodName1, methodName2, objectAddresses, primPostProcessor, node, stack, benva, store, time, state) {
    var throwTypeError = methodName1 === null;
    var propertyName = userLattice.abst1(throwTypeError ? methodName2 : methodName1);
    var application = node;
    return objectAddresses.flatMap(function(objectAddress) {
      var lookupResult = lookupAval(objectAddress, stack, store, state);
      var objectAval = lookupResult.value;
      state = lookupResult.state;
      return doProtoLookup(objectAval, propertyName, stack, store, state, function(method, state) {
        if(method === null) {
          throw new Error("TODO");
        }
        var methodFuns = method.as.map(function(a) {
          var lookupResult = lookupAval(a, stack, store, state);
          state = lookupResult.state;
          return lookupResult.value
        });
        var allCallable = method.user === BOT && methodFuns.map(function(benv) {
          return benv.Call.length > 0
        }).reduce(function(a, b) {
          return a && b
        });
        var Callables = methodFuns.flatMap(function(benv) {
          return benv.Call
        });
        var cont = defaultValueCont();
        var markedCont = cont.addApplication(application);
        markedCont.toString = cont.toString;
        var tasks = Callables.map(function(Callable) {
          return new Task("default value " + application, function() {
            return Callable.applyFunction(application, [], objectAddress, stack.addFirst(markedCont), benva, store, time, state)
          })
        });
        if(!allCallable) {
          if(throwTypeError) {
            throw new Error("TODO: non-callable second-chance object-to-value coercion must throw type error");
          }
          tasks = tasks.addLast(new Task("not all callable", function() {
            return defaultValue(null, methodName2, objectAddresses, primPostProcessor, application, stack.addFirst(BOT), benva, store, time, state)
          }))
        }
        return tasks;
        function defaultValueCont() {
          return new Cont("defval-" + node.tag, benva, function(stack, store, time, state) {
            var aval = stack[0];
            var cont;
            var stack2;
            if(throwTypeError) {
              var aval2 = stack[1];
              aval = aval.join(aval2);
              cont = stack[2];
              stack2 = stack.slice(3);
              if(aval.as.length === 0) {
                return cont.execute(stack2.addFirst(primPostProcessor ? primPostProcessor(aval) : aval), store, time, state)
              }
              if(aval.user === BOT) {
                throw new Error("TODO: non-primitive second-chance object-to-value coercion must throw type error");
              }
              return[new Task("blah1", function() {
                return cont.execute(stack2.addFirst(primPostProcessor ? primPostProcessor(aval) : aval), store, time, state)
              }), new Task("blah2", function() {
                throw new Error("TODO: non-primitive second-chance object-to-value coercion must throw type error");
              })]
            }
            cont = stack[1];
            stack2 = stack.slice(2);
            if(aval.as.length === 0) {
              return cont.execute(stack2.addFirst(primPostProcessor ? primPostProcessor(aval) : aval), store, time, state)
            }
            if(allCallable) {
              return defaultValue(application, methodName2, objectAddresses, primPostProcessor, application, stack, benva, store, time, state)
            }
            return[]
          })
        }
      })
    })
  }
  function ToNumber(value, node, stack, benva, store, time, state) {
    if(value.addresses().length === 0) {
      var cont = stack[0];
      var stack2 = stack.slice(1);
      return cont.execute(stack2.addFirst(new JipdaValue(value.user.ToNumber(), [])), store, time, state)
    }
    var tasks = DefaultValue(value.addresses(), function(primValue) {
      return primValue.ToNumber()
    }, node, stack, benva, store, time, state);
    if(value.user === BOT) {
      return tasks
    }
    return tasks.addFirst(new Task("primitive part ToNumber", function() {
      var cont = stack[0];
      var stack2 = stack.slice(1);
      return cont.execute(stack2.addFirst(new JipdaValue(value.user.ToNumber(), [])), store, time, state)
    }))
  }
  function ToUInt32(value, node, stack, benva, store, time, state) {
    if(value.addresses().length === 0) {
      var cont = stack[0];
      var stack2 = stack.slice(1);
      return cont.execute(stack2.addFirst(new JipdaValue(value.user.ToUInt32(), [])), store, time, state)
    }
    var tasks = DefaultValue(value.addresses(), function(primValue) {
      return primValue.ToUInt32()
    }, node, stack, benva, store, time, state);
    if(value.user === BOT) {
      return tasks
    }
    return tasks.addFirst(new Task("primitive part ToNumber", function() {
      var cont = stack[0];
      var stack2 = stack.slice(1);
      return cont.execute(stack2.addFirst(new JipdaValue(value.user.ToUInt32(), [])), store, time, state)
    }))
  }
  function ToString(value, node, stack, benva, store, time, state) {
    if(value.addresses().length === 0) {
      var cont = stack[0];
      var stack2 = stack.slice(1);
      return cont.execute(stack2.addFirst(new JipdaValue(value.user.ToString(), [])), store, time, state)
    }
    var tasks = DefaultValueString(value.addresses(), node, function(primValue) {
      return primValue.ToString()
    }, stack, benva, store, time, state);
    if(value.user === BOT) {
      return tasks
    }
    return tasks.addFirst(new Task("primitive part ToString", function() {
      var cont = stack[0];
      var stack2 = stack.slice(1);
      return cont.execute(stack2.addFirst(new JipdaValue(value.user.ToString(), [])), store, time, state)
    }))
  }
  function stackElementsSubsume(s1, s2) {
    if(s1.length < s2.length) {
      return false
    }
    return true
  }
  function evalLiteral(node, stack, benva, store, time, state) {
    var cont = stack[0];
    var stack2 = stack.slice(1);
    return cont.execute(stack2.addFirst(lattice.abst1(node.value)), store, time, state)
  }
  function evalIdentifier(node, stack, benva, store, time, state) {
    var cont = stack[0];
    var stack2 = stack.slice(1);
    var scopeResult = doScopeLookup(userLattice.abst1(node.name), stack, benva, store, state);
    var as = scopeResult.as;
    state = scopeResult.state;
    if(as.length === 0) {
      throw new Error("no addresses for " + node);
    }
    var result = BOT;
    var laResult = doLookupAddresses(as, stack, store, state);
    return cont.execute(stack2.addFirst(laResult.value), store, time, laResult.state)
  }
  function evalBinaryExpression(node, stack, benva, store, time, state) {
    var leftNode = node.left;
    var rightNode = node.right;
    function leftCont() {
      function rightCont() {
        function mul(stack, store, time, state) {
          var right = stack[0];
          var left = stack[1];
          var cont = stack[2];
          var stack2 = stack.slice(3);
          var result = userLattice.mul(left.user, right.user);
          return cont.execute(stack2.addFirst(new JipdaValue(result, [])), store, time, state)
        }
        function sub(stack, store, time, state) {
          var right = stack[0];
          var left = stack[1];
          var cont = stack[2];
          var stack2 = stack.slice(3);
          var result = userLattice.sub(left.user, right.user);
          return cont.execute(stack2.addFirst(new JipdaValue(result, [])), store, time, state)
        }
        function div(stack, store, time, state) {
          var right = stack[0];
          var left = stack[1];
          var cont = stack[2];
          var stack2 = stack.slice(3);
          var result = userLattice.div(left.user, right.user);
          return cont.execute(stack2.addFirst(new JipdaValue(result, [])), store, time, state)
        }
        function lt(stack, store, time, state) {
          var right = stack[0];
          var left = stack[1];
          var cont = stack[2];
          var stack2 = stack.slice(3);
          var result = userLattice.lt(left.user, right.user);
          return cont.execute(stack2.addFirst(new JipdaValue(result, [])), store, time, state)
        }
        function lte(stack, store, time, state) {
          var right = stack[0];
          var left = stack[1];
          var cont = stack[2];
          var stack2 = stack.slice(3);
          var result = userLattice.lte(left.user, right.user);
          return cont.execute(stack2.addFirst(new JipdaValue(result, [])), store, time, state)
        }
        function gt(stack, store, time, state) {
          var right = stack[0];
          var left = stack[1];
          var cont = stack[2];
          var stack2 = stack.slice(3);
          var result = userLattice.gt(left.user, right.user);
          return cont.execute(stack2.addFirst(new JipdaValue(result, [])), store, time, state)
        }
        function gte(stack, store, time, state) {
          var right = stack[0];
          var left = stack[1];
          var cont = stack[2];
          var stack2 = stack.slice(3);
          var result = userLattice.gte(left.user, right.user);
          return cont.execute(stack2.addFirst(new JipdaValue(result, [])), store, time, state)
        }
        function eq(eqFlag, stack, store, time, state) {
          var rightAval = stack[0];
          var leftAval = stack[1];
          var eqResult = BOT;
          var lasl = leftAval.as.length;
          var rasl = rightAval.as.length;
          if(leftAval.user !== BOT && rightAval.user !== BOT) {
            eqResult = eqResult.join(eqFlag ? userLattice.eq(leftAval.user, rightAval.user) : userLattice.neq(leftAval.user, rightAval.user))
          }
          if(lasl === 0 && rasl === 0) {
            var cont = stack[2];
            var stack2 = stack.slice(3);
            return cont.execute(stack2.addFirst(new JipdaValue(eqResult, [])), store, time, state)
          }else {
            if(lasl === 1 && rasl === 1) {
              if(leftAval.as[0].equals(rightAval.as[0])) {
                eqResult = eqResult.join(eqFlag ? U_TRUE : U_FALSE)
              }else {
                eqResult = eqResult.join(eqFlag ? U_FALSE : U_TRUE)
              }
            }else {
              if(lasl > 0 && rasl > 0) {
                eqResult = eqResult.join(eqFlag ? U_FALSE : U_TRUE);
                var intersection = leftAval.as.keepAll(rightAval.as);
                if(intersection.length > 0) {
                  eqResult = eqResult.join(eqFlag ? U_TRUE : U_FALSE)
                }
              }
            }
          }
          if(leftAval.user === BOT && rightAval.user === BOT) {
            var cont = stack[2];
            var stack2 = stack.slice(3);
            return cont.execute(stack2.addFirst(new JipdaValue(eqResult, [])), store, time, state)
          }
          function eqLeftRightCont(leftStrNum, eqResult) {
            return new Cont("eqLeftRight-" + node.tag, benva, function(stack, store, time, state) {
              var rightPrim = stack[0];
              var cont = stack[3];
              var stack2 = stack.slice(4);
              eqResult = eqResult.join(eqFlag ? userLattice.eq(leftStrNum, rightPrim.user) : userLattice.neq(leftStrNum, rightPrim.user));
              return cont.execute(stack2.addFirst(new JipdaValue(eqResult, [])), store, time, state)
            })
          }
          if(leftAval.as.length !== 0) {
            function eqRightCont(rightStrNum, eqResult) {
              return new Cont("eqRight-" + rightNode.tag, benva, function(stack, store, time, state) {
                var leftPrim = stack[0];
                eqResult = eqResult.join(eqFlag ? userLattice.eq(leftPrim.user, rightStrNum) : userLattice.neq(leftPrim.user, rightStrNum));
                if(rightAval.as.length !== 0) {
                  var leftStrNum = leftAval.user.limitStringNumber();
                  if(leftStrNum !== BOT) {
                    var isOnlyStrNum = leftStrNum.equals(leftAval.user);
                    if(!isOnlyStrNum) {
                      eqResult = eqResult.join(eqFlag ? U_FALSE : U_TRUE)
                    }
                    var stack2 = stack.slice(1);
                    return DefaultValue(rightAval.as, undefined, rightNode, stack2.addFirst(eqLeftRightCont(eqResult, leftStrNum)), benv, store, time, state)
                  }else {
                    eqResult = eqResult.join(eqFlag ? U_FALSE : U_TRUE)
                  }
                }
                var cont = stack[3];
                var stack2 = stack.slice(4);
                return cont.execute(stack2.addFirst(new JipdaValue(eqResult, [])), store, time, state)
              })
            }
            var rightStrNum = rightAval.user.limitStringNumber();
            if(rightStrNum !== BOT) {
              var isOnlyStrNum = rightStrNum.equals(rightAval.user);
              if(!isOnlyStrNum) {
                eqResult = eqResult.join(eqFlag ? U_FALSE : U_TRUE)
              }
              return DefaultValue(leftAval.as, undefined, leftNode, stack.addFirst(eqRightCont(rightStrNum, eqResult)), benva, store, time, state)
            }else {
              eqResult = eqResult.join(eqFlag ? U_FALSE : U_TRUE)
            }
          }
          if(rightAval.as.length !== 0) {
            var leftStrNum = leftAval.user.limitStringNumber();
            if(leftStrNum !== BOT) {
              var isOnlyStrNum = leftStrNum.equals(leftAval.user);
              if(!isOnlyStrNum) {
                eqResult = eqResult.join(eqFlag ? U_FALSE : U_TRUE)
              }
              return DefaultValue(rightAval.as, undefined, rightNode, stack.addFirst(eqLeftRightCont(leftStrNum, eqResult)), benva, store, time, state)
            }else {
              eqResult = eqResult.join(eqFlag ? U_FALSE : U_TRUE)
            }
          }
          var cont = stack[2];
          var stack2 = stack.slice(3);
          return cont.execute(stack2.addFirst(new JipdaValue(eqResult, [])), store, time, state)
        }
        return new Cont("binr-" + rightNode.tag, benva, function(stack, store, time, state) {
          var rightAval = stack[0];
          var leftAval = stack[1];
          switch(node.operator) {
            case "+":
              var rightAval = stack[0];
              var leftAval = stack[1];
              var result = BOT;
              var lasl = leftAval.as.length;
              var rasl = rightAval.as.length;
              if(leftAval.user !== BOT && rightAval.user !== BOT) {
                result = result.join(userLattice.add(leftAval.user, rightAval.user))
              }
              if(lasl === 0 && rasl === 0) {
                var cont = stack[2];
                var stack2 = stack.slice(3);
                return cont.execute(stack2.addFirst(new JipdaValue(result, [])), store, time, state)
              }
              if(lasl > 0) {
                function addLeftCont(result) {
                  return new Cont("addl-" + leftNode.tag, benva, function(stack, store, time, state) {
                    var lprim = stack[0].user;
                    if(rightAval.user !== BOT) {
                      result = result.join(userLattice.add(lprim, rightAval.user))
                    }
                    if(rasl > 0) {
                      function addLeftRightCont(result) {
                        return new Cont("addlr-" + rightNode.tag, benva, function(stack, store, time, state) {
                          var rprim = stack[0].user;
                          if(leftAval.user !== BOT) {
                            result = result.join(userLattice.add(leftAval.user, rprim))
                          }
                          result = result.join(userLattice.add(lprim, rprim));
                          var cont = stack[4];
                          var stack2 = stack.slice(5);
                          return cont.execute(stack2.addFirst(new JipdaValue(result, [])), store, time, state)
                        })
                      }
                      return DefaultValue(rightAval.as, undefined, leftNode, stack.addFirst(addLeftRightCont(result)), benva, store, time, state)
                    }
                    var cont = stack[3];
                    var stack2 = stack.slice(4);
                    return cont.execute(stack2.addFirst(new JipdaValue(result, [])), store, time, state)
                  })
                }
                return DefaultValue(leftAval.as, undefined, leftNode, stack.addFirst(addLeftCont(result)), benva, store, time, state)
              }
              if(rasl > 0) {
                function addRightCont(result) {
                  return new Cont("addr-" + rightNode.tag, benva, function(stack, store, time, state) {
                    var rprim = stack[0].user;
                    result = result.join(userLattice.add(leftAval.user, rprim));
                    var cont = stack[3];
                    var stack2 = stack.slice(4);
                    return cont.execute(stack2.addFirst(new JipdaValue(result, [])), store, time, state)
                  })
                }
                return DefaultValue(rightAval.as, undefined, leftNode, stack.addFirst(addRightCont(result)), benva, store, time, state)
              }
              var cont = stack[2];
              var stack2 = stack.slice(3);
              return cont.execute(stack2.addFirst(new JipdaValue(result, [])), store, time, state);
            case "*":
              if(leftAval.as.length + rightAval.as.length === 0) {
                return mul(stack, store, time, state)
              }
              throw new Error("TODO");;
            case "-":
              if(leftAval.as.length + rightAval.as.length === 0) {
                return sub(stack, store, time, state)
              }
              throw new Error("TODO");;
            case "/":
              if(leftAval.as.length + rightAval.as.length === 0) {
                return div(stack, store, time, state)
              }
              throw new Error("TODO");;
            case "===":
              var rightAval = stack[0];
              var leftAval = stack[1];
              var result = BOT;
              var lasl = leftAval.as.length;
              var rasl = rightAval.as.length;
              if(leftAval.user !== BOT && rightAval.user !== BOT) {
                result = result.join(userLattice.eqq(leftAval.user, rightAval.user))
              }
              if(lasl === 0 && rasl === 0) {
                var cont = stack[2];
                var stack2 = stack.slice(3);
                return cont.execute(stack2.addFirst(new JipdaValue(result, [])), store, time, state)
              }
              if(lasl === 1 && rasl === 1) {
                if(leftAval.as[0].equals(rightAval.as[0])) {
                  result = result.join(U_TRUE)
                }else {
                  result = result.join(U_FALSE)
                }
              }else {
                if(lasl > 0 && rasl > 0) {
                  result = result.join(U_FALSE);
                  if(leftAval.as.intersect(rightAval.as).length > 0) {
                    result = result.join(U_TRUE)
                  }
                }
              }
              if(leftAval.user === BOT && rightAval.user === BOT) {
                var cont = stack[2];
                var stack2 = stack.slice(3);
                return cont.execute(stack2.addFirst(new JipdaValue(result, [])), store, time, state)
              }
              result = result.join(U_FALSE);
              var cont = stack[2];
              var stack2 = stack.slice(3);
              return cont.execute(stack2.addFirst(new JipdaValue(result, [])), store, time, state);
            case "!==":
              var rightAval = stack[0];
              var leftAval = stack[1];
              var result = BOT;
              var lasl = leftAval.as.length;
              var rasl = rightAval.as.length;
              if(leftAval.user !== BOT && rightAval.user !== BOT) {
                result = result.join(userLattice.neqq(leftAval.user, rightAval.user))
              }
              if(lasl === 0 && rasl === 0) {
                var cont = stack[2];
                var stack2 = stack.slice(3);
                return cont.execute(stack2.addFirst(new JipdaValue(result, [])), store, time, state)
              }
              if(lasl === 1 && rasl === 1) {
                if(leftAval.as[0].equals(rightAval.as[0])) {
                  result = result.join(U_FALSE)
                }else {
                  result = result.join(U_TRUE)
                }
              }else {
                if(lasl > 0 && rasl > 0) {
                  result = result.join(U_TRUE);
                  if(leftAval.as.intersect(rightAval.as).length > 0) {
                    result = result.join(U_FALSE)
                  }
                }
              }
              if(leftAval.user === BOT && rightAval.user === BOT) {
                var cont = stack[2];
                var stack2 = stack.slice(3);
                return cont.execute(stack2.addFirst(new JipdaValue(result, [])), store, time, state)
              }
              result = result.join(U_TRUE);
              var cont = stack[2];
              var stack2 = stack.slice(3);
              return cont.execute(stack2.addFirst(new JipdaValue(result, [])), store, time, state);
            case "==":
              return eq(true, stack, store, time, state);
            case "!=":
              return eq(false, stack, store, time, state);
            case "<":
              if(leftAval.as.length + rightAval.as.length === 0) {
                return lt(stack, store, time, state)
              }
              throw new Error("TODO");;
            case "<=":
              if(leftAval.as.length + rightAval.as.length === 0) {
                return lte(stack, store, time, state)
              }
              throw new Error("TODO");;
            case ">":
              if(leftAval.as.length + rightAval.as.length === 0) {
                return gt(stack, store, time, state)
              }
              throw new Error("TODO");;
            case ">=":
              if(leftAval.as.length + rightAval.as.length === 0) {
                return gte(stack, store, time, state)
              }
              throw new Error("TODO");;
            case "&":
              var lu = toUserInt32(leftAval);
              var ru = toUserInt32(rightAval);
              var result = userLattice.binand(lu, ru);
              var cont = stack[2];
              var stack2 = stack.slice(3);
              return cont.execute(stack2.addFirst(new JipdaValue(result, [])), store, time, state);
            case "|":
              var lu = toUserInt32(leftAval);
              var ru = toUserInt32(rightAval);
              var result = userLattice.binor(lu, ru);
              var cont = stack[2];
              var stack2 = stack.slice(3);
              return cont.execute(stack2.addFirst(new JipdaValue(result, [])), store, time, state);
            default:
              throw new Error("cannot handle binary operator " + node.operator);
          }
        })
      }
      return new Cont("binl-" + leftNode.tag, benva, function(stack, store, time, state) {
        return evalNode(rightNode, stack.addFirst(rightCont()), benva, store, time, state)
      })
    }
    return evalNode(leftNode, stack.addFirst(leftCont()), benva, store, time, state)
  }
  function evalUnaryExpression(node, stack, benva, store, time, state) {
    var argumentNode = node.argument;
    function rightCont() {
      return new Cont("unr-" + argumentNode.tag, benva, function(stack, store, time, state) {
        var rightAval = stack[0];
        var cont = stack[1];
        var stack2 = stack.slice(2);
        var robjs = rightAval.as.map(function(a) {
          var lookupResult = lookupAval(a, stack, store, state);
          state = lookupResult.state;
          return lookupResult.value
        });
        var result;
        switch(node.operator) {
          case "-":
            var robjvals = robjs.map(function(o) {
              return o.DefaultValue()
            }).reduce(Lattice.join, BOT);
            var rprim = rightAval.user.join(robjvals);
            result = userLattice.neg(rprim);
            break;
          case "!":
            var robjvals = robjs.map(function(o) {
              return o.DefaultValue()
            }).reduce(Lattice.join, BOT);
            var rprim = rightAval.user.join(robjvals);
            result = userLattice.not(rprim);
            break;
          case "~":
            var robjvals = robjs.map(function(o) {
              return o.DefaultValue()
            }).reduce(Lattice.join, BOT);
            var rprim = rightAval.user.join(robjvals);
            result = userLattice.binnot(rprim);
            break;
          case "+":
            var robjvals = robjs.map(function(o) {
              return o.DefaultValue()
            }).reduce(Lattice.join, BOT);
            var rprim = rightAval.user.join(robjvals);
            result = userLattice.pos(rprim);
            break;
          default:
            throw new Error("cannot handle unary operator " + node.operator);
        }
        return cont.execute(stack2.addFirst(new JipdaValue(result, [])), store, time, state)
      })
    }
    return evalNode(argumentNode, stack.addFirst(rightCont()), benva, store, time, state)
  }
  function evalLogicalExpression(node, stack, benva, store, time, state) {
    var leftNode = node.left;
    var rightNode = node.right;
    var operator = node.operator;
    function leftCont() {
      function rightCont() {
        return new Cont("logr-" + rightNode.tag, benva, function(stack, store, time, state) {
          var right = stack[0];
          var cont = stack[1];
          var stack2 = stack.slice(2);
          return cont.execute(stack2.addFirst(right), store, time, state)
        })
      }
      return new Cont("logl-" + leftNode.tag, benva, function(stack, store, time, state) {
        var left = stack[0];
        switch(operator) {
          case "&&":
            if(userLattice.isFalse(toUserBoolean(left))) {
              var cont1 = stack[1];
              var stack2 = stack.slice(2);
              return cont1.execute(stack2.addFirst(left), store, time, state)
            }
            break;
          case "||":
            if(userLattice.isTrue(toUserBoolean(left))) {
              var cont2 = stack[1];
              var stack3 = stack.slice(2);
              return cont2.execute(stack3.addFirst(left), store, time, state)
            }
            break;
          default:
            throw new Error("cannot handle logical operator " + operator);
        }
        var stack4 = stack.slice(1);
        return evalNode(rightNode, stack4.addFirst(rightCont()), benva, store, time, state)
      })
    }
    return evalNode(leftNode, stack.addFirst(leftCont()), benva, store, time, state)
  }
  function evalCallExpression(node, stack, benva, store, time, state) {
    var calleeNode = node.callee;
    var operands = node.arguments;
    function operandsCont(i) {
      return new Cont("rand-" + operands[i - 1].tag, benva, function(stack, store, time, state) {
        if(operands.length === i) {
          return applyProc(node, stack, benva, store, time, state)
        }
        return evalNode(operands[i], stack.addFirst(operandsCont(i + 1)), benva, store, time, state)
      })
    }
    function operatorCont() {
      return new Cont("rator-" + calleeNode.tag, benva, function(stack, store, time, state) {
        if(operands.length === 0) {
          return applyProc(node, stack, benva, store, time, state)
        }
        return evalNode(operands[0], stack.addFirst(operandsCont(1)), benva, store, time, state)
      })
    }
    function methodOperatorCont() {
      return new Cont("meth-" + calleeNode.object.tag, benva, function(stack, store, time, state) {
        var objectAddresses = stack[0].addresses();
        assertTrue(Array.isArray(objectAddresses), "no addresses for " + stack[0]);
        var propertyName = calleeNode.property.name;
        var stack2 = stack.slice(1);
        return objectAddresses.flatMap(function(objectAddress) {
          var stack3 = stack2.addFirst(lattice.abst1(objectAddress));
          var lookupResult = lookupAval(objectAddress, stack, store, state);
          var objectAval = lookupResult.value;
          state = lookupResult.state;
          return doProtoLookup(objectAval, userLattice.abst1(propertyName), stack, store, state, function(memberAval, state) {
            if(memberAval === null) {
              throw new Error("doProtoLookup: no addresses for " + propertyName + " on " + objectAval);
            }
            var stack4 = stack3.addFirst(memberAval);
            if(operands.length === 0) {
              return applyProc(node, stack4, benva, store, time, state)
            }
            return evalNode(operands[0], stack4.addFirst(operandsCont(1)), benva, store, time, state)
          })
        })
      })
    }
    if(isMemberExpression(calleeNode)) {
      return evalNode(calleeNode.object, stack.addFirst(methodOperatorCont()), benva, store, time, state)
    }
    var stack2 = stack.addFirst(lattice.abst1(GLOBALA));
    return evalNode(calleeNode, stack2.addFirst(operatorCont()), benva, store, time, state)
  }
  function evalNewExpression(node, stack, benva, store, time, state) {
    var calleeNode = node.callee;
    function constructorCont() {
      var operands = node.arguments;
      function operandsCont(i) {
        return new Cont("rand-" + operands[i - 1].tag, benva, function(stack, store, time, state) {
          if(operands.length === i) {
            return applyConstructor(node, stack, benva, store, time, state)
          }
          return evalNode(operands[i], stack.addFirst(operandsCont(i + 1)), benva, store, time, state)
        })
      }
      return new Cont("cons-" + calleeNode.tag, benva, function(stack, store, time, state) {
        if(operands.length === 0) {
          return applyConstructor(node, stack, benva, store, time, state)
        }
        return evalNode(operands[0], stack.addFirst(operandsCont(1)), benva, store, time, state)
      })
    }
    return evalNode(calleeNode, stack.addFirst(constructorCont()), benva, store, time, state)
  }
  function evalThisExpression(node, stack, benva, store, time, state) {
    var cont = stack[0];
    var stack2 = stack.slice(1);
    var scopeResult = doScopeLookup(U_THIS, stack, benva, store, state);
    var as = scopeResult.as;
    state = scopeResult.state;
    if(as.length !== 1) {
      throw new Error(as.length + " addresses (!== 1) for this: " + as);
    }
    return cont.execute(stack2.addFirst(lattice.abst1(as[0])), store, time, state)
  }
  function evalFunctionExpression(node, stack, benva, store, time, state) {
    var cont = stack[0];
    var stack2 = stack.slice(1);
    var closure = createClosure(node, benva);
    var closureAddress = ag.closure(node, time);
    var prototype = createObject(OBJECTPA);
    var prototypeObjectAddress = ag.closureProtoObject(node, time);
    var constructorPropertyAddress = ag.objectProperty(prototypeObjectAddress, userLattice.abst1("constructor"));
    var allocResult = allocAval(constructorPropertyAddress, lattice.abst1(closureAddress), stack, store, state, "constructor");
    store = allocResult.store;
    state = allocResult.state;
    prototype = prototype.add(userLattice.abst1("constructor"), constructorPropertyAddress);
    allocResult = allocAval(prototypeObjectAddress, prototype, stack, store, state, "prototype object");
    store = allocResult.store;
    state = allocResult.state;
    var prototypePropertyAddress = ag.objectProperty(closureAddress, "prototype");
    closure = closure.add(U_PROTOTYPE, prototypePropertyAddress);
    allocResult = allocAval(prototypePropertyAddress, lattice.abst1(prototypeObjectAddress), stack, store, state, "prototype property");
    store = allocResult.store;
    state = allocResult.state;
    allocResult = allocAval(closureAddress, closure, stack, store, state, "closure for " + node);
    store = allocResult.store;
    state = allocResult.state;
    return cont.execute(stack2.addFirst(lattice.abst1(closureAddress)), store, time, state)
  }
  function evalAssignmentExpression(node, stack, benva, store, time, state) {
    var left = node.left;
    var right = node.right;
    switch(left.type) {
      case "Identifier":
        function varAssignmentCont() {
          return new Cont("=id-" + right.tag, benva, function(stack, store, time, state) {
            var rvalues = stack[0];
            var cont = stack[1];
            var stack2 = stack.slice(2);
            var scopeResult = doScopeLookup(userLattice.abst1(left.name), stack, benva, store, state);
            var as = scopeResult.as;
            state = scopeResult.state;
            if(as.length === 0) {
              throw new Error("no addresses for left-hand side " + left);
            }
            as.forEach(function(address) {
              var updateResult = updateAval(address, rvalues, stack, store, state);
              store = updateResult.store;
              state = updateResult.state
            });
            return cont.execute(stack2.addFirst(rvalues), store, time, state)
          })
        }
        return evalNode(right, stack.addFirst(varAssignmentCont()), benva, store, time, state);
      case "MemberExpression":
        function rightCont() {
          function memberAssignmentCont() {
            return new Cont("=mem-" + right.tag, benva, function(stack, store, time, state) {
              var rvalues = stack[0];
              var propertyName = stack[1];
              var spn = toUserString(propertyName, store);
              var uspn = spn.ToUInt32();
              var suspn = uspn.ToString();
              var length;
              if(suspn.equals(spn) && userLattice.isTrue(userLattice.lt(uspn, userLattice.abst1(Ecma.POW_2_32)))) {
                length = userLattice.add(uspn, U_1)
              }
              var objectAddresses = stack[2].addresses();
              var cont = stack[3];
              var stack2 = stack.slice(4);
              if(!objectAddresses) {
                throw new Error("cannot determine object addresses for lhs in " + node);
              }
              objectAddresses.forEach(function(objectAddress) {
                var lookupResult = lookupAval(objectAddress, stack, store, state);
                var object = lookupResult.value;
                state = lookupResult.state;
                assertDefinedNotNull(object.lookup, "not a benv at " + objectAddress + ": " + object + " " + object.constructor);
                var propertyAddresses = object.lookup(spn).addresses;
                if(propertyAddresses.length === 0) {
                  var propertyAddress = ag.objectProperty(objectAddress, spn);
                  object = object.add(spn, propertyAddress);
                  var allocResult = allocAval(propertyAddress, rvalues, stack, store, state);
                  store = allocResult.store;
                  state = allocResult.state;
                  var updateResult = sideEffectAval(objectAddress, object, stack, store, state);
                  store = updateResult.store;
                  state = updateResult.state
                }else {
                  propertyAddresses.forEach(function(propertyAddress) {
                    var updateResult = updateAval(propertyAddress, rvalues, stack, store, state);
                    store = updateResult.store;
                    state = updateResult.state
                  })
                }
                if(length && object.isArray()) {
                  var lengthPropertyAs = object.lookup(U_LENGTH).addresses;
                  var laResult = doLookupAddresses(lengthPropertyAs, stack, store, state);
                  state = laResult.state;
                  if(userLattice.isTrue(userLattice.lt(laResult.value.user, length))) {
                    lengthPropertyAs.forEach(function(lengthPropertyAddress) {
                      var updateResult = updateAval(lengthPropertyAddress, new JipdaValue(length, []), stack, store, state);
                      store = updateResult.store;
                      state = updateResult.state
                    })
                  }
                }
              });
              return cont.execute(stack2.addFirst(rvalues), store, time, state)
            })
          }
          return new Cont("=right-" + left.tag, benva, function(stack, store, time, state) {
            return evalNode(right, stack.addFirst(memberAssignmentCont()), benva, store, time, state)
          })
        }
        return evalMemberAddressProperty(left, stack.addFirst(rightCont()), benva, store, time, state);
      default:
        throw new Error("evalAssignment: cannot handle left hand side " + left);
    }
  }
  function evalArrayExpression(node, stack, benv, store, time, state) {
    var elements = node.elements;
    function arrayCont(i) {
      return new Cont("array-" + elements[i - 1].tag, benv, function(stack, store, time, state) {
        if(i === elements.length) {
          var exps = stack.slice(0, elements.length).reverse();
          var cont = stack[elements.length];
          var stack2 = stack.slice(elements.length + 1);
          var arr = createArray();
          var objectAddress = ag.array(node, time);
          exps.forEach(function(exp, ind) {
            var propertyName = userLattice.abst1(ind).ToString();
            var propertyAddress = ag.objectProperty(objectAddress, propertyName);
            arr = arr.add(propertyName, propertyAddress);
            var allocResult = allocAval(propertyAddress, exp, stack, store, state);
            store = allocResult.store;
            state = allocResult.state
          });
          var lengthPropertyAddress = ag.objectProperty(objectAddress, U_LENGTH);
          arr = arr.add(U_LENGTH, lengthPropertyAddress);
          var allocResult = allocAval(lengthPropertyAddress, lattice.abst1(exps.length), stack, store, state);
          allocResult = allocAval(objectAddress, arr, stack, allocResult.store, allocResult.state);
          store = allocResult.store;
          state = allocResult.state;
          return cont.execute(stack2.addFirst(lattice.abst1(objectAddress)), store, time, state)
        }
        return evalNode(elements[i], stack.addFirst(arrayCont(i + 1)), benv, store, time, state)
      })
    }
    if(elements.length === 0) {
      var cont = stack[0];
      var stack2 = stack.slice(1);
      var arr = createArray();
      var objectAddress = ag.array(node, time);
      var lengthPropertyAddress = ag.objectProperty(objectAddress, U_LENGTH);
      arr = arr.add(U_LENGTH, lengthPropertyAddress);
      var allocResult = allocAval(lengthPropertyAddress, J_0, stack, store, state);
      allocResult = allocAval(objectAddress, arr, stack, allocResult.store, allocResult.state);
      store = allocResult.store;
      state = allocResult.state;
      return cont.execute(stack2.addFirst(lattice.abst1(objectAddress)), store, time, state)
    }
    return evalNode(elements[0], stack.addFirst(arrayCont(1)), benv, store, time, state)
  }
  function evalMemberAddressProperty(node, stack, benva, store, time, state) {
    var object = node.object;
    function baseCont() {
      return new Cont("base-" + object.tag, benva, function(stack, store, time, state) {
        var objectAddresses = stack[0];
        var cont = stack[1];
        var stack2 = stack.slice(2);
        var property = node.property;
        if(node.computed) {
          return evalNode(property, stack2.addFirst(objectAddresses).addFirst(cont), benva, store, time, state)
        }
        return cont.execute(stack2.addFirst(objectAddresses).addFirst(lattice.abst1(property.name)), store, time, state)
      })
    }
    return evalNode(object, stack.addFirst(baseCont()), benva, store, time, state)
  }
  function evalMemberExpression(node, stack, benva, store, time, state) {
    function memberCont() {
      return new Cont("member-" + node.tag, benva, function(stack, store, time, state) {
        var propertyName = stack[0];
        var stringPropertyName = toUserString(propertyName, store);
        var objectAddresses = stack[1].addresses();
        var cont = stack[2];
        var stack2 = stack.slice(3);
        var vals = objectAddresses.map(function(objectAddress) {
          var lookupResult = lookupAval(objectAddress, stack, store, state);
          var objectAval = lookupResult.value;
          state = lookupResult.state;
          return doProtoLookup(objectAval, stringPropertyName, stack, store, state, function(memberAval, state2) {
            if(memberAval === null) {
              throw new Error("doProtoLookup: no addresses for " + propertyName + " on " + objectAval);
            }
            state = state2;
            return memberAval
          })
        });
        var val = vals.reduce(Lattice.join, BOT);
        return cont.execute(stack2.addFirst(val), store, time, state)
      })
    }
    return evalMemberAddressProperty(node, stack.addFirst(memberCont()), benva, store, time, state)
  }
  function evalObjectExpression(node, stack, benv, store, time, state) {
    var properties = node.properties;
    function objectCont(i) {
      return new Cont("obj-" + properties[i - 1].value.tag, benv, function(stack, store, time, state) {
        if(i === properties.length) {
          var rexps = stack.slice(0, properties.length);
          var cont = stack[properties.length];
          var stack2 = stack.slice(properties.length + 1);
          var obj = createObject(OBJECTPA);
          var objectAddress = ag.object(node, time);
          for(var k = properties.length - 1;k > -1;k--) {
            var propertyName = userLattice.abst1(properties[properties.length - k - 1].key.name);
            var propertyAddress = ag.objectProperty(objectAddress, propertyName);
            obj = obj.add(propertyName, propertyAddress);
            var allocResult = allocAval(propertyAddress, rexps[k], stack, store, state);
            store = allocResult.store;
            state = allocResult.state
          }
          var allocResult = allocAval(objectAddress, obj, stack, store, state);
          store = allocResult.store;
          state = allocResult.state;
          return cont.execute(stack2.addFirst(lattice.abst1(objectAddress)), store, time, state)
        }
        return evalNode(properties[i].value, stack.addFirst(objectCont(i + 1)), benv, store, time, state)
      })
    }
    if(properties.length === 0) {
      var cont = stack[0];
      var stack2 = stack.slice(1);
      var obj = createObject(OBJECTPA);
      var objectAddress = ag.object(node, time);
      var allocResult = allocAval(objectAddress, obj, stack, store, state);
      store = allocResult.store;
      state = allocResult.state;
      return cont.execute(stack2.addFirst(lattice.abst1(objectAddress)), store, time, state)
    }
    return evalNode(properties[0].value, stack.addFirst(objectCont(1)), benv, store, time, state)
  }
  function evalFunctionDeclaration(node, stack, benva, store, time, state) {
    var cont = stack[0];
    var stack2 = stack.slice(1);
    return cont.execute(stack2.addFirst(J_UNDEFINED), store, time, state)
  }
  function evalHoistedFunctionDeclaration(node, stack, benva, benv, store, time, state) {
    var vr = node.id;
    var closure = createClosure(node, benva);
    var closureAddress = ag.closure(node, time);
    var prototype = createObject(OBJECTPA);
    var prototypeObjectAddress = ag.closureProtoObject(node, time);
    var constructorPropertyAddress = ag.objectProperty(prototypeObjectAddress, userLattice.abst1("constructor"));
    var allocResult = allocAval(constructorPropertyAddress, lattice.abst1(closureAddress), stack, store, state, "constructor");
    store = allocResult.store;
    state = allocResult.state;
    prototype = prototype.add(userLattice.abst1("constructor"), constructorPropertyAddress);
    allocResult = allocAval(prototypeObjectAddress, prototype, stack, store, state, "prototype object");
    store = allocResult.store;
    state = allocResult.state;
    var prototypePropertyAddress = ag.objectProperty(closureAddress, "prototype");
    closure = closure.add(U_PROTOTYPE, prototypePropertyAddress);
    allocResult = allocAval(prototypePropertyAddress, lattice.abst1(prototypeObjectAddress), stack, store, state, "prototype property");
    allocResult = allocAval(closureAddress, closure, stack, allocResult.store, allocResult.state, "closure for " + node);
    store = allocResult.store;
    state = allocResult.state;
    var vr = node.id;
    var declarationAddress = ag.variable(vr, time);
    benv = benv.add(userLattice.abst1(vr.name), declarationAddress);
    allocResult = allocAval(declarationAddress, lattice.abst1(closureAddress), stack, store, state, "variable " + vr);
    store = allocResult.store;
    state = allocResult.state;
    return{benv:benv, store:store, state:state}
  }
  function evalVariableDeclarator(node, stack, benva, store, time, state, mode) {
    var vr = node.id;
    function variableDeclaratorCont() {
      return new Cont("decl-" + node.init.tag, benva, function(stack, store, time, state) {
        var value = stack[0];
        var cont = stack[1];
        var stack2 = stack.slice(2);
        var scopeResult = doScopeLookup(userLattice.abst1(vr.name), stack, benva, store, state);
        var as = scopeResult.as;
        state = scopeResult.state;
        if(as.length === 0) {
          throw new Error("no addresses for " + node);
        }
        as.forEach(function(address) {
          var updateResult = updateAval(address, value, stack, store, state);
          store = updateResult.store;
          state = updateResult.state
        });
        return cont.execute(stack2.addFirst(J_UNDEFINED), store, time, state)
      })
    }
    if(node.init === null) {
      var cont = stack[0];
      var stack2 = stack.slice(1);
      return cont.execute(stack2.addFirst(J_UNDEFINED), store, time, state)
    }
    return evalNode(node.init, stack.addFirst(variableDeclaratorCont()), benva, store, time, state)
  }
  function evalHoistedVariableDeclarator(node, stack, benv, store, time, state) {
    var vr = node.id;
    var address = ag.variable(vr, time);
    benv = benv.add(userLattice.abst1(vr.name), address);
    var allocResult = allocAval(address, J_UNDEFINED, stack, store, state);
    store = allocResult.store;
    state = allocResult.state;
    return{benv:benv, store:store, state:state}
  }
  function evalStatementList(nodes, stack, benva, store, time, state, mode) {
    function statementListCont(i) {
      return new Cont("slist-" + nodes[i - 1].tag, benva, function(stack, store, time, state) {
        var statementValue = stack[0];
        var value = stack[1];
        if(!statementValue.equals(J_UNDEFINED)) {
          value = statementValue
        }
        if(i === nodes.length) {
          var cont = stack[2];
          var stack2 = stack.slice(3);
          return cont.execute(stack2.addFirst(value), store, time, state)
        }
        var stack2 = stack.slice(2);
        return evalNode(nodes[i], stack2.addFirst(value).addFirst(statementListCont(i + 1)), benva, store, time, state, mode)
      })
    }
    if(nodes.length === 0) {
      var cont = stack[0];
      var stack2 = stack.slice(1);
      return cont.execute(stack2.addFirst(J_UNDEFINED), store, time, state)
    }
    if(nodes.length === 1) {
      return evalNode(nodes[0], stack, benva, store, time, state, mode)
    }
    return evalNode(nodes[0], stack.addFirst(J_UNDEFINED).addFirst(statementListCont(1)), benva, store, time, state, mode)
  }
  function evalStatementListTC(nodes, stack, benva, store, time, state, mode) {
    var value;
    function statementListCont(i) {
      return new Cont("slist-" + nodes[i - 1].tag, benva, function(stack, store, time, state) {
        var statementValue = stack[0];
        if(!statementValue.equals(J_UNDEFINED) || !value) {
          value = statementValue
        }
        if(i === nodes.length) {
          var cont = stack[1];
          var stack2 = stack.slice(2);
          return cont.execute(stack2.addFirst(value), store, time, state)
        }
        var stack2 = stack.slice(1);
        return evalNode(nodes[i], stack2.addFirst(statementListCont(i + 1)), benva, store, time, state, mode)
      })
    }
    if(nodes.length === 0) {
      var cont = stack[0];
      var stack2 = stack.slice(1);
      return cont.execute(stack2.addFirst(J_UNDEFINED), store, time, state)
    }
    if(nodes.length === 1) {
      return evalNode(nodes[0], stack, benva, store, time, state, mode)
    }
    return evalNode(nodes[0], stack.addFirst(statementListCont(1)), benva, store, time, state, mode)
  }
  function evalReturnStatement(node, stack, benva, store, time, state) {
    function doReturn(value, stack, store, time, state) {
      for(var i = 0;i < stack.length;i++) {
        var stackValue = stack[i];
        if(stackValue instanceof Cont) {
          if(stackValue.applications.length > 0) {
            var stack2 = stack.slice(i + 1);
            state = state.returns(value, stackValue.applications[0]);
            return stackValue.execute(stack2.addFirst(value), store, time, state)
          }
        }
      }
      throw new Error("return not in function: " + node);
    }
    function returnCont() {
      return new Cont("ret-" + node.tag, benva, function(stack, store, time, state) {
        var value = stack[0];
        var stack2 = stack.slice(1);
        return doReturn(value, stack2, store, time, state)
      })
    }
    if(node.argument === null) {
      return doReturn(J_UNDEFINED, stack, store, time, state)
    }
    return evalNode(node.argument, stack.addFirst(returnCont()), benva, store, time, state)
  }
  function evalBreakStatement(node, stack, benva, store, time, state) {
    var breakValue = J_UNDEFINED;
    for(var j = 0;j < stack.length;j++) {
      var value = stack[j];
      if(value instanceof JipdaValue) {
        breakValue = value;
        break
      }
    }
    print("breakValue", breakValue, stack);
    if(node.label === null) {
      for(var i = 0;i < stack.length;i++) {
        var value = stack[i];
        if(value instanceof Cont) {
          if(value.handler) {
            var handler = value.handler;
            if(isSwitchStatement(handler)) {
              var stack2 = stack.slice(i);
              return value.execute(stack2.addFirst(breakValue), store, time, state)
            }
          }
        }
      }
      throw new Error("no handler for " + node);
    }
    for(var i = 0;i < stack.length;i++) {
      var value = stack[i];
      if(value instanceof Cont) {
        if(value.handler) {
          var handler = value.handler;
          if(isLabeledStatement(handler) && handler.label.name === node.label.name) {
            var stack2 = stack.slice(i);
            return value.execute(stack2.addFirst(breakValue), store, time, state)
          }
        }
      }
    }
    throw new Error("no handler for " + node);
  }
  function evalLabeledStatement(node, stack, benva, store, time, state) {
    var cont = stack[0];
    var stack2 = stack.slice(1);
    var handlerCont = cont.setHandler(node);
    return evalNode(node.body, stack2.addFirst(handlerCont), benva, store, time, state)
  }
  function evalThrowStatement(node, stack, benva, store, time, state) {
    function argumentCont() {
      return new Cont("throw-" + node.argument.tag, benva, function(stack, store, time, state) {
        var throwValue = stack[0];
        for(var i = 1;i < stack.length;i++) {
          var value = stack[i];
          if(value instanceof Cont) {
            if(value.handler) {
              var handler = value.handler;
              if(isCatchClause(handler)) {
                var stack2 = stack.slice(i);
                var createResult = createEnvironment(benva, node, handler, state);
                var extendedBenv = createResult.benv;
                state = createResult.state;
                var param = handler.param;
                var address = ag.variable(param, time);
                extendedBenv = extendedBenv.add(userLattice.abst1(param.name), address);
                var allocResult = allocAval(address, throwValue, stack, store, state);
                var extendedBenva = ag.benv(handler, time);
                allocResult = allocAval(extendedBenva, extendedBenv, stack, allocResult.store, allocResult.state, "extended static env for handler with root " + benva);
                store = allocResult.store;
                state = allocResult.state;
                var block = handler.body;
                return evalStatementList(block.body, stack2, extendedBenva, store, time, state)
              }
            }
          }
        }
        throw new Error("no handler for " + node);
      })
    }
    return evalNode(node.argument, stack.addFirst(argumentCont()), benva, store, time, state)
  }
  function evalTryStatement(node, stack, benva, store, time, state) {
    var cont = stack[0];
    var stack2 = stack.slice(1);
    var handlerCont = cont.setHandler(node.handlers[0]);
    return evalNode(node.block, stack2.addFirst(handlerCont), benva, store, time, state)
  }
  function evalIfStatement(node, stack, benva, store, time, state) {
    var testNode = node.test;
    function ifCont() {
      return new Cont("if-" + testNode.tag, benva, function(stack, store, time, state) {
        var value = stack[0];
        var booleanValue = toUserBoolean(value);
        var stack2 = stack.slice(1);
        var consequent = node.consequent;
        var alternate = node.alternate;
        if(userLattice.isFalse(booleanValue)) {
          if(alternate === null) {
            var cont = stack2[0];
            var stack3 = stack2.slice(1);
            return cont.execute(stack3.addFirst(J_UNDEFINED), store, time, state)
          }
          return evalNode(alternate, stack2, benva, store, time, state)
        }
        if(userLattice.isTrue(booleanValue)) {
          return evalNode(consequent, stack2, benva, store, time, state)
        }
        var tasks = [new Task("eval consequent of " + testNode.tag, function() {
          var time2 = time.tick(consequent.tag, k);
          return evalNode(consequent, stack2, benva, store, time2, state)
        })];
        if(alternate === null) {
          tasks = tasks.addLast(new Task("eval empty alternate of " + testNode.tag, function() {
            var cont = stack2[0];
            var stack3 = stack2.slice(1);
            return cont.execute(stack3.addFirst(J_UNDEFINED), store, time, state)
          }))
        }else {
          tasks = tasks.addLast(new Task("eval non-empty alternate of " + testNode.tag, function() {
            var time2 = time.tick(alternate.tag, k);
            return evalNode(alternate, stack2, benva, store, time2, state)
          }))
        }
        return tasks
      })
    }
    return evalNode(testNode, stack.addFirst(ifCont()), benva, store, time, state)
  }
  function evalConditionalExpression(node, stack, benva, store, time, state) {
    var testNode = node.test;
    function condCont() {
      return new Cont("cond-" + testNode.tag, benva, function(stack, store, time, state) {
        var value = stack[0];
        var booleanValue = toUserBoolean(value);
        var stack2 = stack.slice(1);
        var consequent = node.consequent;
        var alternate = node.alternate;
        if(userLattice.isFalse(booleanValue)) {
          return evalNode(alternate, stack2, benva, store, time, state)
        }
        if(userLattice.isTrue(booleanValue)) {
          return evalNode(consequent, stack2, benva, store, time, state)
        }
        var tasks = [new Task("eval consequent of " + testNode.tag, function() {
          var time2 = time.tick(consequent.tag, k);
          return evalNode(consequent, stack2, benva, store, time2, state)
        })];
        tasks = tasks.addLast(new Task("eval alternate of " + testNode.tag, function() {
          var time2 = time.tick(alternate.tag, k);
          return evalNode(alternate, stack2, benva, store, time2, state)
        }));
        return tasks
      })
    }
    return evalNode(testNode, stack.addFirst(condCont()), benva, store, time, state)
  }
  function evalSwitchStatement(node, stack, benva, store, time, state) {
    var discriminantNode = node.discriminant;
    function switchCont() {
      return new Cont("switch-" + node.tag, benva, function(stack, store, time, state) {
        var discr = stack[0].user;
        function execCase(i, stack, store, time, state) {
          function execCaseCont() {
            return new Cont("checkcase-" + node.cases[i].tag, benva, function(stack, store, time, state) {
              return execCase(i + 1, stack, store, time, state)
            })
          }
          var statements = [];
          for(var j = i;j < node.cases.length;j++) {
            statements = statements.concat(node.cases[j].consequent)
          }
          var stack2 = stack.slice(1);
          return evalStatementList(statements, stack2, benva, store, time, state)
        }
        function scanCase(i, defaultI, stack, store, time, state) {
          function checkCaseCont() {
            return new Cont("checkcase-" + node.cases[i].tag, benva, function(stack, store, time, state) {
              var selector = stack[0].user;
              var stack2 = stack.slice(1);
              if(userLattice.isTrue(userLattice.eqq(discr, selector))) {
                return execCase(i, stack2, store, time, state)
              }
              if(userLattice.isFalse(userLattice.eqq(discr, selector))) {
                return scanCase(i + 1, defaultI, stack2, store, time, state)
              }
              return[new Task("execute case " + i), function() {
                return execCase(i, stack2, store, time, state)
              }, new Task("scan case " + i), function() {
                return scanCase(i + 1, stack2, store, time, state)
              }]
            })
          }
          if(i === node.cases.length) {
            if(defaultI === null) {
              var cont = stack[1];
              var stack2 = stack.slice(2);
              return cont.execute(stack2.addFirst(J_UNDEFINED), store, time, state)
            }
            var statements = [];
            for(var j = defaultI;j < node.cases.length;j++) {
              statements = statements.concat(node.cases[j].consequent)
            }
            var stack2 = stack.slice(1);
            return evalStatementList(statements, stack2, benva, store, time, state)
          }
          var nodeTest = node.cases[i].test;
          if(nodeTest === null) {
            if(i + 1 === node.cases.length) {
              return execCase(i, stack, store, time, state)
            }
            return scanCase(i + 1, i, stack, store, time, state)
          }
          return evalNode(nodeTest, stack.addFirst(checkCaseCont()), benva, store, time, state)
        }
        if(node.cases) {
          return scanCase(0, null, stack, store, time, state)
        }
        var cont = stack[1];
        var stack2 = stack.slice(2);
        return cont.execute(stack2.addFirst(J_UNDEFINED), store, time, state)
      })
    }
    var cont = stack[0];
    var stack2 = stack.slice(1);
    var handlerCont = cont.setHandler(node);
    return evalNode(discriminantNode, stack2.addFirst(handlerCont).addFirst(switchCont()), benva, store, time, state)
  }
  function evalEmptyStatement(node, stack, benv, store, time, state) {
    var cont = stack[0];
    var stack2 = stack.slice(1);
    return cont.execute(stack2.addFirst(J_UNDEFINED), store, time, state)
  }
  function evalUpdateExpression(node, stack, benva, store, time, state) {
    var argument = node.argument;
    if(isIdentifier(argument)) {
      var cont = stack[0];
      var stack2 = stack.slice(1);
      var scopeResult = doScopeLookup(userLattice.abst1(argument.name), stack, benva, store, state);
      var as = scopeResult.as;
      state = scopeResult.state;
      if(as.length === 0) {
        throw new Error("no addresses for " + argument);
      }
      var result = BOT;
      as.forEach(function(address) {
        var lookupResult = lookupAval(address, stack, store, state);
        var aval = lookupResult.value;
        state = lookupResult.state;
        var uold = aval.user.ToNumber();
        var jold = new JipdaValue(uold, []);
        var jnew = new JipdaValue(node.operator === "++" ? userLattice.add(uold, U_1) : userLattice.sub(uold, U_1), []);
        var updateResult = updateAval(address, jnew, stack, store, state);
        store = updateResult.store;
        state = updateResult.state;
        result = result.join(node.prefix ? jnew : jold)
      });
      return cont.execute(stack2.addFirst(result), store, time, state)
    }else {
      if(isMemberExpression(argument)) {
        function updateMemberCont() {
          return new Cont("updMem-" + argument.tag, benva, function(stack, store, time, state) {
            var propertyName = toUserString(stack[0], store);
            var objectAddresses = stack[1].addresses();
            var cont = stack[2];
            var stack2 = stack.slice(3);
            var result = BOT;
            objectAddresses.forEach(function(objectAddress) {
              var lookupResult = lookupAval(objectAddress, stack, store, state);
              var object = lookupResult.value;
              state = lookupResult.state;
              return doProtoLookup(object, propertyName, stack, store, state, function(aval, state) {
                if(aval === null) {
                  throw new Error("doProtoLookup: no addresses for " + propertyName + " on " + object);
                }
                var uold = toUserNumber(aval, store);
                var jold = new JipdaValue(uold, []);
                var jnew = new JipdaValue(node.operator === "++" ? userLattice.add(uold, U_1) : userLattice.sub(uold, U_1), []);
                var pas = object.lookup(propertyName).addresses;
                if(pas.length === 0) {
                  object = object.add(propertyName, propertyAddress);
                  var allocResult = allocAval(propertyAddress, jnew, stack, store, state);
                  store = allocResult.store;
                  state = allocResult.state;
                  var updateResult = sideEffectAval(objectAddress, object, stack, store, state);
                  store = updateResult.store;
                  state = updateResult.state
                }else {
                  pas.forEach(function(propertyAddress) {
                    var updateResult = updateAval(propertyAddress, jnew, stack, store, state);
                    store = updateResult.store;
                    state = updateResult.state
                  })
                }
                result = result.join(node.prefix ? jnew : jold)
              })
            });
            return cont.execute(stack2.addFirst(result), store, time, state)
          })
        }
        return evalMemberAddressProperty(argument, stack.addFirst(updateMemberCont()), benva, store, time, state)
      }else {
        throw new Error("evalUpdateExpression: cannot handle " + argument);
      }
    }
  }
  function evalForStatement(node, stack, benva, store, time, state) {
    var init = node.init;
    var test = node.test;
    var update = node.update;
    var body = node.body;
    function initCont() {
      function testCont() {
        function bodyCont() {
          function updateCont() {
            return new Cont("foru-" + update.tag, benva, function(stack, store, time, state) {
              var stack2 = stack.slice(1);
              return evalNode(test, stack2.addFirst(testCont()), benva, store, time, state)
            })
          }
          return new Cont("forb-" + body.tag, benva, function(stack, store, time, state) {
            return evalNode(update, stack.addFirst(updateCont()), benva, store, time, state)
          })
        }
        return new Cont("fort-" + test.tag, benva, function(stack, store, time, state) {
          var testAval = stack[0];
          if(userLattice.isFalse(toUserBoolean(testAval))) {
            var bodyAval = stack[1];
            var cont = stack[2];
            var stack2 = stack.slice(3);
            return cont.execute(stack2.addFirst(bodyAval), store, time, state)
          }
          var time2 = time.tick(node.tag, k);
          if(userLattice.isTrue(toUserBoolean(testAval))) {
            var store2 = visited.visited(body, stack, benva, store, time);
            if(store2 === null) {
              return[]
            }
            var stack2 = stack.slice(2);
            return evalNode(body, stack2.addFirst(bodyCont()), benva, store2, time2, state)
          }
          var tasks = [new Task("exit for-loop " + node.tag, function() {
            var bodyAval = stack[1];
            var cont = stack[2];
            var stack2 = stack.slice(3);
            return cont.execute(stack2.addFirst(bodyAval), store, time2, state)
          }), new Task("eval body of for-loop " + node.tag, function() {
            var store2 = visited.visited(body, stack, benva, store, time2);
            if(store2 === null) {
              return[]
            }
            var stack2 = stack.slice(2);
            return evalNode(body, stack2.addFirst(bodyCont()), benva, store2, time2, state)
          })];
          return tasks
        })
      }
      return new Cont("fori-" + init.tag, benva, function(stack, store, time, state) {
        var stack2 = stack.slice(1);
        return evalNode(test, stack2.addFirst(J_UNDEFINED).addFirst(testCont()), benva, store, time, state)
      })
    }
    return evalNode(init, stack.addFirst(initCont()), benva, store, time, state)
  }
  function evalWhileStatement(node, stack, benva, store, time, state) {
    var test = node.test;
    var body = node.body;
    function testCont() {
      function bodyCont() {
        return new Cont("whileb-" + body.tag, benva, function(stack, store, time, state) {
          return evalNode(test, stack.addFirst(testCont()), benva, store, time, state)
        })
      }
      return new Cont("whilet-" + test.tag, benva, function(stack, store, time, state) {
        var testAval = stack[0];
        if(userLattice.isFalse(toUserBoolean(testAval))) {
          var bodyAval = stack[1];
          var cont = stack[2];
          var stack2 = stack.slice(3);
          return cont.execute(stack2.addFirst(bodyAval), store, time, state)
        }
        var time2 = time.tick(node.tag, k);
        if(userLattice.isTrue(toUserBoolean(testAval))) {
          var store2 = visited.visited(body, stack, benva, store, time);
          if(store2 === null) {
            return[]
          }
          var stack2 = stack.slice(2);
          return evalNode(body, stack2.addFirst(bodyCont()), benva, store2, time2, state)
        }
        var tasks = [new Task("exit while-loop " + node.tag, function() {
          var bodyAval = stack[1];
          var cont = stack[2];
          var stack2 = stack.slice(3);
          return cont.execute(stack2.addFirst(bodyAval), store, time2, state)
        }), new Task("eval body of while-loop " + node.tag, function() {
          var store2 = visited.visited(body, stack, benva, store, time2);
          if(store2 === null) {
            return[]
          }
          var stack2 = stack.slice(2);
          return evalNode(body, stack2.addFirst(bodyCont()), benva, store2, time2, state)
        })];
        return tasks
      })
    }
    return evalNode(test, stack.addFirst(J_UNDEFINED).addFirst(testCont()), benva, store, time, state)
  }
  function evalProgram(node, stack, benva, store, time, state) {
    var bodyNodes = node.body;
    var hoisted = hoist(bodyNodes);
    if(hoisted.funs.length > 0 || hoisted.vars.length > 0) {
      var benv = store.lookupAval(benva);
      hoisted.funs.forEach(function(funDecl) {
        var result = evalHoistedFunctionDeclaration(funDecl, stack, benva, benv, store, time, state);
        benv = result.benv;
        store = result.store;
        state = result.state
      });
      hoisted.vars.forEach(function(varDecl) {
        var result = evalHoistedVariableDeclarator(varDecl, stack, benv, store, time, state);
        benv = result.benv;
        store = result.store;
        state = result.state
      });
      var updateResult = sideEffectAval(benva, benv, stack, store, state);
      store = updateResult.store;
      state = updateResult.state
    }
    return evalStatementList(bodyNodes, stack, benva, store, time, state)
  }
  function evalNode(node, stack, benva, store, time, state) {
    assertTrue(benva instanceof Addr);
    assertTrue(store instanceof Store);
    assertTrue(state instanceof State, "not a State: " + state + " " + state.constructor);
    switch(node.type) {
      case "Literal":
        return evalLiteral(node, stack, benva, store, time, state);
      case "Identifier":
        return evalIdentifier(node, stack, benva, store, time, state);
      case "BinaryExpression":
        return evalBinaryExpression(node, stack, benva, store, time, state);
      case "LogicalExpression":
        return evalLogicalExpression(node, stack, benva, store, time, state);
      case "CallExpression":
        return evalCallExpression(node, stack, benva, store, time, state);
      case "FunctionExpression":
        return evalFunctionExpression(node, stack, benva, store, time, state);
      case "AssignmentExpression":
        return evalAssignmentExpression(node, stack, benva, store, time, state);
      case "ArrayExpression":
        return evalArrayExpression(node, stack, benva, store, time, state);
      case "MemberExpression":
        return evalMemberExpression(node, stack, benva, store, time, state);
      case "ObjectExpression":
        return evalObjectExpression(node, stack, benva, store, time, state);
      case "ThisExpression":
        return evalThisExpression(node, stack, benva, store, time, state);
      case "NewExpression":
        return evalNewExpression(node, stack, benva, store, time, state);
      case "UpdateExpression":
        return evalUpdateExpression(node, stack, benva, store, time, state);
      case "UnaryExpression":
        return evalUnaryExpression(node, stack, benva, store, time, state);
      case "ExpressionStatement":
        return evalNode(node.expression, stack, benva, store, time, state);
      case "ReturnStatement":
        return evalReturnStatement(node, stack, benva, store, time, state);
      case "BreakStatement":
        return evalBreakStatement(node, stack, benva, store, time, state);
      case "LabeledStatement":
        return evalLabeledStatement(node, stack, benva, store, time, state);
      case "IfStatement":
        return evalIfStatement(node, stack, benva, store, time, state);
      case "ConditionalExpression":
        return evalConditionalExpression(node, stack, benva, store, time, state);
      case "SwitchStatement":
        return evalSwitchStatement(node, stack, benva, store, time, state);
      case "ForStatement":
        return evalForStatement(node, stack, benva, store, time, state);
      case "WhileStatement":
        return evalWhileStatement(node, stack, benva, store, time, state);
      case "FunctionDeclaration":
        return evalFunctionDeclaration(node, stack, benva, store, time, state);
      case "VariableDeclaration":
        return evalStatementList(node.declarations, stack, benva, store, time, state, node.kind);
      case "VariableDeclarator":
        return evalVariableDeclarator(node, stack, benva, store, time, state);
      case "BlockStatement":
        return evalStatementList(node.body, stack, benva, store, time, state);
      case "EmptyStatement":
        return evalEmptyStatement(node, stack, benva, store, time, state);
      case "TryStatement":
        return evalTryStatement(node, stack, benva, store, time, state);
      case "ThrowStatement":
        return evalThrowStatement(node, stack, benva, store, time, state);
      case "Program":
        return evalProgram(node, stack, benva, store, time, state);
      default:
        throw"ipdaEval: cannot handle node " + node.type;
    }
  }
  function applyProc(application, stack, benva, store, time, state) {
    if(stack.length > 64) {
      throw new Error("stack overflow");
    }
    var applicationLength = application.arguments.length + 2;
    var applicationValues = stack.slice(0, applicationLength).reverse();
    var ths = applicationValues[0];
    var operatorValues = applicationValues[1].addresses();
    var operandsValues = applicationValues.slice(2);
    var stack2 = stack.slice(applicationLength);
    var cont = stack2[0];
    var stack3 = stack2.slice(1);
    var time2 = time.tick(application.tag, k);
    var store2 = visited.visited(application, stack, benva, store, time);
    if(store2 === null) {
      return[]
    }
    operatorValues = operatorValues.map(function(operatorValue) {
      assertTrue(operatorValue instanceof Addr);
      var lookupResult = lookupAval(operatorValue, stack, store2, state);
      var benv = lookupResult.value;
      state = lookupResult.state;
      return benv
    });
    return operatorValues.flatMap(function(operator) {
      var callConc = operator.Call;
      assertTrue(callConc.length > 0);
      assertTrue(ths.as.length > 0, "'this'");
      return callConc.map(function(Call) {
        return new Task("#" + application.tag + " " + application + " stack length " + stack.length + " store size " + store.entries.length, function() {
          var markedCont = Call.mark(cont, application);
          return Call.applyFunction(application, operandsValues, ths.as[0], stack3.addFirst(markedCont), benva, store2, time2, state)
        })
      })
    })
  }
  function applyProc2(node, operatorValues, operands, thisa, stack, benva, store, time, state) {
    var cont = stack[0];
    var stack2 = stack.slice(1);
    var time2 = time.tick(node.tag, k);
    var store2 = visited.visited(node, stack, benva, store, time);
    if(store2 === null) {
      return[]
    }
    operatorValues = operatorValues.map(function(operatorValue) {
      assertTrue(operatorValue instanceof Addr);
      var lookupResult = lookupAval(operatorValue, stack, store2, state);
      var benv = lookupResult.value;
      state = lookupResult.state;
      return benv
    });
    return operatorValues.flatMap(function(operator) {
      var callConc = operator.Call;
      assertTrue(callConc.length > 0);
      return callConc.map(function(Call) {
        return new Task("#" + node.tag + " " + node + " stack length " + stack.length + " store size " + store.entries.length, function() {
          var markedCont = Call.mark(cont, node);
          return Call.applyFunction(node, operands, thisa, stack2.addFirst(markedCont), benva, store2, time2, state)
        })
      })
    })
  }
  function applyConstructor(application, stack, benva, store, time, state) {
    if(stack.length > 128) {
      throw new Error("stack explosion");
    }
    var applicationLength = application.arguments.length + 1;
    var applicationValues = stack.slice(0, applicationLength).reverse();
    var constructorValues = applicationValues[0].addresses();
    var operandsValues = applicationValues.slice(1);
    var stack2 = stack.slice(applicationLength);
    var time2 = time.tick(application.tag, k);
    constructorValues = constructorValues.map(function(operatorValue) {
      var lookupResult = lookupAval(operatorValue, stack, store, state);
      var benv = lookupResult.value;
      state = lookupResult.state;
      return benv
    });
    return constructorValues.flatMap(function(constructor) {
      var objectAddress = ag.constructor(application, time);
      function constructorObjectCont() {
        return new Cont("consObj-" + application.tag, benva, function(stack, store, time, state) {
          var objectAval = stack[0];
          var cont = stack[1];
          var stack2 = stack.slice(2);
          if(objectAval.isAddress()) {
            return cont.execute(stack2.addFirst(objectAval), store, time, state)
          }
          var caddresses = objectAval.addresses();
          return cont.execute(stack2.addFirst(lattice.abst([objectAddress].concat(caddresses))), store, time, state)
        })
      }
      var cont = constructorObjectCont();
      var markedCont = cont.addApplication(application);
      var prototypePropertyAs = constructor.lookup(U_PROTOTYPE).addresses;
      var laResult = doLookupAddresses(prototypePropertyAs, stack, store, state);
      var ths = createObject(laResult.value);
      var allocResult = allocAval(objectAddress, ths, stack, store, laResult.state, "'this' object for " + application);
      store = allocResult.store;
      state = allocResult.state;
      return constructor.Call.map(function(Call) {
        return new Task("#" + application.tag + " " + application + " stack length " + stack.length + " store size " + store.entries.length, function() {
          return Call.applyFunction(application, operandsValues, objectAddress, stack2.addFirst(markedCont), benva, store, time2, state)
        })
      })
    })
  }
  function BenvClosureCall(node, scope) {
    this.node = node;
    this.scope = scope
  }
  BenvClosureCall.prototype.toString = function() {
    return"<BenvClosureCall " + this.node.tag + ">"
  };
  BenvClosureCall.prototype.equals = function(other) {
    if(this === other) {
      return true
    }
    if(!(this instanceof BenvClosureCall)) {
      return false
    }
    return this.node === other.node && this.scope.equals(other.scope)
  };
  BenvClosureCall.prototype.mark = function(cont, application) {
    var markedCont = cont.addApplication(application);
    markedCont.toString = cont.toString;
    return markedCont
  };
  BenvClosureCall.prototype.applyFunction = function(application, operandsValues, ths, stack, benva, store, time, state) {
    var funNode = this.node;
    var funScope = this.scope;
    var bodyNodes = funNode.body.body;
    if(bodyNodes.length === 0) {
      var cont = stack[0];
      var stack2 = stack.slice(1);
      state = state.appliesFunction(application, funNode, funScope, ths);
      state = state.leavesFunction(application, funNode, funScope, ths);
      return cont.execute(stack2.addFirst(J_UNDEFINED), store, time, state)
    }
    var formalParameters = funNode.params;
    var createResult = createEnvironment(funScope, application, funNode, state);
    var extendedBenv = createResult.benv;
    state = createResult.state;
    if(ths === null || ths === undefined) {
      ths = GLOBALA
    }
    extendedBenv = extendedBenv.add(U_THIS, ths);
    for(var i = 0;i < formalParameters.length;i++) {
      var param = formalParameters[i];
      var address = ag.variable(param, time);
      extendedBenv = extendedBenv.add(userLattice.abst1(param.name), address);
      var allocResult = allocAval(address, operandsValues[i], stack, store, state);
      store = allocResult.store;
      state = allocResult.state
    }
    var extendedBenva = ag.benv(application, time);
    var hoisted = hoist(bodyNodes);
    if(hoisted.funs.length > 0 || hoisted.vars.length > 0) {
      hoisted.funs.forEach(function(funDecl) {
        var result = evalHoistedFunctionDeclaration(funDecl, stack, extendedBenva, extendedBenv, store, time, state);
        extendedBenv = result.benv;
        store = result.store;
        state = result.state
      });
      hoisted.vars.forEach(function(varDecl) {
        var result = evalHoistedVariableDeclarator(varDecl, stack, extendedBenv, store, time, state);
        extendedBenv = result.benv;
        store = result.store;
        state = result.state
      })
    }
    var allocResult = allocAval(extendedBenva, extendedBenv, stack, store, state, "extended static env for closure call with root " + funScope);
    store = allocResult.store;
    state = allocResult.state;
    state = state.appliesFunction(application, funNode, extendedBenva, ths);
    function fbodyCont(i) {
      return new Cont("fbody-" + bodyNodes[i - 1].tag, extendedBenva, function(stack, store, time, state) {
        if(i === bodyNodes.length) {
          var cont = stack[1];
          var stack2 = stack.slice(2);
          state = state.leavesFunction(application, funNode, funScope, ths);
          return cont.execute(stack2.addFirst(J_UNDEFINED), store, time, state)
        }
        var stack3 = stack.slice(1);
        return evalNode(bodyNodes[i], stack3.addFirst(fbodyCont(i + 1)), extendedBenva, store, time, state)
      })
    }
    return evalNode(bodyNodes[0], stack.addFirst(fbodyCont(1)), extendedBenva, store, time, state)
  };
  BenvClosureCall.prototype.addresses = function() {
    return[this.scope]
  };
  function BenvPrimitiveCall(applyFunction) {
    this.applyFunction = applyFunction
  }
  BenvPrimitiveCall.prototype.toString = function() {
    return"<BenvPrimitiveCall>"
  };
  BenvPrimitiveCall.prototype.equals = function(other) {
    if(this === other) {
      return true
    }
    if(!(this instanceof BenvPrimitiveCall)) {
      return false
    }
    return this.applyFunction === other.applyFunction
  };
  BenvPrimitiveCall.prototype.mark = function(cont, application) {
    var markedCont = cont.addApplication(application);
    markedCont.toString = cont.toString;
    return markedCont
  };
  BenvPrimitiveCall.prototype.addresses = function() {
    return[]
  };
  var totalNumTasks = 0;
  function taskRunner() {
    while(tasks.length > 0) {
      if(tasks.length > 128) {
        throw new Error("task overflow");
      }
      if(totalNumTasks > 1024) {
        throw new Error("state space overflow");
      }
      var task = tasks[0];
      print("\nSTART", task, "-- length", tasks.length);
      var taskResult = task.execute();
      assertDefinedNotNull(taskResult);
      print("END", task, "-- result", taskResult, "-- total", ++totalNumTasks);
      tasks = tasks.slice(1).concat(taskResult)
    }
  }
  var GLOBALA = new ContextAddr("this", 0);
  var OBJECTPA;
  var FUNCTIONPA;
  var ARRAYPA;
  function createGlobal(store) {
    function registerProperty(object, objectAddress, propertyName, value) {
      var propertyAddress = ag.objectProperty(objectAddress, propertyName);
      object = object.add(userLattice.abst1(propertyName), propertyAddress);
      store = store.allocAval(propertyAddress, value);
      return object
    }
    function registerPrimitiveFunction(object, objectAddress, propertyName, fun) {
      var primFunObject = createPrimitive(fun);
      var primFunObjectAddress = new ContextAddr(objectAddress, "<" + propertyName + ">");
      store = store.allocAval(primFunObjectAddress, primFunObject);
      return registerProperty(object, objectAddress, propertyName, lattice.abst1(primFunObjectAddress))
    }
    var objectPa = new ContextAddr("Object.prototype", 0);
    OBJECTPA = lattice.abst1(objectPa);
    var objectP = createObject(J_NULL);
    objectP.toString = function() {
      return"<Object.prototype>"
    };
    var functionPa = new ContextAddr("Function.prototype", 0);
    FUNCTIONPA = lattice.abst1(functionPa);
    var functionP = createObject(OBJECTPA);
    functionP.toString = function() {
      return"<Function.prototype>"
    };
    var arrayPa = new ContextAddr("Array.prototype", 0);
    ARRAYPA = lattice.abst1(arrayPa);
    var arrayP = createObject(OBJECTPA);
    arrayP.toString = function() {
      return"<Array.prototype>"
    };
    var global = createObject(OBJECTPA);
    var objecta = new ContextAddr("<Object>", 0);
    objectP = registerProperty(objectP, objectPa, "constructor", lattice.abst1(objecta));
    var object = createPrimitive(objectConstructor);
    var objectppa = new ContextAddr(objecta, "prototype");
    object = object.add(U_PROTOTYPE, objectppa);
    store = store.allocAval(objectppa, OBJECTPA);
    var objectNa = new ContextAddr("Object", 0);
    global = global.add(userLattice.abst1("Object"), objectNa);
    store = store.allocAval(objectNa, lattice.abst1(objecta));
    object = registerPrimitiveFunction(object, objecta, "getPrototypeOf", objectGetPrototypeOf);
    object = registerPrimitiveFunction(object, objecta, "create", objectCreate);
    store = store.allocAval(objecta, object);
    store = store.allocAval(objectPa, objectP);
    var functiona = new ContextAddr("<Function>", 0);
    var functionP = registerProperty(functionP, functionPa, "constructor", lattice.abst1(functiona));
    var fun = createPrimitive(function() {
    });
    var funppa = new ContextAddr(functiona, "prototype");
    fun = fun.add(U_PROTOTYPE, funppa);
    store = store.allocAval(funppa, FUNCTIONPA);
    var functionNa = new ContextAddr("Function", 0);
    global = global.add(userLattice.abst1("Function"), functionNa);
    store = store.allocAval(functiona, fun);
    store = store.allocAval(functionNa, lattice.abst1(functiona));
    store = store.allocAval(functionPa, functionP);
    var arraya = new ContextAddr("<Array>", 0);
    var arrayP = registerProperty(arrayP, arrayPa, "constructor", lattice.abst1(arraya));
    var array = createPrimitive(arrayConstructor);
    var arrayppa = new ContextAddr(arraya, "prototype");
    array = array.add(U_PROTOTYPE, arrayppa);
    store = store.allocAval(arrayppa, ARRAYPA);
    var arrayNa = new ContextAddr("Array", 0);
    global = global.add(userLattice.abst1("Array"), arrayNa);
    store = store.allocAval(arraya, array);
    store = store.allocAval(arrayNa, lattice.abst1(arraya));
    arrayP = registerPrimitiveFunction(arrayP, arrayPa, "concat", arrayConcat);
    arrayP = registerPrimitiveFunction(arrayP, arrayPa, "push", arrayPush);
    arrayP = registerPrimitiveFunction(arrayP, arrayPa, "map", arrayMap);
    store = store.allocAval(arrayPa, arrayP);
    var mathap = new ContextAddr("Math", 0);
    global = global.add(userLattice.abst1("Math"), mathap);
    var matha = new ContextAddr("<Math>", 0);
    store = store.allocAval(mathap, lattice.abst1(matha));
    var math = createObject(OBJECTPA);
    math = registerPrimitiveFunction(math, matha, "sqrt", mathSqrt);
    store = store.allocAval(matha, math);
    global = global.add(U_THIS, GLOBALA);
    global = registerProperty(global, GLOBALA, "undefined", J_UNDEFINED);
    global = registerProperty(global, GLOBALA, "NaN", lattice.abst1(NaN));
    global = registerProperty(global, GLOBALA, "Infinity", lattice.abst1(Infinity));
    var metaFun = createPrimitive(meta);
    var metaa = new ContextAddr("$meta", 0);
    global = global.add(userLattice.abst1("$meta"), metaa);
    var metaFuna = new ContextAddr("metaFun", 0);
    store = store.allocAval(metaa, lattice.abst1(metaFuna));
    store = store.allocAval(metaFuna, metaFun);
    var avalFun = createPrimitive(aval);
    var avala = new ContextAddr("$aval", 0);
    global = global.add(userLattice.abst1("$aval"), avala);
    var avalFuna = new ContextAddr("avalFun", 0);
    store = store.allocAval(avala, lattice.abst1(avalFuna));
    store = store.allocAval(avalFuna, avalFun);
    store = store.allocAval(GLOBALA, global);
    function objectConstructor(application, operands, objectAddress, stack, benva, store, time, state) {
      var cont = stack[0];
      var stack2 = stack.slice(1);
      var obj = createObject(OBJECTPA);
      var allocResult = allocAval(objectAddress, obj, stack, store, state);
      store = allocResult.store;
      state = allocResult.state;
      return cont.execute(stack2.addFirst(lattice.abst1(objectAddress)), store, time, state)
    }
    function objectCreate(application, operands, objectAddress, stack, benva, store, time, state) {
      if(operands.length !== 1) {
        throw new Error("TODO");
      }
      var cont = stack[0];
      var stack2 = stack.slice(1);
      var obj = createObject(operands[0]);
      var address = ag.object(application, time);
      var allocResult = allocAval(address, obj, stack, store, state);
      store = allocResult.store;
      state = allocResult.state;
      return cont.execute(stack2.addFirst(lattice.abst1(address)), store, time, state)
    }
    function objectGetPrototypeOf(application, operands, objectAddress, stack, benva, store, time, state) {
      var cont = stack[0];
      var stack2 = stack.slice(1);
      var operand = operands[0];
      if(operand.user === BOT) {
        var addresses = operand.addresses();
        var object = addresses.map(store.lookupAval, store).reduce(Lattice.join);
        return cont.execute(stack2.addFirst(object.Prototype), store, time, state)
      }
      throw new Error("TODO");
    }
    function arrayConstructor(application, operands, objectAddress, stack, benva, store, time, state) {
      var cont = stack[0];
      var stack2 = stack.slice(1);
      var arrayBenv = createArray();
      var arrayAddress = ag.array(application, time);
      var l = operands[0];
      var lengthAddress = ag.objectProperty(arrayAddress, "length");
      arrayBenv = arrayBenv.add(U_LENGTH, lengthAddress);
      var allocResult = allocAval(lengthAddress, l, stack, store, state);
      allocResult = allocAval(arrayAddress, arrayBenv, stack, allocResult.store, allocResult.state);
      store = allocResult.store;
      state = allocResult.state;
      return cont.execute(stack2.addFirst(lattice.abst1(arrayAddress)), store, time, state)
    }
    function arrayPush(application, operands, objectAddress, stack, benva, store, time, state) {
      var cont = stack[0];
      var stack2 = stack.slice(1);
      var arg0aa = operands[0];
      var lookupResult = lookupAval(objectAddress, stack, store, state);
      var receiver = lookupResult.value;
      state = lookupResult.state;
      var lreceiveraa = receiver.lookup(U_LENGTH).addresses;
      if(lreceiveraa.length === 0) {
        var newPropertyAddress = ag.objectProperty(objectAddress, U_0.ToString());
        receiver = receiver.add(U_0.ToString(), newPropertyAddress);
        var allocResult = allocAval(newPropertyAddress, arg0aa, stack, store, state);
        store = allocResult.store;
        state = allocResult.state;
        var lengthPropertyAddress = ag.objectPropery(objectAddress, U_LENGTH);
        receiver = receiver.add(U_LENGTH, lengthPropertyAddress);
        allocResult = allocAval(lengthPropertyAddress, J_0, stack, store, state);
        store = allocResult.store;
        state = allocResult.state;
        var updateResult = sideEffectAval(objectAddress, receiver, stack, store, state);
        store = updateResult.store;
        state = updateResult.state;
        return cont.execute(stack2.addFirst(arg0aa), store, time, state)
      }else {
        var laResult = doLookupAddresses(lreceiveraa, stack, store, state);
        var lreceiveru = laResult.value.user;
        var newPropertyAddress = ag.objectProperty(objectAddress, lreceiveru.ToString());
        receiver = receiver.add(lreceiveru.ToString(), newPropertyAddress);
        var allocResult = allocAval(newPropertyAddress, arg0aa, stack, store, laResult.state);
        store = allocResult.store;
        state = allocResult.state;
        var updateResult = sideEffectAval(objectAddress, receiver, stack, store, state);
        store = updateResult.store;
        state = updateResult.state;
        var newLength = userLattice.add(lreceiveru, U_1);
        lreceiveraa.forEach(function(lengthAddress) {
          var updateResult = updateAval(lengthAddress, new JipdaValue(newLength, []), stack, store, state);
          store = updateResult.store;
          state = updateResult.state
        });
        return cont.execute(stack2.addFirst(arg0aa), store, time, state)
      }
    }
    function arrayConcat(application, operands, objectAddress, stack, benva, store, time, state) {
      var cont = stack[0];
      var stack2 = stack.slice(1);
      var arg0aa = operands[0];
      var lookupResult = lookupAval(objectAddress, stack, store, state);
      var receiver = lookupResult.value;
      state = lookupResult.state;
      var lreceiveraa = receiver.lookup(U_LENGTH).addresses;
      var laResult = doLookupAddresses(arg0aa.addresses(), stack, store, state);
      var arg0 = laResult.value;
      laResult = doLookupAddresses(lreceiveraa, stack, store, laResult.state);
      var lreceiveru = laResult.value.user;
      var larg0aa = arg0.lookup(U_LENGTH).addresses;
      laResult = doLookupAddresses(larg0aa, stack, store, laResult.state);
      var larg0 = laResult.value;
      var larg0u = larg0.user;
      var result = createArray();
      var resulta = ag.array(application, time);
      return arrayCopy(receiver, U_0, result, resulta, U_0, lreceiveru, stack, store, laResult.state, function(result, index, store, state) {
        return arrayCopy(arg0, U_0, result, resulta, index, larg0u, stack, store, state, function(result, index, store, state) {
          var lengthPropertya = ag.objectProperty(resulta, U_LENGTH);
          result = result.add(U_LENGTH, lengthPropertya);
          var allocResult = allocAval(lengthPropertya, new JipdaValue(index, []), stack, store, state);
          allocResult = allocAval(resulta, result, stack, allocResult.store, allocResult.state);
          store = allocResult.store;
          state = allocResult.state;
          return cont.execute(stack2.addFirst(lattice.abst1(resulta)), store, time, state)
        })
      })
    }
    function arrayMap(application, operands, thisa, stack, benva, store, time, state) {
      var lookupResult = lookupAval(thisa, stack, store, state);
      var receiver = lookupResult.value;
      state = lookupResult.state;
      var lena = receiver.lookup(U_LENGTH).addresses;
      var laResult = doLookupAddresses(lena, stack, store, state);
      var lenValue = laResult.value;
      state = laResult.state;
      function arrayMapToUInt32Cont() {
        return new Cont("arrayMapToUInt32-" + application.tag, benva, function(stack, store, time, state) {
          var lenPrim = stack[0].user;
          var t;
          if(operands[1]) {
            var thisas = operands[1].addresses();
            assertTrue(thisas.length === 1);
            t = thisas[0]
          }
          var arr = createArray();
          var arrAddr = ag.array(application, time);
          var lenPropAddr = ag.objectProperty(arrAddr, U_LENGTH);
          arr = arr.add(U_LENGTH, lenPropAddr);
          var allocResult = allocAval(lenPropAddr, new JipdaValue(lenPrim, []), stack, store, state);
          store = allocResult.store;
          state = allocResult.state;
          var k = U_0;
          function arrayMapCont(k, arr, arrAddr) {
            return new Cont("arrayMap-" + application.tag, benva, function(stack, store, time, state) {
              var value = stack[0];
              var valuePropAddr = ag.objectProperty(arrAddr, k.ToString());
              arr = arr.add(k.ToString(), valuePropAddr);
              var allocResult = allocAval(valuePropAddr, value, stack, store, state);
              store = allocResult.store;
              state = allocResult.state;
              k = userLattice.add(k, U_1);
              while(userLattice.isTrue(userLattice.lt(k, lenPrim))) {
                var indexAs = receiver.lookup(k.ToString()).addresses;
                if(indexAs.length > 0) {
                  var laResult = doLookupAddresses(indexAs, stack, store, state);
                  var indexValue = laResult.value;
                  state = laResult.state;
                  var stack2 = stack.slice(1);
                  return applyProc2(application, operands[0].addresses(), [indexValue, k, thisa], t, stack2.addFirst(arrayMapCont(k, arr, arrAddr)), benva, store, time, state)
                }
                k = userLattice.add(k, U_1)
              }
              var cont = stack[1];
              var stack2 = stack.slice(2);
              allocResult = allocAval(arrAddr, arr, stack, store, state);
              return cont.execute(stack2.addFirst(new JipdaValue(BOT, [arrAddr])), allocResult.store, time, allocResult.state)
            })
          }
          while(userLattice.isTrue(userLattice.lt(k, lenPrim))) {
            var indexAs = receiver.lookup(k.ToString()).addresses;
            if(indexAs.length > 0) {
              var laResult = doLookupAddresses(indexAs, stack, store, state);
              var indexValue = laResult.value;
              state = laResult.state;
              var stack2 = stack.slice(1);
              return applyProc2(application, operands[0].addresses(), [indexValue, k, thisa], t, stack2.addFirst(arrayMapCont(k, arr, arrAddr)), benva, store, time, state)
            }
            k = userLattice.add(k, U_1)
          }
          var cont = stack[1];
          var stack2 = stack.slice(2);
          allocResult = allocAval(arrAddr, arr, stack, store, state);
          return cont.execute(stack2.addFirst(new JipdaValue(BOT, [arrAddr])), allocResult.store, time, allocResult.state)
        })
      }
      return ToUInt32(lenValue, application, stack.addFirst(arrayMapToUInt32Cont()), benva, store, time, state)
    }
    function mathSqrt(application, operands, objectAddress, stack, benva, store, time, state) {
      var cont = stack[0];
      var stack2 = stack.slice(1);
      var u = toUserNumber(operands[0], store);
      var r = userLattice.sqrt(u);
      var j = new JipdaValue(r, []);
      return cont.execute(stack2.addFirst(j), store, time, state)
    }
    function meta(application, operands, objectAddress, stack, benva, store, time, state) {
      var cont = stack[0];
      var stack2 = stack.slice(1);
      var str = operands[0].conc()[0];
      var value = lattice.abst1(eval(str));
      return cont.execute(stack2.addFirst(value), store, time, state)
    }
    function aval(application, operands, objectAddress, stack, benva, store, time, state) {
      var cont = stack[0];
      var stack2 = stack.slice(1);
      var value = operands.reduce(Lattice.join, BOT);
      return cont.execute(stack2.addFirst(value), store, time, state)
    }
    function arrayCopy(srcBenv, srcPos, dstBenv, dsta, dstPos, l, stack, store, state, fcont) {
      var i = U_0;
      while(userLattice.isTrue(userLattice.lt(i, l))) {
        var srcvalueaa = srcBenv.lookup(userLattice.add(i, srcPos).ToString()).addresses;
        var laResult = doLookupAddresses(srcvalueaa, stack, store, state);
        var srcvalue = laResult.value;
        var dstName = userLattice.add(i, dstPos).ToString();
        var dstindexa = ag.objectProperty(dsta, dstName);
        dstBenv = dstBenv.add(dstName, dstindexa);
        var allocResult = allocAval(dstindexa, srcvalue, stack, store, laResult.state);
        store = allocResult.store;
        state = allocResult.state;
        i = userLattice.add(i, U_1)
      }
      return fcont(dstBenv, userLattice.add(i, dstPos), store, state)
    }
    return store
  }
  function init() {
    var store0 = new Store;
    store0 = createGlobal(store0);
    var replCont = new Cont("repl", GLOBALA, function(stack, store, time, state) {
      var value = stack[0];
      var stack2 = stack.slice(1);
      var printer = new ConcretePrinter(userLattice, store);
      print(value.accept(printer));
      putstr("> ");
      var src = readline();
      if(":q".equals(src)) {
        print("Bye!");
        return[]
      }
      try {
        var node = createAst(src);
        return evalNode(node, stack2.addFirst(replCont), GLOBALA, store, time, state)
      }catch(e) {
        print(e);
        print(e.stack);
        return replCont.execute(stack2.addFirst(BOT), store, time, state)
      }
    });
    var time0 = new Time;
    if(node0) {
      var exitCont = new Cont("exit-" + node0.tag, GLOBALA, function(stack, store, time, state) {
        var state2 = state.returnsResult(stack[0], store);
        result = result.join(state2);
        return[]
      });
      tasks = [new Task("eval", function() {
        return evalNode(node0, [exitCont], GLOBALA, store0, time0, state0)
      })]
    }else {
      tasks = [new Task("repl", function() {
        return evalNode(createAst("'I am JIPDA'"), [replCont], GLOBALA, store0, time0, state0)
      })]
    }
    return store0
  }
  var store0 = init();
  taskRunner();
  return{result:result, lattice:lattice, globala:GLOBALA, globalStore:store0}
}
function jipdaRepl(k, n) {
  var lat = new LatN(n === undefined ? 1 : n);
  try {
    ipdaEval(null, new State, {k:k || 4, lattice:lat, ag:timeDefaultAg})
  }catch(e) {
    print(e);
    print(e.stack)
  }
}
function concRepl(k, n) {
  var lat = new CpLattice;
  var concreteVisited = {};
  concreteVisited.visited = function(node, stack, benva, store, time) {
    return store
  };
  try {
    ipdaEval(null, new State, {k:0, lattice:lat, ag:concreteAg, visited:concreteVisited})
  }catch(e) {
    print(e);
    print(e.stack)
  }
}
function createJipdaPrinter(lattice, store) {
  return function jipdaPrinter(el) {
    if(el === undefined) {
      return"undefined"
    }
    if(el === null) {
      return"null"
    }
    if(el instanceof Addr) {
      var aval = store.lookupAval(el);
      if(aval.isBenv) {
        if(aval.isArray()) {
          var i = lattice.abst1(0);
          var las = aval.lookup(lattice.abst1("length")).addresses;
          var l = las.map(store.lookupAval, store).reduce(Lattice.join, BOT).user;
          var result = [];
          while(lattice.isTrue(lattice.lt(i, l))) {
            var ias = aval.lookup(i.ToString()).addresses;
            var v = ias.map(store.lookupAval, store).reduce(Lattice.join, BOT);
            result = result.addLast(v.toString(jipdaPrinter));
            i = lattice.add(i, lattice.abst1(1))
          }
          return result.toString()
        }
        return"<" + aval.Class + ">"
      }
      return aval.toString(jipdaPrinter)
    }
    return el.toString()
  }
}
;goog.provide("jipdaast");
function nodeToString(node) {
  if(node === null) {
    return""
  }
  switch(node.type) {
    case "Literal":
      return"" + node.value;
    case "Identifier":
      return node.name;
    case "BinaryExpression":
    ;
    case "LogicalExpression":
      return nodeToString(node.left) + node.operator + nodeToString(node.right);
    case "CallExpression":
      return nodeToString(node.callee) + "(" + node.arguments.map(nodeToString).join() + ")";
    case "FunctionExpression":
      return"function (" + node.params.map(nodeToString).join() + ") " + nodeToString(node.body);
    case "LetExpression":
      return"let (" + node.head.map(nodeToString).join() + ") " + nodeToString(node.body);
    case "AssignmentExpression":
      return nodeToString(node.left) + node.operator + nodeToString(node.right);
    case "ArrayExpression":
      return"[" + node.elements.map(nodeToString).join(",") + "]";
    case "MemberExpression":
      if(node.computed) {
        return nodeToString(node.object) + "[" + nodeToString(node.property) + "]"
      }else {
        return nodeToString(node.object) + "." + nodeToString(node.property)
      }
    ;
    case "ObjectExpression":
      return"{" + node.properties.map(nodeToString).join(",") + "}";
    case "ThisExpression":
      return"this";
    case "NewExpression":
      return"new " + nodeToString(node.callee) + "(" + node.arguments.map(nodeToString).join() + ")";
    case "UpdateExpression":
      return node.prefix ? node.operator + nodeToString(node.argument) : nodeToString(node.argument) + node.operator;
    case "UnaryExpression":
      return node.operator + nodeToString(node.argument);
    case "ExpressionStatement":
      return nodeToString(node.expression) + ";";
    case "ReturnStatement":
      if(node.argument === null) {
        return"return;"
      }
      return"return " + nodeToString(node.argument) + ";";
    case "BreakStatement":
      if(node.label) {
        return"break " + nodeToString(node.label) + ";"
      }
      return"break;";
    case "LabeledStatement":
      return nodeToString(node.label) + ":" + nodeToString(node.body);
    case "IfStatement":
      if(node.alternate === null) {
        return"if (" + nodeToString(node.test) + ") " + nodeToString(node.consequent)
      }else {
        return"if (" + nodeToString(node.test) + ") " + nodeToString(node.consequent) + " " + nodeToString(node.alternate)
      }
    ;
    case "ConditionalExpression":
      return nodeToString(node.test) + " ? " + nodeToString(node.consequent) + " " + nodeToString(node.alternate);
    case "SwitchStatement":
      return"switch (" + nodeToString(node.discriminant) + ") {" + (node.cases ? node.cases.map(nodeToString).join("") : "") + "}";
    case "SwitchCase":
      if(node.test === null) {
        return"default: " + node.consequent.map(nodeToString).join(" ")
      }
      return"case " + nodeToString(node.test) + ": " + node.consequent.map(nodeToString).join(" ");
    case "WhileStatement":
      return"while (" + nodeToString(node.test) + ") " + nodeToString(node.body);
    case "DoWhileStatement":
      return"do " + nodeToString(node.body) + " while (" + nodeToString(node.test) + ")";
    case "ForStatement":
      return"for (" + nodeToString(node.init) + ";" + nodeToString(node.test) + ";" + nodeToString(node.update) + ") " + nodeToString(node.body) + ";";
    case "FunctionDeclaration":
      return"function " + nodeToString(node.id) + "(" + node.params.map(nodeToString).join() + ") " + nodeToString(node.body) + ";";
    case "VariableDeclaration":
      return node.kind + " " + node.declarations.map(nodeToString).join() + ";";
    case "VariableDeclarator":
      return nodeToString(node.id) + (node.init ? "=" + nodeToString(node.init) : "");
    case "Property":
      return nodeToString(node.key) + ":" + nodeToString(node.value);
    case "Program":
      return node.body.map(nodeToString).join(" ");
    case "BlockStatement":
      return"{" + node.body.map(nodeToString).join(" ") + "}";
    case "TryStatement":
      return"try " + nodeToString(node.block) + " " + node.handlers.map(nodeToString).join(" ");
    case "CatchClause":
      return"catch (" + nodeToString(node.param) + ") " + nodeToString(node.body);
    case "ThrowStatement":
      return"throw " + nodeToString(node.argument);
    case "EmptyStatement":
      return";";
    default:
      throw new Error("nodeToString: cannot handle " + node.type);
  }
}
function isIdentifier(n) {
  return n.type === "Identifier"
}
function isObjectExpression(n) {
  return n.type === "ObjectExpression"
}
function isReturnStatement(n) {
  return n.type === "ReturnStatement"
}
function isBreakStatement(n) {
  return n.type === "BreakStatement"
}
function isLabeledStatement(n) {
  return n.type === "LabeledStatement"
}
function isCallExpression(n) {
  return n.type === "CallExpression"
}
function isVariableDeclaration(n) {
  return n.type === "VariableDeclaration"
}
function isVariableDeclarator(n) {
  return n.type === "VariableDeclarator"
}
function isAssignmentExpression(n) {
  return n.type === "AssignmentExpression"
}
function isBinaryExpression(n) {
  return n.type === "BinaryExpression"
}
function isLogicalExpression(n) {
  return n.type === "BinaryExpression"
}
function isUnaryExpression(n) {
  return n.type === "UnaryExpression"
}
function isFunctionExpression(n) {
  return n.type === "FunctionExpression"
}
function isNewExpression(n) {
  return n.type === "NewExpression"
}
function isFunctionDeclaration(n) {
  return n.type === "FunctionDeclaration"
}
function isProgram(n) {
  return n.type === "Program"
}
function isBlockStatement(n) {
  return n.type === "BlockStatement"
}
function isThisExpression(n) {
  return n.type === "ThisExpression"
}
function isMemberExpression(n) {
  return n.type === "MemberExpression"
}
function isUpdateExpression(n) {
  return n.type === "UpdateExpression"
}
function isTryStatement(n) {
  return n.type === "TryStatement"
}
function isCatchClause(n) {
  return n.type === "CatchClause"
}
function isIfStatement(n) {
  return n.type === "IfStatement"
}
function isConditionalExpression(n) {
  return n.type === "ConditionalExpression"
}
function isSwitchStatement(n) {
  return n.type === "SwitchStatement"
}
function children(node) {
  switch(node.type) {
    case "Literal":
    ;
    case "Identifier":
      return[];
    case "BinaryExpression":
    ;
    case "LogicalExpression":
      return[node.left, node.right];
    case "CallExpression":
      return[node.callee].concat(node.arguments);
    case "FunctionExpression":
      return node.params.concat([node.body]);
    case "LetExpression":
      return node.head.concat([node.body]);
    case "AssignmentExpression":
      return[node.left, node.right];
    case "ArrayExpression":
      return node.elements;
    case "MemberExpression":
      return[node.object, node.property];
    case "ObjectExpression":
      return node.properties;
    case "ExpressionStatement":
      return[node.expression];
    case "ThisExpression":
      return[];
    case "NewExpression":
      return[node.callee].concat(node.arguments);
    case "UpdateExpression":
      return[node.argument];
    case "UnaryExpression":
      return[node.argument];
    case "ReturnStatement":
      if(node.argument === null) {
        return[]
      }
      return[node.argument];
    case "BreakStatement":
      if(node.label === null) {
        return[]
      }
      return[node.label];
    case "LabeledStatement":
      return[node.label, node.body];
    case "IfStatement":
      if(node.alternate === null) {
        return[node.test, node.consequent]
      }
      return[node.test, node.consequent, node.alternate];
    case "ConditionalExpression":
      return[node.test, node.consequent, node.alternate];
    case "SwitchStatement":
      if(node.cases) {
        return[node.discriminant].concat(node.cases.flatMap(children))
      }
      return[node.discriminant];
    case "SwitchCase":
      if(node.test) {
        return[node.test].concat(node.consequent)
      }
      return node.consequent;
    case "WhileStatement":
      return[node.test, node.body];
    case "DoWhileStatement":
      return[node.body, node.test];
    case "ForStatement":
      return[node.init, node.test, node.update, node.body];
    case "FunctionDeclaration":
      return[node.id].concat(node.params).concat([node.body]);
    case "VariableDeclaration":
      return node.declarations;
    case "VariableDeclarator":
      if(node.init === null) {
        return[node.id]
      }
      return[node.id, node.init];
    case "Property":
      return[node.key, node.value];
    case "Program":
    ;
    case "BlockStatement":
      return node.body;
    case "TryStatement":
      return[node.block].concat(node.handlers);
    case "CatchClause":
      return[node.param, node.body];
    case "ThrowStatement":
      return[node.argument];
    case "EmptyStatement":
      return[];
    default:
      throw new Error("children: cannot handle " + node);
  }
}
function descendants(n) {
  if(Array.isArray(n)) {
    return n.flatMap(descendants)
  }else {
    var cs = children(n);
    return cs.concat(descendants(cs))
  }
}
function nodes(n) {
  if(Array.isArray(n)) {
    return n.flatMap(nodes)
  }else {
    return[n].concat(nodes(children(n)))
  }
}
function printTree(n) {
  nodes(n).forEach(function(n) {
    var props = [];
    for(var name in n) {
      if(n.hasOwnProperty(name) && name !== "loc" && name != "tag" && name != "toString") {
        props = props.addLast(name)
      }
    }
    print(nodeToString(n) + "\t#" + n.tag)
  })
}
var __nodeCounter__ = 0;
function tagNode(node) {
  node.tag = ++__nodeCounter__
}
var __symCounter__ = 0;
function gensym(prefix) {
  return prefix + ++__symCounter__
}
function createAst(source, context) {
  function visitNode(node) {
    function toString() {
      return nodeToString(this)
    }
    function nodify(x) {
      tagNode(x);
      x.toString = toString
    }
    function doVisit(node) {
      if(node === null) {
        return
      }
      nodify(node);
      var cs = children(node);
      cs.forEach(function(child) {
        doVisit(child, node)
      })
    }
    doVisit(node)
  }
  var ast = esprima.parse(source, {loc:false});
  if(context === "Expression") {
    if(ast.body.length !== 1) {
      throw new Error("createAst: expected single expression, got " + ast.body);
    }
    if(!ast.body[0].hasOwnProperty("expression")) {
      throw new Error("createAst: expected expression, got " + ast.body[0].type);
    }
    ast = ast.body[0].expression
  }else {
    if(context === "Statement") {
      if(ast.body.length !== 1) {
        throw new Error("createAst: expected single statement, got " + ast.body);
      }
      ast = ast.body[0]
    }
  }
  visitNode(ast);
  return ast
}
function tagToNode(tag, ast) {
  var ns = nodes(ast).filter(function(node) {
    return node.tag === tag
  });
  if(ns.length === 1) {
    return ns[0]
  }
  throw new Error("for tag " + tag + " got " + ns);
}
function isChild(node, parent) {
  return children(parent).indexOf(node) > -1
}
function parent(node, ast) {
  var cs = children(ast);
  if(cs.indexOf(node) > -1) {
    return ast
  }
  for(var i = 0;i < cs.length;i++) {
    if(p = parent(node, cs[i])) {
      return p
    }
  }
  return false
}
function isDeclarationIdentifier(n, ast) {
  if(isIdentifier(n)) {
    var p = parent(n, ast);
    return isVariableDeclarator(p) || isFunctionExpression(p) || isFunctionDeclaration(p) || isCatchClause(p)
  }
  return false
}
function isVarDeclarationIdentifier(n, ast) {
  if(isIdentifier(n)) {
    var p = parent(n, ast);
    if(isVariableDeclarator(p)) {
      var pp = parent(p, ast);
      return pp.kind === "var"
    }
    return isFunctionExpression(p) || isFunctionDeclaration(p)
  }
  return false
}
function isConstDeclarationIdentifier(n, ast) {
  if(isIdentifier(n)) {
    var p = parent(n, ast);
    if(isVariableDeclarator(p)) {
      var pp = parent(p, ast);
      return pp.kind === "const"
    }
  }
  return false
}
function isAssignedIdentifier(n, ast) {
  if(isIdentifier(n)) {
    var p = parent(n, ast);
    if(isAssignmentExpression(p)) {
      return p.left === n
    }
  }
  return false
}
function isReferenceIdentifier(n, ast) {
  if(isIdentifier(n)) {
    var p = parent(n, ast);
    if(isAssignmentExpression(p)) {
      return p.left !== n
    }
    return!(isVariableDeclarator(p) || isFunctionExpression(p) || isFunctionDeclaration(p) || isCatchClause(p))
  }
  return false
}
function enclosingBlock(node, ast) {
  var p = parent(node, ast);
  while(p) {
    if(isBlockStatement(p) || isProgram(p)) {
      return p
    }
    p = parent(p, ast)
  }
  return false
}
function enclosingFunction(node, ast) {
  var p = parent(node, ast);
  while(p) {
    if(isFunctionExpression(p) || isFunctionDeclaration(p)) {
      return p
    }
    p = parent(p, ast)
  }
  return false
}
function scopeChain(node, ast) {
  function varsInFunctionScope(node, vars) {
    switch(node.type) {
      case "VariableDeclaration":
        if(node.kind === "var") {
          node.declarations.forEach(function(declaration) {
            vars = vars.addLast(declaration.id)
          })
        }
        break;
      case "FunctionExpression":
        return vars;
      case "FunctionDeclaration":
        return vars.addLast(node.id)
    }
    var cs = children(node);
    for(var i = 0;i < cs.length;i++) {
      vars = varsInFunctionScope(cs[i], vars)
    }
    return vars
  }
  function varsInBlockScope(blockStatement) {
    var vars = [];
    var cs = children(blockStatement);
    for(var i = 0;i < cs.length;i++) {
      var node = cs[i];
      if(isVariableDeclaration(node) && (node.kind === "let" || node.kind === "const")) {
        node.declarations.forEach(function(declaration) {
          vars = vars.addLast(declaration.id)
        })
      }
    }
    return vars
  }
  function upVars(node, vars) {
    var p = parent(node, ast);
    if(!p) {
      return vars
    }
    switch(p.type) {
      case "ForStatement":
        var init1 = p.init;
        var letVars1 = [];
        if(isVariableDeclaration(init1) && init1.kind === "let") {
          init1.declarations.forEach(function(declaration) {
            letVars1 = letVars1.addLast(declaration.id)
          })
        }
        vars = vars.addLast(letVars1);
        break;
      case "BlockStatement":
        var blockScopeVars2 = varsInBlockScope(p);
        blockScopeVars2.kind = "block";
        vars = vars.addLast(blockScopeVars2);
        break;
      case "FunctionExpression":
      ;
      case "FunctionDeclaration":
        var funScopeVars3 = varsInFunctionScope(p.body, p.params.slice(0));
        funScopeVars3.kind = "fun";
        vars = vars.addLast(funScopeVars3);
        break;
      case "CatchClause":
        var catchClauseVars = varsInFunctionScope(p.body, [p.param]);
        catchClauseVars.kind = "catch";
        vars = vars.addLast(catchClauseVars);
        break;
      case "LetExpression":
        if(!isVariableDeclarator(node)) {
          var letScopeVars4 = p.head.map(function(decl) {
            return decl.id
          });
          letScopeVars4.kind = "let";
          vars = vars.addLast(letScopeVars4)
        }
        break;
      case "Program":
        var funScopeVars5 = varsInFunctionScope(p, []);
        funScopeVars5 = funScopeVars5.concat(varsInBlockScope(p));
        funScopeVars5.kind = "fun";
        vars = vars.addLast(funScopeVars5);
        break
    }
    return upVars(p, vars)
  }
  return upVars(node, [])
}
function lookupDeclarationIdentifier(name, node, ast) {
  var vars = scopeChain(node, ast).flatten().filter(function(n) {
    return name === n.name
  });
  if(vars.length == 0) {
    return false
  }else {
    return vars[0]
  }
}
function lookupNodeDeclarationIdentifier(node, ast) {
  return lookupDeclarationIdentifier(node.name, node, ast)
}
function declarationIdentifierKind(n, ast) {
  var p = parent(n, ast);
  if(isVariableDeclarator(p)) {
    var pp = parent(p, ast);
    return pp.kind
  }
  if(isFunctionDeclaration(p) || isFunctionExpression(p)) {
    return"var"
  }
  throw new Error("expected declaration identifier, got " + n);
}
function isConstReferenceIdentifier(n, ast) {
  if(isReferenceIdentifier(n, ast)) {
    var id = lookupDeclarationIdentifier(n.name, n, ast);
    return"const" === declarationIdentifierKind(id, ast)
  }
  return false
}
function isVarReferenceIdentifier(n, ast) {
  if(isReferenceIdentifier(n, ast)) {
    var id = lookupDeclarationIdentifier(n.name, n, ast);
    return"var" === declarationIdentifierKind(id, ast)
  }
  return false
}
function lookupRefVars(n, ast) {
  function doLookupRefVars(n) {
    if(isReferenceIdentifier(n, ast)) {
      var vr = lookupDeclarationIdentifier(n.name, n, ast);
      if(vr) {
        return[vr]
      }
      return[]
    }else {
      if(n.type === "FunctionDeclaration") {
        var vr = lookupDeclarationIdentifier(n.id.name, n, ast);
        if(vr) {
          return[vr]
        }
        return[]
      }
    }
    var cs = children(n).filter(function(c) {
      return c.type !== "FunctionExpression" && c.type !== "FunctionDeclaration"
    });
    return cs.flatMap(doLookupRefVars)
  }
  return doLookupRefVars(n)
}
function lookupAssignmentVars(n, ast) {
  function doLookupAssignmentVars(n) {
    if(isAssignmentExpression(n) && isIdentifier(n.left)) {
      var vr = lookupDeclarationIdentifier(n.left.name, n, ast);
      if(vr) {
        return doLookupAssignmentVars(n.right).addFirst(vr)
      }
      return doLookupAssignmentVars(n.right)
    }else {
      if(isUpdateExpression(n) && isIdentifier(n.argument)) {
        var vr = lookupDeclarationIdentifier(n.argument.name, n, ast);
        if(vr) {
          return[vr]
        }
        return doLookupAssignmentVars(n.argument)
      }
    }
    var cs = children(n).filter(function(c) {
      return c.type !== "FunctionExpression" && c.type !== "FunctionDeclaration"
    });
    return cs.flatMap(doLookupAssignmentVars)
  }
  return doLookupAssignmentVars(n)
}
function filterNodesParse(ns, text, context) {
  text = text.trim();
  var target = createAst(text, context).toString();
  var result = [];
  for(var i = 0;i < ns.length;i++) {
    var nsi = ns[i];
    if(target.equals(nsi.toString())) {
      result = result.addLast(nsi)
    }
  }
  return result
}
function filterNodesText(ns, text) {
  var target = text.trim();
  var result = [];
  for(var i = 0;i < ns.length;i++) {
    var nsi = ns[i];
    if(nsi.toString().startsWith(target)) {
      result = result.addLast(nsi)
    }
  }
  return result
}
function $$$(ns, ast) {
  return new AstQuery(ns, ast)
}
function AstQuery(ns, ast) {
  if(Array.isArray(ns)) {
    this.ns = ns;
    if(!ast) {
      throw new Error("ast required when passing array of nodes");
    }
    this.ast = ast
  }else {
    this.ns = [ns];
    this.ast = ast || ns
  }
}
AstQuery.prototype.toArray = function() {
  return this.ns.slice(0)
};
AstQuery.prototype.toNode = function() {
  if(this.ns.length !== 1) {
    throw new Error("AstQuery.toNode: expected 1 node, got " + this.ns.length);
  }
  return this.ns[0]
};
AstQuery.prototype.toString = function() {
  return this.ns.toString()
};
AstQuery.prototype.children = function() {
  return $$$(this.ns.flatMap(children), this.ast)
};
AstQuery.prototype.descendants = function() {
  return $$$(descendants(this.ns), this.ast)
};
AstQuery.prototype.nodes = function() {
  return $$$(nodes(this.ns), this.ast)
};
AstQuery.prototype.filter = function(pred_n, name) {
  var result = this.ns.filter(pred_n(this.ast));
  if(name) {
    result = result.filter(hasName_n(name))
  }
  return $$$(result, this.ast)
};
function isFunctionExpression_n(ast) {
  return function(n) {
    return isFunctionExpression(n, ast)
  }
}
function isDeclarationIdentifier_n(ast) {
  return function(n) {
    return isDeclarationIdentifier(n, ast)
  }
}
function isVarDeclarationIdentifier_n(ast) {
  return function(n) {
    return isVarDeclarationIdentifier(n, ast)
  }
}
function isConstDeclarationIdentifier_n(ast) {
  return function(n) {
    return isConstDeclarationIdentifier(n, ast)
  }
}
function isReferenceIdentifier_n(ast) {
  return function(n) {
    return isReferenceIdentifier(n, ast)
  }
}
function isConstReferenceIdentifier_n(ast) {
  return function(n) {
    return isConstReferenceIdentifier(n, ast)
  }
}
function isVarReferenceIdentifier_n(ast) {
  return function(n) {
    return isConstReferenceIdentifier(n, ast)
  }
}
function hasName_n(name) {
  return function(n) {
    return name.equals(n.name)
  }
}
AstQuery.prototype.filterDeclarationIdentifiers = function(name) {
  return this.filter(isDeclarationIdentifier_n, name)
};
AstQuery.prototype.findDeclarationIdentifiers = function(name) {
  return this.nodes().filterDeclarationIdentifiers(name)
};
AstQuery.prototype.filterConstDeclarationIdentifiers = function(name) {
  return this.filter(isConstDeclarationIdentifier_n, name)
};
AstQuery.prototype.findConstDeclarationIdentifiers = function(name) {
  return this.nodes().filterConstDeclarationIdentifiers(name)
};
AstQuery.prototype.filterVarDeclarationIdentifiers = function(name) {
  return this.filter(isVarDeclarationIdentifier_n, name)
};
AstQuery.prototype.findVarDeclarationIdentifiers = function(name) {
  return this.nodes().filterVarDeclarationIdentifiers(name)
};
AstQuery.prototype.filterReferenceIdentifiers = function(name) {
  return this.filter(isReferenceIdentifier_n, name)
};
AstQuery.prototype.findReferenceIdentifiers = function(name) {
  return this.nodes().filterReferenceIdentifiers(name)
};
AstQuery.prototype.filterConstReferenceIdentifiers = function(name) {
  return this.filter(isConstReferenceIdentifier_n, name)
};
AstQuery.prototype.findConstReferenceIdentifiers = function(name) {
  return this.nodes().filterConstReferenceIdentifiers(name)
};
AstQuery.prototype.filterVarReferenceIdentifiers = function(name) {
  return this.filter(isVarReferenceIdentifier_n, name)
};
AstQuery.prototype.findVarReferenceIdentifiers = function(name) {
  return this.nodes().filterVarReferenceIdentifiers(name)
};
AstQuery.prototype.withName = function(name) {
  return $$$(this.ns.filter(hasName_n(name)), this.ast)
};
AstQuery.prototype.findExpression = function(text) {
  return $$$(filterNodesParse(nodes(this.ns), text, "Expression"), this.ast)
};
AstQuery.prototype.findText = function(text) {
  return $$$(filterNodesText(nodes(this.ns), text), this.ast)
};
AstQuery.prototype.varsWithName = function(name) {
  return $$$(nodes(this.ns).filter(isVarDeclarationIdentifier_n(this.ast)).filter(hasName_n(name)), this.ast)
};
AstQuery.prototype.functionDeclarationsWithName = function(name) {
  return $$$(nodes(this.ns).filter(isFunctionDeclaration).filter(function(n) {
    return n.id.name === name
  }), this.ast)
};
AstQuery.prototype.functionExpressions = function() {
  return $$$(nodes(this.ns).filter(isFunctionExpression), this.ast)
};
AstQuery.prototype.newExpressions = function() {
  return $$$(nodes(this.ns).filter(isNewExpression), this.ast)
};
goog.provide("esco");
var escodegen = {};
var Syntax, Precedence, BinaryPrecedence, Regex, VisitorKeys, VisitorOption, SourceNode, isArray, base, indent, json, renumber, hexadecimal, quotes, escapeless, newline, space, parentheses, semicolons, safeConcatenation, directive, extra, parse, sourceMap;
Syntax = {AssignmentExpression:"AssignmentExpression", ArrayExpression:"ArrayExpression", ArrayPattern:"ArrayPattern", BlockStatement:"BlockStatement", BinaryExpression:"BinaryExpression", BreakStatement:"BreakStatement", CallExpression:"CallExpression", CatchClause:"CatchClause", ComprehensionBlock:"ComprehensionBlock", ComprehensionExpression:"ComprehensionExpression", ConditionalExpression:"ConditionalExpression", ContinueStatement:"ContinueStatement", DirectiveStatement:"DirectiveStatement", 
DoWhileStatement:"DoWhileStatement", DebuggerStatement:"DebuggerStatement", EmptyStatement:"EmptyStatement", ExpressionStatement:"ExpressionStatement", ForStatement:"ForStatement", ForInStatement:"ForInStatement", FunctionDeclaration:"FunctionDeclaration", FunctionExpression:"FunctionExpression", Identifier:"Identifier", IfStatement:"IfStatement", Literal:"Literal", LabeledStatement:"LabeledStatement", LogicalExpression:"LogicalExpression", MemberExpression:"MemberExpression", NewExpression:"NewExpression", 
ObjectExpression:"ObjectExpression", ObjectPattern:"ObjectPattern", Program:"Program", Property:"Property", ReturnStatement:"ReturnStatement", SequenceExpression:"SequenceExpression", SwitchStatement:"SwitchStatement", SwitchCase:"SwitchCase", ThisExpression:"ThisExpression", ThrowStatement:"ThrowStatement", TryStatement:"TryStatement", UnaryExpression:"UnaryExpression", UpdateExpression:"UpdateExpression", VariableDeclaration:"VariableDeclaration", VariableDeclarator:"VariableDeclarator", WhileStatement:"WhileStatement", 
WithStatement:"WithStatement", YieldExpression:"YieldExpression"};
Precedence = {Sequence:0, Assignment:1, Conditional:2, LogicalOR:3, LogicalAND:4, BitwiseOR:5, BitwiseXOR:6, BitwiseAND:7, Equality:8, Relational:9, BitwiseSHIFT:10, Additive:11, Multiplicative:12, Unary:13, Postfix:14, Call:15, New:16, Member:17, Primary:18};
BinaryPrecedence = {"||":Precedence.LogicalOR, "&&":Precedence.LogicalAND, "|":Precedence.BitwiseOR, "^":Precedence.BitwiseXOR, "&":Precedence.BitwiseAND, "==":Precedence.Equality, "!=":Precedence.Equality, "===":Precedence.Equality, "!==":Precedence.Equality, "is":Precedence.Equality, "isnt":Precedence.Equality, "<":Precedence.Relational, ">":Precedence.Relational, "<=":Precedence.Relational, ">=":Precedence.Relational, "in":Precedence.Relational, "instanceof":Precedence.Relational, "<<":Precedence.BitwiseSHIFT, 
">>":Precedence.BitwiseSHIFT, ">>>":Precedence.BitwiseSHIFT, "+":Precedence.Additive, "-":Precedence.Additive, "*":Precedence.Multiplicative, "%":Precedence.Multiplicative, "/":Precedence.Multiplicative};
Regex = {NonAsciiIdentifierPart:new RegExp("[\u00aa\u00b5\u00ba\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0300-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u0483-\u0487\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u05d0-\u05ea\u05f0-\u05f2\u0610-\u061a\u0620-\u0669\u066e-\u06d3\u06d5-\u06dc\u06df-\u06e8\u06ea-\u06fc\u06ff\u0710-\u074a\u074d-\u07b1\u07c0-\u07f5\u07fa\u0800-\u082d\u0840-\u085b\u08a0\u08a2-\u08ac\u08e4-\u08fe\u0900-\u0963\u0966-\u096f\u0971-\u0977\u0979-\u097f\u0981-\u0983\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bc-\u09c4\u09c7\u09c8\u09cb-\u09ce\u09d7\u09dc\u09dd\u09df-\u09e3\u09e6-\u09f1\u0a01-\u0a03\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a59-\u0a5c\u0a5e\u0a66-\u0a75\u0a81-\u0a83\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abc-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ad0\u0ae0-\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3c-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b5c\u0b5d\u0b5f-\u0b63\u0b66-\u0b6f\u0b71\u0b82\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd0\u0bd7\u0be6-\u0bef\u0c01-\u0c03\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c58\u0c59\u0c60-\u0c63\u0c66-\u0c6f\u0c82\u0c83\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbc-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0cde\u0ce0-\u0ce3\u0ce6-\u0cef\u0cf1\u0cf2\u0d02\u0d03\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d-\u0d44\u0d46-\u0d48\u0d4a-\u0d4e\u0d57\u0d60-\u0d63\u0d66-\u0d6f\u0d7a-\u0d7f\u0d82\u0d83\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0df2\u0df3\u0e01-\u0e3a\u0e40-\u0e4e\u0e50-\u0e59\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb9\u0ebb-\u0ebd\u0ec0-\u0ec4\u0ec6\u0ec8-\u0ecd\u0ed0-\u0ed9\u0edc-\u0edf\u0f00\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e-\u0f47\u0f49-\u0f6c\u0f71-\u0f84\u0f86-\u0f97\u0f99-\u0fbc\u0fc6\u1000-\u1049\u1050-\u109d\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u135d-\u135f\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176c\u176e-\u1770\u1772\u1773\u1780-\u17d3\u17d7\u17dc\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u1820-\u1877\u1880-\u18aa\u18b0-\u18f5\u1900-\u191c\u1920-\u192b\u1930-\u193b\u1946-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u19d0-\u19d9\u1a00-\u1a1b\u1a20-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1aa7\u1b00-\u1b4b\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1bf3\u1c00-\u1c37\u1c40-\u1c49\u1c4d-\u1c7d\u1cd0-\u1cd2\u1cd4-\u1cf6\u1d00-\u1de6\u1dfc-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u200c\u200d\u203f\u2040\u2054\u2071\u207f\u2090-\u209c\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d7f-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2de0-\u2dff\u2e2f\u3005-\u3007\u3021-\u302f\u3031-\u3035\u3038-\u303c\u3041-\u3096\u3099\u309a\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua62b\ua640-\ua66f\ua674-\ua67d\ua67f-\ua697\ua69f-\ua6f1\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua827\ua840-\ua873\ua880-\ua8c4\ua8d0-\ua8d9\ua8e0-\ua8f7\ua8fb\ua900-\ua92d\ua930-\ua953\ua960-\ua97c\ua980-\ua9c0\ua9cf-\ua9d9\uaa00-\uaa36\uaa40-\uaa4d\uaa50-\uaa59\uaa60-\uaa76\uaa7a\uaa7b\uaa80-\uaac2\uaadb-\uaadd\uaae0-\uaaef\uaaf2-\uaaf6\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabea\uabec\uabed\uabf0-\uabf9\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe00-\ufe0f\ufe20-\ufe26\ufe33\ufe34\ufe4d-\ufe4f\ufe70-\ufe74\ufe76-\ufefc\uff10-\uff19\uff21-\uff3a\uff3f\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc]")};
function getDefaultOptions() {
  return{indent:null, base:null, parse:null, comment:false, format:{indent:{style:"    ", base:0, adjustMultilineComment:false}, json:false, renumber:false, hexadecimal:false, quotes:"single", escapeless:false, compact:false, parentheses:true, semicolons:true, safeConcatenation:false}, moz:{starlessGenerator:false, parenthesizedComprehensionBlock:false}, sourceMap:null, sourceMapWithCode:false, directive:false, verbatim:null}
}
function stringToArray(str) {
  var length = str.length, result = [], i;
  for(i = 0;i < length;i += 1) {
    result[i] = str.charAt(i)
  }
  return result
}
function stringRepeat(str, num) {
  var result = "";
  for(num |= 0;num > 0;num >>>= 1, str += str) {
    if(num & 1) {
      result += str
    }
  }
  return result
}
isArray = Array.isArray;
if(!isArray) {
  isArray = function isArray(array) {
    return Object.prototype.toString.call(array) === "[object Array]"
  }
}
function SourceNodeMock(line, column, filename, chunk) {
  var result = [];
  function flatten(input) {
    var i, iz;
    if(isArray(input)) {
      for(i = 0, iz = input.length;i < iz;++i) {
        flatten(input[i])
      }
    }else {
      if(input instanceof SourceNodeMock) {
        result.push(input)
      }else {
        if(typeof input === "string" && input) {
          result.push(input)
        }
      }
    }
  }
  flatten(chunk);
  this.children = result
}
SourceNodeMock.prototype.toString = function toString() {
  var res = "", i, iz, node;
  for(i = 0, iz = this.children.length;i < iz;++i) {
    node = this.children[i];
    if(node instanceof SourceNodeMock) {
      res += node.toString()
    }else {
      res += node
    }
  }
  return res
};
SourceNodeMock.prototype.replaceRight = function replaceRight(pattern, replacement) {
  var last = this.children[this.children.length - 1];
  if(last instanceof SourceNodeMock) {
    last.replaceRight(pattern, replacement)
  }else {
    if(typeof last === "string") {
      this.children[this.children.length - 1] = last.replace(pattern, replacement)
    }else {
      this.children.push("".replace(pattern, replacement))
    }
  }
  return this
};
SourceNodeMock.prototype.join = function join(sep) {
  var i, iz, result;
  result = [];
  iz = this.children.length;
  if(iz > 0) {
    for(i = 0, iz -= 1;i < iz;++i) {
      result.push(this.children[i], sep)
    }
    result.push(this.children[iz]);
    this.children = result
  }
  return this
};
function hasLineTerminator(str) {
  return/[\r\n]/g.test(str)
}
function endsWithLineTerminator(str) {
  var ch = str.charAt(str.length - 1);
  return ch === "\r" || ch === "\n"
}
function shallowCopy(obj) {
  var ret = {}, key;
  for(key in obj) {
    if(obj.hasOwnProperty(key)) {
      ret[key] = obj[key]
    }
  }
  return ret
}
function deepCopy(obj) {
  var ret = {}, key, val;
  for(key in obj) {
    if(obj.hasOwnProperty(key)) {
      val = obj[key];
      if(typeof val === "object" && val !== null) {
        ret[key] = deepCopy(val)
      }else {
        ret[key] = val
      }
    }
  }
  return ret
}
function updateDeeply(target, override) {
  var key, val;
  function isHashObject(target) {
    return typeof target === "object" && target instanceof Object && !(target instanceof RegExp)
  }
  for(key in override) {
    if(override.hasOwnProperty(key)) {
      val = override[key];
      if(isHashObject(val)) {
        if(isHashObject(target[key])) {
          updateDeeply(target[key], val)
        }else {
          target[key] = updateDeeply({}, val)
        }
      }else {
        target[key] = val
      }
    }
  }
  return target
}
function generateNumber(value) {
  var result, point, temp, exponent, pos;
  if(value !== value) {
    throw new Error("Numeric literal whose value is NaN");
  }
  if(value < 0 || value === 0 && 1 / value < 0) {
    throw new Error("Numeric literal whose value is negative");
  }
  if(value === 1 / 0) {
    return json ? "null" : renumber ? "1e400" : "1e+400"
  }
  result = "" + value;
  if(!renumber || result.length < 3) {
    return result
  }
  point = result.indexOf(".");
  if(!json && result.charAt(0) === "0" && point === 1) {
    point = 0;
    result = result.slice(1)
  }
  temp = result;
  result = result.replace("e+", "e");
  exponent = 0;
  if((pos = temp.indexOf("e")) > 0) {
    exponent = +temp.slice(pos + 1);
    temp = temp.slice(0, pos)
  }
  if(point >= 0) {
    exponent -= temp.length - point - 1;
    temp = +(temp.slice(0, point) + temp.slice(point + 1)) + ""
  }
  pos = 0;
  while(temp.charAt(temp.length + pos - 1) === "0") {
    pos -= 1
  }
  if(pos !== 0) {
    exponent -= pos;
    temp = temp.slice(0, pos)
  }
  if(exponent !== 0) {
    temp += "e" + exponent
  }
  if((temp.length < result.length || hexadecimal && value > 1E12 && Math.floor(value) === value && (temp = "0x" + value.toString(16)).length < result.length) && +temp === value) {
    result = temp
  }
  return result
}
function escapeAllowedCharacter(ch, next) {
  var code = ch.charCodeAt(0), hex = code.toString(16), result = "\\";
  switch(ch) {
    case "\u0008":
      result += "b";
      break;
    case "\u000c":
      result += "f";
      break;
    case "\t":
      result += "t";
      break;
    default:
      if(json || code > 255) {
        result += "u" + "0000".slice(hex.length) + hex
      }else {
        if(ch === "\x00" && "0123456789".indexOf(next) < 0) {
          result += "0"
        }else {
          if(ch === "\v") {
            result += "v"
          }else {
            result += "x" + "00".slice(hex.length) + hex
          }
        }
      }
      break
  }
  return result
}
function escapeDisallowedCharacter(ch) {
  var result = "\\";
  switch(ch) {
    case "\\":
      result += "\\";
      break;
    case "\n":
      result += "n";
      break;
    case "\r":
      result += "r";
      break;
    case "\u2028":
      result += "u2028";
      break;
    case "\u2029":
      result += "u2029";
      break;
    default:
      throw new Error("Incorrectly classified character");
  }
  return result
}
function escapeDirective(str) {
  var i, iz, ch, single, buf, quote;
  buf = str;
  if(typeof buf[0] === "undefined") {
    buf = stringToArray(buf)
  }
  quote = quotes === "double" ? '"' : "'";
  for(i = 0, iz = buf.length;i < iz;i += 1) {
    ch = buf[i];
    if(ch === "'") {
      quote = '"';
      break
    }else {
      if(ch === '"') {
        quote = "'";
        break
      }else {
        if(ch === "\\") {
          i += 1
        }
      }
    }
  }
  return quote + str + quote
}
function escapeString(str) {
  var result = "", i, len, ch, next, singleQuotes = 0, doubleQuotes = 0, single;
  if(typeof str[0] === "undefined") {
    str = stringToArray(str)
  }
  for(i = 0, len = str.length;i < len;i += 1) {
    ch = str[i];
    if(ch === "'") {
      singleQuotes += 1
    }else {
      if(ch === '"') {
        doubleQuotes += 1
      }else {
        if(ch === "/" && json) {
          result += "\\"
        }else {
          if("\\\n\r\u2028\u2029".indexOf(ch) >= 0) {
            result += escapeDisallowedCharacter(ch);
            continue
          }else {
            if(json && ch < " " || !(json || escapeless || ch >= " " && ch <= "~")) {
              result += escapeAllowedCharacter(ch, str[i + 1]);
              continue
            }
          }
        }
      }
    }
    result += ch
  }
  single = !(quotes === "double" || quotes === "auto" && doubleQuotes < singleQuotes);
  str = result;
  result = single ? "'" : '"';
  if(typeof str[0] === "undefined") {
    str = stringToArray(str)
  }
  for(i = 0, len = str.length;i < len;i += 1) {
    ch = str[i];
    if(ch === "'" && single || ch === '"' && !single) {
      result += "\\"
    }
    result += ch
  }
  return result + (single ? "'" : '"')
}
function isWhiteSpace(ch) {
  return"\t\v\u000c \u00a0".indexOf(ch) >= 0 || ch.charCodeAt(0) >= 5760 && "\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\ufeff".indexOf(ch) >= 0
}
function isLineTerminator(ch) {
  return"\n\r\u2028\u2029".indexOf(ch) >= 0
}
function isIdentifierPart(ch) {
  return ch === "$" || ch === "_" || ch === "\\" || ch >= "a" && ch <= "z" || ch >= "A" && ch <= "Z" || ch >= "0" && ch <= "9" || ch.charCodeAt(0) >= 128 && Regex.NonAsciiIdentifierPart.test(ch)
}
function toSourceNode(generated, node) {
  if(node == null) {
    if(generated instanceof SourceNode) {
      return generated
    }else {
      node = {}
    }
  }
  if(node.loc == null) {
    return new SourceNode(null, null, sourceMap, generated)
  }
  return new SourceNode(node.loc.start.line, node.loc.start.column, sourceMap === true ? node.loc.source || null : sourceMap, generated)
}
function join(left, right) {
  var leftSource = toSourceNode(left).toString(), rightSource = toSourceNode(right).toString(), leftChar = leftSource.charAt(leftSource.length - 1), rightChar = rightSource.charAt(0);
  if((leftChar === "+" || leftChar === "-") && leftChar === rightChar || isIdentifierPart(leftChar) && isIdentifierPart(rightChar)) {
    return[left, " ", right]
  }else {
    if(isWhiteSpace(leftChar) || isLineTerminator(leftChar) || isWhiteSpace(rightChar) || isLineTerminator(rightChar)) {
      return[left, right]
    }
  }
  return[left, space, right]
}
function addIndent(stmt) {
  return[base, stmt]
}
function withIndent(fn) {
  var previousBase, result;
  previousBase = base;
  base += indent;
  result = fn.call(this, base);
  base = previousBase;
  return result
}
function calculateSpaces(str) {
  var i;
  for(i = str.length - 1;i >= 0;i -= 1) {
    if(isLineTerminator(str.charAt(i))) {
      break
    }
  }
  return str.length - 1 - i
}
function adjustMultilineComment(value, specialBase) {
  var array, i, len, line, j, ch, spaces, previousBase;
  array = value.split(/\r\n|[\r\n]/);
  spaces = Number.MAX_VALUE;
  for(i = 1, len = array.length;i < len;i += 1) {
    line = array[i];
    j = 0;
    while(j < line.length && isWhiteSpace(line[j])) {
      j += 1
    }
    if(spaces > j) {
      spaces = j
    }
  }
  if(typeof specialBase !== "undefined") {
    previousBase = base;
    if(array[1][spaces] === "*") {
      specialBase += " "
    }
    base = specialBase
  }else {
    if(spaces & 1) {
      spaces -= 1
    }
    previousBase = base
  }
  for(i = 1, len = array.length;i < len;i += 1) {
    array[i] = toSourceNode(addIndent(array[i].slice(spaces))).join("")
  }
  base = previousBase;
  return array.join("\n")
}
function generateComment(comment, specialBase) {
  if(comment.type === "Line") {
    if(endsWithLineTerminator(comment.value)) {
      return"//" + comment.value
    }else {
      return"//" + comment.value + "\n"
    }
  }
  if(extra.format.indent.adjustMultilineComment && /[\n\r]/.test(comment.value)) {
    return adjustMultilineComment("/*" + comment.value + "*/", specialBase)
  }
  return"/*" + comment.value + "*/"
}
function addCommentsToStatement(stmt, result) {
  var i, len, comment, save, node, tailingToStatement, specialBase, fragment;
  if(stmt.leadingComments && stmt.leadingComments.length > 0) {
    save = result;
    comment = stmt.leadingComments[0];
    result = [];
    if(safeConcatenation && stmt.type === Syntax.Program && stmt.body.length === 0) {
      result.push("\n")
    }
    result.push(generateComment(comment));
    if(!endsWithLineTerminator(toSourceNode(result).toString())) {
      result.push("\n")
    }
    for(i = 1, len = stmt.leadingComments.length;i < len;i += 1) {
      comment = stmt.leadingComments[i];
      fragment = [generateComment(comment)];
      if(!endsWithLineTerminator(toSourceNode(fragment).toString())) {
        fragment.push("\n")
      }
      result.push(addIndent(fragment))
    }
    result.push(addIndent(save))
  }
  if(stmt.trailingComments) {
    tailingToStatement = !endsWithLineTerminator(toSourceNode(result).toString());
    specialBase = stringRepeat(" ", calculateSpaces(toSourceNode([base, result, indent]).toString()));
    for(i = 0, len = stmt.trailingComments.length;i < len;i += 1) {
      comment = stmt.trailingComments[i];
      if(tailingToStatement) {
        if(i === 0) {
          result = [result, indent]
        }else {
          result = [result, specialBase]
        }
        result.push(generateComment(comment, specialBase))
      }else {
        result = [result, addIndent(generateComment(comment))]
      }
      if(i !== len - 1 && !endsWithLineTerminator(toSourceNode(result).toString())) {
        result = [result, "\n"]
      }
    }
  }
  return result
}
function parenthesize(text, current, should) {
  if(current < should) {
    return["(", text, ")"]
  }
  return text
}
function maybeBlock(stmt, semicolonOptional, functionBody) {
  var result, noLeadingComment;
  noLeadingComment = !extra.comment || !stmt.leadingComments;
  if(stmt.type === Syntax.BlockStatement && noLeadingComment) {
    return[space, generateStatement(stmt, {functionBody:functionBody})]
  }
  if(stmt.type === Syntax.EmptyStatement && noLeadingComment) {
    return";"
  }
  withIndent(function() {
    result = [newline, addIndent(generateStatement(stmt, {semicolonOptional:semicolonOptional, functionBody:functionBody}))]
  });
  return result
}
function maybeBlockSuffix(stmt, result) {
  var ends = endsWithLineTerminator(toSourceNode(result).toString());
  if(stmt.type === Syntax.BlockStatement && (!extra.comment || !stmt.leadingComments) && !ends) {
    return[result, space]
  }
  if(ends) {
    return[result, base]
  }
  return[result, newline, base]
}
function generateVerbatim(expr, option) {
  var i, result;
  result = expr[extra.verbatim].split(/\r\n|\n/);
  for(i = 1;i < result.length;i++) {
    result[i] = newline + base + result[i]
  }
  result = parenthesize(result, Precedence.Sequence, option.precedence);
  return toSourceNode(result, expr)
}
function generateFunctionBody(node) {
  var result, i, len, expr;
  result = ["("];
  for(i = 0, len = node.params.length;i < len;i += 1) {
    result.push(node.params[i].name);
    if(i + 1 < len) {
      result.push("," + space)
    }
  }
  result.push(")");
  if(node.expression) {
    result.push(space);
    expr = generateExpression(node.body, {precedence:Precedence.Assignment, allowIn:true, allowCall:true});
    if(expr.toString().charAt(0) === "{") {
      expr = ["(", expr, ")"]
    }
    result.push(expr)
  }else {
    result.push(maybeBlock(node.body, false, true))
  }
  return result
}
function generateExpression(expr, option) {
  var result, precedence, currentPrecedence, i, len, raw, fragment, multiline, leftChar, leftSource, rightChar, rightSource, allowIn, allowCall, allowUnparenthesizedNew, property, key, value;
  precedence = option.precedence;
  allowIn = option.allowIn;
  allowCall = option.allowCall;
  if(extra.verbatim && expr.hasOwnProperty(extra.verbatim)) {
    return generateVerbatim(expr, option)
  }
  switch(expr.type) {
    case Syntax.SequenceExpression:
      result = [];
      allowIn |= Precedence.Sequence < precedence;
      for(i = 0, len = expr.expressions.length;i < len;i += 1) {
        result.push(generateExpression(expr.expressions[i], {precedence:Precedence.Assignment, allowIn:allowIn, allowCall:true}));
        if(i + 1 < len) {
          result.push("," + space)
        }
      }
      result = parenthesize(result, Precedence.Sequence, precedence);
      break;
    case Syntax.AssignmentExpression:
      allowIn |= Precedence.Assignment < precedence;
      result = parenthesize([generateExpression(expr.left, {precedence:Precedence.Call, allowIn:allowIn, allowCall:true}), space + expr.operator + space, generateExpression(expr.right, {precedence:Precedence.Assignment, allowIn:allowIn, allowCall:true})], Precedence.Assignment, precedence);
      break;
    case Syntax.ConditionalExpression:
      allowIn |= Precedence.Conditional < precedence;
      result = parenthesize([generateExpression(expr.test, {precedence:Precedence.LogicalOR, allowIn:allowIn, allowCall:true}), space + "?" + space, generateExpression(expr.consequent, {precedence:Precedence.Assignment, allowIn:allowIn, allowCall:true}), space + ":" + space, generateExpression(expr.alternate, {precedence:Precedence.Assignment, allowIn:allowIn, allowCall:true})], Precedence.Conditional, precedence);
      break;
    case Syntax.LogicalExpression:
    ;
    case Syntax.BinaryExpression:
      currentPrecedence = BinaryPrecedence[expr.operator];
      allowIn |= currentPrecedence < precedence;
      result = join(generateExpression(expr.left, {precedence:currentPrecedence, allowIn:allowIn, allowCall:true}), expr.operator);
      fragment = generateExpression(expr.right, {precedence:currentPrecedence + 1, allowIn:allowIn, allowCall:true});
      if(expr.operator === "/" && fragment.toString().charAt(0) === "/") {
        result.push(" ", fragment)
      }else {
        result = join(result, fragment)
      }
      if(expr.operator === "in" && !allowIn) {
        result = ["(", result, ")"]
      }else {
        result = parenthesize(result, currentPrecedence, precedence)
      }
      break;
    case Syntax.CallExpression:
      result = [generateExpression(expr.callee, {precedence:Precedence.Call, allowIn:true, allowCall:true, allowUnparenthesizedNew:false})];
      result.push("(");
      for(i = 0, len = expr["arguments"].length;i < len;i += 1) {
        result.push(generateExpression(expr["arguments"][i], {precedence:Precedence.Assignment, allowIn:true, allowCall:true}));
        if(i + 1 < len) {
          result.push("," + space)
        }
      }
      result.push(")");
      if(!allowCall) {
        result = ["(", result, ")"]
      }else {
        result = parenthesize(result, Precedence.Call, precedence)
      }
      break;
    case Syntax.NewExpression:
      len = expr["arguments"].length;
      allowUnparenthesizedNew = option.allowUnparenthesizedNew === undefined || option.allowUnparenthesizedNew;
      result = join("new", generateExpression(expr.callee, {precedence:Precedence.New, allowIn:true, allowCall:false, allowUnparenthesizedNew:allowUnparenthesizedNew && !parentheses && len === 0}));
      if(!allowUnparenthesizedNew || parentheses || len > 0) {
        result.push("(");
        for(i = 0;i < len;i += 1) {
          result.push(generateExpression(expr["arguments"][i], {precedence:Precedence.Assignment, allowIn:true, allowCall:true}));
          if(i + 1 < len) {
            result.push("," + space)
          }
        }
        result.push(")")
      }
      result = parenthesize(result, Precedence.New, precedence);
      break;
    case Syntax.MemberExpression:
      result = [generateExpression(expr.object, {precedence:Precedence.Call, allowIn:true, allowCall:allowCall, allowUnparenthesizedNew:false})];
      if(expr.computed) {
        result.push("[", generateExpression(expr.property, {precedence:Precedence.Sequence, allowIn:true, allowCall:allowCall}), "]")
      }else {
        if(expr.object.type === Syntax.Literal && typeof expr.object.value === "number") {
          if(result.indexOf(".") < 0) {
            if(!/[eExX]/.test(result) && !(result.length >= 2 && result[0] === "0")) {
              result.push(".")
            }
          }
        }
        result.push("." + expr.property.name)
      }
      result = parenthesize(result, Precedence.Member, precedence);
      break;
    case Syntax.UnaryExpression:
      fragment = generateExpression(expr.argument, {precedence:Precedence.Unary, allowIn:true, allowCall:true});
      if(space === "") {
        result = join(expr.operator, fragment)
      }else {
        result = [expr.operator];
        if(expr.operator.length > 2) {
          result = join(result, fragment)
        }else {
          leftSource = toSourceNode(result).toString();
          leftChar = leftSource.charAt(leftSource.length - 1);
          rightChar = fragment.toString().charAt(0);
          if((leftChar === "+" || leftChar === "-") && leftChar === rightChar || isIdentifierPart(leftChar) && isIdentifierPart(rightChar)) {
            result.push(" ", fragment)
          }else {
            result.push(fragment)
          }
        }
      }
      result = parenthesize(result, Precedence.Unary, precedence);
      break;
    case Syntax.YieldExpression:
      if(expr.delegate) {
        result = "yield*"
      }else {
        result = "yield"
      }
      if(expr.argument) {
        result = join(result, generateExpression(expr.argument, {precedence:Precedence.Assignment, allowIn:true, allowCall:true}))
      }
      break;
    case Syntax.UpdateExpression:
      if(expr.prefix) {
        result = parenthesize([expr.operator, generateExpression(expr.argument, {precedence:Precedence.Unary, allowIn:true, allowCall:true})], Precedence.Unary, precedence)
      }else {
        result = parenthesize([generateExpression(expr.argument, {precedence:Precedence.Postfix, allowIn:true, allowCall:true}), expr.operator], Precedence.Postfix, precedence)
      }
      break;
    case Syntax.FunctionExpression:
      result = "function";
      if(expr.id) {
        result += " " + expr.id.name
      }else {
        result += space
      }
      result = [result, generateFunctionBody(expr)];
      break;
    case Syntax.ArrayPattern:
    ;
    case Syntax.ArrayExpression:
      if(!expr.elements.length) {
        result = "[]";
        break
      }
      multiline = expr.elements.length > 1;
      result = ["[", multiline ? newline : ""];
      withIndent(function(indent) {
        for(i = 0, len = expr.elements.length;i < len;i += 1) {
          if(!expr.elements[i]) {
            if(multiline) {
              result.push(indent)
            }
            if(i + 1 === len) {
              result.push(",")
            }
          }else {
            result.push(multiline ? indent : "", generateExpression(expr.elements[i], {precedence:Precedence.Assignment, allowIn:true, allowCall:true}))
          }
          if(i + 1 < len) {
            result.push("," + (multiline ? newline : space))
          }
        }
      });
      if(multiline && !endsWithLineTerminator(toSourceNode(result).toString())) {
        result.push(newline)
      }
      result.push(multiline ? base : "", "]");
      break;
    case Syntax.Property:
      if(expr.kind === "get" || expr.kind === "set") {
        result = [expr.kind + " ", generateExpression(expr.key, {precedence:Precedence.Sequence, allowIn:true, allowCall:true}), generateFunctionBody(expr.value)]
      }else {
        if(expr.shorthand) {
          result = generateExpression(expr.key, {precedence:Precedence.Sequence, allowIn:true, allowCall:true})
        }else {
          if(expr.method) {
            result = [];
            if(expr.value.generator) {
              result.push("*")
            }
            result.push(generateExpression(expr.key, {precedence:Precedence.Sequence, allowIn:true, allowCall:true}), generateFunctionBody(expr.value))
          }else {
            result = [generateExpression(expr.key, {precedence:Precedence.Sequence, allowIn:true, allowCall:true}), ":" + space, generateExpression(expr.value, {precedence:Precedence.Assignment, allowIn:true, allowCall:true})]
          }
        }
      }
      break;
    case Syntax.ObjectExpression:
      if(!expr.properties.length) {
        result = "{}";
        break
      }
      multiline = expr.properties.length > 1;
      withIndent(function(indent) {
        fragment = generateExpression(expr.properties[0], {precedence:Precedence.Sequence, allowIn:true, allowCall:true})
      });
      if(!multiline) {
        if(!hasLineTerminator(toSourceNode(fragment).toString())) {
          result = ["{", space, fragment, space, "}"];
          break
        }
      }
      withIndent(function(indent) {
        result = ["{", newline, indent, fragment];
        if(multiline) {
          result.push("," + newline);
          for(i = 1, len = expr.properties.length;i < len;i += 1) {
            result.push(indent, generateExpression(expr.properties[i], {precedence:Precedence.Sequence, allowIn:true, allowCall:true}));
            if(i + 1 < len) {
              result.push("," + newline)
            }
          }
        }
      });
      if(!endsWithLineTerminator(toSourceNode(result).toString())) {
        result.push(newline)
      }
      result.push(base, "}");
      break;
    case Syntax.ObjectPattern:
      if(!expr.properties.length) {
        result = "{}";
        break
      }
      multiline = false;
      if(expr.properties.length === 1) {
        property = expr.properties[0];
        if(property.value.type !== Syntax.Identifier) {
          multiline = true
        }
      }else {
        for(i = 0, len = expr.properties.length;i < len;i += 1) {
          property = expr.properties[i];
          if(!property.shorthand) {
            multiline = true;
            break
          }
        }
      }
      result = ["{", multiline ? newline : ""];
      withIndent(function(indent) {
        for(i = 0, len = expr.properties.length;i < len;i += 1) {
          result.push(multiline ? indent : "", generateExpression(expr.properties[i], {precedence:Precedence.Sequence, allowIn:true, allowCall:true}));
          if(i + 1 < len) {
            result.push("," + (multiline ? newline : space))
          }
        }
      });
      if(multiline && !endsWithLineTerminator(toSourceNode(result).toString())) {
        result.push(newline)
      }
      result.push(multiline ? base : "", "}");
      break;
    case Syntax.ThisExpression:
      result = "this";
      break;
    case Syntax.Identifier:
      result = expr.name;
      break;
    case Syntax.Literal:
      if(expr.hasOwnProperty("raw") && parse) {
        try {
          raw = parse(expr.raw).body[0].expression;
          if(raw.type === Syntax.Literal) {
            if(raw.value === expr.value) {
              result = expr.raw;
              break
            }
          }
        }catch(e) {
        }
      }
      if(expr.value === null) {
        result = "null";
        break
      }
      if(typeof expr.value === "string") {
        result = escapeString(expr.value);
        break
      }
      if(typeof expr.value === "number") {
        result = generateNumber(expr.value);
        break
      }
      result = expr.value.toString();
      break;
    case Syntax.ComprehensionExpression:
      result = ["[", generateExpression(expr.body, {precedence:Precedence.Assignment, allowIn:true, allowCall:true})];
      if(expr.blocks) {
        for(i = 0, len = expr.blocks.length;i < len;i += 1) {
          fragment = generateExpression(expr.blocks[i], {precedence:Precedence.Sequence, allowIn:true, allowCall:true});
          result = join(result, fragment)
        }
      }
      if(expr.filter) {
        result = join(result, "if" + space);
        fragment = generateExpression(expr.filter, {precedence:Precedence.Sequence, allowIn:true, allowCall:true});
        if(extra.moz.parenthesizedComprehensionBlock) {
          result = join(result, ["(", fragment, ")"])
        }else {
          result = join(result, fragment)
        }
      }
      result.push("]");
      break;
    case Syntax.ComprehensionBlock:
      if(expr.left.type === Syntax.VariableDeclaration) {
        fragment = [expr.left.kind + " ", generateStatement(expr.left.declarations[0], {allowIn:false})]
      }else {
        fragment = generateExpression(expr.left, {precedence:Precedence.Call, allowIn:true, allowCall:true})
      }
      fragment = join(fragment, expr.of ? "of" : "in");
      fragment = join(fragment, generateExpression(expr.right, {precedence:Precedence.Sequence, allowIn:true, allowCall:true}));
      if(extra.moz.parenthesizedComprehensionBlock) {
        result = ["for" + space + "(", fragment, ")"]
      }else {
        result = join("for" + space, fragment)
      }
      break;
    default:
      throw new Error("Unknown expression type: " + expr.type);
  }
  return toSourceNode(result, expr)
}
function generateStatement(stmt, option) {
  var i, len, result, node, allowIn, functionBody, directiveContext, fragment, semicolon;
  allowIn = true;
  semicolon = ";";
  functionBody = false;
  directiveContext = false;
  if(option) {
    allowIn = option.allowIn === undefined || option.allowIn;
    if(!semicolons && option.semicolonOptional === true) {
      semicolon = ""
    }
    functionBody = option.functionBody;
    directiveContext = option.directiveContext
  }
  switch(stmt.type) {
    case Syntax.BlockStatement:
      result = ["{", newline];
      withIndent(function() {
        for(i = 0, len = stmt.body.length;i < len;i += 1) {
          fragment = addIndent(generateStatement(stmt.body[i], {semicolonOptional:i === len - 1, directiveContext:functionBody}));
          result.push(fragment);
          if(!endsWithLineTerminator(toSourceNode(fragment).toString())) {
            result.push(newline)
          }
        }
      });
      result.push(addIndent("}"));
      break;
    case Syntax.BreakStatement:
      if(stmt.label) {
        result = "break " + stmt.label.name + semicolon
      }else {
        result = "break" + semicolon
      }
      break;
    case Syntax.ContinueStatement:
      if(stmt.label) {
        result = "continue " + stmt.label.name + semicolon
      }else {
        result = "continue" + semicolon
      }
      break;
    case Syntax.DirectiveStatement:
      if(stmt.raw) {
        result = stmt.raw + semicolon
      }else {
        result = escapeDirective(stmt.directive) + semicolon
      }
      break;
    case Syntax.DoWhileStatement:
      result = join("do", maybeBlock(stmt.body));
      result = maybeBlockSuffix(stmt.body, result);
      result = join(result, ["while" + space + "(", generateExpression(stmt.test, {precedence:Precedence.Sequence, allowIn:true, allowCall:true}), ")" + semicolon]);
      break;
    case Syntax.CatchClause:
      withIndent(function() {
        result = ["catch" + space + "(", generateExpression(stmt.param, {precedence:Precedence.Sequence, allowIn:true, allowCall:true}), ")"]
      });
      result.push(maybeBlock(stmt.body));
      break;
    case Syntax.DebuggerStatement:
      result = "debugger" + semicolon;
      break;
    case Syntax.EmptyStatement:
      result = ";";
      break;
    case Syntax.ExpressionStatement:
      result = [generateExpression(stmt.expression, {precedence:Precedence.Sequence, allowIn:true, allowCall:true})];
      if(result.toString().charAt(0) === "{" || result.toString().slice(0, 8) === "function" && " (".indexOf(result.toString().charAt(8)) >= 0 || directive && directiveContext && stmt.expression.type === Syntax.Literal && typeof stmt.expression.value === "string") {
        result = ["(", result, ")" + semicolon]
      }else {
        result.push(semicolon)
      }
      break;
    case Syntax.VariableDeclarator:
      if(stmt.init) {
        result = [generateExpression(stmt.id, {precedence:Precedence.Assignment, allowIn:allowIn, allowCall:true}) + space + "=" + space, generateExpression(stmt.init, {precedence:Precedence.Assignment, allowIn:allowIn, allowCall:true})]
      }else {
        result = stmt.id.name
      }
      break;
    case Syntax.VariableDeclaration:
      result = [stmt.kind];
      if(stmt.declarations.length === 1 && stmt.declarations[0].init && stmt.declarations[0].init.type === Syntax.FunctionExpression) {
        result.push(" ", generateStatement(stmt.declarations[0], {allowIn:allowIn}))
      }else {
        withIndent(function() {
          node = stmt.declarations[0];
          if(extra.comment && node.leadingComments) {
            result.push("\n", addIndent(generateStatement(node, {allowIn:allowIn})))
          }else {
            result.push(" ", generateStatement(node, {allowIn:allowIn}))
          }
          for(i = 1, len = stmt.declarations.length;i < len;i += 1) {
            node = stmt.declarations[i];
            if(extra.comment && node.leadingComments) {
              result.push("," + newline, addIndent(generateStatement(node, {allowIn:allowIn})))
            }else {
              result.push("," + space, generateStatement(node, {allowIn:allowIn}))
            }
          }
        })
      }
      result.push(semicolon);
      break;
    case Syntax.ThrowStatement:
      result = [join("throw", generateExpression(stmt.argument, {precedence:Precedence.Sequence, allowIn:true, allowCall:true})), semicolon];
      break;
    case Syntax.TryStatement:
      result = ["try", maybeBlock(stmt.block)];
      result = maybeBlockSuffix(stmt.block, result);
      for(i = 0, len = stmt.handlers.length;i < len;i += 1) {
        result = join(result, generateStatement(stmt.handlers[i]));
        if(stmt.finalizer || i + 1 !== len) {
          result = maybeBlockSuffix(stmt.handlers[i].body, result)
        }
      }
      if(stmt.finalizer) {
        result = join(result, ["finally", maybeBlock(stmt.finalizer)])
      }
      break;
    case Syntax.SwitchStatement:
      withIndent(function() {
        result = ["switch" + space + "(", generateExpression(stmt.discriminant, {precedence:Precedence.Sequence, allowIn:true, allowCall:true}), ")" + space + "{" + newline]
      });
      if(stmt.cases) {
        for(i = 0, len = stmt.cases.length;i < len;i += 1) {
          fragment = addIndent(generateStatement(stmt.cases[i], {semicolonOptional:i === len - 1}));
          result.push(fragment);
          if(!endsWithLineTerminator(toSourceNode(fragment).toString())) {
            result.push(newline)
          }
        }
      }
      result.push(addIndent("}"));
      break;
    case Syntax.SwitchCase:
      withIndent(function() {
        if(stmt.test) {
          result = [join("case", generateExpression(stmt.test, {precedence:Precedence.Sequence, allowIn:true, allowCall:true})), ":"]
        }else {
          result = ["default:"]
        }
        i = 0;
        len = stmt.consequent.length;
        if(len && stmt.consequent[0].type === Syntax.BlockStatement) {
          fragment = maybeBlock(stmt.consequent[0]);
          result.push(fragment);
          i = 1
        }
        if(i !== len && !endsWithLineTerminator(toSourceNode(result).toString())) {
          result.push(newline)
        }
        for(;i < len;i += 1) {
          fragment = addIndent(generateStatement(stmt.consequent[i], {semicolonOptional:i === len - 1 && semicolon === ""}));
          result.push(fragment);
          if(i + 1 !== len && !endsWithLineTerminator(toSourceNode(fragment).toString())) {
            result.push(newline)
          }
        }
      });
      break;
    case Syntax.IfStatement:
      withIndent(function() {
        result = ["if" + space + "(", generateExpression(stmt.test, {precedence:Precedence.Sequence, allowIn:true, allowCall:true}), ")"]
      });
      if(stmt.alternate) {
        result.push(maybeBlock(stmt.consequent));
        result = maybeBlockSuffix(stmt.consequent, result);
        if(stmt.alternate.type === Syntax.IfStatement) {
          result = join(result, ["else ", generateStatement(stmt.alternate, {semicolonOptional:semicolon === ""})])
        }else {
          result = join(result, join("else", maybeBlock(stmt.alternate, semicolon === "")))
        }
      }else {
        result.push(maybeBlock(stmt.consequent, semicolon === ""))
      }
      break;
    case Syntax.ForStatement:
      withIndent(function() {
        result = ["for" + space + "("];
        if(stmt.init) {
          if(stmt.init.type === Syntax.VariableDeclaration) {
            result.push(generateStatement(stmt.init, {allowIn:false}))
          }else {
            result.push(generateExpression(stmt.init, {precedence:Precedence.Sequence, allowIn:false, allowCall:true}), ";")
          }
        }else {
          result.push(";")
        }
        if(stmt.test) {
          result.push(space, generateExpression(stmt.test, {precedence:Precedence.Sequence, allowIn:true, allowCall:true}), ";")
        }else {
          result.push(";")
        }
        if(stmt.update) {
          result.push(space, generateExpression(stmt.update, {precedence:Precedence.Sequence, allowIn:true, allowCall:true}), ")")
        }else {
          result.push(")")
        }
      });
      result.push(maybeBlock(stmt.body, semicolon === ""));
      break;
    case Syntax.ForInStatement:
      result = ["for" + space + "("];
      withIndent(function() {
        if(stmt.left.type === Syntax.VariableDeclaration) {
          withIndent(function() {
            result.push(stmt.left.kind + " ", generateStatement(stmt.left.declarations[0], {allowIn:false}))
          })
        }else {
          result.push(generateExpression(stmt.left, {precedence:Precedence.Call, allowIn:true, allowCall:true}))
        }
        result = join(result, "in");
        result = [join(result, generateExpression(stmt.right, {precedence:Precedence.Sequence, allowIn:true, allowCall:true})), ")"]
      });
      result.push(maybeBlock(stmt.body, semicolon === ""));
      break;
    case Syntax.LabeledStatement:
      result = [stmt.label.name + ":", maybeBlock(stmt.body, semicolon === "")];
      break;
    case Syntax.Program:
      len = stmt.body.length;
      result = [safeConcatenation && len > 0 ? "\n" : ""];
      for(i = 0;i < len;i += 1) {
        fragment = addIndent(generateStatement(stmt.body[i], {semicolonOptional:!safeConcatenation && i === len - 1, directiveContext:true}));
        result.push(fragment);
        if(i + 1 < len && !endsWithLineTerminator(toSourceNode(fragment).toString())) {
          result.push(newline)
        }
      }
      break;
    case Syntax.FunctionDeclaration:
      result = [(stmt.generator && !extra.moz.starlessGenerator ? "function* " : "function ") + stmt.id.name, generateFunctionBody(stmt)];
      break;
    case Syntax.ReturnStatement:
      if(stmt.argument) {
        result = [join("return", generateExpression(stmt.argument, {precedence:Precedence.Sequence, allowIn:true, allowCall:true})), semicolon]
      }else {
        result = ["return" + semicolon]
      }
      break;
    case Syntax.WhileStatement:
      withIndent(function() {
        result = ["while" + space + "(", generateExpression(stmt.test, {precedence:Precedence.Sequence, allowIn:true, allowCall:true}), ")"]
      });
      result.push(maybeBlock(stmt.body, semicolon === ""));
      break;
    case Syntax.WithStatement:
      withIndent(function() {
        result = ["with" + space + "(", generateExpression(stmt.object, {precedence:Precedence.Sequence, allowIn:true, allowCall:true}), ")"]
      });
      result.push(maybeBlock(stmt.body, semicolon === ""));
      break;
    default:
      throw new Error("Unknown statement type: " + stmt.type);
  }
  if(extra.comment) {
    result = addCommentsToStatement(stmt, result)
  }
  fragment = toSourceNode(result).toString();
  if(stmt.type === Syntax.Program && !safeConcatenation && newline === "" && fragment.charAt(fragment.length - 1) === "\n") {
    result = toSourceNode(result).replaceRight(/\s+$/, "")
  }
  return toSourceNode(result, stmt)
}
function generate(node, options) {
  var defaultOptions = getDefaultOptions(), result, pair;
  if(options != null) {
    if(typeof options.indent === "string") {
      defaultOptions.format.indent.style = options.indent
    }
    if(typeof options.base === "number") {
      defaultOptions.format.indent.base = options.base
    }
    options = updateDeeply(defaultOptions, options);
    indent = options.format.indent.style;
    if(typeof options.base === "string") {
      base = options.base
    }else {
      base = stringRepeat(indent, options.format.indent.base)
    }
  }else {
    options = defaultOptions;
    indent = options.format.indent.style;
    base = stringRepeat(indent, options.format.indent.base)
  }
  json = options.format.json;
  renumber = options.format.renumber;
  hexadecimal = json ? false : options.format.hexadecimal;
  quotes = json ? "double" : options.format.quotes;
  escapeless = options.format.escapeless;
  if(options.format.compact) {
    newline = space = indent = base = ""
  }else {
    newline = "\n";
    space = " "
  }
  parentheses = options.format.parentheses;
  semicolons = options.format.semicolons;
  safeConcatenation = options.format.safeConcatenation;
  directive = options.directive;
  parse = json ? null : options.parse;
  sourceMap = options.sourceMap;
  extra = options;
  if(sourceMap) {
    if(typeof process !== "undefined") {
      SourceNode = require("source-map").SourceNode
    }else {
      SourceNode = global.sourceMap.SourceNode
    }
  }else {
    SourceNode = SourceNodeMock
  }
  switch(node.type) {
    case Syntax.BlockStatement:
    ;
    case Syntax.BreakStatement:
    ;
    case Syntax.CatchClause:
    ;
    case Syntax.ContinueStatement:
    ;
    case Syntax.DirectiveStatement:
    ;
    case Syntax.DoWhileStatement:
    ;
    case Syntax.DebuggerStatement:
    ;
    case Syntax.EmptyStatement:
    ;
    case Syntax.ExpressionStatement:
    ;
    case Syntax.ForStatement:
    ;
    case Syntax.ForInStatement:
    ;
    case Syntax.FunctionDeclaration:
    ;
    case Syntax.IfStatement:
    ;
    case Syntax.LabeledStatement:
    ;
    case Syntax.Program:
    ;
    case Syntax.ReturnStatement:
    ;
    case Syntax.SwitchStatement:
    ;
    case Syntax.SwitchCase:
    ;
    case Syntax.ThrowStatement:
    ;
    case Syntax.TryStatement:
    ;
    case Syntax.VariableDeclaration:
    ;
    case Syntax.VariableDeclarator:
    ;
    case Syntax.WhileStatement:
    ;
    case Syntax.WithStatement:
      result = generateStatement(node);
      break;
    case Syntax.AssignmentExpression:
    ;
    case Syntax.ArrayExpression:
    ;
    case Syntax.ArrayPattern:
    ;
    case Syntax.BinaryExpression:
    ;
    case Syntax.CallExpression:
    ;
    case Syntax.ConditionalExpression:
    ;
    case Syntax.FunctionExpression:
    ;
    case Syntax.Identifier:
    ;
    case Syntax.Literal:
    ;
    case Syntax.LogicalExpression:
    ;
    case Syntax.MemberExpression:
    ;
    case Syntax.NewExpression:
    ;
    case Syntax.ObjectExpression:
    ;
    case Syntax.ObjectPattern:
    ;
    case Syntax.Property:
    ;
    case Syntax.SequenceExpression:
    ;
    case Syntax.ThisExpression:
    ;
    case Syntax.UnaryExpression:
    ;
    case Syntax.UpdateExpression:
    ;
    case Syntax.YieldExpression:
      result = generateExpression(node, {precedence:Precedence.Sequence, allowIn:true, allowCall:true});
      break;
    default:
      throw new Error("Unknown node type: " + node.type);
  }
  if(!sourceMap) {
    return result.toString()
  }
  pair = result.toStringWithSourceMap({file:options.sourceMap});
  if(options.sourceMapWithCode) {
    return pair
  }
  return pair.map.toString()
}
VisitorKeys = {AssignmentExpression:["left", "right"], ArrayExpression:["elements"], ArrayPattern:["elements"], BlockStatement:["body"], BinaryExpression:["left", "right"], BreakStatement:["label"], CallExpression:["callee", "arguments"], CatchClause:["param", "body"], ConditionalExpression:["test", "consequent", "alternate"], ContinueStatement:["label"], DirectiveStatement:[], DoWhileStatement:["body", "test"], DebuggerStatement:[], EmptyStatement:[], ExpressionStatement:["expression"], ForStatement:["init", 
"test", "update", "body"], ForInStatement:["left", "right", "body"], FunctionDeclaration:["id", "params", "body"], FunctionExpression:["id", "params", "body"], Identifier:[], IfStatement:["test", "consequent", "alternate"], Literal:[], LabeledStatement:["label", "body"], LogicalExpression:["left", "right"], MemberExpression:["object", "property"], NewExpression:["callee", "arguments"], ObjectExpression:["properties"], ObjectPattern:["properties"], Program:["body"], Property:["key", "value"], ReturnStatement:["argument"], 
SequenceExpression:["expressions"], SwitchStatement:["discriminant", "cases"], SwitchCase:["test", "consequent"], ThisExpression:[], ThrowStatement:["argument"], TryStatement:["block", "handlers", "finalizer"], UnaryExpression:["argument"], UpdateExpression:["argument"], VariableDeclaration:["declarations"], VariableDeclarator:["id", "init"], WhileStatement:["test", "body"], WithStatement:["object", "body"], YieldExpression:["argument"]};
VisitorOption = {Break:1, Skip:2};
function traverse(top, visitor) {
  var worklist, leavelist, node, ret, current, current2, candidates, candidate, marker = {};
  worklist = [top];
  leavelist = [null];
  while(worklist.length) {
    node = worklist.pop();
    if(node === marker) {
      node = leavelist.pop();
      if(visitor.leave) {
        ret = visitor.leave(node, leavelist[leavelist.length - 1])
      }else {
        ret = undefined
      }
      if(ret === VisitorOption.Break) {
        return
      }
    }else {
      if(node) {
        if(visitor.enter) {
          ret = visitor.enter(node, leavelist[leavelist.length - 1])
        }else {
          ret = undefined
        }
        if(ret === VisitorOption.Break) {
          return
        }
        worklist.push(marker);
        leavelist.push(node);
        if(ret !== VisitorOption.Skip) {
          candidates = VisitorKeys[node.type];
          current = candidates.length;
          while((current -= 1) >= 0) {
            candidate = node[candidates[current]];
            if(candidate) {
              if(isArray(candidate)) {
                current2 = candidate.length;
                while((current2 -= 1) >= 0) {
                  if(candidate[current2]) {
                    worklist.push(candidate[current2])
                  }
                }
              }else {
                worklist.push(candidate)
              }
            }
          }
        }
      }
    }
  }
}
function upperBound(array, func) {
  var diff, len, i, current;
  len = array.length;
  i = 0;
  while(len) {
    diff = len >>> 1;
    current = i + diff;
    if(func(array[current])) {
      len = diff
    }else {
      i = current + 1;
      len -= diff + 1
    }
  }
  return i
}
function lowerBound(array, func) {
  var diff, len, i, current;
  len = array.length;
  i = 0;
  while(len) {
    diff = len >>> 1;
    current = i + diff;
    if(func(array[current])) {
      i = current + 1;
      len -= diff + 1
    }else {
      len = diff
    }
  }
  return i
}
function extendCommentRange(comment, tokens) {
  var target, token;
  target = upperBound(tokens, function search(token) {
    return token.range[0] > comment.range[0]
  });
  comment.extendedRange = [comment.range[0], comment.range[1]];
  if(target !== tokens.length) {
    comment.extendedRange[1] = tokens[target].range[0]
  }
  target -= 1;
  if(target >= 0) {
    if(target < tokens.length) {
      comment.extendedRange[0] = tokens[target].range[1]
    }else {
      if(token.length) {
        comment.extendedRange[1] = tokens[tokens.length - 1].range[0]
      }
    }
  }
  return comment
}
function attachComments(tree, providedComments, tokens) {
  var comments = [], comment, len, i;
  if(!tree.range) {
    throw new Error("attachComments needs range information");
  }
  if(!tokens.length) {
    if(providedComments.length) {
      for(i = 0, len = providedComments.length;i < len;i += 1) {
        comment = deepCopy(providedComments[i]);
        comment.extendedRange = [0, tree.range[0]];
        comments.push(comment)
      }
      tree.leadingComments = comments
    }
    return tree
  }
  for(i = 0, len = providedComments.length;i < len;i += 1) {
    comments.push(extendCommentRange(deepCopy(providedComments[i]), tokens))
  }
  traverse(tree, {cursor:0, enter:function(node) {
    var comment;
    while(this.cursor < comments.length) {
      comment = comments[this.cursor];
      if(comment.extendedRange[1] > node.range[0]) {
        break
      }
      if(comment.extendedRange[1] === node.range[0]) {
        if(!node.leadingComments) {
          node.leadingComments = []
        }
        node.leadingComments.push(comment);
        comments.splice(this.cursor, 1)
      }else {
        this.cursor += 1
      }
    }
    if(this.cursor === comments.length) {
      return VisitorOption.Break
    }
    if(comments[this.cursor].extendedRange[0] > node.range[1]) {
      return VisitorOption.Skip
    }
  }});
  traverse(tree, {cursor:0, leave:function(node) {
    var comment;
    while(this.cursor < comments.length) {
      comment = comments[this.cursor];
      if(node.range[1] < comment.extendedRange[0]) {
        break
      }
      if(node.range[1] === comment.extendedRange[0]) {
        if(!node.trailingComments) {
          node.trailingComments = []
        }
        node.trailingComments.push(comment);
        comments.splice(this.cursor, 1)
      }else {
        this.cursor += 1
      }
    }
    if(this.cursor === comments.length) {
      return VisitorOption.Break
    }
    if(comments[this.cursor].extendedRange[0] > node.range[1]) {
      return VisitorOption.Skip
    }
  }});
  return tree
}
escodegen.version = "0.0.16-dev";
escodegen.generate = generate;
escodegen.traverse = traverse;
escodegen.attachComments = attachComments;
goog.provide("lattice");
function Lattice() {
}
function LatticeValue() {
}
Lattice.join = function(x, y) {
  if(x === BOT) {
    return y
  }
  return x.join(y)
};
Lattice.joinCompareResults = function(x, y) {
  if(x === y) {
    return x
  }
  if(x === 0) {
    return y
  }
  if(y === 0) {
    return x
  }
  return undefined
};
Lattice.subsumeComparison = function(x1, x2) {
  var s1 = x1.subsumes(x2);
  var s2 = x2.subsumes(x1);
  return s1 ? s2 ? 0 : 1 : s2 ? -1 : undefined
};
LatticeValue.prototype.equals = function(x) {
  return this.compareTo(x) === 0
};
LatticeValue.prototype.subsumes = function(x) {
  return this.compareTo(x) >= 0
};
LatticeValue.ToNumber = function(x) {
  if(x === undefined) {
    return NaN
  }
  if(x === null) {
    return 0
  }
  if(x === true) {
    return 1
  }
  if(x === false) {
    return 0
  }
  if(typeof x === "number") {
    return x
  }
  if(typeof x === "string") {
    x = x.trim();
    if(x === "Infinity" || x === "+Infinity") {
      return Infinity
    }
    if(x === "-Infinity") {
      return Infinity
    }
    if(x.startsWith("0x") || x.startsWith("0X")) {
      return parseInt(x, 16)
    }
    if(x.indexOf(".") > -1) {
      return parseFloat(x)
    }
    return parseInt(x, 10)
  }
  throw new Error(x);
};
LatticeValue.ToUInt32 = function(x) {
  var n = LatticeValue.ToNumber(x);
  if(isNaN(n) || n === 0 || n === Infinity || n === -Infinity) {
    return 0
  }
  var p = Ecma.sign(n) * Math.floor(Math.abs(n));
  var i = p % Ecma.POW_2_32;
  return i
};
LatticeValue.ToString = function(x) {
  if(x === undefined) {
    return"undefined"
  }
  if(x === null) {
    return"null"
  }
  if(x === true) {
    return"true"
  }
  if(x === false) {
    return"false"
  }
  if(typeof x === "number") {
    return x.toString()
  }
  if(typeof x === "string") {
    return x
  }
  throw new Error(x);
};
LatticeValue.ToBoolean = function(x) {
  return x ? true : false
};
LatticeValue.ToInt32 = function(x) {
  var n = LatticeValue.ToNumber(x);
  if(isNaN(n) || n === 0 || n === Infinity || n === -Infinity) {
    return 0
  }
  var p = Ecma.sign(n) * Math.floor(Math.abs(n));
  var i = p % Ecma.POW_2_32;
  if(i >= Ecma.POW_2_31) {
    return i - Ecma.POW_2_32
  }
  return i
};
LatticeValue.isArrayIndex = function(s) {
  if(typeof s === "string") {
    var n = LatticeValue.ToUInt32(s);
    return LatticeValue.ToString(n) == s && n !== Ecma.POW_2_32 - 1
  }
  return false
};
var BOT = Object.create(new LatticeValue);
BOT.join = function(other) {
  return other
};
BOT.compareTo = function(other) {
  return other === BOT ? 0 : -1
};
BOT.isAddress = function() {
  return false
};
BOT.addresses = function() {
  return false
};
BOT.conc = function() {
  return[]
};
BOT.toString = function() {
  return"_"
};
BOT.nice = function() {
  return"_"
};
BOT.ToBoolean = function() {
  return BOT
};
BOT.ToString = function() {
  return BOT
};
BOT.ToUInt32 = function() {
  return BOT
};
BOT.ToInt32 = function() {
  return BOT
};
BOT.ToNumber = function() {
  return BOT
};
BOT.accept = function(visitor) {
  return visitor.visitBOT(this)
};
var identityLattice = Object.create(new LatticeValue);
identityLattice.join = function() {
  return this
};
identityLattice.compareTo = function() {
  return 0
};
goog.provide("esp");
esprima = {};
var Token, TokenName, Syntax, PropertyKind, Messages, Regex, SyntaxTreeDelegate, source, strict, index, lineNumber, lineStart, length, delegate, buffer, state, extra;
Token = {BooleanLiteral:1, EOF:2, Identifier:3, Keyword:4, NullLiteral:5, NumericLiteral:6, Punctuator:7, StringLiteral:8};
TokenName = {};
TokenName[Token.BooleanLiteral] = "Boolean";
TokenName[Token.EOF] = "<end>";
TokenName[Token.Identifier] = "Identifier";
TokenName[Token.Keyword] = "Keyword";
TokenName[Token.NullLiteral] = "Null";
TokenName[Token.NumericLiteral] = "Numeric";
TokenName[Token.Punctuator] = "Punctuator";
TokenName[Token.StringLiteral] = "String";
Syntax = {AssignmentExpression:"AssignmentExpression", ArrayExpression:"ArrayExpression", BlockStatement:"BlockStatement", BinaryExpression:"BinaryExpression", BreakStatement:"BreakStatement", CallExpression:"CallExpression", CatchClause:"CatchClause", ConditionalExpression:"ConditionalExpression", ContinueStatement:"ContinueStatement", DoWhileStatement:"DoWhileStatement", DebuggerStatement:"DebuggerStatement", EmptyStatement:"EmptyStatement", ExpressionStatement:"ExpressionStatement", ForStatement:"ForStatement", 
ForInStatement:"ForInStatement", FunctionDeclaration:"FunctionDeclaration", FunctionExpression:"FunctionExpression", Identifier:"Identifier", IfStatement:"IfStatement", Literal:"Literal", LabeledStatement:"LabeledStatement", LogicalExpression:"LogicalExpression", MemberExpression:"MemberExpression", NewExpression:"NewExpression", ObjectExpression:"ObjectExpression", Program:"Program", Property:"Property", ReturnStatement:"ReturnStatement", SequenceExpression:"SequenceExpression", SwitchStatement:"SwitchStatement", 
SwitchCase:"SwitchCase", ThisExpression:"ThisExpression", ThrowStatement:"ThrowStatement", TryStatement:"TryStatement", UnaryExpression:"UnaryExpression", UpdateExpression:"UpdateExpression", VariableDeclaration:"VariableDeclaration", VariableDeclarator:"VariableDeclarator", WhileStatement:"WhileStatement", WithStatement:"WithStatement"};
PropertyKind = {Data:1, Get:2, Set:4};
Messages = {UnexpectedToken:"Unexpected token %0", UnexpectedNumber:"Unexpected number", UnexpectedString:"Unexpected string", UnexpectedIdentifier:"Unexpected identifier", UnexpectedReserved:"Unexpected reserved word", UnexpectedEOS:"Unexpected end of input", NewlineAfterThrow:"Illegal newline after throw", InvalidRegExp:"Invalid regular expression", UnterminatedRegExp:"Invalid regular expression: missing /", InvalidLHSInAssignment:"Invalid left-hand side in assignment", InvalidLHSInForIn:"Invalid left-hand side in for-in", 
MultipleDefaultsInSwitch:"More than one default clause in switch statement", NoCatchOrFinally:"Missing catch or finally after try", UnknownLabel:"Undefined label '%0'", Redeclaration:"%0 '%1' has already been declared", IllegalContinue:"Illegal continue statement", IllegalBreak:"Illegal break statement", IllegalReturn:"Illegal return statement", StrictModeWith:"Strict mode code may not include a with statement", StrictCatchVariable:"Catch variable may not be eval or arguments in strict mode", StrictVarName:"Variable name may not be eval or arguments in strict mode", 
StrictParamName:"Parameter name eval or arguments is not allowed in strict mode", StrictParamDupe:"Strict mode function may not have duplicate parameter names", StrictFunctionName:"Function name may not be eval or arguments in strict mode", StrictOctalLiteral:"Octal literals are not allowed in strict mode.", StrictDelete:"Delete of an unqualified identifier in strict mode.", StrictDuplicateProperty:"Duplicate data property in object literal not allowed in strict mode", AccessorDataProperty:"Object literal may not have data and accessor property with the same name", 
AccessorGetSet:"Object literal may not have multiple get/set accessors with the same name", StrictLHSAssignment:"Assignment to eval or arguments is not allowed in strict mode", StrictLHSPostfix:"Postfix increment/decrement may not have eval or arguments operand in strict mode", StrictLHSPrefix:"Prefix increment/decrement may not have eval or arguments operand in strict mode", StrictReservedWord:"Use of future reserved word in strict mode"};
Regex = {NonAsciiIdentifierStart:new RegExp("[\u00aa\u00b5\u00ba\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc]"), 
NonAsciiIdentifierPart:new RegExp("[\u00aa\u00b5\u00ba\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0300-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u0483-\u0487\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u05d0-\u05ea\u05f0-\u05f2\u0610-\u061a\u0620-\u0669\u066e-\u06d3\u06d5-\u06dc\u06df-\u06e8\u06ea-\u06fc\u06ff\u0710-\u074a\u074d-\u07b1\u07c0-\u07f5\u07fa\u0800-\u082d\u0840-\u085b\u08a0\u08a2-\u08ac\u08e4-\u08fe\u0900-\u0963\u0966-\u096f\u0971-\u0977\u0979-\u097f\u0981-\u0983\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bc-\u09c4\u09c7\u09c8\u09cb-\u09ce\u09d7\u09dc\u09dd\u09df-\u09e3\u09e6-\u09f1\u0a01-\u0a03\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a59-\u0a5c\u0a5e\u0a66-\u0a75\u0a81-\u0a83\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abc-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ad0\u0ae0-\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3c-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b5c\u0b5d\u0b5f-\u0b63\u0b66-\u0b6f\u0b71\u0b82\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd0\u0bd7\u0be6-\u0bef\u0c01-\u0c03\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c58\u0c59\u0c60-\u0c63\u0c66-\u0c6f\u0c82\u0c83\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbc-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0cde\u0ce0-\u0ce3\u0ce6-\u0cef\u0cf1\u0cf2\u0d02\u0d03\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d-\u0d44\u0d46-\u0d48\u0d4a-\u0d4e\u0d57\u0d60-\u0d63\u0d66-\u0d6f\u0d7a-\u0d7f\u0d82\u0d83\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0df2\u0df3\u0e01-\u0e3a\u0e40-\u0e4e\u0e50-\u0e59\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb9\u0ebb-\u0ebd\u0ec0-\u0ec4\u0ec6\u0ec8-\u0ecd\u0ed0-\u0ed9\u0edc-\u0edf\u0f00\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e-\u0f47\u0f49-\u0f6c\u0f71-\u0f84\u0f86-\u0f97\u0f99-\u0fbc\u0fc6\u1000-\u1049\u1050-\u109d\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u135d-\u135f\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176c\u176e-\u1770\u1772\u1773\u1780-\u17d3\u17d7\u17dc\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u1820-\u1877\u1880-\u18aa\u18b0-\u18f5\u1900-\u191c\u1920-\u192b\u1930-\u193b\u1946-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u19d0-\u19d9\u1a00-\u1a1b\u1a20-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1aa7\u1b00-\u1b4b\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1bf3\u1c00-\u1c37\u1c40-\u1c49\u1c4d-\u1c7d\u1cd0-\u1cd2\u1cd4-\u1cf6\u1d00-\u1de6\u1dfc-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u200c\u200d\u203f\u2040\u2054\u2071\u207f\u2090-\u209c\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d7f-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2de0-\u2dff\u2e2f\u3005-\u3007\u3021-\u302f\u3031-\u3035\u3038-\u303c\u3041-\u3096\u3099\u309a\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua62b\ua640-\ua66f\ua674-\ua67d\ua67f-\ua697\ua69f-\ua6f1\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua827\ua840-\ua873\ua880-\ua8c4\ua8d0-\ua8d9\ua8e0-\ua8f7\ua8fb\ua900-\ua92d\ua930-\ua953\ua960-\ua97c\ua980-\ua9c0\ua9cf-\ua9d9\uaa00-\uaa36\uaa40-\uaa4d\uaa50-\uaa59\uaa60-\uaa76\uaa7a\uaa7b\uaa80-\uaac2\uaadb-\uaadd\uaae0-\uaaef\uaaf2-\uaaf6\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabea\uabec\uabed\uabf0-\uabf9\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe00-\ufe0f\ufe20-\ufe26\ufe33\ufe34\ufe4d-\ufe4f\ufe70-\ufe74\ufe76-\ufefc\uff10-\uff19\uff21-\uff3a\uff3f\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc]")};
function assert(condition, message) {
  if(!condition) {
    throw new Error("ASSERT: " + message);
  }
}
function sliceSource(from, to) {
  return source.slice(from, to)
}
if(typeof"esprima"[0] === "undefined") {
  sliceSource = function sliceArraySource(from, to) {
    return source.slice(from, to).join("")
  }
}
function isDecimalDigit(ch) {
  return"0123456789".indexOf(ch) >= 0
}
function isHexDigit(ch) {
  return"0123456789abcdefABCDEF".indexOf(ch) >= 0
}
function isOctalDigit(ch) {
  return"01234567".indexOf(ch) >= 0
}
function isWhiteSpace(ch) {
  return ch === " " || ch === "\t" || ch === "\x0B" || ch === "\u000c" || ch === "\u00a0" || ch.charCodeAt(0) >= 5760 && "\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\ufeff".indexOf(ch) >= 0
}
function isLineTerminator(ch) {
  return ch === "\n" || ch === "\r" || ch === "\u2028" || ch === "\u2029"
}
function isIdentifierStart(ch) {
  return ch === "$" || ch === "_" || ch === "\\" || ch >= "a" && ch <= "z" || ch >= "A" && ch <= "Z" || ch.charCodeAt(0) >= 128 && Regex.NonAsciiIdentifierStart.test(ch)
}
function isIdentifierPart(ch) {
  return ch === "$" || ch === "_" || ch === "\\" || ch >= "a" && ch <= "z" || ch >= "A" && ch <= "Z" || ch >= "0" && ch <= "9" || ch.charCodeAt(0) >= 128 && Regex.NonAsciiIdentifierPart.test(ch)
}
function isFutureReservedWord(id) {
  switch(id) {
    case "class":
    ;
    case "enum":
    ;
    case "export":
    ;
    case "extends":
    ;
    case "import":
    ;
    case "super":
      return true
  }
  return false
}
function isStrictModeReservedWord(id) {
  switch(id) {
    case "implements":
    ;
    case "interface":
    ;
    case "package":
    ;
    case "private":
    ;
    case "protected":
    ;
    case "public":
    ;
    case "static":
    ;
    case "yield":
    ;
    case "let":
      return true
  }
  return false
}
function isRestrictedWord(id) {
  return id === "eval" || id === "arguments"
}
function isKeyword(id) {
  var keyword = false;
  switch(id.length) {
    case 2:
      keyword = id === "if" || id === "in" || id === "do";
      break;
    case 3:
      keyword = id === "var" || id === "for" || id === "new" || id === "try";
      break;
    case 4:
      keyword = id === "this" || id === "else" || id === "case" || id === "void" || id === "with";
      break;
    case 5:
      keyword = id === "while" || id === "break" || id === "catch" || id === "throw";
      break;
    case 6:
      keyword = id === "return" || id === "typeof" || id === "delete" || id === "switch";
      break;
    case 7:
      keyword = id === "default" || id === "finally";
      break;
    case 8:
      keyword = id === "function" || id === "continue" || id === "debugger";
      break;
    case 10:
      keyword = id === "instanceof";
      break
  }
  if(keyword) {
    return true
  }
  switch(id) {
    case "const":
      return true;
    case "yield":
    ;
    case "let":
      return true
  }
  if(strict && isStrictModeReservedWord(id)) {
    return true
  }
  return isFutureReservedWord(id)
}
function skipComment() {
  var ch, blockComment, lineComment;
  blockComment = false;
  lineComment = false;
  while(index < length) {
    ch = source[index];
    if(lineComment) {
      ch = source[index++];
      if(isLineTerminator(ch)) {
        lineComment = false;
        if(ch === "\r" && source[index] === "\n") {
          ++index
        }
        ++lineNumber;
        lineStart = index
      }
    }else {
      if(blockComment) {
        if(isLineTerminator(ch)) {
          if(ch === "\r" && source[index + 1] === "\n") {
            ++index
          }
          ++lineNumber;
          ++index;
          lineStart = index;
          if(index >= length) {
            throwError({}, Messages.UnexpectedToken, "ILLEGAL")
          }
        }else {
          ch = source[index++];
          if(index >= length) {
            throwError({}, Messages.UnexpectedToken, "ILLEGAL")
          }
          if(ch === "*") {
            ch = source[index];
            if(ch === "/") {
              ++index;
              blockComment = false
            }
          }
        }
      }else {
        if(ch === "/") {
          ch = source[index + 1];
          if(ch === "/") {
            index += 2;
            lineComment = true
          }else {
            if(ch === "*") {
              index += 2;
              blockComment = true;
              if(index >= length) {
                throwError({}, Messages.UnexpectedToken, "ILLEGAL")
              }
            }else {
              break
            }
          }
        }else {
          if(isWhiteSpace(ch)) {
            ++index
          }else {
            if(isLineTerminator(ch)) {
              ++index;
              if(ch === "\r" && source[index] === "\n") {
                ++index
              }
              ++lineNumber;
              lineStart = index
            }else {
              break
            }
          }
        }
      }
    }
  }
}
function scanHexEscape(prefix) {
  var i, len, ch, code = 0;
  len = prefix === "u" ? 4 : 2;
  for(i = 0;i < len;++i) {
    if(index < length && isHexDigit(source[index])) {
      ch = source[index++];
      code = code * 16 + "0123456789abcdef".indexOf(ch.toLowerCase())
    }else {
      return""
    }
  }
  return String.fromCharCode(code)
}
function scanIdentifier() {
  var ch, start, id, restore;
  ch = source[index];
  if(!isIdentifierStart(ch)) {
    return
  }
  start = index;
  if(ch === "\\") {
    ++index;
    if(source[index] !== "u") {
      return
    }
    ++index;
    restore = index;
    ch = scanHexEscape("u");
    if(ch) {
      if(ch === "\\" || !isIdentifierStart(ch)) {
        return
      }
      id = ch
    }else {
      index = restore;
      id = "u"
    }
  }else {
    id = source[index++]
  }
  while(index < length) {
    ch = source[index];
    if(!isIdentifierPart(ch)) {
      break
    }
    if(ch === "\\") {
      ++index;
      if(source[index] !== "u") {
        return
      }
      ++index;
      restore = index;
      ch = scanHexEscape("u");
      if(ch) {
        if(ch === "\\" || !isIdentifierPart(ch)) {
          return
        }
        id += ch
      }else {
        index = restore;
        id += "u"
      }
    }else {
      id += source[index++]
    }
  }
  if(id.length === 1) {
    return{type:Token.Identifier, value:id, lineNumber:lineNumber, lineStart:lineStart, range:[start, index]}
  }
  if(isKeyword(id)) {
    return{type:Token.Keyword, value:id, lineNumber:lineNumber, lineStart:lineStart, range:[start, index]}
  }
  if(id === "null") {
    return{type:Token.NullLiteral, value:id, lineNumber:lineNumber, lineStart:lineStart, range:[start, index]}
  }
  if(id === "true" || id === "false") {
    return{type:Token.BooleanLiteral, value:id, lineNumber:lineNumber, lineStart:lineStart, range:[start, index]}
  }
  return{type:Token.Identifier, value:id, lineNumber:lineNumber, lineStart:lineStart, range:[start, index]}
}
function scanPunctuator() {
  var start = index, ch1 = source[index], ch2, ch3, ch4;
  if(ch1 === ";" || ch1 === "{" || ch1 === "}") {
    ++index;
    return{type:Token.Punctuator, value:ch1, lineNumber:lineNumber, lineStart:lineStart, range:[start, index]}
  }
  if(ch1 === "," || ch1 === "(" || ch1 === ")") {
    ++index;
    return{type:Token.Punctuator, value:ch1, lineNumber:lineNumber, lineStart:lineStart, range:[start, index]}
  }
  ch2 = source[index + 1];
  if(ch1 === "." && !isDecimalDigit(ch2)) {
    return{type:Token.Punctuator, value:source[index++], lineNumber:lineNumber, lineStart:lineStart, range:[start, index]}
  }
  ch3 = source[index + 2];
  ch4 = source[index + 3];
  if(ch1 === ">" && ch2 === ">" && ch3 === ">") {
    if(ch4 === "=") {
      index += 4;
      return{type:Token.Punctuator, value:">>>=", lineNumber:lineNumber, lineStart:lineStart, range:[start, index]}
    }
  }
  if(ch1 === "=" && ch2 === "=" && ch3 === "=") {
    index += 3;
    return{type:Token.Punctuator, value:"===", lineNumber:lineNumber, lineStart:lineStart, range:[start, index]}
  }
  if(ch1 === "!" && ch2 === "=" && ch3 === "=") {
    index += 3;
    return{type:Token.Punctuator, value:"!==", lineNumber:lineNumber, lineStart:lineStart, range:[start, index]}
  }
  if(ch1 === ">" && ch2 === ">" && ch3 === ">") {
    index += 3;
    return{type:Token.Punctuator, value:">>>", lineNumber:lineNumber, lineStart:lineStart, range:[start, index]}
  }
  if(ch1 === "<" && ch2 === "<" && ch3 === "=") {
    index += 3;
    return{type:Token.Punctuator, value:"<<=", lineNumber:lineNumber, lineStart:lineStart, range:[start, index]}
  }
  if(ch1 === ">" && ch2 === ">" && ch3 === "=") {
    index += 3;
    return{type:Token.Punctuator, value:">>=", lineNumber:lineNumber, lineStart:lineStart, range:[start, index]}
  }
  if(ch2 === "=") {
    if("<>=!+-*%&|^/".indexOf(ch1) >= 0) {
      index += 2;
      return{type:Token.Punctuator, value:ch1 + ch2, lineNumber:lineNumber, lineStart:lineStart, range:[start, index]}
    }
  }
  if(ch1 === ch2 && "+-<>&|".indexOf(ch1) >= 0) {
    if("+-<>&|".indexOf(ch2) >= 0) {
      index += 2;
      return{type:Token.Punctuator, value:ch1 + ch2, lineNumber:lineNumber, lineStart:lineStart, range:[start, index]}
    }
  }
  if("[]<>+-*%&|^!~?:=/".indexOf(ch1) >= 0) {
    return{type:Token.Punctuator, value:source[index++], lineNumber:lineNumber, lineStart:lineStart, range:[start, index]}
  }
}
function scanNumericLiteral() {
  var number, start, ch;
  ch = source[index];
  assert(isDecimalDigit(ch) || ch === ".", "Numeric literal must start with a decimal digit or a decimal point");
  start = index;
  number = "";
  if(ch !== ".") {
    number = source[index++];
    ch = source[index];
    if(number === "0") {
      if(ch === "x" || ch === "X") {
        number += source[index++];
        while(index < length) {
          ch = source[index];
          if(!isHexDigit(ch)) {
            break
          }
          number += source[index++]
        }
        if(number.length <= 2) {
          throwError({}, Messages.UnexpectedToken, "ILLEGAL")
        }
        if(index < length) {
          ch = source[index];
          if(isIdentifierStart(ch)) {
            throwError({}, Messages.UnexpectedToken, "ILLEGAL")
          }
        }
        return{type:Token.NumericLiteral, value:parseInt(number, 16), lineNumber:lineNumber, lineStart:lineStart, range:[start, index]}
      }else {
        if(isOctalDigit(ch)) {
          number += source[index++];
          while(index < length) {
            ch = source[index];
            if(!isOctalDigit(ch)) {
              break
            }
            number += source[index++]
          }
          if(index < length) {
            ch = source[index];
            if(isIdentifierStart(ch) || isDecimalDigit(ch)) {
              throwError({}, Messages.UnexpectedToken, "ILLEGAL")
            }
          }
          return{type:Token.NumericLiteral, value:parseInt(number, 8), octal:true, lineNumber:lineNumber, lineStart:lineStart, range:[start, index]}
        }
      }
      if(isDecimalDigit(ch)) {
        throwError({}, Messages.UnexpectedToken, "ILLEGAL")
      }
    }
    while(index < length) {
      ch = source[index];
      if(!isDecimalDigit(ch)) {
        break
      }
      number += source[index++]
    }
  }
  if(ch === ".") {
    number += source[index++];
    while(index < length) {
      ch = source[index];
      if(!isDecimalDigit(ch)) {
        break
      }
      number += source[index++]
    }
  }
  if(ch === "e" || ch === "E") {
    number += source[index++];
    ch = source[index];
    if(ch === "+" || ch === "-") {
      number += source[index++]
    }
    ch = source[index];
    if(isDecimalDigit(ch)) {
      number += source[index++];
      while(index < length) {
        ch = source[index];
        if(!isDecimalDigit(ch)) {
          break
        }
        number += source[index++]
      }
    }else {
      ch = "character " + ch;
      if(index >= length) {
        ch = "<end>"
      }
      throwError({}, Messages.UnexpectedToken, "ILLEGAL")
    }
  }
  if(index < length) {
    ch = source[index];
    if(isIdentifierStart(ch)) {
      throwError({}, Messages.UnexpectedToken, "ILLEGAL")
    }
  }
  return{type:Token.NumericLiteral, value:parseFloat(number), lineNumber:lineNumber, lineStart:lineStart, range:[start, index]}
}
function scanStringLiteral() {
  var str = "", quote, start, ch, code, unescaped, restore, octal = false;
  quote = source[index];
  assert(quote === "'" || quote === '"', "String literal must starts with a quote");
  start = index;
  ++index;
  while(index < length) {
    ch = source[index++];
    if(ch === quote) {
      quote = "";
      break
    }else {
      if(ch === "\\") {
        ch = source[index++];
        if(!isLineTerminator(ch)) {
          switch(ch) {
            case "n":
              str += "\n";
              break;
            case "r":
              str += "\r";
              break;
            case "t":
              str += "\t";
              break;
            case "u":
            ;
            case "x":
              restore = index;
              unescaped = scanHexEscape(ch);
              if(unescaped) {
                str += unescaped
              }else {
                index = restore;
                str += ch
              }
              break;
            case "b":
              str += "\u0008";
              break;
            case "f":
              str += "\u000c";
              break;
            case "v":
              str += "\v";
              break;
            default:
              if(isOctalDigit(ch)) {
                code = "01234567".indexOf(ch);
                if(code !== 0) {
                  octal = true
                }
                if(index < length && isOctalDigit(source[index])) {
                  octal = true;
                  code = code * 8 + "01234567".indexOf(source[index++]);
                  if("0123".indexOf(ch) >= 0 && index < length && isOctalDigit(source[index])) {
                    code = code * 8 + "01234567".indexOf(source[index++])
                  }
                }
                str += String.fromCharCode(code)
              }else {
                str += ch
              }
              break
          }
        }else {
          ++lineNumber;
          if(ch === "\r" && source[index] === "\n") {
            ++index
          }
        }
      }else {
        if(isLineTerminator(ch)) {
          break
        }else {
          str += ch
        }
      }
    }
  }
  if(quote !== "") {
    throwError({}, Messages.UnexpectedToken, "ILLEGAL")
  }
  return{type:Token.StringLiteral, value:str, octal:octal, lineNumber:lineNumber, lineStart:lineStart, range:[start, index]}
}
function scanRegExp() {
  var str = "", ch, start, pattern, flags, value, classMarker = false, restore, terminated = false;
  buffer = null;
  skipComment();
  start = index;
  ch = source[index];
  assert(ch === "/", "Regular expression literal must start with a slash");
  str = source[index++];
  while(index < length) {
    ch = source[index++];
    str += ch;
    if(classMarker) {
      if(ch === "]") {
        classMarker = false
      }
    }else {
      if(ch === "\\") {
        ch = source[index++];
        if(isLineTerminator(ch)) {
          throwError({}, Messages.UnterminatedRegExp)
        }
        str += ch
      }else {
        if(ch === "/") {
          terminated = true;
          break
        }else {
          if(ch === "[") {
            classMarker = true
          }else {
            if(isLineTerminator(ch)) {
              throwError({}, Messages.UnterminatedRegExp)
            }
          }
        }
      }
    }
  }
  if(!terminated) {
    throwError({}, Messages.UnterminatedRegExp)
  }
  pattern = str.substr(1, str.length - 2);
  flags = "";
  while(index < length) {
    ch = source[index];
    if(!isIdentifierPart(ch)) {
      break
    }
    ++index;
    if(ch === "\\" && index < length) {
      ch = source[index];
      if(ch === "u") {
        ++index;
        restore = index;
        ch = scanHexEscape("u");
        if(ch) {
          flags += ch;
          str += "\\u";
          for(;restore < index;++restore) {
            str += source[restore]
          }
        }else {
          index = restore;
          flags += "u";
          str += "\\u"
        }
      }else {
        str += "\\"
      }
    }else {
      flags += ch;
      str += ch
    }
  }
  try {
    value = new RegExp(pattern, flags)
  }catch(e) {
    throwError({}, Messages.InvalidRegExp)
  }
  return{literal:str, value:value, range:[start, index]}
}
function isIdentifierName(token) {
  return token.type === Token.Identifier || token.type === Token.Keyword || token.type === Token.BooleanLiteral || token.type === Token.NullLiteral
}
function advance() {
  var ch, token;
  skipComment();
  if(index >= length) {
    return{type:Token.EOF, lineNumber:lineNumber, lineStart:lineStart, range:[index, index]}
  }
  token = scanPunctuator();
  if(typeof token !== "undefined") {
    return token
  }
  ch = source[index];
  if(ch === "'" || ch === '"') {
    return scanStringLiteral()
  }
  if(ch === "." || isDecimalDigit(ch)) {
    return scanNumericLiteral()
  }
  token = scanIdentifier();
  if(typeof token !== "undefined") {
    return token
  }
  throwError({}, Messages.UnexpectedToken, "ILLEGAL")
}
function lex() {
  var token;
  if(buffer) {
    index = buffer.range[1];
    lineNumber = buffer.lineNumber;
    lineStart = buffer.lineStart;
    token = buffer;
    buffer = null;
    return token
  }
  buffer = null;
  return advance()
}
function lookahead() {
  var pos, line, start;
  if(buffer !== null) {
    return buffer
  }
  pos = index;
  line = lineNumber;
  start = lineStart;
  buffer = advance();
  index = pos;
  lineNumber = line;
  lineStart = start;
  return buffer
}
SyntaxTreeDelegate = {name:"SyntaxTree", createArrayExpression:function(elements) {
  return{type:Syntax.ArrayExpression, elements:elements}
}, createAssignmentExpression:function(operator, left, right) {
  return{type:Syntax.AssignmentExpression, operator:operator, left:left, right:right}
}, createBinaryExpression:function(operator, left, right) {
  return{type:Syntax.BinaryExpression, operator:operator, left:left, right:right}
}, createBlockStatement:function(body) {
  return{type:Syntax.BlockStatement, body:body}
}, createBreakStatement:function(label) {
  return{type:Syntax.BreakStatement, label:label}
}, createCallExpression:function(callee, args) {
  return{type:Syntax.CallExpression, callee:callee, "arguments":args}
}, createCatchClause:function(param, body) {
  return{type:Syntax.CatchClause, param:param, body:body}
}, createConditionalExpression:function(test, consequent, alternate) {
  return{type:Syntax.ConditionalExpression, test:test, consequent:consequent, alternate:alternate}
}, createContinueStatement:function(label) {
  return{type:Syntax.ContinueStatement, label:label}
}, createDebuggerStatement:function() {
  return{type:Syntax.DebuggerStatement}
}, createDoWhileStatement:function(body, test) {
  return{type:Syntax.DoWhileStatement, body:body, test:test}
}, createEmptyStatement:function() {
  return{type:Syntax.EmptyStatement}
}, createExpressionStatement:function(expression) {
  return{type:Syntax.ExpressionStatement, expression:expression}
}, createForStatement:function(init, test, update, body) {
  return{type:Syntax.ForStatement, init:init, test:test, update:update, body:body}
}, createForInStatement:function(left, right, body) {
  return{type:Syntax.ForInStatement, left:left, right:right, body:body, each:false}
}, createFunctionDeclaration:function(id, params, defaults, body) {
  return{type:Syntax.FunctionDeclaration, id:id, params:params, defaults:defaults, body:body, rest:null, generator:false, expression:false}
}, createFunctionExpression:function(id, params, defaults, body) {
  return{type:Syntax.FunctionExpression, id:id, params:params, defaults:defaults, body:body, rest:null, generator:false, expression:false}
}, createIdentifier:function(name) {
  return{type:Syntax.Identifier, name:name}
}, createIfStatement:function(test, consequent, alternate) {
  return{type:Syntax.IfStatement, test:test, consequent:consequent, alternate:alternate}
}, createLabeledStatement:function(label, body) {
  return{type:Syntax.LabeledStatement, label:label, body:body}
}, createLiteral:function(token) {
  return{type:Syntax.Literal, value:token.value}
}, createLogicalExpression:function(operator, left, right) {
  return{type:Syntax.LogicalExpression, operator:operator, left:left, right:right}
}, createMemberExpression:function(accessor, object, property) {
  return{type:Syntax.MemberExpression, computed:accessor === "[", object:object, property:property}
}, createNewExpression:function(callee, args) {
  return{type:Syntax.NewExpression, callee:callee, "arguments":args}
}, createObjectExpression:function(properties) {
  return{type:Syntax.ObjectExpression, properties:properties}
}, createPostfixExpression:function(operator, argument) {
  return{type:Syntax.UpdateExpression, operator:operator, argument:argument, prefix:false}
}, createProgram:function(body) {
  return{type:Syntax.Program, body:body}
}, createProperty:function(kind, key, value) {
  return{type:Syntax.Property, key:key, value:value, kind:kind}
}, createReturnStatement:function(argument) {
  return{type:Syntax.ReturnStatement, argument:argument}
}, createSequenceExpression:function(expressions) {
  return{type:Syntax.SequenceExpression, expressions:expressions}
}, createSwitchCase:function(test, consequent) {
  return{type:Syntax.SwitchCase, test:test, consequent:consequent}
}, createSwitchStatement:function(discriminant, cases) {
  return{type:Syntax.SwitchStatement, discriminant:discriminant, cases:cases}
}, createThisExpression:function() {
  return{type:Syntax.ThisExpression}
}, createThrowStatement:function(argument) {
  return{type:Syntax.ThrowStatement, argument:argument}
}, createTryStatement:function(block, guardedHandlers, handlers, finalizer) {
  return{type:Syntax.TryStatement, block:block, guardedHandlers:guardedHandlers, handlers:handlers, finalizer:finalizer}
}, createUnaryExpression:function(operator, argument) {
  if(operator === "++" || operator === "--") {
    return{type:Syntax.UpdateExpression, operator:operator, argument:argument, prefix:true}
  }else {
    return{type:Syntax.UnaryExpression, operator:operator, argument:argument}
  }
}, createVariableDeclaration:function(declarations, kind) {
  return{type:Syntax.VariableDeclaration, declarations:declarations, kind:kind}
}, createVariableDeclarator:function(id, init) {
  return{type:Syntax.VariableDeclarator, id:id, init:init}
}, createWhileStatement:function(test, body) {
  return{type:Syntax.WhileStatement, test:test, body:body}
}, createWithStatement:function(object, body) {
  return{type:Syntax.WithStatement, object:object, body:body}
}};
function peekLineTerminator() {
  var pos, line, start, found;
  pos = index;
  line = lineNumber;
  start = lineStart;
  skipComment();
  found = lineNumber !== line;
  index = pos;
  lineNumber = line;
  lineStart = start;
  return found
}
function throwError(token, messageFormat) {
  var error, args = Array.prototype.slice.call(arguments, 2), msg = messageFormat.replace(/%(\d)/g, function(whole, index) {
    return args[index] || ""
  });
  if(typeof token.lineNumber === "number") {
    error = new Error("Line " + token.lineNumber + ": " + msg);
    error.index = token.range[0];
    error.lineNumber = token.lineNumber;
    error.column = token.range[0] - lineStart + 1
  }else {
    error = new Error("Line " + lineNumber + ": " + msg);
    error.index = index;
    error.lineNumber = lineNumber;
    error.column = index - lineStart + 1
  }
  throw error;
}
function throwErrorTolerant() {
  try {
    throwError.apply(null, arguments)
  }catch(e) {
    if(extra.errors) {
      extra.errors.push(e)
    }else {
      throw e;
    }
  }
}
function throwUnexpected(token) {
  if(token.type === Token.EOF) {
    throwError(token, Messages.UnexpectedEOS)
  }
  if(token.type === Token.NumericLiteral) {
    throwError(token, Messages.UnexpectedNumber)
  }
  if(token.type === Token.StringLiteral) {
    throwError(token, Messages.UnexpectedString)
  }
  if(token.type === Token.Identifier) {
    throwError(token, Messages.UnexpectedIdentifier)
  }
  if(token.type === Token.Keyword) {
    if(isFutureReservedWord(token.value)) {
      throwError(token, Messages.UnexpectedReserved)
    }else {
      if(strict && isStrictModeReservedWord(token.value)) {
        throwErrorTolerant(token, Messages.StrictReservedWord);
        return
      }
    }
    throwError(token, Messages.UnexpectedToken, token.value)
  }
  throwError(token, Messages.UnexpectedToken, token.value)
}
function expect(value) {
  var token = lex();
  if(token.type !== Token.Punctuator || token.value !== value) {
    throwUnexpected(token)
  }
}
function expectKeyword(keyword) {
  var token = lex();
  if(token.type !== Token.Keyword || token.value !== keyword) {
    throwUnexpected(token)
  }
}
function match(value) {
  var token = lookahead();
  return token.type === Token.Punctuator && token.value === value
}
function matchKeyword(keyword) {
  var token = lookahead();
  return token.type === Token.Keyword && token.value === keyword
}
function matchAssign() {
  var token = lookahead(), op = token.value;
  if(token.type !== Token.Punctuator) {
    return false
  }
  return op === "=" || op === "*=" || op === "/=" || op === "%=" || op === "+=" || op === "-=" || op === "<<=" || op === ">>=" || op === ">>>=" || op === "&=" || op === "^=" || op === "|="
}
function consumeSemicolon() {
  var token, line;
  if(source[index] === ";") {
    lex();
    return
  }
  line = lineNumber;
  skipComment();
  if(lineNumber !== line) {
    return
  }
  if(match(";")) {
    lex();
    return
  }
  token = lookahead();
  if(token.type !== Token.EOF && !match("}")) {
    throwUnexpected(token)
  }
  return
}
function isLeftHandSide(expr) {
  return expr.type === Syntax.Identifier || expr.type === Syntax.MemberExpression
}
function parseArrayInitialiser() {
  var elements = [];
  expect("[");
  while(!match("]")) {
    if(match(",")) {
      lex();
      elements.push(null)
    }else {
      elements.push(parseAssignmentExpression());
      if(!match("]")) {
        expect(",")
      }
    }
  }
  expect("]");
  return delegate.createArrayExpression(elements)
}
function parsePropertyFunction(param, first) {
  var previousStrict, body;
  previousStrict = strict;
  body = parseFunctionSourceElements();
  if(first && strict && isRestrictedWord(param[0].name)) {
    throwErrorTolerant(first, Messages.StrictParamName)
  }
  strict = previousStrict;
  return delegate.createFunctionExpression(null, param, [], body)
}
function parseObjectPropertyKey() {
  var token = lex();
  if(token.type === Token.StringLiteral || token.type === Token.NumericLiteral) {
    if(strict && token.octal) {
      throwErrorTolerant(token, Messages.StrictOctalLiteral)
    }
    return delegate.createLiteral(token)
  }
  return delegate.createIdentifier(token.value)
}
function parseObjectProperty() {
  var token, key, id, value, param;
  token = lookahead();
  if(token.type === Token.Identifier) {
    id = parseObjectPropertyKey();
    if(token.value === "get" && !match(":")) {
      key = parseObjectPropertyKey();
      expect("(");
      expect(")");
      value = parsePropertyFunction([]);
      return delegate.createProperty("get", key, value)
    }else {
      if(token.value === "set" && !match(":")) {
        key = parseObjectPropertyKey();
        expect("(");
        token = lookahead();
        if(token.type !== Token.Identifier) {
          throwUnexpected(lex())
        }
        param = [parseVariableIdentifier()];
        expect(")");
        value = parsePropertyFunction(param, token);
        return delegate.createProperty("set", key, value)
      }else {
        expect(":");
        value = parseAssignmentExpression();
        return delegate.createProperty("init", id, value)
      }
    }
  }else {
    if(token.type === Token.EOF || token.type === Token.Punctuator) {
      throwUnexpected(token)
    }else {
      key = parseObjectPropertyKey();
      expect(":");
      value = parseAssignmentExpression();
      return delegate.createProperty("init", key, value)
    }
  }
}
function parseObjectInitialiser() {
  var properties = [], property, name, kind, map = {}, toString = String;
  expect("{");
  while(!match("}")) {
    property = parseObjectProperty();
    if(property.key.type === Syntax.Identifier) {
      name = property.key.name
    }else {
      name = toString(property.key.value)
    }
    kind = property.kind === "init" ? PropertyKind.Data : property.kind === "get" ? PropertyKind.Get : PropertyKind.Set;
    if(Object.prototype.hasOwnProperty.call(map, name)) {
      if(map[name] === PropertyKind.Data) {
        if(strict && kind === PropertyKind.Data) {
          throwErrorTolerant({}, Messages.StrictDuplicateProperty)
        }else {
          if(kind !== PropertyKind.Data) {
            throwErrorTolerant({}, Messages.AccessorDataProperty)
          }
        }
      }else {
        if(kind === PropertyKind.Data) {
          throwErrorTolerant({}, Messages.AccessorDataProperty)
        }else {
          if(map[name] & kind) {
            throwErrorTolerant({}, Messages.AccessorGetSet)
          }
        }
      }
      map[name] |= kind
    }else {
      map[name] = kind
    }
    properties.push(property);
    if(!match("}")) {
      expect(",")
    }
  }
  expect("}");
  return delegate.createObjectExpression(properties)
}
function parseGroupExpression() {
  var expr;
  expect("(");
  expr = parseExpression();
  expect(")");
  return expr
}
function parsePrimaryExpression() {
  var expr, token = lookahead(), type = token.type;
  if(type === Token.Identifier) {
    lex();
    return delegate.createIdentifier(token.value)
  }
  if(type === Token.StringLiteral || type === Token.NumericLiteral) {
    if(strict && token.octal) {
      throwErrorTolerant(token, Messages.StrictOctalLiteral)
    }
    return delegate.createLiteral(lex())
  }
  if(type === Token.Keyword) {
    if(matchKeyword("this")) {
      lex();
      return delegate.createThisExpression()
    }
    if(matchKeyword("function")) {
      return parseFunctionExpression()
    }
  }
  if(type === Token.BooleanLiteral) {
    lex();
    token.value = token.value === "true";
    return delegate.createLiteral(token)
  }
  if(type === Token.NullLiteral) {
    lex();
    token.value = null;
    return delegate.createLiteral(token)
  }
  if(match("[")) {
    return parseArrayInitialiser()
  }
  if(match("{")) {
    return parseObjectInitialiser()
  }
  if(match("(")) {
    return parseGroupExpression()
  }
  if(match("/") || match("/=")) {
    return delegate.createLiteral(scanRegExp())
  }
  return throwUnexpected(lex())
}
function parseArguments() {
  var args = [];
  expect("(");
  if(!match(")")) {
    while(index < length) {
      args.push(parseAssignmentExpression());
      if(match(")")) {
        break
      }
      expect(",")
    }
  }
  expect(")");
  return args
}
function parseNonComputedProperty() {
  var token = lex();
  if(!isIdentifierName(token)) {
    throwUnexpected(token)
  }
  return delegate.createIdentifier(token.value)
}
function parseNonComputedMember() {
  expect(".");
  return parseNonComputedProperty()
}
function parseComputedMember() {
  var expr;
  expect("[");
  expr = parseExpression();
  expect("]");
  return expr
}
function parseNewExpression() {
  var expr, callee, args;
  expectKeyword("new");
  callee = parseLeftHandSideExpression();
  args = match("(") ? parseArguments() : [];
  return delegate.createNewExpression(callee, args)
}
function parseLeftHandSideExpressionAllowCall() {
  var expr, args, property;
  expr = matchKeyword("new") ? parseNewExpression() : parsePrimaryExpression();
  while(match(".") || match("[") || match("(")) {
    if(match("(")) {
      args = parseArguments();
      expr = delegate.createCallExpression(expr, args)
    }else {
      if(match("[")) {
        property = parseComputedMember();
        expr = delegate.createMemberExpression("[", expr, property)
      }else {
        property = parseNonComputedMember();
        expr = delegate.createMemberExpression(".", expr, property)
      }
    }
  }
  return expr
}
function parseLeftHandSideExpression() {
  var expr, property;
  expr = matchKeyword("new") ? parseNewExpression() : parsePrimaryExpression();
  while(match(".") || match("[")) {
    if(match("[")) {
      property = parseComputedMember();
      expr = delegate.createMemberExpression("[", expr, property)
    }else {
      property = parseNonComputedMember();
      expr = delegate.createMemberExpression(".", expr, property)
    }
  }
  return expr
}
function parsePostfixExpression() {
  var expr = parseLeftHandSideExpressionAllowCall(), token;
  token = lookahead();
  if(token.type !== Token.Punctuator) {
    return expr
  }
  if((match("++") || match("--")) && !peekLineTerminator()) {
    if(strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {
      throwErrorTolerant({}, Messages.StrictLHSPostfix)
    }
    if(!isLeftHandSide(expr)) {
      throwError({}, Messages.InvalidLHSInAssignment)
    }
    token = lex();
    expr = delegate.createPostfixExpression(token.value, expr)
  }
  return expr
}
function parseUnaryExpression() {
  var token, expr;
  token = lookahead();
  if(token.type !== Token.Punctuator && token.type !== Token.Keyword) {
    return parsePostfixExpression()
  }
  if(match("++") || match("--")) {
    token = lex();
    expr = parseUnaryExpression();
    if(strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {
      throwErrorTolerant({}, Messages.StrictLHSPrefix)
    }
    if(!isLeftHandSide(expr)) {
      throwError({}, Messages.InvalidLHSInAssignment)
    }
    return delegate.createUnaryExpression(token.value, expr)
  }
  if(match("+") || match("-") || match("~") || match("!")) {
    token = lex();
    expr = parseUnaryExpression();
    return delegate.createUnaryExpression(token.value, expr)
  }
  if(matchKeyword("delete") || matchKeyword("void") || matchKeyword("typeof")) {
    token = lex();
    expr = parseUnaryExpression();
    expr = delegate.createUnaryExpression(token.value, expr);
    if(strict && expr.operator === "delete" && expr.argument.type === Syntax.Identifier) {
      throwErrorTolerant({}, Messages.StrictDelete)
    }
    return expr
  }
  return parsePostfixExpression()
}
function binaryPrecedence(token, allowIn) {
  var prec = 0;
  if(token.type !== Token.Punctuator && token.type !== Token.Keyword) {
    return 0
  }
  switch(token.value) {
    case "||":
      prec = 1;
      break;
    case "&&":
      prec = 2;
      break;
    case "|":
      prec = 3;
      break;
    case "^":
      prec = 4;
      break;
    case "&":
      prec = 5;
      break;
    case "==":
    ;
    case "!=":
    ;
    case "===":
    ;
    case "!==":
      prec = 6;
      break;
    case "<":
    ;
    case ">":
    ;
    case "<=":
    ;
    case ">=":
    ;
    case "instanceof":
      prec = 7;
      break;
    case "in":
      prec = allowIn ? 7 : 0;
      break;
    case "<<":
    ;
    case ">>":
    ;
    case ">>>":
      prec = 8;
      break;
    case "+":
    ;
    case "-":
      prec = 9;
      break;
    case "*":
    ;
    case "/":
    ;
    case "%":
      prec = 11;
      break;
    default:
      break
  }
  return prec
}
function reduceBinary(stack) {
  var right = stack.pop(), operator = stack.pop().value, left = stack.pop();
  if(operator === "||" || operator === "&&") {
    stack.push(delegate.createLogicalExpression(operator, left, right))
  }else {
    stack.push(delegate.createBinaryExpression(operator, left, right))
  }
}
function parseBinaryExpression() {
  var expr, token, prec, previousAllowIn, stack;
  previousAllowIn = state.allowIn;
  state.allowIn = true;
  expr = parseUnaryExpression();
  token = lookahead();
  prec = binaryPrecedence(token, previousAllowIn);
  if(prec === 0) {
    return expr
  }
  token.prec = prec;
  lex();
  stack = [expr, token, parseUnaryExpression()];
  while((prec = binaryPrecedence(lookahead(), previousAllowIn)) > 0) {
    while(stack.length > 2 && prec <= stack[stack.length - 2].prec) {
      reduceBinary(stack)
    }
    token = lex();
    token.prec = prec;
    stack.push(token);
    stack.push(parseUnaryExpression())
  }
  while(stack.length > 1) {
    reduceBinary(stack)
  }
  state.allowIn = previousAllowIn;
  return stack[0]
}
function parseConditionalExpression() {
  var expr, previousAllowIn, consequent, alternate;
  expr = parseBinaryExpression();
  if(match("?")) {
    lex();
    previousAllowIn = state.allowIn;
    state.allowIn = true;
    consequent = parseAssignmentExpression();
    state.allowIn = previousAllowIn;
    expect(":");
    alternate = parseAssignmentExpression();
    expr = delegate.createConditionalExpression(expr, consequent, alternate)
  }
  return expr
}
function parseAssignmentExpression() {
  var token, left, right;
  token = lookahead();
  left = parseConditionalExpression();
  if(matchAssign()) {
    if(!isLeftHandSide(left)) {
      throwError({}, Messages.InvalidLHSInAssignment)
    }
    if(strict && left.type === Syntax.Identifier && isRestrictedWord(left.name)) {
      throwErrorTolerant(token, Messages.StrictLHSAssignment)
    }
    token = lex();
    right = parseAssignmentExpression();
    return delegate.createAssignmentExpression(token.value, left, right)
  }
  return left
}
function parseExpression() {
  var expr = parseAssignmentExpression();
  if(match(",")) {
    expr = delegate.createSequenceExpression([expr]);
    while(index < length) {
      if(!match(",")) {
        break
      }
      lex();
      expr.expressions.push(parseAssignmentExpression())
    }
  }
  return expr
}
function parseStatementList() {
  var list = [], statement;
  while(index < length) {
    if(match("}")) {
      break
    }
    statement = parseSourceElement();
    if(typeof statement === "undefined") {
      break
    }
    list.push(statement)
  }
  return list
}
function parseBlock() {
  var block;
  expect("{");
  block = parseStatementList();
  expect("}");
  return delegate.createBlockStatement(block)
}
function parseVariableIdentifier() {
  var token = lex();
  if(token.type !== Token.Identifier) {
    throwUnexpected(token)
  }
  return delegate.createIdentifier(token.value)
}
function parseVariableDeclaration(kind) {
  var id = parseVariableIdentifier(), init = null;
  if(strict && isRestrictedWord(id.name)) {
    throwErrorTolerant({}, Messages.StrictVarName)
  }
  if(kind === "const") {
    expect("=");
    init = parseAssignmentExpression()
  }else {
    if(match("=")) {
      lex();
      init = parseAssignmentExpression()
    }
  }
  return delegate.createVariableDeclarator(id, init)
}
function parseVariableDeclarationList(kind) {
  var list = [];
  while(index < length) {
    list.push(parseVariableDeclaration(kind));
    if(!match(",")) {
      break
    }
    lex()
  }
  return list
}
function parseVariableStatement() {
  var declarations;
  expectKeyword("var");
  declarations = parseVariableDeclarationList();
  consumeSemicolon();
  return delegate.createVariableDeclaration(declarations, "var")
}
function parseConstLetDeclaration(kind) {
  var declarations;
  expectKeyword(kind);
  declarations = parseVariableDeclarationList(kind);
  consumeSemicolon();
  return delegate.createVariableDeclaration(declarations, kind)
}
function parseEmptyStatement() {
  expect(";");
  return delegate.createEmptyStatement()
}
function parseExpressionStatement() {
  var expr = parseExpression();
  consumeSemicolon();
  return delegate.createExpressionStatement(expr)
}
function parseIfStatement() {
  var test, consequent, alternate;
  expectKeyword("if");
  expect("(");
  test = parseExpression();
  expect(")");
  consequent = parseStatement();
  if(matchKeyword("else")) {
    lex();
    alternate = parseStatement()
  }else {
    alternate = null
  }
  return delegate.createIfStatement(test, consequent, alternate)
}
function parseDoWhileStatement() {
  var body, test, oldInIteration;
  expectKeyword("do");
  oldInIteration = state.inIteration;
  state.inIteration = true;
  body = parseStatement();
  state.inIteration = oldInIteration;
  expectKeyword("while");
  expect("(");
  test = parseExpression();
  expect(")");
  if(match(";")) {
    lex()
  }
  return delegate.createDoWhileStatement(body, test)
}
function parseWhileStatement() {
  var test, body, oldInIteration;
  expectKeyword("while");
  expect("(");
  test = parseExpression();
  expect(")");
  oldInIteration = state.inIteration;
  state.inIteration = true;
  body = parseStatement();
  state.inIteration = oldInIteration;
  return delegate.createWhileStatement(test, body)
}
function parseForVariableDeclaration() {
  var token = lex(), declarations = parseVariableDeclarationList();
  return delegate.createVariableDeclaration(declarations, token.value)
}
function parseForStatement() {
  var init, test, update, left, right, body, oldInIteration;
  init = test = update = null;
  expectKeyword("for");
  expect("(");
  if(match(";")) {
    lex()
  }else {
    if(matchKeyword("var") || matchKeyword("let")) {
      state.allowIn = false;
      init = parseForVariableDeclaration();
      state.allowIn = true;
      if(init.declarations.length === 1 && matchKeyword("in")) {
        lex();
        left = init;
        right = parseExpression();
        init = null
      }
    }else {
      state.allowIn = false;
      init = parseExpression();
      state.allowIn = true;
      if(matchKeyword("in")) {
        if(!isLeftHandSide(init)) {
          throwError({}, Messages.InvalidLHSInForIn)
        }
        lex();
        left = init;
        right = parseExpression();
        init = null
      }
    }
    if(typeof left === "undefined") {
      expect(";")
    }
  }
  if(typeof left === "undefined") {
    if(!match(";")) {
      test = parseExpression()
    }
    expect(";");
    if(!match(")")) {
      update = parseExpression()
    }
  }
  expect(")");
  oldInIteration = state.inIteration;
  state.inIteration = true;
  body = parseStatement();
  state.inIteration = oldInIteration;
  return typeof left === "undefined" ? delegate.createForStatement(init, test, update, body) : delegate.createForInStatement(left, right, body)
}
function parseContinueStatement() {
  var token, label = null;
  expectKeyword("continue");
  if(source[index] === ";") {
    lex();
    if(!state.inIteration) {
      throwError({}, Messages.IllegalContinue)
    }
    return delegate.createContinueStatement(null)
  }
  if(peekLineTerminator()) {
    if(!state.inIteration) {
      throwError({}, Messages.IllegalContinue)
    }
    return delegate.createContinueStatement(null)
  }
  token = lookahead();
  if(token.type === Token.Identifier) {
    label = parseVariableIdentifier();
    if(!Object.prototype.hasOwnProperty.call(state.labelSet, label.name)) {
      throwError({}, Messages.UnknownLabel, label.name)
    }
  }
  consumeSemicolon();
  if(label === null && !state.inIteration) {
    throwError({}, Messages.IllegalContinue)
  }
  return delegate.createContinueStatement(label)
}
function parseBreakStatement() {
  var token, label = null;
  expectKeyword("break");
  if(source[index] === ";") {
    lex();
    if(!(state.inIteration || state.inSwitch)) {
      throwError({}, Messages.IllegalBreak)
    }
    return delegate.createBreakStatement(null)
  }
  if(peekLineTerminator()) {
    if(!(state.inIteration || state.inSwitch)) {
      throwError({}, Messages.IllegalBreak)
    }
    return delegate.createBreakStatement(null)
  }
  token = lookahead();
  if(token.type === Token.Identifier) {
    label = parseVariableIdentifier();
    if(!Object.prototype.hasOwnProperty.call(state.labelSet, label.name)) {
      throwError({}, Messages.UnknownLabel, label.name)
    }
  }
  consumeSemicolon();
  if(label === null && !(state.inIteration || state.inSwitch)) {
    throwError({}, Messages.IllegalBreak)
  }
  return delegate.createBreakStatement(label)
}
function parseReturnStatement() {
  var token, argument = null;
  expectKeyword("return");
  if(!state.inFunctionBody) {
    throwErrorTolerant({}, Messages.IllegalReturn)
  }
  if(source[index] === " ") {
    if(isIdentifierStart(source[index + 1])) {
      argument = parseExpression();
      consumeSemicolon();
      return delegate.createReturnStatement(argument)
    }
  }
  if(peekLineTerminator()) {
    return delegate.createReturnStatement(null)
  }
  if(!match(";")) {
    token = lookahead();
    if(!match("}") && token.type !== Token.EOF) {
      argument = parseExpression()
    }
  }
  consumeSemicolon();
  return delegate.createReturnStatement(argument)
}
function parseWithStatement() {
  var object, body;
  if(strict) {
    throwErrorTolerant({}, Messages.StrictModeWith)
  }
  expectKeyword("with");
  expect("(");
  object = parseExpression();
  expect(")");
  body = parseStatement();
  return delegate.createWithStatement(object, body)
}
function parseSwitchCase() {
  var test, consequent = [], statement;
  if(matchKeyword("default")) {
    lex();
    test = null
  }else {
    expectKeyword("case");
    test = parseExpression()
  }
  expect(":");
  while(index < length) {
    if(match("}") || matchKeyword("default") || matchKeyword("case")) {
      break
    }
    statement = parseStatement();
    if(typeof statement === "undefined") {
      break
    }
    consequent.push(statement)
  }
  return delegate.createSwitchCase(test, consequent)
}
function parseSwitchStatement() {
  var discriminant, cases, clause, oldInSwitch, defaultFound;
  expectKeyword("switch");
  expect("(");
  discriminant = parseExpression();
  expect(")");
  expect("{");
  if(match("}")) {
    lex();
    return delegate.createSwitchStatement(discriminant)
  }
  cases = [];
  oldInSwitch = state.inSwitch;
  state.inSwitch = true;
  defaultFound = false;
  while(index < length) {
    if(match("}")) {
      break
    }
    clause = parseSwitchCase();
    if(clause.test === null) {
      if(defaultFound) {
        throwError({}, Messages.MultipleDefaultsInSwitch)
      }
      defaultFound = true
    }
    cases.push(clause)
  }
  state.inSwitch = oldInSwitch;
  expect("}");
  return delegate.createSwitchStatement(discriminant, cases)
}
function parseThrowStatement() {
  var argument;
  expectKeyword("throw");
  if(peekLineTerminator()) {
    throwError({}, Messages.NewlineAfterThrow)
  }
  argument = parseExpression();
  consumeSemicolon();
  return delegate.createThrowStatement(argument)
}
function parseCatchClause() {
  var param, body;
  expectKeyword("catch");
  expect("(");
  if(!match(")")) {
    param = parseExpression();
    if(strict && param.type === Syntax.Identifier && isRestrictedWord(param.name)) {
      throwErrorTolerant({}, Messages.StrictCatchVariable)
    }
  }
  expect(")");
  body = parseBlock();
  return delegate.createCatchClause(param, body)
}
function parseTryStatement() {
  var block, handlers = [], finalizer = null;
  expectKeyword("try");
  block = parseBlock();
  if(matchKeyword("catch")) {
    handlers.push(parseCatchClause())
  }
  if(matchKeyword("finally")) {
    lex();
    finalizer = parseBlock()
  }
  if(handlers.length === 0 && !finalizer) {
    throwError({}, Messages.NoCatchOrFinally)
  }
  return delegate.createTryStatement(block, [], handlers, finalizer)
}
function parseDebuggerStatement() {
  expectKeyword("debugger");
  consumeSemicolon();
  return delegate.createDebuggerStatement()
}
function parseStatement() {
  var token = lookahead(), expr, labeledBody;
  if(token.type === Token.EOF) {
    throwUnexpected(token)
  }
  if(token.type === Token.Punctuator) {
    switch(token.value) {
      case ";":
        return parseEmptyStatement();
      case "{":
        return parseBlock();
      case "(":
        return parseExpressionStatement();
      default:
        break
    }
  }
  if(token.type === Token.Keyword) {
    switch(token.value) {
      case "break":
        return parseBreakStatement();
      case "continue":
        return parseContinueStatement();
      case "debugger":
        return parseDebuggerStatement();
      case "do":
        return parseDoWhileStatement();
      case "for":
        return parseForStatement();
      case "function":
        return parseFunctionDeclaration();
      case "if":
        return parseIfStatement();
      case "return":
        return parseReturnStatement();
      case "switch":
        return parseSwitchStatement();
      case "throw":
        return parseThrowStatement();
      case "try":
        return parseTryStatement();
      case "var":
        return parseVariableStatement();
      case "while":
        return parseWhileStatement();
      case "with":
        return parseWithStatement();
      default:
        break
    }
  }
  expr = parseExpression();
  if(expr.type === Syntax.Identifier && match(":")) {
    lex();
    if(Object.prototype.hasOwnProperty.call(state.labelSet, expr.name)) {
      throwError({}, Messages.Redeclaration, "Label", expr.name)
    }
    state.labelSet[expr.name] = true;
    labeledBody = parseStatement();
    delete state.labelSet[expr.name];
    return delegate.createLabeledStatement(expr, labeledBody)
  }
  consumeSemicolon();
  return delegate.createExpressionStatement(expr)
}
function parseFunctionSourceElements() {
  var sourceElement, sourceElements = [], token, directive, firstRestricted, oldLabelSet, oldInIteration, oldInSwitch, oldInFunctionBody;
  expect("{");
  while(index < length) {
    token = lookahead();
    if(token.type !== Token.StringLiteral) {
      break
    }
    sourceElement = parseSourceElement();
    sourceElements.push(sourceElement);
    if(sourceElement.expression.type !== Syntax.Literal) {
      break
    }
    directive = sliceSource(token.range[0] + 1, token.range[1] - 1);
    if(directive === "use strict") {
      strict = true;
      if(firstRestricted) {
        throwErrorTolerant(firstRestricted, Messages.StrictOctalLiteral)
      }
    }else {
      if(!firstRestricted && token.octal) {
        firstRestricted = token
      }
    }
  }
  oldLabelSet = state.labelSet;
  oldInIteration = state.inIteration;
  oldInSwitch = state.inSwitch;
  oldInFunctionBody = state.inFunctionBody;
  state.labelSet = {};
  state.inIteration = false;
  state.inSwitch = false;
  state.inFunctionBody = true;
  while(index < length) {
    if(match("}")) {
      break
    }
    sourceElement = parseSourceElement();
    if(typeof sourceElement === "undefined") {
      break
    }
    sourceElements.push(sourceElement)
  }
  expect("}");
  state.labelSet = oldLabelSet;
  state.inIteration = oldInIteration;
  state.inSwitch = oldInSwitch;
  state.inFunctionBody = oldInFunctionBody;
  return delegate.createBlockStatement(sourceElements)
}
function parseFunctionDeclaration() {
  var id, param, params = [], body, token, stricted, firstRestricted, message, previousStrict, paramSet;
  expectKeyword("function");
  token = lookahead();
  id = parseVariableIdentifier();
  if(strict) {
    if(isRestrictedWord(token.value)) {
      throwErrorTolerant(token, Messages.StrictFunctionName)
    }
  }else {
    if(isRestrictedWord(token.value)) {
      firstRestricted = token;
      message = Messages.StrictFunctionName
    }else {
      if(isStrictModeReservedWord(token.value)) {
        firstRestricted = token;
        message = Messages.StrictReservedWord
      }
    }
  }
  expect("(");
  if(!match(")")) {
    paramSet = {};
    while(index < length) {
      token = lookahead();
      param = parseVariableIdentifier();
      if(strict) {
        if(isRestrictedWord(token.value)) {
          stricted = token;
          message = Messages.StrictParamName
        }
        if(Object.prototype.hasOwnProperty.call(paramSet, token.value)) {
          stricted = token;
          message = Messages.StrictParamDupe
        }
      }else {
        if(!firstRestricted) {
          if(isRestrictedWord(token.value)) {
            firstRestricted = token;
            message = Messages.StrictParamName
          }else {
            if(isStrictModeReservedWord(token.value)) {
              firstRestricted = token;
              message = Messages.StrictReservedWord
            }else {
              if(Object.prototype.hasOwnProperty.call(paramSet, token.value)) {
                firstRestricted = token;
                message = Messages.StrictParamDupe
              }
            }
          }
        }
      }
      params.push(param);
      paramSet[param.name] = true;
      if(match(")")) {
        break
      }
      expect(",")
    }
  }
  expect(")");
  previousStrict = strict;
  body = parseFunctionSourceElements();
  if(strict && firstRestricted) {
    throwError(firstRestricted, message)
  }
  if(strict && stricted) {
    throwErrorTolerant(stricted, message)
  }
  strict = previousStrict;
  return delegate.createFunctionDeclaration(id, params, [], body)
}
function parseFunctionExpression() {
  var token, id = null, stricted, firstRestricted, message, param, params = [], body, previousStrict, paramSet;
  expectKeyword("function");
  if(!match("(")) {
    token = lookahead();
    id = parseVariableIdentifier();
    if(strict) {
      if(isRestrictedWord(token.value)) {
        throwErrorTolerant(token, Messages.StrictFunctionName)
      }
    }else {
      if(isRestrictedWord(token.value)) {
        firstRestricted = token;
        message = Messages.StrictFunctionName
      }else {
        if(isStrictModeReservedWord(token.value)) {
          firstRestricted = token;
          message = Messages.StrictReservedWord
        }
      }
    }
  }
  expect("(");
  if(!match(")")) {
    paramSet = {};
    while(index < length) {
      token = lookahead();
      param = parseVariableIdentifier();
      if(strict) {
        if(isRestrictedWord(token.value)) {
          stricted = token;
          message = Messages.StrictParamName
        }
        if(Object.prototype.hasOwnProperty.call(paramSet, token.value)) {
          stricted = token;
          message = Messages.StrictParamDupe
        }
      }else {
        if(!firstRestricted) {
          if(isRestrictedWord(token.value)) {
            firstRestricted = token;
            message = Messages.StrictParamName
          }else {
            if(isStrictModeReservedWord(token.value)) {
              firstRestricted = token;
              message = Messages.StrictReservedWord
            }else {
              if(Object.prototype.hasOwnProperty.call(paramSet, token.value)) {
                firstRestricted = token;
                message = Messages.StrictParamDupe
              }
            }
          }
        }
      }
      params.push(param);
      paramSet[param.name] = true;
      if(match(")")) {
        break
      }
      expect(",")
    }
  }
  expect(")");
  previousStrict = strict;
  body = parseFunctionSourceElements();
  if(strict && firstRestricted) {
    throwError(firstRestricted, message)
  }
  if(strict && stricted) {
    throwErrorTolerant(stricted, message)
  }
  strict = previousStrict;
  return delegate.createFunctionExpression(id, params, [], body)
}
function parseSourceElement() {
  var token = lookahead();
  if(token.type === Token.Keyword) {
    switch(token.value) {
      case "const":
      ;
      case "let":
        return parseConstLetDeclaration(token.value);
      case "function":
        return parseFunctionDeclaration();
      default:
        return parseStatement()
    }
  }
  if(token.type !== Token.EOF) {
    return parseStatement()
  }
}
function parseSourceElements() {
  var sourceElement, sourceElements = [], token, directive, firstRestricted;
  while(index < length) {
    token = lookahead();
    if(token.type !== Token.StringLiteral) {
      break
    }
    sourceElement = parseSourceElement();
    sourceElements.push(sourceElement);
    if(sourceElement.expression.type !== Syntax.Literal) {
      break
    }
    directive = sliceSource(token.range[0] + 1, token.range[1] - 1);
    if(directive === "use strict") {
      strict = true;
      if(firstRestricted) {
        throwErrorTolerant(firstRestricted, Messages.StrictOctalLiteral)
      }
    }else {
      if(!firstRestricted && token.octal) {
        firstRestricted = token
      }
    }
  }
  while(index < length) {
    sourceElement = parseSourceElement();
    if(typeof sourceElement === "undefined") {
      break
    }
    sourceElements.push(sourceElement)
  }
  return sourceElements
}
function parseProgram() {
  var body;
  strict = false;
  body = parseSourceElements();
  return delegate.createProgram(body)
}
function addComment(type, value, start, end, loc) {
  assert(typeof start === "number", "Comment must have valid position");
  if(extra.comments.length > 0) {
    if(extra.comments[extra.comments.length - 1].range[1] > start) {
      return
    }
  }
  extra.comments.push({type:type, value:value, range:[start, end], loc:loc})
}
function scanComment() {
  var comment, ch, loc, start, blockComment, lineComment;
  comment = "";
  blockComment = false;
  lineComment = false;
  while(index < length) {
    ch = source[index];
    if(lineComment) {
      ch = source[index++];
      if(isLineTerminator(ch)) {
        loc.end = {line:lineNumber, column:index - lineStart - 1};
        lineComment = false;
        addComment("Line", comment, start, index - 1, loc);
        if(ch === "\r" && source[index] === "\n") {
          ++index
        }
        ++lineNumber;
        lineStart = index;
        comment = ""
      }else {
        if(index >= length) {
          lineComment = false;
          comment += ch;
          loc.end = {line:lineNumber, column:length - lineStart};
          addComment("Line", comment, start, length, loc)
        }else {
          comment += ch
        }
      }
    }else {
      if(blockComment) {
        if(isLineTerminator(ch)) {
          if(ch === "\r" && source[index + 1] === "\n") {
            ++index;
            comment += "\r\n"
          }else {
            comment += ch
          }
          ++lineNumber;
          ++index;
          lineStart = index;
          if(index >= length) {
            throwError({}, Messages.UnexpectedToken, "ILLEGAL")
          }
        }else {
          ch = source[index++];
          if(index >= length) {
            throwError({}, Messages.UnexpectedToken, "ILLEGAL")
          }
          comment += ch;
          if(ch === "*") {
            ch = source[index];
            if(ch === "/") {
              comment = comment.substr(0, comment.length - 1);
              blockComment = false;
              ++index;
              loc.end = {line:lineNumber, column:index - lineStart};
              addComment("Block", comment, start, index, loc);
              comment = ""
            }
          }
        }
      }else {
        if(ch === "/") {
          ch = source[index + 1];
          if(ch === "/") {
            loc = {start:{line:lineNumber, column:index - lineStart}};
            start = index;
            index += 2;
            lineComment = true;
            if(index >= length) {
              loc.end = {line:lineNumber, column:index - lineStart};
              lineComment = false;
              addComment("Line", comment, start, index, loc)
            }
          }else {
            if(ch === "*") {
              start = index;
              index += 2;
              blockComment = true;
              loc = {start:{line:lineNumber, column:index - lineStart - 2}};
              if(index >= length) {
                throwError({}, Messages.UnexpectedToken, "ILLEGAL")
              }
            }else {
              break
            }
          }
        }else {
          if(isWhiteSpace(ch)) {
            ++index
          }else {
            if(isLineTerminator(ch)) {
              ++index;
              if(ch === "\r" && source[index] === "\n") {
                ++index
              }
              ++lineNumber;
              lineStart = index
            }else {
              break
            }
          }
        }
      }
    }
  }
}
function filterCommentLocation() {
  var i, entry, comment, comments = [];
  for(i = 0;i < extra.comments.length;++i) {
    entry = extra.comments[i];
    comment = {type:entry.type, value:entry.value};
    if(extra.range) {
      comment.range = entry.range
    }
    if(extra.loc) {
      comment.loc = entry.loc
    }
    comments.push(comment)
  }
  extra.comments = comments
}
function collectToken() {
  var start, loc, token, range, value;
  skipComment();
  start = index;
  loc = {start:{line:lineNumber, column:index - lineStart}};
  token = extra.advance();
  loc.end = {line:lineNumber, column:index - lineStart};
  if(token.type !== Token.EOF) {
    range = [token.range[0], token.range[1]];
    value = sliceSource(token.range[0], token.range[1]);
    extra.tokens.push({type:TokenName[token.type], value:value, range:range, loc:loc})
  }
  return token
}
function collectRegex() {
  var pos, loc, regex, token;
  skipComment();
  pos = index;
  loc = {start:{line:lineNumber, column:index - lineStart}};
  regex = extra.scanRegExp();
  loc.end = {line:lineNumber, column:index - lineStart};
  if(extra.tokens.length > 0) {
    token = extra.tokens[extra.tokens.length - 1];
    if(token.range[0] === pos && token.type === "Punctuator") {
      if(token.value === "/" || token.value === "/=") {
        extra.tokens.pop()
      }
    }
  }
  extra.tokens.push({type:"RegularExpression", value:regex.literal, range:[pos, index], loc:loc});
  return regex
}
function filterTokenLocation() {
  var i, entry, token, tokens = [];
  for(i = 0;i < extra.tokens.length;++i) {
    entry = extra.tokens[i];
    token = {type:entry.type, value:entry.value};
    if(extra.range) {
      token.range = entry.range
    }
    if(extra.loc) {
      token.loc = entry.loc
    }
    tokens.push(token)
  }
  extra.tokens = tokens
}
function createLocationMarker() {
  var marker = {};
  marker.range = [index, index];
  marker.loc = {start:{line:lineNumber, column:index - lineStart}, end:{line:lineNumber, column:index - lineStart}};
  marker.end = function() {
    marker.range[1] = index;
    marker.loc.end.line = lineNumber;
    marker.loc.end.column = index - lineStart
  };
  marker.applyGroup = function(node) {
    if(extra.range) {
      node.groupRange = [marker.range[0], marker.range[1]]
    }
    if(extra.loc) {
      node.groupLoc = {start:{line:marker.loc.start.line, column:marker.loc.start.column}, end:{line:marker.loc.end.line, column:marker.loc.end.column}}
    }
  };
  marker.apply = function(node) {
    if(extra.range) {
      node.range = [marker.range[0], marker.range[1]]
    }
    if(extra.loc) {
      node.loc = {start:{line:marker.loc.start.line, column:marker.loc.start.column}, end:{line:marker.loc.end.line, column:marker.loc.end.column}}
    }
  };
  return marker
}
function trackGroupExpression() {
  var marker, expr;
  skipComment();
  marker = createLocationMarker();
  expect("(");
  expr = parseExpression();
  expect(")");
  marker.end();
  marker.applyGroup(expr);
  return expr
}
function trackLeftHandSideExpression() {
  var marker, expr, property;
  skipComment();
  marker = createLocationMarker();
  expr = matchKeyword("new") ? parseNewExpression() : parsePrimaryExpression();
  while(match(".") || match("[")) {
    if(match("[")) {
      property = parseComputedMember();
      expr = delegate.createMemberExpression("[", expr, property);
      marker.end();
      marker.apply(expr)
    }else {
      property = parseNonComputedMember();
      expr = delegate.createMemberExpression(".", expr, property);
      marker.end();
      marker.apply(expr)
    }
  }
  return expr
}
function trackLeftHandSideExpressionAllowCall() {
  var marker, expr, args, property;
  skipComment();
  marker = createLocationMarker();
  expr = matchKeyword("new") ? parseNewExpression() : parsePrimaryExpression();
  while(match(".") || match("[") || match("(")) {
    if(match("(")) {
      args = parseArguments();
      expr = delegate.createCallExpression(expr, args);
      marker.end();
      marker.apply(expr)
    }else {
      if(match("[")) {
        property = parseComputedMember();
        expr = delegate.createMemberExpression("[", expr, property);
        marker.end();
        marker.apply(expr)
      }else {
        property = parseNonComputedMember();
        expr = delegate.createMemberExpression(".", expr, property);
        marker.end();
        marker.apply(expr)
      }
    }
  }
  return expr
}
function filterGroup(node) {
  var n, i, entry;
  n = Object.prototype.toString.apply(node) === "[object Array]" ? [] : {};
  for(i in node) {
    if(node.hasOwnProperty(i) && i !== "groupRange" && i !== "groupLoc") {
      entry = node[i];
      if(entry === null || typeof entry !== "object" || entry instanceof RegExp) {
        n[i] = entry
      }else {
        n[i] = filterGroup(entry)
      }
    }
  }
  return n
}
function wrapTrackingFunction(range, loc) {
  return function(parseFunction) {
    function isBinary(node) {
      return node.type === Syntax.LogicalExpression || node.type === Syntax.BinaryExpression
    }
    function visit(node) {
      var start, end;
      if(isBinary(node.left)) {
        visit(node.left)
      }
      if(isBinary(node.right)) {
        visit(node.right)
      }
      if(range) {
        if(node.left.groupRange || node.right.groupRange) {
          start = node.left.groupRange ? node.left.groupRange[0] : node.left.range[0];
          end = node.right.groupRange ? node.right.groupRange[1] : node.right.range[1];
          node.range = [start, end]
        }else {
          if(typeof node.range === "undefined") {
            start = node.left.range[0];
            end = node.right.range[1];
            node.range = [start, end]
          }
        }
      }
      if(loc) {
        if(node.left.groupLoc || node.right.groupLoc) {
          start = node.left.groupLoc ? node.left.groupLoc.start : node.left.loc.start;
          end = node.right.groupLoc ? node.right.groupLoc.end : node.right.loc.end;
          node.loc = {start:start, end:end}
        }else {
          if(typeof node.loc === "undefined") {
            node.loc = {start:node.left.loc.start, end:node.right.loc.end}
          }
        }
      }
    }
    return function() {
      var marker, node;
      skipComment();
      marker = createLocationMarker();
      node = parseFunction.apply(null, arguments);
      marker.end();
      if(range && typeof node.range === "undefined") {
        marker.apply(node)
      }
      if(loc && typeof node.loc === "undefined") {
        marker.apply(node)
      }
      if(isBinary(node)) {
        visit(node)
      }
      return node
    }
  }
}
function patch() {
  var wrapTracking;
  if(extra.comments) {
    extra.skipComment = skipComment;
    skipComment = scanComment
  }
  if(extra.range || extra.loc) {
    extra.parseGroupExpression = parseGroupExpression;
    extra.parseLeftHandSideExpression = parseLeftHandSideExpression;
    extra.parseLeftHandSideExpressionAllowCall = parseLeftHandSideExpressionAllowCall;
    parseGroupExpression = trackGroupExpression;
    parseLeftHandSideExpression = trackLeftHandSideExpression;
    parseLeftHandSideExpressionAllowCall = trackLeftHandSideExpressionAllowCall;
    wrapTracking = wrapTrackingFunction(extra.range, extra.loc);
    extra.parseAssignmentExpression = parseAssignmentExpression;
    extra.parseBinaryExpression = parseBinaryExpression;
    extra.parseBlock = parseBlock;
    extra.parseFunctionSourceElements = parseFunctionSourceElements;
    extra.parseCatchClause = parseCatchClause;
    extra.parseComputedMember = parseComputedMember;
    extra.parseConditionalExpression = parseConditionalExpression;
    extra.parseConstLetDeclaration = parseConstLetDeclaration;
    extra.parseExpression = parseExpression;
    extra.parseForVariableDeclaration = parseForVariableDeclaration;
    extra.parseFunctionDeclaration = parseFunctionDeclaration;
    extra.parseFunctionExpression = parseFunctionExpression;
    extra.parseNewExpression = parseNewExpression;
    extra.parseNonComputedProperty = parseNonComputedProperty;
    extra.parseObjectProperty = parseObjectProperty;
    extra.parseObjectPropertyKey = parseObjectPropertyKey;
    extra.parsePostfixExpression = parsePostfixExpression;
    extra.parsePrimaryExpression = parsePrimaryExpression;
    extra.parseProgram = parseProgram;
    extra.parsePropertyFunction = parsePropertyFunction;
    extra.parseStatement = parseStatement;
    extra.parseSwitchCase = parseSwitchCase;
    extra.parseUnaryExpression = parseUnaryExpression;
    extra.parseVariableDeclaration = parseVariableDeclaration;
    extra.parseVariableIdentifier = parseVariableIdentifier;
    parseAssignmentExpression = wrapTracking(extra.parseAssignmentExpression);
    parseBinaryExpression = wrapTracking(extra.parseBinaryExpression);
    parseBlock = wrapTracking(extra.parseBlock);
    parseFunctionSourceElements = wrapTracking(extra.parseFunctionSourceElements);
    parseCatchClause = wrapTracking(extra.parseCatchClause);
    parseComputedMember = wrapTracking(extra.parseComputedMember);
    parseConditionalExpression = wrapTracking(extra.parseConditionalExpression);
    parseConstLetDeclaration = wrapTracking(extra.parseConstLetDeclaration);
    parseExpression = wrapTracking(extra.parseExpression);
    parseForVariableDeclaration = wrapTracking(extra.parseForVariableDeclaration);
    parseFunctionDeclaration = wrapTracking(extra.parseFunctionDeclaration);
    parseFunctionExpression = wrapTracking(extra.parseFunctionExpression);
    parseLeftHandSideExpression = wrapTracking(parseLeftHandSideExpression);
    parseNewExpression = wrapTracking(extra.parseNewExpression);
    parseNonComputedProperty = wrapTracking(extra.parseNonComputedProperty);
    parseObjectProperty = wrapTracking(extra.parseObjectProperty);
    parseObjectPropertyKey = wrapTracking(extra.parseObjectPropertyKey);
    parsePostfixExpression = wrapTracking(extra.parsePostfixExpression);
    parsePrimaryExpression = wrapTracking(extra.parsePrimaryExpression);
    parseProgram = wrapTracking(extra.parseProgram);
    parsePropertyFunction = wrapTracking(extra.parsePropertyFunction);
    parseStatement = wrapTracking(extra.parseStatement);
    parseSwitchCase = wrapTracking(extra.parseSwitchCase);
    parseUnaryExpression = wrapTracking(extra.parseUnaryExpression);
    parseVariableDeclaration = wrapTracking(extra.parseVariableDeclaration);
    parseVariableIdentifier = wrapTracking(extra.parseVariableIdentifier)
  }
  if(typeof extra.tokens !== "undefined") {
    extra.advance = advance;
    extra.scanRegExp = scanRegExp;
    advance = collectToken;
    scanRegExp = collectRegex
  }
}
function unpatch() {
  if(typeof extra.skipComment === "function") {
    skipComment = extra.skipComment
  }
  if(extra.range || extra.loc) {
    parseAssignmentExpression = extra.parseAssignmentExpression;
    parseBinaryExpression = extra.parseBinaryExpression;
    parseBlock = extra.parseBlock;
    parseFunctionSourceElements = extra.parseFunctionSourceElements;
    parseCatchClause = extra.parseCatchClause;
    parseComputedMember = extra.parseComputedMember;
    parseConditionalExpression = extra.parseConditionalExpression;
    parseConstLetDeclaration = extra.parseConstLetDeclaration;
    parseExpression = extra.parseExpression;
    parseForVariableDeclaration = extra.parseForVariableDeclaration;
    parseFunctionDeclaration = extra.parseFunctionDeclaration;
    parseFunctionExpression = extra.parseFunctionExpression;
    parseGroupExpression = extra.parseGroupExpression;
    parseLeftHandSideExpression = extra.parseLeftHandSideExpression;
    parseLeftHandSideExpressionAllowCall = extra.parseLeftHandSideExpressionAllowCall;
    parseNewExpression = extra.parseNewExpression;
    parseNonComputedProperty = extra.parseNonComputedProperty;
    parseObjectProperty = extra.parseObjectProperty;
    parseObjectPropertyKey = extra.parseObjectPropertyKey;
    parsePrimaryExpression = extra.parsePrimaryExpression;
    parsePostfixExpression = extra.parsePostfixExpression;
    parseProgram = extra.parseProgram;
    parsePropertyFunction = extra.parsePropertyFunction;
    parseStatement = extra.parseStatement;
    parseSwitchCase = extra.parseSwitchCase;
    parseUnaryExpression = extra.parseUnaryExpression;
    parseVariableDeclaration = extra.parseVariableDeclaration;
    parseVariableIdentifier = extra.parseVariableIdentifier
  }
  if(typeof extra.scanRegExp === "function") {
    advance = extra.advance;
    scanRegExp = extra.scanRegExp
  }
}
function stringToArray(str) {
  var length = str.length, result = [], i;
  for(i = 0;i < length;++i) {
    result[i] = str.charAt(i)
  }
  return result
}
function extend(object, properties) {
  var entry, result = {};
  for(entry in object) {
    if(object.hasOwnProperty(entry)) {
      result[entry] = object[entry]
    }
  }
  for(entry in properties) {
    if(properties.hasOwnProperty(entry)) {
      result[entry] = properties[entry]
    }
  }
  return result
}
function parse(code, options) {
  var program, toString;
  toString = String;
  if(typeof code !== "string" && !(code instanceof String)) {
    code = toString(code)
  }
  delegate = SyntaxTreeDelegate;
  source = code;
  index = 0;
  lineNumber = source.length > 0 ? 1 : 0;
  lineStart = 0;
  length = source.length;
  buffer = null;
  state = {allowIn:true, labelSet:{}, inFunctionBody:false, inIteration:false, inSwitch:false};
  extra = {};
  if(typeof options !== "undefined") {
    extra.range = typeof options.range === "boolean" && options.range;
    extra.loc = typeof options.loc === "boolean" && options.loc;
    if(typeof options.raw === "boolean" && options.raw) {
      delegate = extend(delegate, {"createLiteral":function(token) {
        return{type:Syntax.Literal, value:token.value, raw:sliceSource(token.range[0], token.range[1])}
      }})
    }
    if(typeof options.tokens === "boolean" && options.tokens) {
      extra.tokens = []
    }
    if(typeof options.comment === "boolean" && options.comment) {
      extra.comments = []
    }
    if(typeof options.tolerant === "boolean" && options.tolerant) {
      extra.errors = []
    }
  }
  if(length > 0) {
    if(typeof source[0] === "undefined") {
      if(code instanceof String) {
        source = code.valueOf()
      }
      if(typeof source[0] === "undefined") {
        source = stringToArray(code)
      }
    }
  }
  patch();
  try {
    program = parseProgram();
    if(typeof extra.comments !== "undefined") {
      filterCommentLocation();
      program.comments = extra.comments
    }
    if(typeof extra.tokens !== "undefined") {
      filterTokenLocation();
      program.tokens = extra.tokens
    }
    if(typeof extra.errors !== "undefined") {
      program.errors = extra.errors
    }
    if(extra.range || extra.loc) {
      program.body = filterGroup(program.body)
    }
  }catch(e) {
    throw e;
  }finally {
    unpatch();
    extra = {}
  }
  return program
}
esprima.version = "1.1.0-deeeeev";
esprima.parse = parse;
esprima.Syntax = function() {
  var name, types = {};
  if(typeof Object.create === "function") {
    types = Object.create(null)
  }
  for(name in Syntax) {
    if(Syntax.hasOwnProperty(name)) {
      types[name] = Syntax[name]
    }
  }
  if(typeof Object.freeze === "function") {
    Object.freeze(types)
  }
  return types
}();
goog.provide("jsrefact.predicates");
goog.require("cljs.core");
goog.require("clojure.set");
goog.require("cljs.core.logic");
goog.require("clojure.walk");
goog.require("jipdaast");
goog.require("lattice");
goog.require("jipda");
goog.require("esco");
goog.require("esp");
goog.require("clojure.set");
goog.require("clojure.walk");
goog.require("cljs.core.logic");
jsrefact.predicates.js_print = function js_print(arg) {
  return console.log(arg)
};
jsrefact.predicates.lprint = function lprint(_QMARK_val) {
  return function(a3232) {
    var _QMARK_val__$1 = cljs.core.logic._walk_STAR_.call(null, a3232, _QMARK_val);
    return function(a__2897__auto__) {
      return new cljs.core.logic.Inc(function() {
        return cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2885__auto__) {
          var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, null, jsrefact.predicates.js_print.call(null, _QMARK_val__$1));
          if(cljs.core.truth_(temp__3971__auto__)) {
            var b__2886__auto__ = temp__3971__auto__;
            return b__2886__auto__
          }else {
            return null
          }
        })
      })
    }.call(null, a3232)
  }
};
cljs.core._STAR_print_fn_STAR_ = jsrefact.predicates.js_print;
jsrefact.predicates.esprimaParser = esprima;
jsrefact.predicates.parsed = jsrefact.predicates.esprimaParser.parse("function add1(n){return n+1}; var i = 0; function inc(f, p){return f(p)}; inc(add1,i);", {loc:true});
jsrefact.predicates.progrm = cljs.core.atom.call(null, jsrefact.predicates.parsed.body);
jsrefact.predicates.escodegenGenerator = escodegen;
jsrefact.predicates.generated = jsrefact.predicates.escodegenGenerator.generate(jsrefact.predicates.parsed, {format:{compact:true}});
jsrefact.predicates.ast_property_value = function ast_property_value(ast, property) {
  return ast[property]
};
jsrefact.predicates.ast_property_set_value = function ast_property_set_value(ast, property, value) {
  ast[property] = value;
  return ast
};
jsrefact.predicates.ast_properties = function ast_properties(ast) {
  return cljs.core.seq.call(null, Object.keys(ast))
};
jsrefact.predicates.ast_kind = function ast_kind(ast) {
  return jsrefact.predicates.ast_property_value.call(null, ast, "type")
};
jsrefact.predicates.ast_QMARK_ = function ast_QMARK_(ast) {
  var and__3822__auto__ = cljs.core.instance_QMARK_.call(null, Object, ast);
  if(and__3822__auto__) {
    return cljs.core.not_EQ_.call(null, null, ast["type"])
  }else {
    return and__3822__auto__
  }
};
jsrefact.predicates.program = function program(_QMARK_node) {
  return function(a__2949__auto__) {
    return cljs.core.logic._bind.call(null, a__2949__auto__, cljs.core.logic.membero.call(null, _QMARK_node, cljs.core.seq.call(null, cljs.core.deref.call(null, jsrefact.predicates.progrm))))
  }
};
jsrefact.predicates.ast = function ast(_QMARK_kind, _QMARK_node) {
  return function(a__2897__auto__) {
    return new cljs.core.logic.Inc(function() {
      var _QMARK_root = cljs.core.logic.lvar.call(null, "\ufdd1'?root");
      return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, jsrefact.predicates.program.call(null, _QMARK_root)), function(a3235) {
        return new cljs.core.logic.Inc(function() {
          return cljs.core.logic._mplus.call(null, cljs.core.logic._bind.call(null, a3235, function(a__2885__auto__) {
            var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_root, _QMARK_node);
            if(cljs.core.truth_(temp__3971__auto__)) {
              var b__2886__auto__ = temp__3971__auto__;
              return b__2886__auto__
            }else {
              return null
            }
          }), new cljs.core.logic.Inc(function() {
            return cljs.core.logic._bind.call(null, a3235, jsrefact.predicates.child_PLUS_.call(null, _QMARK_root, _QMARK_node))
          }))
        })
      }), function(a3236) {
        var _QMARK_node__$1 = cljs.core.logic._walk_STAR_.call(null, a3236, _QMARK_node);
        return function(a__2897__auto____$1) {
          return new cljs.core.logic.Inc(function() {
            return cljs.core.logic._bind.call(null, a__2897__auto____$1, function(a__2885__auto__) {
              var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_kind, jsrefact.predicates.ast_kind.call(null, _QMARK_node__$1));
              if(cljs.core.truth_(temp__3971__auto__)) {
                var b__2886__auto__ = temp__3971__auto__;
                return b__2886__auto__
              }else {
                return null
              }
            })
          })
        }.call(null, a3236)
      })
    })
  }
};
jsrefact.predicates.ast_property = function ast_property(_QMARK_prop, _QMARK_node) {
  return function(a__2897__auto__) {
    return new cljs.core.logic.Inc(function() {
      var _QMARK_root = cljs.core.logic.lvar.call(null, "\ufdd1'?root");
      return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, jsrefact.predicates.program.call(null, _QMARK_root)), function(a3239) {
        return new cljs.core.logic.Inc(function() {
          return cljs.core.logic._mplus.call(null, cljs.core.logic._bind.call(null, a3239, function(a__2885__auto__) {
            var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_root, _QMARK_node);
            if(cljs.core.truth_(temp__3971__auto__)) {
              var b__2886__auto__ = temp__3971__auto__;
              return b__2886__auto__
            }else {
              return null
            }
          }), new cljs.core.logic.Inc(function() {
            return cljs.core.logic._bind.call(null, a3239, jsrefact.predicates.child_PLUS_.call(null, _QMARK_root, _QMARK_node))
          }))
        })
      }), function(a3240) {
        var _QMARK_node__$1 = cljs.core.logic._walk_STAR_.call(null, a3240, _QMARK_node);
        return function(a__2897__auto____$1) {
          return new cljs.core.logic.Inc(function() {
            return cljs.core.logic._bind.call(null, a__2897__auto____$1, cljs.core.logic.membero.call(null, _QMARK_prop, jsrefact.predicates.ast_properties.call(null, _QMARK_node__$1)))
          })
        }.call(null, a3240)
      })
    })
  }
};
jsrefact.predicates.ast_with_input = function ast_with_input(_QMARK_kind, _QMARK_nodeIn, _QMARK_nodeOut) {
  return function(a__2897__auto__) {
    return new cljs.core.logic.Inc(function() {
      var _QMARK_root = cljs.core.logic.lvar.call(null, "\ufdd1'?root");
      return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2885__auto__) {
        var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_root, _QMARK_nodeIn);
        if(cljs.core.truth_(temp__3971__auto__)) {
          var b__2886__auto__ = temp__3971__auto__;
          return b__2886__auto__
        }else {
          return null
        }
      }), function(a3243) {
        return new cljs.core.logic.Inc(function() {
          return cljs.core.logic._mplus.call(null, cljs.core.logic._bind.call(null, a3243, function(a__2885__auto__) {
            var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_root, _QMARK_nodeOut);
            if(cljs.core.truth_(temp__3971__auto__)) {
              var b__2886__auto__ = temp__3971__auto__;
              return b__2886__auto__
            }else {
              return null
            }
          }), new cljs.core.logic.Inc(function() {
            return cljs.core.logic._bind.call(null, a3243, jsrefact.predicates.child_PLUS_.call(null, _QMARK_root, _QMARK_nodeOut))
          }))
        })
      }), function(a3244) {
        var _QMARK_nodeOut__$1 = cljs.core.logic._walk_STAR_.call(null, a3244, _QMARK_nodeOut);
        return function(a__2897__auto____$1) {
          return new cljs.core.logic.Inc(function() {
            return cljs.core.logic._bind.call(null, a__2897__auto____$1, function(a__2885__auto__) {
              var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_kind, jsrefact.predicates.ast_kind.call(null, _QMARK_nodeOut__$1));
              if(cljs.core.truth_(temp__3971__auto__)) {
                var b__2886__auto__ = temp__3971__auto__;
                return b__2886__auto__
              }else {
                return null
              }
            })
          })
        }.call(null, a3244)
      })
    })
  }
};
jsrefact.predicates.has = function has(_QMARK_property, _QMARK_node, _QMARK_value) {
  return function(a__2897__auto__) {
    return new cljs.core.logic.Inc(function() {
      var _QMARK_kind = cljs.core.logic.lvar.call(null, "\ufdd1'?kind");
      var _QMARK_properties = cljs.core.logic.lvar.call(null, "\ufdd1'?properties");
      return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, function(a3247) {
        var _QMARK_node__$1 = cljs.core.logic._walk_STAR_.call(null, a3247, _QMARK_node);
        return function(a__2897__auto____$1) {
          return new cljs.core.logic.Inc(function() {
            return cljs.core.logic._bind.call(null, a__2897__auto____$1, function(a__2885__auto__) {
              var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_properties, jsrefact.predicates.ast_properties.call(null, _QMARK_node__$1));
              if(cljs.core.truth_(temp__3971__auto__)) {
                var b__2886__auto__ = temp__3971__auto__;
                return b__2886__auto__
              }else {
                return null
              }
            })
          })
        }.call(null, a3247)
      }), cljs.core.logic.membero.call(null, _QMARK_property, _QMARK_properties)), function(a3248) {
        var _QMARK_property__$1 = cljs.core.logic._walk_STAR_.call(null, a3248, _QMARK_property);
        var _QMARK_node__$1 = cljs.core.logic._walk_STAR_.call(null, a3248, _QMARK_node);
        return function(a__2897__auto____$1) {
          return new cljs.core.logic.Inc(function() {
            return cljs.core.logic._bind.call(null, a__2897__auto____$1, function(a__2885__auto__) {
              var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_value, jsrefact.predicates.ast_property_value.call(null, _QMARK_node__$1, _QMARK_property__$1));
              if(cljs.core.truth_(temp__3971__auto__)) {
                var b__2886__auto__ = temp__3971__auto__;
                return b__2886__auto__
              }else {
                return null
              }
            })
          })
        }.call(null, a3248)
      })
    })
  }
};
jsrefact.predicates.child = function child(_QMARK_prop, _QMARK_node, _QMARK_val) {
  return function(a__2897__auto__) {
    return new cljs.core.logic.Inc(function() {
      var _QMARK_foundvals = cljs.core.logic.lvar.call(null, "\ufdd1'?foundvals");
      return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, jsrefact.predicates.has.call(null, _QMARK_prop, _QMARK_node, _QMARK_foundvals)), function(a3251) {
        var _QMARK_foundvals__$1 = cljs.core.logic._walk_STAR_.call(null, a3251, _QMARK_foundvals);
        return function(a__2897__auto____$1) {
          return new cljs.core.logic.Inc(function() {
            return cljs.core.logic._bind.call(null, a__2897__auto____$1, function(a3252) {
              return new cljs.core.logic.Inc(function() {
                return cljs.core.logic._mplus.call(null, cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a3252, function(a__2885__auto__) {
                  var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, true, jsrefact.predicates.ast_QMARK_.call(null, _QMARK_foundvals__$1));
                  if(cljs.core.truth_(temp__3971__auto__)) {
                    var b__2886__auto__ = temp__3971__auto__;
                    return b__2886__auto__
                  }else {
                    return null
                  }
                }), function(a__2885__auto__) {
                  var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_val, _QMARK_foundvals__$1);
                  if(cljs.core.truth_(temp__3971__auto__)) {
                    var b__2886__auto__ = temp__3971__auto__;
                    return b__2886__auto__
                  }else {
                    return null
                  }
                }), new cljs.core.logic.Inc(function() {
                  return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a3252, function(a__2885__auto__) {
                    var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, true, cljs.core.instance_QMARK_.call(null, Array, _QMARK_foundvals__$1));
                    if(cljs.core.truth_(temp__3971__auto__)) {
                      var b__2886__auto__ = temp__3971__auto__;
                      return b__2886__auto__
                    }else {
                      return null
                    }
                  }), function(a__2897__auto____$2) {
                    return new cljs.core.logic.Inc(function() {
                      var _QMARK_s = cljs.core.logic.lvar.call(null, "\ufdd1'?s");
                      return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto____$2, function(a__2885__auto__) {
                        var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_s, cljs.core.seq.call(null, _QMARK_foundvals__$1));
                        if(cljs.core.truth_(temp__3971__auto__)) {
                          var b__2886__auto__ = temp__3971__auto__;
                          return b__2886__auto__
                        }else {
                          return null
                        }
                      }), cljs.core.logic.membero.call(null, _QMARK_val, _QMARK_s))
                    })
                  })
                }))
              })
            })
          })
        }.call(null, a3251)
      })
    })
  }
};
jsrefact.predicates.child_PLUS_ = function child_PLUS_(_QMARK_node, _QMARK_child) {
  return function(a__2897__auto__) {
    return new cljs.core.logic.Inc(function() {
      var _QMARK_prop = cljs.core.logic.lvar.call(null, "\ufdd1'?prop");
      var _QMARK_ch = cljs.core.logic.lvar.call(null, "\ufdd1'?ch");
      return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, jsrefact.predicates.child.call(null, _QMARK_prop, _QMARK_node, _QMARK_ch)), function(a3254) {
        return new cljs.core.logic.Inc(function() {
          return cljs.core.logic._mplus.call(null, cljs.core.logic._bind.call(null, a3254, function(a__2885__auto__) {
            var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_child, _QMARK_ch);
            if(cljs.core.truth_(temp__3971__auto__)) {
              var b__2886__auto__ = temp__3971__auto__;
              return b__2886__auto__
            }else {
              return null
            }
          }), new cljs.core.logic.Inc(function() {
            return cljs.core.logic._bind.call(null, a3254, child_PLUS_.call(null, _QMARK_ch, _QMARK_child))
          }))
        })
      })
    })
  }
};
jsrefact.predicates.thisexpression = function thisexpression(_QMARK_this) {
  return jsrefact.predicates.ast.call(null, "ThisExpression", _QMARK_this)
};
jsrefact.predicates.functiondeclaration = function functiondeclaration(_QMARK_funct) {
  return jsrefact.predicates.ast.call(null, "FunctionDeclaration", _QMARK_funct)
};
jsrefact.predicates.expressionstatement = function expressionstatement(_QMARK_exp) {
  return jsrefact.predicates.ast.call(null, "ExpressionStatement", _QMARK_exp)
};
jsrefact.predicates.ast_arrayexpression = function ast_arrayexpression(_QMARK_ast, _QMARK_arr) {
  return jsrefact.predicates.ast_with_input.call(null, "ArrayExpression", _QMARK_ast, _QMARK_arr)
};
jsrefact.predicates.ast_literal = function ast_literal(_QMARK_ast, _QMARK_lit) {
  return jsrefact.predicates.ast_with_input.call(null, "Literal", _QMARK_ast, _QMARK_lit)
};
jsrefact.predicates.ast_value = function ast_value(_QMARK_ast, _QMARK_value) {
  return function(a3256) {
    var _QMARK_ast__$1 = cljs.core.logic._walk_STAR_.call(null, a3256, _QMARK_ast);
    return function(a__2897__auto__) {
      return new cljs.core.logic.Inc(function() {
        return cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2885__auto__) {
          var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_value, _QMARK_ast__$1.value);
          if(cljs.core.truth_(temp__3971__auto__)) {
            var b__2886__auto__ = temp__3971__auto__;
            return b__2886__auto__
          }else {
            return null
          }
        })
      })
    }.call(null, a3256)
  }
};
jsrefact.predicates.ast_name = function ast_name(_QMARK_ast, _QMARK_name) {
  return function(a__2897__auto__) {
    return new cljs.core.logic.Inc(function() {
      var _QMARK_p = cljs.core.logic.lvar.call(null, "\ufdd1'?p");
      var _QMARK_n = cljs.core.logic.lvar.call(null, "\ufdd1'?n");
      return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, jsrefact.predicates.ast_property.call(null, "name", _QMARK_n)), function(a3258) {
        var _QMARK_n__$1 = cljs.core.logic._walk_STAR_.call(null, a3258, _QMARK_n);
        return function(a__2897__auto____$1) {
          return new cljs.core.logic.Inc(function() {
            return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto____$1, function(a__2885__auto__) {
              var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_name, jsrefact.predicates.ast_property_value.call(null, _QMARK_n__$1, "name"));
              if(cljs.core.truth_(temp__3971__auto__)) {
                var b__2886__auto__ = temp__3971__auto__;
                return b__2886__auto__
              }else {
                return null
              }
            }), function(a__2885__auto__) {
              var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_n__$1, _QMARK_ast);
              if(cljs.core.truth_(temp__3971__auto__)) {
                var b__2886__auto__ = temp__3971__auto__;
                return b__2886__auto__
              }else {
                return null
              }
            })
          })
        }.call(null, a3258)
      })
    })
  }
};
jsrefact.predicates.function_name = function function_name(_QMARK_func, _QMARK_funcname) {
  return jsrefact.predicates.ast_name.call(null, _QMARK_func.id, _QMARK_funcname)
};
jsrefact.predicates.invocationcall = function invocationcall(_QMARK_callee) {
  return function(a__2897__auto__) {
    return new cljs.core.logic.Inc(function() {
      var _QMARK_expressionstatement = cljs.core.logic.lvar.call(null, "\ufdd1'?expressionstatement");
      var _QMARK_expression = cljs.core.logic.lvar.call(null, "\ufdd1'?expression");
      return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, jsrefact.predicates.expressionstatement.call(null, _QMARK_expressionstatement)), jsrefact.predicates.has.call(null, "expression", _QMARK_expressionstatement, _QMARK_expression)), jsrefact.predicates.has.call(null, "callee", _QMARK_expression, _QMARK_callee))
    })
  }
};
jsrefact.predicates.function_invocation = function function_invocation(_QMARK_func, _QMARK_invocation) {
  return function(a__2897__auto__) {
    return new cljs.core.logic.Inc(function() {
      var _QMARK_funcName = cljs.core.logic.lvar.call(null, "\ufdd1'?funcName");
      var _QMARK_invoc = cljs.core.logic.lvar.call(null, "\ufdd1'?invoc");
      var _QMARK_invocName = cljs.core.logic.lvar.call(null, "\ufdd1'?invocName");
      return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, jsrefact.predicates.function_name.call(null, _QMARK_func, _QMARK_funcName)), jsrefact.predicates.invocationcall.call(null, _QMARK_invoc)), jsrefact.predicates.ast_name.call(null, _QMARK_invoc, _QMARK_invocName)), function(a__2885__auto__) {
        var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_invocName, _QMARK_funcName);
        if(cljs.core.truth_(temp__3971__auto__)) {
          var b__2886__auto__ = temp__3971__auto__;
          return b__2886__auto__
        }else {
          return null
        }
      }), function(a__2885__auto__) {
        var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_invocation, _QMARK_invoc);
        if(cljs.core.truth_(temp__3971__auto__)) {
          var b__2886__auto__ = temp__3971__auto__;
          return b__2886__auto__
        }else {
          return null
        }
      })
    })
  }
};
jsrefact.predicates.ast_location = function ast_location(_QMARK_ast, _QMARK_startLine, _QMARK_endLine, _QMARK_startCol, _QMARK_endCol) {
  return function(a3261) {
    var _QMARK_ast__$1 = cljs.core.logic._walk_STAR_.call(null, a3261, _QMARK_ast);
    return function(a__2897__auto__) {
      return new cljs.core.logic.Inc(function() {
        return cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2897__auto____$1) {
          return new cljs.core.logic.Inc(function() {
            var _QMARK_loc = cljs.core.logic.lvar.call(null, "\ufdd1'?loc");
            return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto____$1, function(a__2885__auto__) {
              var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_loc, _QMARK_ast__$1.loc);
              if(cljs.core.truth_(temp__3971__auto__)) {
                var b__2886__auto__ = temp__3971__auto__;
                return b__2886__auto__
              }else {
                return null
              }
            }), function(a3262) {
              var _QMARK_loc__$1 = cljs.core.logic._walk_STAR_.call(null, a3262, _QMARK_loc);
              return function(a__2897__auto____$2) {
                return new cljs.core.logic.Inc(function() {
                  return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto____$2, function(a__2885__auto__) {
                    var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_startLine, _QMARK_loc__$1.start.line);
                    if(cljs.core.truth_(temp__3971__auto__)) {
                      var b__2886__auto__ = temp__3971__auto__;
                      return b__2886__auto__
                    }else {
                      return null
                    }
                  }), function(a__2885__auto__) {
                    var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_endLine, _QMARK_loc__$1.end.line);
                    if(cljs.core.truth_(temp__3971__auto__)) {
                      var b__2886__auto__ = temp__3971__auto__;
                      return b__2886__auto__
                    }else {
                      return null
                    }
                  }), function(a__2885__auto__) {
                    var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_startCol, _QMARK_loc__$1.start.column);
                    if(cljs.core.truth_(temp__3971__auto__)) {
                      var b__2886__auto__ = temp__3971__auto__;
                      return b__2886__auto__
                    }else {
                      return null
                    }
                  }), function(a__2885__auto__) {
                    var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_endCol, _QMARK_loc__$1.end.column);
                    if(cljs.core.truth_(temp__3971__auto__)) {
                      var b__2886__auto__ = temp__3971__auto__;
                      return b__2886__auto__
                    }else {
                      return null
                    }
                  })
                })
              }.call(null, a3262)
            })
          })
        })
      })
    }.call(null, a3261)
  }
};
jsrefact.predicates.ast_length = function ast_length(_QMARK_ast, _QMARK_length) {
  return function(a__2897__auto__) {
    return new cljs.core.logic.Inc(function() {
      var _QMARK_s = cljs.core.logic.lvar.call(null, "\ufdd1'?s");
      var _QMARK_e = cljs.core.logic.lvar.call(null, "\ufdd1'?e");
      var _QMARK_cs = cljs.core.logic.lvar.call(null, "\ufdd1'?cs");
      var _QMARK_ce = cljs.core.logic.lvar.call(null, "\ufdd1'?ce");
      return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, jsrefact.predicates.ast_location.call(null, _QMARK_ast, _QMARK_s, _QMARK_e, _QMARK_cs, _QMARK_ce)), function(a3264) {
        var _QMARK_e__$1 = cljs.core.logic._walk_STAR_.call(null, a3264, _QMARK_e);
        var _QMARK_s__$1 = cljs.core.logic._walk_STAR_.call(null, a3264, _QMARK_s);
        return function(a__2897__auto____$1) {
          return new cljs.core.logic.Inc(function() {
            return cljs.core.logic._bind.call(null, a__2897__auto____$1, function(a__2885__auto__) {
              var temp__3971__auto__ = cljs.core.logic._unify.call(null, a__2885__auto__, _QMARK_length, _QMARK_e__$1 - _QMARK_s__$1 - -1);
              if(cljs.core.truth_(temp__3971__auto__)) {
                var b__2886__auto__ = temp__3971__auto__;
                return b__2886__auto__
              }else {
                return null
              }
            })
          })
        }.call(null, a3264)
      })
    })
  }
};
jsrefact.predicates.functionlength = function functionlength(_QMARK_length) {
  return function(a__2897__auto__) {
    return new cljs.core.logic.Inc(function() {
      var _QMARK_f = cljs.core.logic.lvar.call(null, "\ufdd1'?f");
      return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, jsrefact.predicates.functiondeclaration.call(null, _QMARK_f)), jsrefact.predicates.ast_length.call(null, _QMARK_f, _QMARK_length))
    })
  }
};
jsrefact.predicates.average_function_lengths = function average_function_lengths() {
  var lengths = cljs.core.doall.call(null, function() {
    var xs__2905__auto__ = cljs.core.logic._take_STAR_.call(null, new cljs.core.logic.Inc(function() {
      return function(a__2897__auto__) {
        return new cljs.core.logic.Inc(function() {
          var _QMARK_length = cljs.core.logic.lvar.call(null, "\ufdd1'?length");
          return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, jsrefact.predicates.functionlength.call(null, _QMARK_length)), function(a__2906__auto__) {
            return cljs.core.cons.call(null, cljs.core.logic._reify.call(null, a__2906__auto__, _QMARK_length), cljs.core.List.EMPTY)
          })
        })
      }.call(null, cljs.core.logic.empty_s)
    }));
    if(false) {
      return cljs.core.take.call(null, false, xs__2905__auto__)
    }else {
      return xs__2905__auto__
    }
  }());
  return clojure.walk.walk.call(null, function(p1__3265_SHARP_) {
    return 1 * p1__3265_SHARP_
  }, function(p1__3266_SHARP_) {
    return cljs.core.apply.call(null, cljs.core._PLUS_, p1__3266_SHARP_)
  }, lengths) / cljs.core.count.call(null, lengths)
};
jsrefact.predicates.countTypes = function countTypes() {
  var entries = cljs.core.doall.call(null, function() {
    var xs__2905__auto__ = cljs.core.logic._take_STAR_.call(null, new cljs.core.logic.Inc(function() {
      return function(a__2897__auto__) {
        return new cljs.core.logic.Inc(function() {
          var _QMARK_k = cljs.core.logic.lvar.call(null, "\ufdd1'?k");
          return cljs.core.logic._bind.call(null, cljs.core.logic._bind.call(null, a__2897__auto__, function(a__2897__auto____$1) {
            return new cljs.core.logic.Inc(function() {
              var _QMARK_n = cljs.core.logic.lvar.call(null, "\ufdd1'?n");
              return cljs.core.logic._bind.call(null, a__2897__auto____$1, pred.ast.call(null, _QMARK_k, _QMARK_n))
            })
          }), function(a__2906__auto__) {
            return cljs.core.cons.call(null, cljs.core.logic._reify.call(null, a__2906__auto__, _QMARK_k), cljs.core.List.EMPTY)
          })
        })
      }.call(null, cljs.core.logic.empty_s)
    }));
    if(false) {
      return cljs.core.take.call(null, false, xs__2905__auto__)
    }else {
      return xs__2905__auto__
    }
  }());
  return cljs.core.into.call(null, cljs.core.ObjMap.EMPTY, cljs.core.frequencies.call(null, entries))
};
goog.provide("goog.userAgent");
goog.require("goog.string");
goog.userAgent.ASSUME_IE = false;
goog.userAgent.ASSUME_GECKO = false;
goog.userAgent.ASSUME_WEBKIT = false;
goog.userAgent.ASSUME_MOBILE_WEBKIT = false;
goog.userAgent.ASSUME_OPERA = false;
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_GECKO || goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA;
goog.userAgent.getUserAgentString = function() {
  return goog.global["navigator"] ? goog.global["navigator"].userAgent : null
};
goog.userAgent.getNavigator = function() {
  return goog.global["navigator"]
};
goog.userAgent.init_ = function() {
  goog.userAgent.detectedOpera_ = false;
  goog.userAgent.detectedIe_ = false;
  goog.userAgent.detectedWebkit_ = false;
  goog.userAgent.detectedMobile_ = false;
  goog.userAgent.detectedGecko_ = false;
  var ua;
  if(!goog.userAgent.BROWSER_KNOWN_ && (ua = goog.userAgent.getUserAgentString())) {
    var navigator = goog.userAgent.getNavigator();
    goog.userAgent.detectedOpera_ = ua.indexOf("Opera") == 0;
    goog.userAgent.detectedIe_ = !goog.userAgent.detectedOpera_ && ua.indexOf("MSIE") != -1;
    goog.userAgent.detectedWebkit_ = !goog.userAgent.detectedOpera_ && ua.indexOf("WebKit") != -1;
    goog.userAgent.detectedMobile_ = goog.userAgent.detectedWebkit_ && ua.indexOf("Mobile") != -1;
    goog.userAgent.detectedGecko_ = !goog.userAgent.detectedOpera_ && !goog.userAgent.detectedWebkit_ && navigator.product == "Gecko"
  }
};
if(!goog.userAgent.BROWSER_KNOWN_) {
  goog.userAgent.init_()
}
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.userAgent.detectedOpera_;
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.userAgent.detectedIe_;
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.userAgent.detectedGecko_;
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.userAgent.detectedWebkit_;
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.detectedMobile_;
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || ""
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.userAgent.ASSUME_MAC = false;
goog.userAgent.ASSUME_WINDOWS = false;
goog.userAgent.ASSUME_LINUX = false;
goog.userAgent.ASSUME_X11 = false;
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || goog.userAgent.ASSUME_WINDOWS || goog.userAgent.ASSUME_LINUX || goog.userAgent.ASSUME_X11;
goog.userAgent.initPlatform_ = function() {
  goog.userAgent.detectedMac_ = goog.string.contains(goog.userAgent.PLATFORM, "Mac");
  goog.userAgent.detectedWindows_ = goog.string.contains(goog.userAgent.PLATFORM, "Win");
  goog.userAgent.detectedLinux_ = goog.string.contains(goog.userAgent.PLATFORM, "Linux");
  goog.userAgent.detectedX11_ = !!goog.userAgent.getNavigator() && goog.string.contains(goog.userAgent.getNavigator()["appVersion"] || "", "X11")
};
if(!goog.userAgent.PLATFORM_KNOWN_) {
  goog.userAgent.initPlatform_()
}
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.userAgent.detectedMac_;
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.userAgent.detectedWindows_;
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.detectedLinux_;
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.detectedX11_;
goog.userAgent.determineVersion_ = function() {
  var version = "", re;
  if(goog.userAgent.OPERA && goog.global["opera"]) {
    var operaVersion = goog.global["opera"].version;
    version = typeof operaVersion == "function" ? operaVersion() : operaVersion
  }else {
    if(goog.userAgent.GECKO) {
      re = /rv\:([^\);]+)(\)|;)/
    }else {
      if(goog.userAgent.IE) {
        re = /MSIE\s+([^\);]+)(\)|;)/
      }else {
        if(goog.userAgent.WEBKIT) {
          re = /WebKit\/(\S+)/
        }
      }
    }
    if(re) {
      var arr = re.exec(goog.userAgent.getUserAgentString());
      version = arr ? arr[1] : ""
    }
  }
  if(goog.userAgent.IE) {
    var docMode = goog.userAgent.getDocumentMode_();
    if(docMode > parseFloat(version)) {
      return String(docMode)
    }
  }
  return version
};
goog.userAgent.getDocumentMode_ = function() {
  var doc = goog.global["document"];
  return doc ? doc["documentMode"] : undefined
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2)
};
goog.userAgent.isVersionCache_ = {};
goog.userAgent.isVersion = function(version) {
  return goog.userAgent.isVersionCache_[version] || (goog.userAgent.isVersionCache_[version] = goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0)
};
goog.userAgent.isDocumentModeCache_ = {};
goog.userAgent.isDocumentMode = function(documentMode) {
  return goog.userAgent.isDocumentModeCache_[documentMode] || (goog.userAgent.isDocumentModeCache_[documentMode] = goog.userAgent.IE && document.documentMode && document.documentMode >= documentMode)
};
goog.provide("goog.events.EventType");
goog.require("goog.userAgent");
goog.events.EventType = {CLICK:"click", DBLCLICK:"dblclick", MOUSEDOWN:"mousedown", MOUSEUP:"mouseup", MOUSEOVER:"mouseover", MOUSEOUT:"mouseout", MOUSEMOVE:"mousemove", SELECTSTART:"selectstart", KEYPRESS:"keypress", KEYDOWN:"keydown", KEYUP:"keyup", BLUR:"blur", FOCUS:"focus", DEACTIVATE:"deactivate", FOCUSIN:goog.userAgent.IE ? "focusin" : "DOMFocusIn", FOCUSOUT:goog.userAgent.IE ? "focusout" : "DOMFocusOut", CHANGE:"change", SELECT:"select", SUBMIT:"submit", INPUT:"input", PROPERTYCHANGE:"propertychange", 
DRAGSTART:"dragstart", DRAGENTER:"dragenter", DRAGOVER:"dragover", DRAGLEAVE:"dragleave", DROP:"drop", TOUCHSTART:"touchstart", TOUCHMOVE:"touchmove", TOUCHEND:"touchend", TOUCHCANCEL:"touchcancel", CONTEXTMENU:"contextmenu", ERROR:"error", HELP:"help", LOAD:"load", LOSECAPTURE:"losecapture", READYSTATECHANGE:"readystatechange", RESIZE:"resize", SCROLL:"scroll", UNLOAD:"unload", HASHCHANGE:"hashchange", PAGEHIDE:"pagehide", PAGESHOW:"pageshow", POPSTATE:"popstate", COPY:"copy", PASTE:"paste", CUT:"cut", 
BEFORECOPY:"beforecopy", BEFORECUT:"beforecut", BEFOREPASTE:"beforepaste", MESSAGE:"message", CONNECT:"connect", TRANSITIONEND:goog.userAgent.WEBKIT ? "webkitTransitionEnd" : goog.userAgent.OPERA ? "oTransitionEnd" : "transitionend"};
goog.provide("goog.disposable.IDisposable");
goog.disposable.IDisposable = function() {
};
goog.disposable.IDisposable.prototype.dispose;
goog.disposable.IDisposable.prototype.isDisposed;
goog.provide("goog.Disposable");
goog.provide("goog.dispose");
goog.require("goog.disposable.IDisposable");
goog.Disposable = function() {
  if(goog.Disposable.ENABLE_MONITORING) {
    goog.Disposable.instances_[goog.getUid(this)] = this
  }
};
goog.Disposable.ENABLE_MONITORING = false;
goog.Disposable.instances_ = {};
goog.Disposable.getUndisposedObjects = function() {
  var ret = [];
  for(var id in goog.Disposable.instances_) {
    if(goog.Disposable.instances_.hasOwnProperty(id)) {
      ret.push(goog.Disposable.instances_[Number(id)])
    }
  }
  return ret
};
goog.Disposable.clearUndisposedObjects = function() {
  goog.Disposable.instances_ = {}
};
goog.Disposable.prototype.disposed_ = false;
goog.Disposable.prototype.dependentDisposables_;
goog.Disposable.prototype.isDisposed = function() {
  return this.disposed_
};
goog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;
goog.Disposable.prototype.dispose = function() {
  if(!this.disposed_) {
    this.disposed_ = true;
    this.disposeInternal();
    if(goog.Disposable.ENABLE_MONITORING) {
      var uid = goog.getUid(this);
      if(!goog.Disposable.instances_.hasOwnProperty(uid)) {
        throw Error(this + " did not call the goog.Disposable base " + "constructor or was disposed of after a clearUndisposedObjects " + "call");
      }
      delete goog.Disposable.instances_[uid]
    }
  }
};
goog.Disposable.prototype.registerDisposable = function(disposable) {
  if(!this.dependentDisposables_) {
    this.dependentDisposables_ = []
  }
  this.dependentDisposables_.push(disposable)
};
goog.Disposable.prototype.disposeInternal = function() {
  if(this.dependentDisposables_) {
    goog.disposeAll.apply(null, this.dependentDisposables_)
  }
};
goog.dispose = function(obj) {
  if(obj && typeof obj.dispose == "function") {
    obj.dispose()
  }
};
goog.disposeAll = function(var_args) {
  for(var i = 0, len = arguments.length;i < len;++i) {
    var disposable = arguments[i];
    if(goog.isArrayLike(disposable)) {
      goog.disposeAll.apply(null, disposable)
    }else {
      goog.dispose(disposable)
    }
  }
};
goog.provide("goog.debug.EntryPointMonitor");
goog.provide("goog.debug.entryPointRegistry");
goog.require("goog.asserts");
goog.debug.EntryPointMonitor = function() {
};
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function(callback) {
  goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
  if(goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for(var i = 0;i < monitors.length;i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]))
    }
  }
};
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for(var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer)
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor)
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1], "Only the most recent monitor can be unwrapped.");
  var transformer = goog.bind(monitor.unwrap, monitor);
  for(var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer)
  }
  monitors.length--
};
goog.provide("goog.debug.errorHandlerWeakDep");
goog.debug.errorHandlerWeakDep = {protectEntryPoint:function(fn, opt_tracers) {
  return fn
}};
goog.provide("goog.events.BrowserFeature");
goog.require("goog.userAgent");
goog.events.BrowserFeature = {HAS_W3C_BUTTON:!goog.userAgent.IE || goog.userAgent.isDocumentMode(9), HAS_W3C_EVENT_SUPPORT:!goog.userAgent.IE || goog.userAgent.isDocumentMode(9), SET_KEY_CODE_TO_PREVENT_DEFAULT:goog.userAgent.IE && !goog.userAgent.isVersion("8")};
goog.provide("goog.events.Event");
goog.require("goog.Disposable");
goog.events.Event = function(type, opt_target) {
  goog.Disposable.call(this);
  this.type = type;
  this.target = opt_target;
  this.currentTarget = this.target
};
goog.inherits(goog.events.Event, goog.Disposable);
goog.events.Event.prototype.disposeInternal = function() {
  delete this.type;
  delete this.target;
  delete this.currentTarget
};
goog.events.Event.prototype.propagationStopped_ = false;
goog.events.Event.prototype.returnValue_ = true;
goog.events.Event.prototype.stopPropagation = function() {
  this.propagationStopped_ = true
};
goog.events.Event.prototype.preventDefault = function() {
  this.returnValue_ = false
};
goog.events.Event.stopPropagation = function(e) {
  e.stopPropagation()
};
goog.events.Event.preventDefault = function(e) {
  e.preventDefault()
};
goog.provide("goog.reflect");
goog.reflect.object = function(type, object) {
  return object
};
goog.reflect.sinkValue = function(x) {
  goog.reflect.sinkValue[" "](x);
  return x
};
goog.reflect.sinkValue[" "] = goog.nullFunction;
goog.reflect.canAccessProperty = function(obj, prop) {
  try {
    goog.reflect.sinkValue(obj[prop]);
    return true
  }catch(e) {
  }
  return false
};
goog.provide("goog.events.BrowserEvent");
goog.provide("goog.events.BrowserEvent.MouseButton");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventType");
goog.require("goog.reflect");
goog.require("goog.userAgent");
goog.events.BrowserEvent = function(opt_e, opt_currentTarget) {
  if(opt_e) {
    this.init(opt_e, opt_currentTarget)
  }
};
goog.inherits(goog.events.BrowserEvent, goog.events.Event);
goog.events.BrowserEvent.MouseButton = {LEFT:0, MIDDLE:1, RIGHT:2};
goog.events.BrowserEvent.IEButtonMap = [1, 4, 2];
goog.events.BrowserEvent.prototype.target = null;
goog.events.BrowserEvent.prototype.currentTarget;
goog.events.BrowserEvent.prototype.relatedTarget = null;
goog.events.BrowserEvent.prototype.offsetX = 0;
goog.events.BrowserEvent.prototype.offsetY = 0;
goog.events.BrowserEvent.prototype.clientX = 0;
goog.events.BrowserEvent.prototype.clientY = 0;
goog.events.BrowserEvent.prototype.screenX = 0;
goog.events.BrowserEvent.prototype.screenY = 0;
goog.events.BrowserEvent.prototype.button = 0;
goog.events.BrowserEvent.prototype.keyCode = 0;
goog.events.BrowserEvent.prototype.charCode = 0;
goog.events.BrowserEvent.prototype.ctrlKey = false;
goog.events.BrowserEvent.prototype.altKey = false;
goog.events.BrowserEvent.prototype.shiftKey = false;
goog.events.BrowserEvent.prototype.metaKey = false;
goog.events.BrowserEvent.prototype.state;
goog.events.BrowserEvent.prototype.platformModifierKey = false;
goog.events.BrowserEvent.prototype.event_ = null;
goog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {
  var type = this.type = e.type;
  goog.events.Event.call(this, type);
  this.target = e.target || e.srcElement;
  this.currentTarget = opt_currentTarget;
  var relatedTarget = e.relatedTarget;
  if(relatedTarget) {
    if(goog.userAgent.GECKO) {
      if(!goog.reflect.canAccessProperty(relatedTarget, "nodeName")) {
        relatedTarget = null
      }
    }
  }else {
    if(type == goog.events.EventType.MOUSEOVER) {
      relatedTarget = e.fromElement
    }else {
      if(type == goog.events.EventType.MOUSEOUT) {
        relatedTarget = e.toElement
      }
    }
  }
  this.relatedTarget = relatedTarget;
  this.offsetX = e.offsetX !== undefined ? e.offsetX : e.layerX;
  this.offsetY = e.offsetY !== undefined ? e.offsetY : e.layerY;
  this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;
  this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;
  this.screenX = e.screenX || 0;
  this.screenY = e.screenY || 0;
  this.button = e.button;
  this.keyCode = e.keyCode || 0;
  this.charCode = e.charCode || (type == "keypress" ? e.keyCode : 0);
  this.ctrlKey = e.ctrlKey;
  this.altKey = e.altKey;
  this.shiftKey = e.shiftKey;
  this.metaKey = e.metaKey;
  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;
  this.state = e.state;
  this.event_ = e;
  delete this.returnValue_;
  delete this.propagationStopped_
};
goog.events.BrowserEvent.prototype.isButton = function(button) {
  if(!goog.events.BrowserFeature.HAS_W3C_BUTTON) {
    if(this.type == "click") {
      return button == goog.events.BrowserEvent.MouseButton.LEFT
    }else {
      return!!(this.event_.button & goog.events.BrowserEvent.IEButtonMap[button])
    }
  }else {
    return this.event_.button == button
  }
};
goog.events.BrowserEvent.prototype.isMouseActionButton = function() {
  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) && !(goog.userAgent.WEBKIT && goog.userAgent.MAC && this.ctrlKey)
};
goog.events.BrowserEvent.prototype.stopPropagation = function() {
  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);
  if(this.event_.stopPropagation) {
    this.event_.stopPropagation()
  }else {
    this.event_.cancelBubble = true
  }
};
goog.events.BrowserEvent.prototype.preventDefault = function() {
  goog.events.BrowserEvent.superClass_.preventDefault.call(this);
  var be = this.event_;
  if(!be.preventDefault) {
    be.returnValue = false;
    if(goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {
      try {
        var VK_F1 = 112;
        var VK_F12 = 123;
        if(be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {
          be.keyCode = -1
        }
      }catch(ex) {
      }
    }
  }else {
    be.preventDefault()
  }
};
goog.events.BrowserEvent.prototype.getBrowserEvent = function() {
  return this.event_
};
goog.events.BrowserEvent.prototype.disposeInternal = function() {
  goog.events.BrowserEvent.superClass_.disposeInternal.call(this);
  this.event_ = null;
  this.target = null;
  this.currentTarget = null;
  this.relatedTarget = null
};
goog.provide("goog.events.EventWrapper");
goog.events.EventWrapper = function() {
};
goog.events.EventWrapper.prototype.listen = function(src, listener, opt_capt, opt_scope, opt_eventHandler) {
};
goog.events.EventWrapper.prototype.unlisten = function(src, listener, opt_capt, opt_scope, opt_eventHandler) {
};
goog.provide("goog.events.Listener");
goog.events.Listener = function() {
};
goog.events.Listener.counter_ = 0;
goog.events.Listener.prototype.isFunctionListener_;
goog.events.Listener.prototype.listener;
goog.events.Listener.prototype.proxy;
goog.events.Listener.prototype.src;
goog.events.Listener.prototype.type;
goog.events.Listener.prototype.capture;
goog.events.Listener.prototype.handler;
goog.events.Listener.prototype.key = 0;
goog.events.Listener.prototype.removed = false;
goog.events.Listener.prototype.callOnce = false;
goog.events.Listener.prototype.init = function(listener, proxy, src, type, capture, opt_handler) {
  if(goog.isFunction(listener)) {
    this.isFunctionListener_ = true
  }else {
    if(listener && listener.handleEvent && goog.isFunction(listener.handleEvent)) {
      this.isFunctionListener_ = false
    }else {
      throw Error("Invalid listener argument");
    }
  }
  this.listener = listener;
  this.proxy = proxy;
  this.src = src;
  this.type = type;
  this.capture = !!capture;
  this.handler = opt_handler;
  this.callOnce = false;
  this.key = ++goog.events.Listener.counter_;
  this.removed = false
};
goog.events.Listener.prototype.handleEvent = function(eventObject) {
  if(this.isFunctionListener_) {
    return this.listener.call(this.handler || this.src, eventObject)
  }
  return this.listener.handleEvent.call(this.listener, eventObject)
};
goog.provide("goog.events");
goog.require("goog.array");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.debug.errorHandlerWeakDep");
goog.require("goog.events.BrowserEvent");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventWrapper");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.require("goog.userAgent");
goog.events.ASSUME_GOOD_GC = false;
goog.events.listeners_ = {};
goog.events.listenerTree_ = {};
goog.events.sources_ = {};
goog.events.onString_ = "on";
goog.events.onStringMap_ = {};
goog.events.keySeparator_ = "_";
goog.events.listen = function(src, type, listener, opt_capt, opt_handler) {
  if(!type) {
    throw Error("Invalid event type");
  }else {
    if(goog.isArray(type)) {
      for(var i = 0;i < type.length;i++) {
        goog.events.listen(src, type[i], listener, opt_capt, opt_handler)
      }
      return null
    }else {
      var capture = !!opt_capt;
      var map = goog.events.listenerTree_;
      if(!(type in map)) {
        map[type] = {count_:0, remaining_:0}
      }
      map = map[type];
      if(!(capture in map)) {
        map[capture] = {count_:0, remaining_:0};
        map.count_++
      }
      map = map[capture];
      var srcUid = goog.getUid(src);
      var listenerArray, listenerObj;
      map.remaining_++;
      if(!map[srcUid]) {
        listenerArray = map[srcUid] = [];
        map.count_++
      }else {
        listenerArray = map[srcUid];
        for(var i = 0;i < listenerArray.length;i++) {
          listenerObj = listenerArray[i];
          if(listenerObj.listener == listener && listenerObj.handler == opt_handler) {
            if(listenerObj.removed) {
              break
            }
            return listenerArray[i].key
          }
        }
      }
      var proxy = goog.events.getProxy();
      proxy.src = src;
      listenerObj = new goog.events.Listener;
      listenerObj.init(listener, proxy, src, type, capture, opt_handler);
      var key = listenerObj.key;
      proxy.key = key;
      listenerArray.push(listenerObj);
      goog.events.listeners_[key] = listenerObj;
      if(!goog.events.sources_[srcUid]) {
        goog.events.sources_[srcUid] = []
      }
      goog.events.sources_[srcUid].push(listenerObj);
      if(src.addEventListener) {
        if(src == goog.global || !src.customEvent_) {
          src.addEventListener(type, proxy, capture)
        }
      }else {
        src.attachEvent(goog.events.getOnString_(type), proxy)
      }
      return key
    }
  }
};
goog.events.getProxy = function() {
  var proxyCallbackFunction = goog.events.handleBrowserEvent_;
  var f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ? function(eventObject) {
    return proxyCallbackFunction.call(f.src, f.key, eventObject)
  } : function(eventObject) {
    var v = proxyCallbackFunction.call(f.src, f.key, eventObject);
    if(!v) {
      return v
    }
  };
  return f
};
goog.events.listenOnce = function(src, type, listener, opt_capt, opt_handler) {
  if(goog.isArray(type)) {
    for(var i = 0;i < type.length;i++) {
      goog.events.listenOnce(src, type[i], listener, opt_capt, opt_handler)
    }
    return null
  }
  var key = goog.events.listen(src, type, listener, opt_capt, opt_handler);
  var listenerObj = goog.events.listeners_[key];
  listenerObj.callOnce = true;
  return key
};
goog.events.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler)
};
goog.events.unlisten = function(src, type, listener, opt_capt, opt_handler) {
  if(goog.isArray(type)) {
    for(var i = 0;i < type.length;i++) {
      goog.events.unlisten(src, type[i], listener, opt_capt, opt_handler)
    }
    return null
  }
  var capture = !!opt_capt;
  var listenerArray = goog.events.getListeners_(src, type, capture);
  if(!listenerArray) {
    return false
  }
  for(var i = 0;i < listenerArray.length;i++) {
    if(listenerArray[i].listener == listener && listenerArray[i].capture == capture && listenerArray[i].handler == opt_handler) {
      return goog.events.unlistenByKey(listenerArray[i].key)
    }
  }
  return false
};
goog.events.unlistenByKey = function(key) {
  if(!goog.events.listeners_[key]) {
    return false
  }
  var listener = goog.events.listeners_[key];
  if(listener.removed) {
    return false
  }
  var src = listener.src;
  var type = listener.type;
  var proxy = listener.proxy;
  var capture = listener.capture;
  if(src.removeEventListener) {
    if(src == goog.global || !src.customEvent_) {
      src.removeEventListener(type, proxy, capture)
    }
  }else {
    if(src.detachEvent) {
      src.detachEvent(goog.events.getOnString_(type), proxy)
    }
  }
  var srcUid = goog.getUid(src);
  var listenerArray = goog.events.listenerTree_[type][capture][srcUid];
  if(goog.events.sources_[srcUid]) {
    var sourcesArray = goog.events.sources_[srcUid];
    goog.array.remove(sourcesArray, listener);
    if(sourcesArray.length == 0) {
      delete goog.events.sources_[srcUid]
    }
  }
  listener.removed = true;
  listenerArray.needsCleanup_ = true;
  goog.events.cleanUp_(type, capture, srcUid, listenerArray);
  delete goog.events.listeners_[key];
  return true
};
goog.events.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler)
};
goog.events.cleanUp_ = function(type, capture, srcUid, listenerArray) {
  if(!listenerArray.locked_) {
    if(listenerArray.needsCleanup_) {
      for(var oldIndex = 0, newIndex = 0;oldIndex < listenerArray.length;oldIndex++) {
        if(listenerArray[oldIndex].removed) {
          var proxy = listenerArray[oldIndex].proxy;
          proxy.src = null;
          continue
        }
        if(oldIndex != newIndex) {
          listenerArray[newIndex] = listenerArray[oldIndex]
        }
        newIndex++
      }
      listenerArray.length = newIndex;
      listenerArray.needsCleanup_ = false;
      if(newIndex == 0) {
        delete goog.events.listenerTree_[type][capture][srcUid];
        goog.events.listenerTree_[type][capture].count_--;
        if(goog.events.listenerTree_[type][capture].count_ == 0) {
          delete goog.events.listenerTree_[type][capture];
          goog.events.listenerTree_[type].count_--
        }
        if(goog.events.listenerTree_[type].count_ == 0) {
          delete goog.events.listenerTree_[type]
        }
      }
    }
  }
};
goog.events.removeAll = function(opt_obj, opt_type, opt_capt) {
  var count = 0;
  var noObj = opt_obj == null;
  var noType = opt_type == null;
  var noCapt = opt_capt == null;
  opt_capt = !!opt_capt;
  if(!noObj) {
    var srcUid = goog.getUid(opt_obj);
    if(goog.events.sources_[srcUid]) {
      var sourcesArray = goog.events.sources_[srcUid];
      for(var i = sourcesArray.length - 1;i >= 0;i--) {
        var listener = sourcesArray[i];
        if((noType || opt_type == listener.type) && (noCapt || opt_capt == listener.capture)) {
          goog.events.unlistenByKey(listener.key);
          count++
        }
      }
    }
  }else {
    goog.object.forEach(goog.events.sources_, function(listeners) {
      for(var i = listeners.length - 1;i >= 0;i--) {
        var listener = listeners[i];
        if((noType || opt_type == listener.type) && (noCapt || opt_capt == listener.capture)) {
          goog.events.unlistenByKey(listener.key);
          count++
        }
      }
    })
  }
  return count
};
goog.events.getListeners = function(obj, type, capture) {
  return goog.events.getListeners_(obj, type, capture) || []
};
goog.events.getListeners_ = function(obj, type, capture) {
  var map = goog.events.listenerTree_;
  if(type in map) {
    map = map[type];
    if(capture in map) {
      map = map[capture];
      var objUid = goog.getUid(obj);
      if(map[objUid]) {
        return map[objUid]
      }
    }
  }
  return null
};
goog.events.getListener = function(src, type, listener, opt_capt, opt_handler) {
  var capture = !!opt_capt;
  var listenerArray = goog.events.getListeners_(src, type, capture);
  if(listenerArray) {
    for(var i = 0;i < listenerArray.length;i++) {
      if(!listenerArray[i].removed && listenerArray[i].listener == listener && listenerArray[i].capture == capture && listenerArray[i].handler == opt_handler) {
        return listenerArray[i]
      }
    }
  }
  return null
};
goog.events.hasListener = function(obj, opt_type, opt_capture) {
  var objUid = goog.getUid(obj);
  var listeners = goog.events.sources_[objUid];
  if(listeners) {
    var hasType = goog.isDef(opt_type);
    var hasCapture = goog.isDef(opt_capture);
    if(hasType && hasCapture) {
      var map = goog.events.listenerTree_[opt_type];
      return!!map && !!map[opt_capture] && objUid in map[opt_capture]
    }else {
      if(!(hasType || hasCapture)) {
        return true
      }else {
        return goog.array.some(listeners, function(listener) {
          return hasType && listener.type == opt_type || hasCapture && listener.capture == opt_capture
        })
      }
    }
  }
  return false
};
goog.events.expose = function(e) {
  var str = [];
  for(var key in e) {
    if(e[key] && e[key].id) {
      str.push(key + " = " + e[key] + " (" + e[key].id + ")")
    }else {
      str.push(key + " = " + e[key])
    }
  }
  return str.join("\n")
};
goog.events.getOnString_ = function(type) {
  if(type in goog.events.onStringMap_) {
    return goog.events.onStringMap_[type]
  }
  return goog.events.onStringMap_[type] = goog.events.onString_ + type
};
goog.events.fireListeners = function(obj, type, capture, eventObject) {
  var map = goog.events.listenerTree_;
  if(type in map) {
    map = map[type];
    if(capture in map) {
      return goog.events.fireListeners_(map[capture], obj, type, capture, eventObject)
    }
  }
  return true
};
goog.events.fireListeners_ = function(map, obj, type, capture, eventObject) {
  var retval = 1;
  var objUid = goog.getUid(obj);
  if(map[objUid]) {
    map.remaining_--;
    var listenerArray = map[objUid];
    if(!listenerArray.locked_) {
      listenerArray.locked_ = 1
    }else {
      listenerArray.locked_++
    }
    try {
      var length = listenerArray.length;
      for(var i = 0;i < length;i++) {
        var listener = listenerArray[i];
        if(listener && !listener.removed) {
          retval &= goog.events.fireListener(listener, eventObject) !== false
        }
      }
    }finally {
      listenerArray.locked_--;
      goog.events.cleanUp_(type, capture, objUid, listenerArray)
    }
  }
  return Boolean(retval)
};
goog.events.fireListener = function(listener, eventObject) {
  var rv = listener.handleEvent(eventObject);
  if(listener.callOnce) {
    goog.events.unlistenByKey(listener.key)
  }
  return rv
};
goog.events.getTotalListenerCount = function() {
  return goog.object.getCount(goog.events.listeners_)
};
goog.events.dispatchEvent = function(src, e) {
  var type = e.type || e;
  var map = goog.events.listenerTree_;
  if(!(type in map)) {
    return true
  }
  if(goog.isString(e)) {
    e = new goog.events.Event(e, src)
  }else {
    if(!(e instanceof goog.events.Event)) {
      var oldEvent = e;
      e = new goog.events.Event(type, src);
      goog.object.extend(e, oldEvent)
    }else {
      e.target = e.target || src
    }
  }
  var rv = 1, ancestors;
  map = map[type];
  var hasCapture = true in map;
  var targetsMap;
  if(hasCapture) {
    ancestors = [];
    for(var parent = src;parent;parent = parent.getParentEventTarget()) {
      ancestors.push(parent)
    }
    targetsMap = map[true];
    targetsMap.remaining_ = targetsMap.count_;
    for(var i = ancestors.length - 1;!e.propagationStopped_ && i >= 0 && targetsMap.remaining_;i--) {
      e.currentTarget = ancestors[i];
      rv &= goog.events.fireListeners_(targetsMap, ancestors[i], e.type, true, e) && e.returnValue_ != false
    }
  }
  var hasBubble = false in map;
  if(hasBubble) {
    targetsMap = map[false];
    targetsMap.remaining_ = targetsMap.count_;
    if(hasCapture) {
      for(var i = 0;!e.propagationStopped_ && i < ancestors.length && targetsMap.remaining_;i++) {
        e.currentTarget = ancestors[i];
        rv &= goog.events.fireListeners_(targetsMap, ancestors[i], e.type, false, e) && e.returnValue_ != false
      }
    }else {
      for(var current = src;!e.propagationStopped_ && current && targetsMap.remaining_;current = current.getParentEventTarget()) {
        e.currentTarget = current;
        rv &= goog.events.fireListeners_(targetsMap, current, e.type, false, e) && e.returnValue_ != false
      }
    }
  }
  return Boolean(rv)
};
goog.events.protectBrowserEventEntryPoint = function(errorHandler) {
  goog.events.handleBrowserEvent_ = errorHandler.protectEntryPoint(goog.events.handleBrowserEvent_)
};
goog.events.handleBrowserEvent_ = function(key, opt_evt) {
  if(!goog.events.listeners_[key]) {
    return true
  }
  var listener = goog.events.listeners_[key];
  var type = listener.type;
  var map = goog.events.listenerTree_;
  if(!(type in map)) {
    return true
  }
  map = map[type];
  var retval, targetsMap;
  if(!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    var ieEvent = opt_evt || goog.getObjectByName("window.event");
    var hasCapture = true in map;
    var hasBubble = false in map;
    if(hasCapture) {
      if(goog.events.isMarkedIeEvent_(ieEvent)) {
        return true
      }
      goog.events.markIeEvent_(ieEvent)
    }
    var evt = new goog.events.BrowserEvent;
    evt.init(ieEvent, this);
    retval = true;
    try {
      if(hasCapture) {
        var ancestors = [];
        for(var parent = evt.currentTarget;parent;parent = parent.parentNode) {
          ancestors.push(parent)
        }
        targetsMap = map[true];
        targetsMap.remaining_ = targetsMap.count_;
        for(var i = ancestors.length - 1;!evt.propagationStopped_ && i >= 0 && targetsMap.remaining_;i--) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(targetsMap, ancestors[i], type, true, evt)
        }
        if(hasBubble) {
          targetsMap = map[false];
          targetsMap.remaining_ = targetsMap.count_;
          for(var i = 0;!evt.propagationStopped_ && i < ancestors.length && targetsMap.remaining_;i++) {
            evt.currentTarget = ancestors[i];
            retval &= goog.events.fireListeners_(targetsMap, ancestors[i], type, false, evt)
          }
        }
      }else {
        retval = goog.events.fireListener(listener, evt)
      }
    }finally {
      if(ancestors) {
        ancestors.length = 0
      }
      evt.dispose()
    }
    return retval
  }
  var be = new goog.events.BrowserEvent(opt_evt, this);
  try {
    retval = goog.events.fireListener(listener, be)
  }finally {
    be.dispose()
  }
  return retval
};
goog.events.markIeEvent_ = function(e) {
  var useReturnValue = false;
  if(e.keyCode == 0) {
    try {
      e.keyCode = -1;
      return
    }catch(ex) {
      useReturnValue = true
    }
  }
  if(useReturnValue || e.returnValue == undefined) {
    e.returnValue = true
  }
};
goog.events.isMarkedIeEvent_ = function(e) {
  return e.keyCode < 0 || e.returnValue != undefined
};
goog.events.uniqueIdCounter_ = 0;
goog.events.getUniqueId = function(identifier) {
  return identifier + "_" + goog.events.uniqueIdCounter_++
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.events.handleBrowserEvent_ = transformer(goog.events.handleBrowserEvent_)
});
goog.provide("goog.events.EventTarget");
goog.require("goog.Disposable");
goog.require("goog.events");
goog.events.EventTarget = function() {
  goog.Disposable.call(this)
};
goog.inherits(goog.events.EventTarget, goog.Disposable);
goog.events.EventTarget.prototype.customEvent_ = true;
goog.events.EventTarget.prototype.parentEventTarget_ = null;
goog.events.EventTarget.prototype.getParentEventTarget = function() {
  return this.parentEventTarget_
};
goog.events.EventTarget.prototype.setParentEventTarget = function(parent) {
  this.parentEventTarget_ = parent
};
goog.events.EventTarget.prototype.addEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.listen(this, type, handler, opt_capture, opt_handlerScope)
};
goog.events.EventTarget.prototype.removeEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.unlisten(this, type, handler, opt_capture, opt_handlerScope)
};
goog.events.EventTarget.prototype.dispatchEvent = function(e) {
  return goog.events.dispatchEvent(this, e)
};
goog.events.EventTarget.prototype.disposeInternal = function() {
  goog.events.EventTarget.superClass_.disposeInternal.call(this);
  goog.events.removeAll(this);
  this.parentEventTarget_ = null
};
goog.provide("clojure.browser.event");
goog.require("cljs.core");
goog.require("goog.events.EventType");
goog.require("goog.events.EventTarget");
goog.require("goog.events");
clojure.browser.event.EventType = {};
clojure.browser.event.event_types = function event_types(this$) {
  if(function() {
    var and__3822__auto__ = this$;
    if(and__3822__auto__) {
      return this$.clojure$browser$event$EventType$event_types$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return this$.clojure$browser$event$EventType$event_types$arity$1(this$)
  }else {
    var x__2373__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3824__auto__ = clojure.browser.event.event_types[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = clojure.browser.event.event_types["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "EventType.event-types", this$);
        }
      }
    }().call(null, this$)
  }
};
Element.prototype.clojure$browser$event$EventType$ = true;
Element.prototype.clojure$browser$event$EventType$event_types$arity$1 = function(this$) {
  return cljs.core.into.call(null, cljs.core.ObjMap.EMPTY, cljs.core.map.call(null, function(p__4087) {
    var vec__4088 = p__4087;
    var k = cljs.core.nth.call(null, vec__4088, 0, null);
    var v = cljs.core.nth.call(null, vec__4088, 1, null);
    return cljs.core.PersistentVector.fromArray([cljs.core.keyword.call(null, k.toLowerCase()), v], true)
  }, cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.events.EventType))))
};
goog.events.EventTarget.prototype.clojure$browser$event$EventType$ = true;
goog.events.EventTarget.prototype.clojure$browser$event$EventType$event_types$arity$1 = function(this$) {
  return cljs.core.into.call(null, cljs.core.ObjMap.EMPTY, cljs.core.map.call(null, function(p__4089) {
    var vec__4090 = p__4089;
    var k = cljs.core.nth.call(null, vec__4090, 0, null);
    var v = cljs.core.nth.call(null, vec__4090, 1, null);
    return cljs.core.PersistentVector.fromArray([cljs.core.keyword.call(null, k.toLowerCase()), v], true)
  }, cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.events.EventType))))
};
clojure.browser.event.listen = function() {
  var listen = null;
  var listen__3 = function(src, type, fn) {
    return listen.call(null, src, type, fn, false)
  };
  var listen__4 = function(src, type, fn, capture_QMARK_) {
    return goog.events.listen(src, cljs.core._lookup.call(null, clojure.browser.event.event_types.call(null, src), type, type), fn, capture_QMARK_)
  };
  listen = function(src, type, fn, capture_QMARK_) {
    switch(arguments.length) {
      case 3:
        return listen__3.call(this, src, type, fn);
      case 4:
        return listen__4.call(this, src, type, fn, capture_QMARK_)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  listen.cljs$lang$arity$3 = listen__3;
  listen.cljs$lang$arity$4 = listen__4;
  return listen
}();
clojure.browser.event.listen_once = function() {
  var listen_once = null;
  var listen_once__3 = function(src, type, fn) {
    return listen_once.call(null, src, type, fn, false)
  };
  var listen_once__4 = function(src, type, fn, capture_QMARK_) {
    return goog.events.listenOnce(src, cljs.core._lookup.call(null, clojure.browser.event.event_types.call(null, src), type, type), fn, capture_QMARK_)
  };
  listen_once = function(src, type, fn, capture_QMARK_) {
    switch(arguments.length) {
      case 3:
        return listen_once__3.call(this, src, type, fn);
      case 4:
        return listen_once__4.call(this, src, type, fn, capture_QMARK_)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  listen_once.cljs$lang$arity$3 = listen_once__3;
  listen_once.cljs$lang$arity$4 = listen_once__4;
  return listen_once
}();
clojure.browser.event.unlisten = function() {
  var unlisten = null;
  var unlisten__3 = function(src, type, fn) {
    return unlisten.call(null, src, type, fn, false)
  };
  var unlisten__4 = function(src, type, fn, capture_QMARK_) {
    return goog.events.unlisten(src, cljs.core._lookup.call(null, clojure.browser.event.event_types.call(null, src), type, type), fn, capture_QMARK_)
  };
  unlisten = function(src, type, fn, capture_QMARK_) {
    switch(arguments.length) {
      case 3:
        return unlisten__3.call(this, src, type, fn);
      case 4:
        return unlisten__4.call(this, src, type, fn, capture_QMARK_)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unlisten.cljs$lang$arity$3 = unlisten__3;
  unlisten.cljs$lang$arity$4 = unlisten__4;
  return unlisten
}();
clojure.browser.event.unlisten_by_key = function unlisten_by_key(key) {
  return goog.events.unlistenByKey(key)
};
clojure.browser.event.dispatch_event = function dispatch_event(src, event) {
  return goog.events.dispatchEvent(src, event)
};
clojure.browser.event.expose = function expose(e) {
  return goog.events.expose(e)
};
clojure.browser.event.fire_listeners = function fire_listeners(obj, type, capture, event) {
  return null
};
clojure.browser.event.total_listener_count = function total_listener_count() {
  return goog.events.getTotalListenerCount()
};
clojure.browser.event.get_listener = function get_listener(src, type, listener, opt_capt, opt_handler) {
  return null
};
clojure.browser.event.all_listeners = function all_listeners(obj, type, capture) {
  return null
};
clojure.browser.event.unique_event_id = function unique_event_id(event_type) {
  return null
};
clojure.browser.event.has_listener = function has_listener(obj, opt_type, opt_capture) {
  return null
};
clojure.browser.event.remove_all = function remove_all(opt_obj, opt_type, opt_capt) {
  return null
};
goog.provide("goog.json");
goog.provide("goog.json.Serializer");
goog.json.isValid_ = function(s) {
  if(/^\s*$/.test(s)) {
    return false
  }
  var backslashesRe = /\\["\\\/bfnrtu]/g;
  var simpleValuesRe = /"[^"\\\n\r\u2028\u2029\x00-\x08\x10-\x1f\x80-\x9f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
  var openBracketsRe = /(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g;
  var remainderRe = /^[\],:{}\s\u2028\u2029]*$/;
  return remainderRe.test(s.replace(backslashesRe, "@").replace(simpleValuesRe, "]").replace(openBracketsRe, ""))
};
goog.json.parse = function(s) {
  var o = String(s);
  if(goog.json.isValid_(o)) {
    try {
      return eval("(" + o + ")")
    }catch(ex) {
    }
  }
  throw Error("Invalid JSON string: " + o);
};
goog.json.unsafeParse = function(s) {
  return eval("(" + s + ")")
};
goog.json.Replacer;
goog.json.serialize = function(object, opt_replacer) {
  return(new goog.json.Serializer(opt_replacer)).serialize(object)
};
goog.json.Serializer = function(opt_replacer) {
  this.replacer_ = opt_replacer
};
goog.json.Serializer.prototype.serialize = function(object) {
  var sb = [];
  this.serialize_(object, sb);
  return sb.join("")
};
goog.json.Serializer.prototype.serialize_ = function(object, sb) {
  switch(typeof object) {
    case "string":
      this.serializeString_(object, sb);
      break;
    case "number":
      this.serializeNumber_(object, sb);
      break;
    case "boolean":
      sb.push(object);
      break;
    case "undefined":
      sb.push("null");
      break;
    case "object":
      if(object == null) {
        sb.push("null");
        break
      }
      if(goog.isArray(object)) {
        this.serializeArray_(object, sb);
        break
      }
      this.serializeObject_(object, sb);
      break;
    case "function":
      break;
    default:
      throw Error("Unknown type: " + typeof object);
  }
};
goog.json.Serializer.charToJsonCharCache_ = {'"':'\\"', "\\":"\\\\", "/":"\\/", "\u0008":"\\b", "\u000c":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\u000b"};
goog.json.Serializer.charsToReplace_ = /\uffff/.test("\uffff") ? /[\\\"\x00-\x1f\x7f-\uffff]/g : /[\\\"\x00-\x1f\x7f-\xff]/g;
goog.json.Serializer.prototype.serializeString_ = function(s, sb) {
  sb.push('"', s.replace(goog.json.Serializer.charsToReplace_, function(c) {
    if(c in goog.json.Serializer.charToJsonCharCache_) {
      return goog.json.Serializer.charToJsonCharCache_[c]
    }
    var cc = c.charCodeAt(0);
    var rv = "\\u";
    if(cc < 16) {
      rv += "000"
    }else {
      if(cc < 256) {
        rv += "00"
      }else {
        if(cc < 4096) {
          rv += "0"
        }
      }
    }
    return goog.json.Serializer.charToJsonCharCache_[c] = rv + cc.toString(16)
  }), '"')
};
goog.json.Serializer.prototype.serializeNumber_ = function(n, sb) {
  sb.push(isFinite(n) && !isNaN(n) ? n : "null")
};
goog.json.Serializer.prototype.serializeArray_ = function(arr, sb) {
  var l = arr.length;
  sb.push("[");
  var sep = "";
  for(var i = 0;i < l;i++) {
    sb.push(sep);
    var value = arr[i];
    this.serialize_(this.replacer_ ? this.replacer_.call(arr, String(i), value) : value, sb);
    sep = ","
  }
  sb.push("]")
};
goog.json.Serializer.prototype.serializeObject_ = function(obj, sb) {
  sb.push("{");
  var sep = "";
  for(var key in obj) {
    if(Object.prototype.hasOwnProperty.call(obj, key)) {
      var value = obj[key];
      if(typeof value != "function") {
        sb.push(sep);
        this.serializeString_(key, sb);
        sb.push(":");
        this.serialize_(this.replacer_ ? this.replacer_.call(obj, key, value) : value, sb);
        sep = ","
      }
    }
  }
  sb.push("}")
};
goog.provide("goog.structs");
goog.require("goog.array");
goog.require("goog.object");
goog.structs.getCount = function(col) {
  if(typeof col.getCount == "function") {
    return col.getCount()
  }
  if(goog.isArrayLike(col) || goog.isString(col)) {
    return col.length
  }
  return goog.object.getCount(col)
};
goog.structs.getValues = function(col) {
  if(typeof col.getValues == "function") {
    return col.getValues()
  }
  if(goog.isString(col)) {
    return col.split("")
  }
  if(goog.isArrayLike(col)) {
    var rv = [];
    var l = col.length;
    for(var i = 0;i < l;i++) {
      rv.push(col[i])
    }
    return rv
  }
  return goog.object.getValues(col)
};
goog.structs.getKeys = function(col) {
  if(typeof col.getKeys == "function") {
    return col.getKeys()
  }
  if(typeof col.getValues == "function") {
    return undefined
  }
  if(goog.isArrayLike(col) || goog.isString(col)) {
    var rv = [];
    var l = col.length;
    for(var i = 0;i < l;i++) {
      rv.push(i)
    }
    return rv
  }
  return goog.object.getKeys(col)
};
goog.structs.contains = function(col, val) {
  if(typeof col.contains == "function") {
    return col.contains(val)
  }
  if(typeof col.containsValue == "function") {
    return col.containsValue(val)
  }
  if(goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.contains(col, val)
  }
  return goog.object.containsValue(col, val)
};
goog.structs.isEmpty = function(col) {
  if(typeof col.isEmpty == "function") {
    return col.isEmpty()
  }
  if(goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.isEmpty(col)
  }
  return goog.object.isEmpty(col)
};
goog.structs.clear = function(col) {
  if(typeof col.clear == "function") {
    col.clear()
  }else {
    if(goog.isArrayLike(col)) {
      goog.array.clear(col)
    }else {
      goog.object.clear(col)
    }
  }
};
goog.structs.forEach = function(col, f, opt_obj) {
  if(typeof col.forEach == "function") {
    col.forEach(f, opt_obj)
  }else {
    if(goog.isArrayLike(col) || goog.isString(col)) {
      goog.array.forEach(col, f, opt_obj)
    }else {
      var keys = goog.structs.getKeys(col);
      var values = goog.structs.getValues(col);
      var l = values.length;
      for(var i = 0;i < l;i++) {
        f.call(opt_obj, values[i], keys && keys[i], col)
      }
    }
  }
};
goog.structs.filter = function(col, f, opt_obj) {
  if(typeof col.filter == "function") {
    return col.filter(f, opt_obj)
  }
  if(goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.filter(col, f, opt_obj)
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if(keys) {
    rv = {};
    for(var i = 0;i < l;i++) {
      if(f.call(opt_obj, values[i], keys[i], col)) {
        rv[keys[i]] = values[i]
      }
    }
  }else {
    rv = [];
    for(var i = 0;i < l;i++) {
      if(f.call(opt_obj, values[i], undefined, col)) {
        rv.push(values[i])
      }
    }
  }
  return rv
};
goog.structs.map = function(col, f, opt_obj) {
  if(typeof col.map == "function") {
    return col.map(f, opt_obj)
  }
  if(goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.map(col, f, opt_obj)
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if(keys) {
    rv = {};
    for(var i = 0;i < l;i++) {
      rv[keys[i]] = f.call(opt_obj, values[i], keys[i], col)
    }
  }else {
    rv = [];
    for(var i = 0;i < l;i++) {
      rv[i] = f.call(opt_obj, values[i], undefined, col)
    }
  }
  return rv
};
goog.structs.some = function(col, f, opt_obj) {
  if(typeof col.some == "function") {
    return col.some(f, opt_obj)
  }
  if(goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.some(col, f, opt_obj)
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for(var i = 0;i < l;i++) {
    if(f.call(opt_obj, values[i], keys && keys[i], col)) {
      return true
    }
  }
  return false
};
goog.structs.every = function(col, f, opt_obj) {
  if(typeof col.every == "function") {
    return col.every(f, opt_obj)
  }
  if(goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.every(col, f, opt_obj)
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for(var i = 0;i < l;i++) {
    if(!f.call(opt_obj, values[i], keys && keys[i], col)) {
      return false
    }
  }
  return true
};
goog.provide("goog.iter");
goog.provide("goog.iter.Iterator");
goog.provide("goog.iter.StopIteration");
goog.require("goog.array");
goog.require("goog.asserts");
goog.iter.Iterable;
if("StopIteration" in goog.global) {
  goog.iter.StopIteration = goog.global["StopIteration"]
}else {
  goog.iter.StopIteration = Error("StopIteration")
}
goog.iter.Iterator = function() {
};
goog.iter.Iterator.prototype.next = function() {
  throw goog.iter.StopIteration;
};
goog.iter.Iterator.prototype.__iterator__ = function(opt_keys) {
  return this
};
goog.iter.toIterator = function(iterable) {
  if(iterable instanceof goog.iter.Iterator) {
    return iterable
  }
  if(typeof iterable.__iterator__ == "function") {
    return iterable.__iterator__(false)
  }
  if(goog.isArrayLike(iterable)) {
    var i = 0;
    var newIter = new goog.iter.Iterator;
    newIter.next = function() {
      while(true) {
        if(i >= iterable.length) {
          throw goog.iter.StopIteration;
        }
        if(!(i in iterable)) {
          i++;
          continue
        }
        return iterable[i++]
      }
    };
    return newIter
  }
  throw Error("Not implemented");
};
goog.iter.forEach = function(iterable, f, opt_obj) {
  if(goog.isArrayLike(iterable)) {
    try {
      goog.array.forEach(iterable, f, opt_obj)
    }catch(ex) {
      if(ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  }else {
    iterable = goog.iter.toIterator(iterable);
    try {
      while(true) {
        f.call(opt_obj, iterable.next(), undefined, iterable)
      }
    }catch(ex) {
      if(ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  }
};
goog.iter.filter = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while(true) {
      var val = iterable.next();
      if(f.call(opt_obj, val, undefined, iterable)) {
        return val
      }
    }
  };
  return newIter
};
goog.iter.range = function(startOrStop, opt_stop, opt_step) {
  var start = 0;
  var stop = startOrStop;
  var step = opt_step || 1;
  if(arguments.length > 1) {
    start = startOrStop;
    stop = opt_stop
  }
  if(step == 0) {
    throw Error("Range step argument must not be zero");
  }
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if(step > 0 && start >= stop || step < 0 && start <= stop) {
      throw goog.iter.StopIteration;
    }
    var rv = start;
    start += step;
    return rv
  };
  return newIter
};
goog.iter.join = function(iterable, deliminator) {
  return goog.iter.toArray(iterable).join(deliminator)
};
goog.iter.map = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while(true) {
      var val = iterable.next();
      return f.call(opt_obj, val, undefined, iterable)
    }
  };
  return newIter
};
goog.iter.reduce = function(iterable, f, val, opt_obj) {
  var rval = val;
  goog.iter.forEach(iterable, function(val) {
    rval = f.call(opt_obj, rval, val)
  });
  return rval
};
goog.iter.some = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while(true) {
      if(f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return true
      }
    }
  }catch(ex) {
    if(ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return false
};
goog.iter.every = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while(true) {
      if(!f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return false
      }
    }
  }catch(ex) {
    if(ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return true
};
goog.iter.chain = function(var_args) {
  var args = arguments;
  var length = args.length;
  var i = 0;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    try {
      if(i >= length) {
        throw goog.iter.StopIteration;
      }
      var current = goog.iter.toIterator(args[i]);
      return current.next()
    }catch(ex) {
      if(ex !== goog.iter.StopIteration || i >= length) {
        throw ex;
      }else {
        i++;
        return this.next()
      }
    }
  };
  return newIter
};
goog.iter.dropWhile = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var dropping = true;
  newIter.next = function() {
    while(true) {
      var val = iterable.next();
      if(dropping && f.call(opt_obj, val, undefined, iterable)) {
        continue
      }else {
        dropping = false
      }
      return val
    }
  };
  return newIter
};
goog.iter.takeWhile = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var taking = true;
  newIter.next = function() {
    while(true) {
      if(taking) {
        var val = iterable.next();
        if(f.call(opt_obj, val, undefined, iterable)) {
          return val
        }else {
          taking = false
        }
      }else {
        throw goog.iter.StopIteration;
      }
    }
  };
  return newIter
};
goog.iter.toArray = function(iterable) {
  if(goog.isArrayLike(iterable)) {
    return goog.array.toArray(iterable)
  }
  iterable = goog.iter.toIterator(iterable);
  var array = [];
  goog.iter.forEach(iterable, function(val) {
    array.push(val)
  });
  return array
};
goog.iter.equals = function(iterable1, iterable2) {
  iterable1 = goog.iter.toIterator(iterable1);
  iterable2 = goog.iter.toIterator(iterable2);
  var b1, b2;
  try {
    while(true) {
      b1 = b2 = false;
      var val1 = iterable1.next();
      b1 = true;
      var val2 = iterable2.next();
      b2 = true;
      if(val1 != val2) {
        return false
      }
    }
  }catch(ex) {
    if(ex !== goog.iter.StopIteration) {
      throw ex;
    }else {
      if(b1 && !b2) {
        return false
      }
      if(!b2) {
        try {
          val2 = iterable2.next();
          return false
        }catch(ex1) {
          if(ex1 !== goog.iter.StopIteration) {
            throw ex1;
          }
          return true
        }
      }
    }
  }
  return false
};
goog.iter.nextOrValue = function(iterable, defaultValue) {
  try {
    return goog.iter.toIterator(iterable).next()
  }catch(e) {
    if(e != goog.iter.StopIteration) {
      throw e;
    }
    return defaultValue
  }
};
goog.iter.product = function(var_args) {
  var someArrayEmpty = goog.array.some(arguments, function(arr) {
    return!arr.length
  });
  if(someArrayEmpty || !arguments.length) {
    return new goog.iter.Iterator
  }
  var iter = new goog.iter.Iterator;
  var arrays = arguments;
  var indicies = goog.array.repeat(0, arrays.length);
  iter.next = function() {
    if(indicies) {
      var retVal = goog.array.map(indicies, function(valueIndex, arrayIndex) {
        return arrays[arrayIndex][valueIndex]
      });
      for(var i = indicies.length - 1;i >= 0;i--) {
        goog.asserts.assert(indicies);
        if(indicies[i] < arrays[i].length - 1) {
          indicies[i]++;
          break
        }
        if(i == 0) {
          indicies = null;
          break
        }
        indicies[i] = 0
      }
      return retVal
    }
    throw goog.iter.StopIteration;
  };
  return iter
};
goog.iter.cycle = function(iterable) {
  var baseIterator = goog.iter.toIterator(iterable);
  var cache = [];
  var cacheIndex = 0;
  var iter = new goog.iter.Iterator;
  var useCache = false;
  iter.next = function() {
    var returnElement = null;
    if(!useCache) {
      try {
        returnElement = baseIterator.next();
        cache.push(returnElement);
        return returnElement
      }catch(e) {
        if(e != goog.iter.StopIteration || goog.array.isEmpty(cache)) {
          throw e;
        }
        useCache = true
      }
    }
    returnElement = cache[cacheIndex];
    cacheIndex = (cacheIndex + 1) % cache.length;
    return returnElement
  };
  return iter
};
goog.provide("goog.structs.Map");
goog.require("goog.iter.Iterator");
goog.require("goog.iter.StopIteration");
goog.require("goog.object");
goog.require("goog.structs");
goog.structs.Map = function(opt_map, var_args) {
  this.map_ = {};
  this.keys_ = [];
  var argLength = arguments.length;
  if(argLength > 1) {
    if(argLength % 2) {
      throw Error("Uneven number of arguments");
    }
    for(var i = 0;i < argLength;i += 2) {
      this.set(arguments[i], arguments[i + 1])
    }
  }else {
    if(opt_map) {
      this.addAll(opt_map)
    }
  }
};
goog.structs.Map.prototype.count_ = 0;
goog.structs.Map.prototype.version_ = 0;
goog.structs.Map.prototype.getCount = function() {
  return this.count_
};
goog.structs.Map.prototype.getValues = function() {
  this.cleanupKeysArray_();
  var rv = [];
  for(var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    rv.push(this.map_[key])
  }
  return rv
};
goog.structs.Map.prototype.getKeys = function() {
  this.cleanupKeysArray_();
  return this.keys_.concat()
};
goog.structs.Map.prototype.containsKey = function(key) {
  return goog.structs.Map.hasKey_(this.map_, key)
};
goog.structs.Map.prototype.containsValue = function(val) {
  for(var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    if(goog.structs.Map.hasKey_(this.map_, key) && this.map_[key] == val) {
      return true
    }
  }
  return false
};
goog.structs.Map.prototype.equals = function(otherMap, opt_equalityFn) {
  if(this === otherMap) {
    return true
  }
  if(this.count_ != otherMap.getCount()) {
    return false
  }
  var equalityFn = opt_equalityFn || goog.structs.Map.defaultEquals;
  this.cleanupKeysArray_();
  for(var key, i = 0;key = this.keys_[i];i++) {
    if(!equalityFn(this.get(key), otherMap.get(key))) {
      return false
    }
  }
  return true
};
goog.structs.Map.defaultEquals = function(a, b) {
  return a === b
};
goog.structs.Map.prototype.isEmpty = function() {
  return this.count_ == 0
};
goog.structs.Map.prototype.clear = function() {
  this.map_ = {};
  this.keys_.length = 0;
  this.count_ = 0;
  this.version_ = 0
};
goog.structs.Map.prototype.remove = function(key) {
  if(goog.structs.Map.hasKey_(this.map_, key)) {
    delete this.map_[key];
    this.count_--;
    this.version_++;
    if(this.keys_.length > 2 * this.count_) {
      this.cleanupKeysArray_()
    }
    return true
  }
  return false
};
goog.structs.Map.prototype.cleanupKeysArray_ = function() {
  if(this.count_ != this.keys_.length) {
    var srcIndex = 0;
    var destIndex = 0;
    while(srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if(goog.structs.Map.hasKey_(this.map_, key)) {
        this.keys_[destIndex++] = key
      }
      srcIndex++
    }
    this.keys_.length = destIndex
  }
  if(this.count_ != this.keys_.length) {
    var seen = {};
    var srcIndex = 0;
    var destIndex = 0;
    while(srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if(!goog.structs.Map.hasKey_(seen, key)) {
        this.keys_[destIndex++] = key;
        seen[key] = 1
      }
      srcIndex++
    }
    this.keys_.length = destIndex
  }
};
goog.structs.Map.prototype.get = function(key, opt_val) {
  if(goog.structs.Map.hasKey_(this.map_, key)) {
    return this.map_[key]
  }
  return opt_val
};
goog.structs.Map.prototype.set = function(key, value) {
  if(!goog.structs.Map.hasKey_(this.map_, key)) {
    this.count_++;
    this.keys_.push(key);
    this.version_++
  }
  this.map_[key] = value
};
goog.structs.Map.prototype.addAll = function(map) {
  var keys, values;
  if(map instanceof goog.structs.Map) {
    keys = map.getKeys();
    values = map.getValues()
  }else {
    keys = goog.object.getKeys(map);
    values = goog.object.getValues(map)
  }
  for(var i = 0;i < keys.length;i++) {
    this.set(keys[i], values[i])
  }
};
goog.structs.Map.prototype.clone = function() {
  return new goog.structs.Map(this)
};
goog.structs.Map.prototype.transpose = function() {
  var transposed = new goog.structs.Map;
  for(var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    var value = this.map_[key];
    transposed.set(value, key)
  }
  return transposed
};
goog.structs.Map.prototype.toObject = function() {
  this.cleanupKeysArray_();
  var obj = {};
  for(var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    obj[key] = this.map_[key]
  }
  return obj
};
goog.structs.Map.prototype.getKeyIterator = function() {
  return this.__iterator__(true)
};
goog.structs.Map.prototype.getValueIterator = function() {
  return this.__iterator__(false)
};
goog.structs.Map.prototype.__iterator__ = function(opt_keys) {
  this.cleanupKeysArray_();
  var i = 0;
  var keys = this.keys_;
  var map = this.map_;
  var version = this.version_;
  var selfObj = this;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while(true) {
      if(version != selfObj.version_) {
        throw Error("The map has changed since the iterator was created");
      }
      if(i >= keys.length) {
        throw goog.iter.StopIteration;
      }
      var key = keys[i++];
      return opt_keys ? key : map[key]
    }
  };
  return newIter
};
goog.structs.Map.hasKey_ = function(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key)
};
goog.provide("goog.uri.utils");
goog.provide("goog.uri.utils.ComponentIndex");
goog.provide("goog.uri.utils.QueryArray");
goog.provide("goog.uri.utils.QueryValue");
goog.provide("goog.uri.utils.StandardQueryParam");
goog.require("goog.asserts");
goog.require("goog.string");
goog.uri.utils.CharCode_ = {AMPERSAND:38, EQUAL:61, HASH:35, QUESTION:63};
goog.uri.utils.buildFromEncodedParts = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
  var out = [];
  if(opt_scheme) {
    out.push(opt_scheme, ":")
  }
  if(opt_domain) {
    out.push("//");
    if(opt_userInfo) {
      out.push(opt_userInfo, "@")
    }
    out.push(opt_domain);
    if(opt_port) {
      out.push(":", opt_port)
    }
  }
  if(opt_path) {
    out.push(opt_path)
  }
  if(opt_queryData) {
    out.push("?", opt_queryData)
  }
  if(opt_fragment) {
    out.push("#", opt_fragment)
  }
  return out.join("")
};
goog.uri.utils.splitRe_ = new RegExp("^" + "(?:" + "([^:/?#.]+)" + ":)?" + "(?://" + "(?:([^/?#]*)@)?" + "([\\w\\d\\-\\u0100-\\uffff.%]*)" + "(?::([0-9]+))?" + ")?" + "([^?#]+)?" + "(?:\\?([^#]*))?" + "(?:#(.*))?" + "$");
goog.uri.utils.ComponentIndex = {SCHEME:1, USER_INFO:2, DOMAIN:3, PORT:4, PATH:5, QUERY_DATA:6, FRAGMENT:7};
goog.uri.utils.split = function(uri) {
  return uri.match(goog.uri.utils.splitRe_)
};
goog.uri.utils.decodeIfPossible_ = function(uri) {
  return uri && decodeURIComponent(uri)
};
goog.uri.utils.getComponentByIndex_ = function(componentIndex, uri) {
  return goog.uri.utils.split(uri)[componentIndex] || null
};
goog.uri.utils.getScheme = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.SCHEME, uri)
};
goog.uri.utils.getUserInfoEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.USER_INFO, uri)
};
goog.uri.utils.getUserInfo = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getUserInfoEncoded(uri))
};
goog.uri.utils.getDomainEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.DOMAIN, uri)
};
goog.uri.utils.getDomain = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getDomainEncoded(uri))
};
goog.uri.utils.getPort = function(uri) {
  return Number(goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PORT, uri)) || null
};
goog.uri.utils.getPathEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PATH, uri)
};
goog.uri.utils.getPath = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getPathEncoded(uri))
};
goog.uri.utils.getQueryData = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.QUERY_DATA, uri)
};
goog.uri.utils.getFragmentEncoded = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? null : uri.substr(hashIndex + 1)
};
goog.uri.utils.setFragmentEncoded = function(uri, fragment) {
  return goog.uri.utils.removeFragment(uri) + (fragment ? "#" + fragment : "")
};
goog.uri.utils.getFragment = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getFragmentEncoded(uri))
};
goog.uri.utils.getHost = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(pieces[goog.uri.utils.ComponentIndex.SCHEME], pieces[goog.uri.utils.ComponentIndex.USER_INFO], pieces[goog.uri.utils.ComponentIndex.DOMAIN], pieces[goog.uri.utils.ComponentIndex.PORT])
};
goog.uri.utils.getPathAndAfter = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(null, null, null, null, pieces[goog.uri.utils.ComponentIndex.PATH], pieces[goog.uri.utils.ComponentIndex.QUERY_DATA], pieces[goog.uri.utils.ComponentIndex.FRAGMENT])
};
goog.uri.utils.removeFragment = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? uri : uri.substr(0, hashIndex)
};
goog.uri.utils.haveSameDomain = function(uri1, uri2) {
  var pieces1 = goog.uri.utils.split(uri1);
  var pieces2 = goog.uri.utils.split(uri2);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.SCHEME] == pieces2[goog.uri.utils.ComponentIndex.SCHEME] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT]
};
goog.uri.utils.assertNoFragmentsOrQueries_ = function(uri) {
  if(goog.DEBUG && (uri.indexOf("#") >= 0 || uri.indexOf("?") >= 0)) {
    throw Error("goog.uri.utils: Fragment or query identifiers are not " + "supported: [" + uri + "]");
  }
};
goog.uri.utils.QueryValue;
goog.uri.utils.QueryArray;
goog.uri.utils.appendQueryData_ = function(buffer) {
  if(buffer[1]) {
    var baseUri = buffer[0];
    var hashIndex = baseUri.indexOf("#");
    if(hashIndex >= 0) {
      buffer.push(baseUri.substr(hashIndex));
      buffer[0] = baseUri = baseUri.substr(0, hashIndex)
    }
    var questionIndex = baseUri.indexOf("?");
    if(questionIndex < 0) {
      buffer[1] = "?"
    }else {
      if(questionIndex == baseUri.length - 1) {
        buffer[1] = undefined
      }
    }
  }
  return buffer.join("")
};
goog.uri.utils.appendKeyValuePairs_ = function(key, value, pairs) {
  if(goog.isArray(value)) {
    value = value;
    for(var j = 0;j < value.length;j++) {
      pairs.push("&", key);
      if(value[j] !== "") {
        pairs.push("=", goog.string.urlEncode(value[j]))
      }
    }
  }else {
    if(value != null) {
      pairs.push("&", key);
      if(value !== "") {
        pairs.push("=", goog.string.urlEncode(value))
      }
    }
  }
};
goog.uri.utils.buildQueryDataBuffer_ = function(buffer, keysAndValues, opt_startIndex) {
  goog.asserts.assert(Math.max(keysAndValues.length - (opt_startIndex || 0), 0) % 2 == 0, "goog.uri.utils: Key/value lists must be even in length.");
  for(var i = opt_startIndex || 0;i < keysAndValues.length;i += 2) {
    goog.uri.utils.appendKeyValuePairs_(keysAndValues[i], keysAndValues[i + 1], buffer)
  }
  return buffer
};
goog.uri.utils.buildQueryData = function(keysAndValues, opt_startIndex) {
  var buffer = goog.uri.utils.buildQueryDataBuffer_([], keysAndValues, opt_startIndex);
  buffer[0] = "";
  return buffer.join("")
};
goog.uri.utils.buildQueryDataBufferFromMap_ = function(buffer, map) {
  for(var key in map) {
    goog.uri.utils.appendKeyValuePairs_(key, map[key], buffer)
  }
  return buffer
};
goog.uri.utils.buildQueryDataFromMap = function(map) {
  var buffer = goog.uri.utils.buildQueryDataBufferFromMap_([], map);
  buffer[0] = "";
  return buffer.join("")
};
goog.uri.utils.appendParams = function(uri, var_args) {
  return goog.uri.utils.appendQueryData_(arguments.length == 2 ? goog.uri.utils.buildQueryDataBuffer_([uri], arguments[1], 0) : goog.uri.utils.buildQueryDataBuffer_([uri], arguments, 1))
};
goog.uri.utils.appendParamsFromMap = function(uri, map) {
  return goog.uri.utils.appendQueryData_(goog.uri.utils.buildQueryDataBufferFromMap_([uri], map))
};
goog.uri.utils.appendParam = function(uri, key, value) {
  return goog.uri.utils.appendQueryData_([uri, "&", key, "=", goog.string.urlEncode(value)])
};
goog.uri.utils.findParam_ = function(uri, startIndex, keyEncoded, hashOrEndIndex) {
  var index = startIndex;
  var keyLength = keyEncoded.length;
  while((index = uri.indexOf(keyEncoded, index)) >= 0 && index < hashOrEndIndex) {
    var precedingChar = uri.charCodeAt(index - 1);
    if(precedingChar == goog.uri.utils.CharCode_.AMPERSAND || precedingChar == goog.uri.utils.CharCode_.QUESTION) {
      var followingChar = uri.charCodeAt(index + keyLength);
      if(!followingChar || followingChar == goog.uri.utils.CharCode_.EQUAL || followingChar == goog.uri.utils.CharCode_.AMPERSAND || followingChar == goog.uri.utils.CharCode_.HASH) {
        return index
      }
    }
    index += keyLength + 1
  }
  return-1
};
goog.uri.utils.hashOrEndRe_ = /#|$/;
goog.uri.utils.hasParam = function(uri, keyEncoded) {
  return goog.uri.utils.findParam_(uri, 0, keyEncoded, uri.search(goog.uri.utils.hashOrEndRe_)) >= 0
};
goog.uri.utils.getParamValue = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var foundIndex = goog.uri.utils.findParam_(uri, 0, keyEncoded, hashOrEndIndex);
  if(foundIndex < 0) {
    return null
  }else {
    var endPosition = uri.indexOf("&", foundIndex);
    if(endPosition < 0 || endPosition > hashOrEndIndex) {
      endPosition = hashOrEndIndex
    }
    foundIndex += keyEncoded.length + 1;
    return goog.string.urlDecode(uri.substr(foundIndex, endPosition - foundIndex))
  }
};
goog.uri.utils.getParamValues = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var result = [];
  while((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    position = uri.indexOf("&", foundIndex);
    if(position < 0 || position > hashOrEndIndex) {
      position = hashOrEndIndex
    }
    foundIndex += keyEncoded.length + 1;
    result.push(goog.string.urlDecode(uri.substr(foundIndex, position - foundIndex)))
  }
  return result
};
goog.uri.utils.trailingQueryPunctuationRe_ = /[?&]($|#)/;
goog.uri.utils.removeParam = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var buffer = [];
  while((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    buffer.push(uri.substring(position, foundIndex));
    position = Math.min(uri.indexOf("&", foundIndex) + 1 || hashOrEndIndex, hashOrEndIndex)
  }
  buffer.push(uri.substr(position));
  return buffer.join("").replace(goog.uri.utils.trailingQueryPunctuationRe_, "$1")
};
goog.uri.utils.setParam = function(uri, keyEncoded, value) {
  return goog.uri.utils.appendParam(goog.uri.utils.removeParam(uri, keyEncoded), keyEncoded, value)
};
goog.uri.utils.appendPath = function(baseUri, path) {
  goog.uri.utils.assertNoFragmentsOrQueries_(baseUri);
  if(goog.string.endsWith(baseUri, "/")) {
    baseUri = baseUri.substr(0, baseUri.length - 1)
  }
  if(goog.string.startsWith(path, "/")) {
    path = path.substr(1)
  }
  return goog.string.buildString(baseUri, "/", path)
};
goog.uri.utils.StandardQueryParam = {RANDOM:"zx"};
goog.uri.utils.makeUnique = function(uri) {
  return goog.uri.utils.setParam(uri, goog.uri.utils.StandardQueryParam.RANDOM, goog.string.getRandomString())
};
goog.provide("goog.Uri");
goog.provide("goog.Uri.QueryData");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.uri.utils.ComponentIndex");
goog.Uri = function(opt_uri, opt_ignoreCase) {
  var m;
  if(opt_uri instanceof goog.Uri) {
    this.setIgnoreCase(opt_ignoreCase == null ? opt_uri.getIgnoreCase() : opt_ignoreCase);
    this.setScheme(opt_uri.getScheme());
    this.setUserInfo(opt_uri.getUserInfo());
    this.setDomain(opt_uri.getDomain());
    this.setPort(opt_uri.getPort());
    this.setPath(opt_uri.getPath());
    this.setQueryData(opt_uri.getQueryData().clone());
    this.setFragment(opt_uri.getFragment())
  }else {
    if(opt_uri && (m = goog.uri.utils.split(String(opt_uri)))) {
      this.setIgnoreCase(!!opt_ignoreCase);
      this.setScheme(m[goog.uri.utils.ComponentIndex.SCHEME] || "", true);
      this.setUserInfo(m[goog.uri.utils.ComponentIndex.USER_INFO] || "", true);
      this.setDomain(m[goog.uri.utils.ComponentIndex.DOMAIN] || "", true);
      this.setPort(m[goog.uri.utils.ComponentIndex.PORT]);
      this.setPath(m[goog.uri.utils.ComponentIndex.PATH] || "", true);
      this.setQuery(m[goog.uri.utils.ComponentIndex.QUERY_DATA] || "", true);
      this.setFragment(m[goog.uri.utils.ComponentIndex.FRAGMENT] || "", true)
    }else {
      this.setIgnoreCase(!!opt_ignoreCase);
      this.queryData_ = new goog.Uri.QueryData(null, this, this.ignoreCase_)
    }
  }
};
goog.Uri.RANDOM_PARAM = goog.uri.utils.StandardQueryParam.RANDOM;
goog.Uri.prototype.scheme_ = "";
goog.Uri.prototype.userInfo_ = "";
goog.Uri.prototype.domain_ = "";
goog.Uri.prototype.port_ = null;
goog.Uri.prototype.path_ = "";
goog.Uri.prototype.queryData_;
goog.Uri.prototype.fragment_ = "";
goog.Uri.prototype.isReadOnly_ = false;
goog.Uri.prototype.ignoreCase_ = false;
goog.Uri.prototype.toString = function() {
  if(this.cachedToString_) {
    return this.cachedToString_
  }
  var out = [];
  if(this.scheme_) {
    out.push(goog.Uri.encodeSpecialChars_(this.scheme_, goog.Uri.reDisallowedInSchemeOrUserInfo_), ":")
  }
  if(this.domain_) {
    out.push("//");
    if(this.userInfo_) {
      out.push(goog.Uri.encodeSpecialChars_(this.userInfo_, goog.Uri.reDisallowedInSchemeOrUserInfo_), "@")
    }
    out.push(goog.Uri.encodeString_(this.domain_));
    if(this.port_ != null) {
      out.push(":", String(this.getPort()))
    }
  }
  if(this.path_) {
    if(this.hasDomain() && this.path_.charAt(0) != "/") {
      out.push("/")
    }
    out.push(goog.Uri.encodeSpecialChars_(this.path_, this.path_.charAt(0) == "/" ? goog.Uri.reDisallowedInAbsolutePath_ : goog.Uri.reDisallowedInRelativePath_))
  }
  var query = String(this.queryData_);
  if(query) {
    out.push("?", query)
  }
  if(this.fragment_) {
    out.push("#", goog.Uri.encodeSpecialChars_(this.fragment_, goog.Uri.reDisallowedInFragment_))
  }
  return this.cachedToString_ = out.join("")
};
goog.Uri.prototype.resolve = function(relativeUri) {
  var absoluteUri = this.clone();
  var overridden = relativeUri.hasScheme();
  if(overridden) {
    absoluteUri.setScheme(relativeUri.getScheme())
  }else {
    overridden = relativeUri.hasUserInfo()
  }
  if(overridden) {
    absoluteUri.setUserInfo(relativeUri.getUserInfo())
  }else {
    overridden = relativeUri.hasDomain()
  }
  if(overridden) {
    absoluteUri.setDomain(relativeUri.getDomain())
  }else {
    overridden = relativeUri.hasPort()
  }
  var path = relativeUri.getPath();
  if(overridden) {
    absoluteUri.setPort(relativeUri.getPort())
  }else {
    overridden = relativeUri.hasPath();
    if(overridden) {
      if(path.charAt(0) != "/") {
        if(this.hasDomain() && !this.hasPath()) {
          path = "/" + path
        }else {
          var lastSlashIndex = absoluteUri.getPath().lastIndexOf("/");
          if(lastSlashIndex != -1) {
            path = absoluteUri.getPath().substr(0, lastSlashIndex + 1) + path
          }
        }
      }
      path = goog.Uri.removeDotSegments(path)
    }
  }
  if(overridden) {
    absoluteUri.setPath(path)
  }else {
    overridden = relativeUri.hasQuery()
  }
  if(overridden) {
    absoluteUri.setQuery(relativeUri.getDecodedQuery())
  }else {
    overridden = relativeUri.hasFragment()
  }
  if(overridden) {
    absoluteUri.setFragment(relativeUri.getFragment())
  }
  return absoluteUri
};
goog.Uri.prototype.clone = function() {
  return goog.Uri.create(this.scheme_, this.userInfo_, this.domain_, this.port_, this.path_, this.queryData_.clone(), this.fragment_, this.ignoreCase_)
};
goog.Uri.prototype.getScheme = function() {
  return this.scheme_
};
goog.Uri.prototype.setScheme = function(newScheme, opt_decode) {
  this.enforceReadOnly();
  delete this.cachedToString_;
  this.scheme_ = opt_decode ? goog.Uri.decodeOrEmpty_(newScheme) : newScheme;
  if(this.scheme_) {
    this.scheme_ = this.scheme_.replace(/:$/, "")
  }
  return this
};
goog.Uri.prototype.hasScheme = function() {
  return!!this.scheme_
};
goog.Uri.prototype.getUserInfo = function() {
  return this.userInfo_
};
goog.Uri.prototype.setUserInfo = function(newUserInfo, opt_decode) {
  this.enforceReadOnly();
  delete this.cachedToString_;
  this.userInfo_ = opt_decode ? goog.Uri.decodeOrEmpty_(newUserInfo) : newUserInfo;
  return this
};
goog.Uri.prototype.hasUserInfo = function() {
  return!!this.userInfo_
};
goog.Uri.prototype.getDomain = function() {
  return this.domain_
};
goog.Uri.prototype.setDomain = function(newDomain, opt_decode) {
  this.enforceReadOnly();
  delete this.cachedToString_;
  this.domain_ = opt_decode ? goog.Uri.decodeOrEmpty_(newDomain) : newDomain;
  return this
};
goog.Uri.prototype.hasDomain = function() {
  return!!this.domain_
};
goog.Uri.prototype.getPort = function() {
  return this.port_
};
goog.Uri.prototype.setPort = function(newPort) {
  this.enforceReadOnly();
  delete this.cachedToString_;
  if(newPort) {
    newPort = Number(newPort);
    if(isNaN(newPort) || newPort < 0) {
      throw Error("Bad port number " + newPort);
    }
    this.port_ = newPort
  }else {
    this.port_ = null
  }
  return this
};
goog.Uri.prototype.hasPort = function() {
  return this.port_ != null
};
goog.Uri.prototype.getPath = function() {
  return this.path_
};
goog.Uri.prototype.setPath = function(newPath, opt_decode) {
  this.enforceReadOnly();
  delete this.cachedToString_;
  this.path_ = opt_decode ? goog.Uri.decodeOrEmpty_(newPath) : newPath;
  return this
};
goog.Uri.prototype.hasPath = function() {
  return!!this.path_
};
goog.Uri.prototype.hasQuery = function() {
  return this.queryData_.toString() !== ""
};
goog.Uri.prototype.setQueryData = function(queryData, opt_decode) {
  this.enforceReadOnly();
  delete this.cachedToString_;
  if(queryData instanceof goog.Uri.QueryData) {
    this.queryData_ = queryData;
    this.queryData_.uri_ = this;
    this.queryData_.setIgnoreCase(this.ignoreCase_)
  }else {
    if(!opt_decode) {
      queryData = goog.Uri.encodeSpecialChars_(queryData, goog.Uri.reDisallowedInQuery_)
    }
    this.queryData_ = new goog.Uri.QueryData(queryData, this, this.ignoreCase_)
  }
  return this
};
goog.Uri.prototype.setQuery = function(newQuery, opt_decode) {
  return this.setQueryData(newQuery, opt_decode)
};
goog.Uri.prototype.getEncodedQuery = function() {
  return this.queryData_.toString()
};
goog.Uri.prototype.getDecodedQuery = function() {
  return this.queryData_.toDecodedString()
};
goog.Uri.prototype.getQueryData = function() {
  return this.queryData_
};
goog.Uri.prototype.getQuery = function() {
  return this.getEncodedQuery()
};
goog.Uri.prototype.setParameterValue = function(key, value) {
  this.enforceReadOnly();
  delete this.cachedToString_;
  this.queryData_.set(key, value);
  return this
};
goog.Uri.prototype.setParameterValues = function(key, values) {
  this.enforceReadOnly();
  delete this.cachedToString_;
  if(!goog.isArray(values)) {
    values = [String(values)]
  }
  this.queryData_.setValues(key, values);
  return this
};
goog.Uri.prototype.getParameterValues = function(name) {
  return this.queryData_.getValues(name)
};
goog.Uri.prototype.getParameterValue = function(paramName) {
  return this.queryData_.get(paramName)
};
goog.Uri.prototype.getFragment = function() {
  return this.fragment_
};
goog.Uri.prototype.setFragment = function(newFragment, opt_decode) {
  this.enforceReadOnly();
  delete this.cachedToString_;
  this.fragment_ = opt_decode ? goog.Uri.decodeOrEmpty_(newFragment) : newFragment;
  return this
};
goog.Uri.prototype.hasFragment = function() {
  return!!this.fragment_
};
goog.Uri.prototype.hasSameDomainAs = function(uri2) {
  return(!this.hasDomain() && !uri2.hasDomain() || this.getDomain() == uri2.getDomain()) && (!this.hasPort() && !uri2.hasPort() || this.getPort() == uri2.getPort())
};
goog.Uri.prototype.makeUnique = function() {
  this.enforceReadOnly();
  this.setParameterValue(goog.Uri.RANDOM_PARAM, goog.string.getRandomString());
  return this
};
goog.Uri.prototype.removeParameter = function(key) {
  this.enforceReadOnly();
  this.queryData_.remove(key);
  return this
};
goog.Uri.prototype.setReadOnly = function(isReadOnly) {
  this.isReadOnly_ = isReadOnly;
  return this
};
goog.Uri.prototype.isReadOnly = function() {
  return this.isReadOnly_
};
goog.Uri.prototype.enforceReadOnly = function() {
  if(this.isReadOnly_) {
    throw Error("Tried to modify a read-only Uri");
  }
};
goog.Uri.prototype.setIgnoreCase = function(ignoreCase) {
  this.ignoreCase_ = ignoreCase;
  if(this.queryData_) {
    this.queryData_.setIgnoreCase(ignoreCase)
  }
  return this
};
goog.Uri.prototype.getIgnoreCase = function() {
  return this.ignoreCase_
};
goog.Uri.parse = function(uri, opt_ignoreCase) {
  return uri instanceof goog.Uri ? uri.clone() : new goog.Uri(uri, opt_ignoreCase)
};
goog.Uri.create = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_query, opt_fragment, opt_ignoreCase) {
  var uri = new goog.Uri(null, opt_ignoreCase);
  opt_scheme && uri.setScheme(opt_scheme);
  opt_userInfo && uri.setUserInfo(opt_userInfo);
  opt_domain && uri.setDomain(opt_domain);
  opt_port && uri.setPort(opt_port);
  opt_path && uri.setPath(opt_path);
  opt_query && uri.setQueryData(opt_query);
  opt_fragment && uri.setFragment(opt_fragment);
  return uri
};
goog.Uri.resolve = function(base, rel) {
  if(!(base instanceof goog.Uri)) {
    base = goog.Uri.parse(base)
  }
  if(!(rel instanceof goog.Uri)) {
    rel = goog.Uri.parse(rel)
  }
  return base.resolve(rel)
};
goog.Uri.removeDotSegments = function(path) {
  if(path == ".." || path == ".") {
    return""
  }else {
    if(!goog.string.contains(path, "./") && !goog.string.contains(path, "/.")) {
      return path
    }else {
      var leadingSlash = goog.string.startsWith(path, "/");
      var segments = path.split("/");
      var out = [];
      for(var pos = 0;pos < segments.length;) {
        var segment = segments[pos++];
        if(segment == ".") {
          if(leadingSlash && pos == segments.length) {
            out.push("")
          }
        }else {
          if(segment == "..") {
            if(out.length > 1 || out.length == 1 && out[0] != "") {
              out.pop()
            }
            if(leadingSlash && pos == segments.length) {
              out.push("")
            }
          }else {
            out.push(segment);
            leadingSlash = true
          }
        }
      }
      return out.join("/")
    }
  }
};
goog.Uri.decodeOrEmpty_ = function(val) {
  return val ? decodeURIComponent(val) : ""
};
goog.Uri.encodeString_ = function(unescapedPart) {
  if(goog.isString(unescapedPart)) {
    return encodeURIComponent(unescapedPart)
  }
  return null
};
goog.Uri.encodeSpecialRegExp_ = /^[a-zA-Z0-9\-_.!~*'():\/;?]*$/;
goog.Uri.encodeSpecialChars_ = function(unescapedPart, extra) {
  var ret = null;
  if(goog.isString(unescapedPart)) {
    ret = unescapedPart;
    if(!goog.Uri.encodeSpecialRegExp_.test(ret)) {
      ret = encodeURI(unescapedPart)
    }
    if(ret.search(extra) >= 0) {
      ret = ret.replace(extra, goog.Uri.encodeChar_)
    }
  }
  return ret
};
goog.Uri.encodeChar_ = function(ch) {
  var n = ch.charCodeAt(0);
  return"%" + (n >> 4 & 15).toString(16) + (n & 15).toString(16)
};
goog.Uri.reDisallowedInSchemeOrUserInfo_ = /[#\/\?@]/g;
goog.Uri.reDisallowedInRelativePath_ = /[\#\?:]/g;
goog.Uri.reDisallowedInAbsolutePath_ = /[\#\?]/g;
goog.Uri.reDisallowedInQuery_ = /[\#\?@]/g;
goog.Uri.reDisallowedInFragment_ = /#/g;
goog.Uri.haveSameDomain = function(uri1String, uri2String) {
  var pieces1 = goog.uri.utils.split(uri1String);
  var pieces2 = goog.uri.utils.split(uri2String);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT]
};
goog.Uri.QueryData = function(opt_query, opt_uri, opt_ignoreCase) {
  this.encodedQuery_ = opt_query || null;
  this.uri_ = opt_uri || null;
  this.ignoreCase_ = !!opt_ignoreCase
};
goog.Uri.QueryData.prototype.ensureKeyMapInitialized_ = function() {
  if(!this.keyMap_) {
    this.keyMap_ = new goog.structs.Map;
    this.count_ = 0;
    if(this.encodedQuery_) {
      var pairs = this.encodedQuery_.split("&");
      for(var i = 0;i < pairs.length;i++) {
        var indexOfEquals = pairs[i].indexOf("=");
        var name = null;
        var value = null;
        if(indexOfEquals >= 0) {
          name = pairs[i].substring(0, indexOfEquals);
          value = pairs[i].substring(indexOfEquals + 1)
        }else {
          name = pairs[i]
        }
        name = goog.string.urlDecode(name);
        name = this.getKeyName_(name);
        this.add(name, value ? goog.string.urlDecode(value) : "")
      }
    }
  }
};
goog.Uri.QueryData.createFromMap = function(map, opt_uri, opt_ignoreCase) {
  var keys = goog.structs.getKeys(map);
  if(typeof keys == "undefined") {
    throw Error("Keys are undefined");
  }
  return goog.Uri.QueryData.createFromKeysValues(keys, goog.structs.getValues(map), opt_uri, opt_ignoreCase)
};
goog.Uri.QueryData.createFromKeysValues = function(keys, values, opt_uri, opt_ignoreCase) {
  if(keys.length != values.length) {
    throw Error("Mismatched lengths for keys/values");
  }
  var queryData = new goog.Uri.QueryData(null, opt_uri, opt_ignoreCase);
  for(var i = 0;i < keys.length;i++) {
    queryData.add(keys[i], values[i])
  }
  return queryData
};
goog.Uri.QueryData.prototype.keyMap_ = null;
goog.Uri.QueryData.prototype.count_ = null;
goog.Uri.QueryData.decodedQuery_ = null;
goog.Uri.QueryData.prototype.getCount = function() {
  this.ensureKeyMapInitialized_();
  return this.count_
};
goog.Uri.QueryData.prototype.add = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  if(!this.containsKey(key)) {
    this.keyMap_.set(key, value)
  }else {
    var current = this.keyMap_.get(key);
    if(goog.isArray(current)) {
      current.push(value)
    }else {
      this.keyMap_.set(key, [current, value])
    }
  }
  this.count_++;
  return this
};
goog.Uri.QueryData.prototype.remove = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  if(this.keyMap_.containsKey(key)) {
    this.invalidateCache_();
    var old = this.keyMap_.get(key);
    if(goog.isArray(old)) {
      this.count_ -= old.length
    }else {
      this.count_--
    }
    return this.keyMap_.remove(key)
  }
  return false
};
goog.Uri.QueryData.prototype.clear = function() {
  this.invalidateCache_();
  if(this.keyMap_) {
    this.keyMap_.clear()
  }
  this.count_ = 0
};
goog.Uri.QueryData.prototype.isEmpty = function() {
  this.ensureKeyMapInitialized_();
  return this.count_ == 0
};
goog.Uri.QueryData.prototype.containsKey = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  return this.keyMap_.containsKey(key)
};
goog.Uri.QueryData.prototype.containsValue = function(value) {
  var vals = this.getValues();
  return goog.array.contains(vals, value)
};
goog.Uri.QueryData.prototype.getKeys = function() {
  this.ensureKeyMapInitialized_();
  var vals = this.keyMap_.getValues();
  var keys = this.keyMap_.getKeys();
  var rv = [];
  for(var i = 0;i < keys.length;i++) {
    var val = vals[i];
    if(goog.isArray(val)) {
      for(var j = 0;j < val.length;j++) {
        rv.push(keys[i])
      }
    }else {
      rv.push(keys[i])
    }
  }
  return rv
};
goog.Uri.QueryData.prototype.getValues = function(opt_key) {
  this.ensureKeyMapInitialized_();
  var rv;
  if(opt_key) {
    var key = this.getKeyName_(opt_key);
    if(this.containsKey(key)) {
      var value = this.keyMap_.get(key);
      if(goog.isArray(value)) {
        return value
      }else {
        rv = [];
        rv.push(value)
      }
    }else {
      rv = []
    }
  }else {
    var vals = this.keyMap_.getValues();
    rv = [];
    for(var i = 0;i < vals.length;i++) {
      var val = vals[i];
      if(goog.isArray(val)) {
        goog.array.extend(rv, val)
      }else {
        rv.push(val)
      }
    }
  }
  return rv
};
goog.Uri.QueryData.prototype.set = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  if(this.containsKey(key)) {
    var old = this.keyMap_.get(key);
    if(goog.isArray(old)) {
      this.count_ -= old.length
    }else {
      this.count_--
    }
  }
  this.keyMap_.set(key, value);
  this.count_++;
  return this
};
goog.Uri.QueryData.prototype.get = function(key, opt_default) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  if(this.containsKey(key)) {
    var val = this.keyMap_.get(key);
    if(goog.isArray(val)) {
      return val[0]
    }else {
      return val
    }
  }else {
    return opt_default
  }
};
goog.Uri.QueryData.prototype.setValues = function(key, values) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  if(this.containsKey(key)) {
    var old = this.keyMap_.get(key);
    if(goog.isArray(old)) {
      this.count_ -= old.length
    }else {
      this.count_--
    }
  }
  if(values.length > 0) {
    this.keyMap_.set(key, values);
    this.count_ += values.length
  }
};
goog.Uri.QueryData.prototype.toString = function() {
  if(this.encodedQuery_) {
    return this.encodedQuery_
  }
  if(!this.keyMap_) {
    return""
  }
  var sb = [];
  var count = 0;
  var keys = this.keyMap_.getKeys();
  for(var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var encodedKey = goog.string.urlEncode(key);
    var val = this.keyMap_.get(key);
    if(goog.isArray(val)) {
      for(var j = 0;j < val.length;j++) {
        if(count > 0) {
          sb.push("&")
        }
        sb.push(encodedKey);
        if(val[j] !== "") {
          sb.push("=", goog.string.urlEncode(val[j]))
        }
        count++
      }
    }else {
      if(count > 0) {
        sb.push("&")
      }
      sb.push(encodedKey);
      if(val !== "") {
        sb.push("=", goog.string.urlEncode(val))
      }
      count++
    }
  }
  return this.encodedQuery_ = sb.join("")
};
goog.Uri.QueryData.prototype.toDecodedString = function() {
  if(!this.decodedQuery_) {
    this.decodedQuery_ = goog.Uri.decodeOrEmpty_(this.toString())
  }
  return this.decodedQuery_
};
goog.Uri.QueryData.prototype.invalidateCache_ = function() {
  delete this.decodedQuery_;
  delete this.encodedQuery_;
  if(this.uri_) {
    delete this.uri_.cachedToString_
  }
};
goog.Uri.QueryData.prototype.filterKeys = function(keys) {
  this.ensureKeyMapInitialized_();
  goog.structs.forEach(this.keyMap_, function(value, key, map) {
    if(!goog.array.contains(keys, key)) {
      this.remove(key)
    }
  }, this);
  return this
};
goog.Uri.QueryData.prototype.clone = function() {
  var rv = new goog.Uri.QueryData;
  if(this.decodedQuery_) {
    rv.decodedQuery_ = this.decodedQuery_
  }
  if(this.encodedQuery_) {
    rv.encodedQuery_ = this.encodedQuery_
  }
  if(this.keyMap_) {
    rv.keyMap_ = this.keyMap_.clone()
  }
  return rv
};
goog.Uri.QueryData.prototype.getKeyName_ = function(arg) {
  var keyName = String(arg);
  if(this.ignoreCase_) {
    keyName = keyName.toLowerCase()
  }
  return keyName
};
goog.Uri.QueryData.prototype.setIgnoreCase = function(ignoreCase) {
  var resetKeys = ignoreCase && !this.ignoreCase_;
  if(resetKeys) {
    this.ensureKeyMapInitialized_();
    this.invalidateCache_();
    goog.structs.forEach(this.keyMap_, function(value, key, map) {
      var lowerCase = key.toLowerCase();
      if(key != lowerCase) {
        this.remove(key);
        this.add(lowerCase, value)
      }
    }, this)
  }
  this.ignoreCase_ = ignoreCase
};
goog.Uri.QueryData.prototype.extend = function(var_args) {
  for(var i = 0;i < arguments.length;i++) {
    var data = arguments[i];
    goog.structs.forEach(data, function(value, key) {
      this.add(key, value)
    }, this)
  }
};
goog.provide("goog.dom.BrowserFeature");
goog.require("goog.userAgent");
goog.dom.BrowserFeature = {CAN_ADD_NAME_OR_TYPE_ATTRIBUTES:!goog.userAgent.IE || goog.userAgent.isDocumentMode(9), CAN_USE_CHILDREN_ATTRIBUTE:!goog.userAgent.GECKO && !goog.userAgent.IE || goog.userAgent.IE && goog.userAgent.isDocumentMode(9) || goog.userAgent.GECKO && goog.userAgent.isVersion("1.9.1"), CAN_USE_INNER_TEXT:goog.userAgent.IE && !goog.userAgent.isVersion("9"), INNER_HTML_NEEDS_SCOPED_ELEMENT:goog.userAgent.IE};
goog.provide("goog.dom.TagName");
goog.dom.TagName = {A:"A", ABBR:"ABBR", ACRONYM:"ACRONYM", ADDRESS:"ADDRESS", APPLET:"APPLET", AREA:"AREA", B:"B", BASE:"BASE", BASEFONT:"BASEFONT", BDO:"BDO", BIG:"BIG", BLOCKQUOTE:"BLOCKQUOTE", BODY:"BODY", BR:"BR", BUTTON:"BUTTON", CANVAS:"CANVAS", CAPTION:"CAPTION", CENTER:"CENTER", CITE:"CITE", CODE:"CODE", COL:"COL", COLGROUP:"COLGROUP", DD:"DD", DEL:"DEL", DFN:"DFN", DIR:"DIR", DIV:"DIV", DL:"DL", DT:"DT", EM:"EM", FIELDSET:"FIELDSET", FONT:"FONT", FORM:"FORM", FRAME:"FRAME", FRAMESET:"FRAMESET", 
H1:"H1", H2:"H2", H3:"H3", H4:"H4", H5:"H5", H6:"H6", HEAD:"HEAD", HR:"HR", HTML:"HTML", I:"I", IFRAME:"IFRAME", IMG:"IMG", INPUT:"INPUT", INS:"INS", ISINDEX:"ISINDEX", KBD:"KBD", LABEL:"LABEL", LEGEND:"LEGEND", LI:"LI", LINK:"LINK", MAP:"MAP", MENU:"MENU", META:"META", NOFRAMES:"NOFRAMES", NOSCRIPT:"NOSCRIPT", OBJECT:"OBJECT", OL:"OL", OPTGROUP:"OPTGROUP", OPTION:"OPTION", P:"P", PARAM:"PARAM", PRE:"PRE", Q:"Q", S:"S", SAMP:"SAMP", SCRIPT:"SCRIPT", SELECT:"SELECT", SMALL:"SMALL", SPAN:"SPAN", STRIKE:"STRIKE", 
STRONG:"STRONG", STYLE:"STYLE", SUB:"SUB", SUP:"SUP", TABLE:"TABLE", TBODY:"TBODY", TD:"TD", TEXTAREA:"TEXTAREA", TFOOT:"TFOOT", TH:"TH", THEAD:"THEAD", TITLE:"TITLE", TR:"TR", TT:"TT", U:"U", UL:"UL", VAR:"VAR"};
goog.provide("goog.dom.classes");
goog.require("goog.array");
goog.dom.classes.set = function(element, className) {
  element.className = className
};
goog.dom.classes.get = function(element) {
  var className = element.className;
  return className && typeof className.split == "function" ? className.split(/\s+/) : []
};
goog.dom.classes.add = function(element, var_args) {
  var classes = goog.dom.classes.get(element);
  var args = goog.array.slice(arguments, 1);
  var b = goog.dom.classes.add_(classes, args);
  element.className = classes.join(" ");
  return b
};
goog.dom.classes.remove = function(element, var_args) {
  var classes = goog.dom.classes.get(element);
  var args = goog.array.slice(arguments, 1);
  var b = goog.dom.classes.remove_(classes, args);
  element.className = classes.join(" ");
  return b
};
goog.dom.classes.add_ = function(classes, args) {
  var rv = 0;
  for(var i = 0;i < args.length;i++) {
    if(!goog.array.contains(classes, args[i])) {
      classes.push(args[i]);
      rv++
    }
  }
  return rv == args.length
};
goog.dom.classes.remove_ = function(classes, args) {
  var rv = 0;
  for(var i = 0;i < classes.length;i++) {
    if(goog.array.contains(args, classes[i])) {
      goog.array.splice(classes, i--, 1);
      rv++
    }
  }
  return rv == args.length
};
goog.dom.classes.swap = function(element, fromClass, toClass) {
  var classes = goog.dom.classes.get(element);
  var removed = false;
  for(var i = 0;i < classes.length;i++) {
    if(classes[i] == fromClass) {
      goog.array.splice(classes, i--, 1);
      removed = true
    }
  }
  if(removed) {
    classes.push(toClass);
    element.className = classes.join(" ")
  }
  return removed
};
goog.dom.classes.addRemove = function(element, classesToRemove, classesToAdd) {
  var classes = goog.dom.classes.get(element);
  if(goog.isString(classesToRemove)) {
    goog.array.remove(classes, classesToRemove)
  }else {
    if(goog.isArray(classesToRemove)) {
      goog.dom.classes.remove_(classes, classesToRemove)
    }
  }
  if(goog.isString(classesToAdd) && !goog.array.contains(classes, classesToAdd)) {
    classes.push(classesToAdd)
  }else {
    if(goog.isArray(classesToAdd)) {
      goog.dom.classes.add_(classes, classesToAdd)
    }
  }
  element.className = classes.join(" ")
};
goog.dom.classes.has = function(element, className) {
  return goog.array.contains(goog.dom.classes.get(element), className)
};
goog.dom.classes.enable = function(element, className, enabled) {
  if(enabled) {
    goog.dom.classes.add(element, className)
  }else {
    goog.dom.classes.remove(element, className)
  }
};
goog.dom.classes.toggle = function(element, className) {
  var add = !goog.dom.classes.has(element, className);
  goog.dom.classes.enable(element, className, add);
  return add
};
goog.provide("goog.math.Coordinate");
goog.math.Coordinate = function(opt_x, opt_y) {
  this.x = goog.isDef(opt_x) ? opt_x : 0;
  this.y = goog.isDef(opt_y) ? opt_y : 0
};
goog.math.Coordinate.prototype.clone = function() {
  return new goog.math.Coordinate(this.x, this.y)
};
if(goog.DEBUG) {
  goog.math.Coordinate.prototype.toString = function() {
    return"(" + this.x + ", " + this.y + ")"
  }
}
goog.math.Coordinate.equals = function(a, b) {
  if(a == b) {
    return true
  }
  if(!a || !b) {
    return false
  }
  return a.x == b.x && a.y == b.y
};
goog.math.Coordinate.distance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return Math.sqrt(dx * dx + dy * dy)
};
goog.math.Coordinate.squaredDistance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return dx * dx + dy * dy
};
goog.math.Coordinate.difference = function(a, b) {
  return new goog.math.Coordinate(a.x - b.x, a.y - b.y)
};
goog.math.Coordinate.sum = function(a, b) {
  return new goog.math.Coordinate(a.x + b.x, a.y + b.y)
};
goog.provide("goog.math.Size");
goog.math.Size = function(width, height) {
  this.width = width;
  this.height = height
};
goog.math.Size.equals = function(a, b) {
  if(a == b) {
    return true
  }
  if(!a || !b) {
    return false
  }
  return a.width == b.width && a.height == b.height
};
goog.math.Size.prototype.clone = function() {
  return new goog.math.Size(this.width, this.height)
};
if(goog.DEBUG) {
  goog.math.Size.prototype.toString = function() {
    return"(" + this.width + " x " + this.height + ")"
  }
}
goog.math.Size.prototype.getLongest = function() {
  return Math.max(this.width, this.height)
};
goog.math.Size.prototype.getShortest = function() {
  return Math.min(this.width, this.height)
};
goog.math.Size.prototype.area = function() {
  return this.width * this.height
};
goog.math.Size.prototype.perimeter = function() {
  return(this.width + this.height) * 2
};
goog.math.Size.prototype.aspectRatio = function() {
  return this.width / this.height
};
goog.math.Size.prototype.isEmpty = function() {
  return!this.area()
};
goog.math.Size.prototype.ceil = function() {
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this
};
goog.math.Size.prototype.fitsInside = function(target) {
  return this.width <= target.width && this.height <= target.height
};
goog.math.Size.prototype.floor = function() {
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this
};
goog.math.Size.prototype.round = function() {
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this
};
goog.math.Size.prototype.scale = function(s) {
  this.width *= s;
  this.height *= s;
  return this
};
goog.math.Size.prototype.scaleToFit = function(target) {
  var s = this.aspectRatio() > target.aspectRatio() ? target.width / this.width : target.height / this.height;
  return this.scale(s)
};
goog.provide("goog.dom");
goog.provide("goog.dom.DomHelper");
goog.provide("goog.dom.NodeType");
goog.require("goog.array");
goog.require("goog.dom.BrowserFeature");
goog.require("goog.dom.TagName");
goog.require("goog.dom.classes");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Size");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.dom.ASSUME_QUIRKS_MODE = false;
goog.dom.ASSUME_STANDARDS_MODE = false;
goog.dom.COMPAT_MODE_KNOWN_ = goog.dom.ASSUME_QUIRKS_MODE || goog.dom.ASSUME_STANDARDS_MODE;
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.dom.getDomHelper = function(opt_element) {
  return opt_element ? new goog.dom.DomHelper(goog.dom.getOwnerDocument(opt_element)) : goog.dom.defaultDomHelper_ || (goog.dom.defaultDomHelper_ = new goog.dom.DomHelper)
};
goog.dom.defaultDomHelper_;
goog.dom.getDocument = function() {
  return document
};
goog.dom.getElement = function(element) {
  return goog.isString(element) ? document.getElementById(element) : element
};
goog.dom.$ = goog.dom.getElement;
goog.dom.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(document, opt_tag, opt_class, opt_el)
};
goog.dom.getElementsByClass = function(className, opt_el) {
  var parent = opt_el || document;
  if(goog.dom.canUseQuerySelector_(parent)) {
    return parent.querySelectorAll("." + className)
  }else {
    if(parent.getElementsByClassName) {
      return parent.getElementsByClassName(className)
    }
  }
  return goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el)
};
goog.dom.getElementByClass = function(className, opt_el) {
  var parent = opt_el || document;
  var retVal = null;
  if(goog.dom.canUseQuerySelector_(parent)) {
    retVal = parent.querySelector("." + className)
  }else {
    retVal = goog.dom.getElementsByClass(className, opt_el)[0]
  }
  return retVal || null
};
goog.dom.canUseQuerySelector_ = function(parent) {
  return parent.querySelectorAll && parent.querySelector && (!goog.userAgent.WEBKIT || goog.dom.isCss1CompatMode_(document) || goog.userAgent.isVersion("528"))
};
goog.dom.getElementsByTagNameAndClass_ = function(doc, opt_tag, opt_class, opt_el) {
  var parent = opt_el || doc;
  var tagName = opt_tag && opt_tag != "*" ? opt_tag.toUpperCase() : "";
  if(goog.dom.canUseQuerySelector_(parent) && (tagName || opt_class)) {
    var query = tagName + (opt_class ? "." + opt_class : "");
    return parent.querySelectorAll(query)
  }
  if(opt_class && parent.getElementsByClassName) {
    var els = parent.getElementsByClassName(opt_class);
    if(tagName) {
      var arrayLike = {};
      var len = 0;
      for(var i = 0, el;el = els[i];i++) {
        if(tagName == el.nodeName) {
          arrayLike[len++] = el
        }
      }
      arrayLike.length = len;
      return arrayLike
    }else {
      return els
    }
  }
  var els = parent.getElementsByTagName(tagName || "*");
  if(opt_class) {
    var arrayLike = {};
    var len = 0;
    for(var i = 0, el;el = els[i];i++) {
      var className = el.className;
      if(typeof className.split == "function" && goog.array.contains(className.split(/\s+/), opt_class)) {
        arrayLike[len++] = el
      }
    }
    arrayLike.length = len;
    return arrayLike
  }else {
    return els
  }
};
goog.dom.$$ = goog.dom.getElementsByTagNameAndClass;
goog.dom.setProperties = function(element, properties) {
  goog.object.forEach(properties, function(val, key) {
    if(key == "style") {
      element.style.cssText = val
    }else {
      if(key == "class") {
        element.className = val
      }else {
        if(key == "for") {
          element.htmlFor = val
        }else {
          if(key in goog.dom.DIRECT_ATTRIBUTE_MAP_) {
            element.setAttribute(goog.dom.DIRECT_ATTRIBUTE_MAP_[key], val)
          }else {
            if(goog.string.startsWith(key, "aria-")) {
              element.setAttribute(key, val)
            }else {
              element[key] = val
            }
          }
        }
      }
    }
  })
};
goog.dom.DIRECT_ATTRIBUTE_MAP_ = {"cellpadding":"cellPadding", "cellspacing":"cellSpacing", "colspan":"colSpan", "rowspan":"rowSpan", "valign":"vAlign", "height":"height", "width":"width", "usemap":"useMap", "frameborder":"frameBorder", "maxlength":"maxLength", "type":"type"};
goog.dom.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize_(opt_window || window)
};
goog.dom.getViewportSize_ = function(win) {
  var doc = win.document;
  if(goog.userAgent.WEBKIT && !goog.userAgent.isVersion("500") && !goog.userAgent.MOBILE) {
    if(typeof win.innerHeight == "undefined") {
      win = window
    }
    var innerHeight = win.innerHeight;
    var scrollHeight = win.document.documentElement.scrollHeight;
    if(win == win.top) {
      if(scrollHeight < innerHeight) {
        innerHeight -= 15
      }
    }
    return new goog.math.Size(win.innerWidth, innerHeight)
  }
  var el = goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body;
  return new goog.math.Size(el.clientWidth, el.clientHeight)
};
goog.dom.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(window)
};
goog.dom.getDocumentHeight_ = function(win) {
  var doc = win.document;
  var height = 0;
  if(doc) {
    var vh = goog.dom.getViewportSize_(win).height;
    var body = doc.body;
    var docEl = doc.documentElement;
    if(goog.dom.isCss1CompatMode_(doc) && docEl.scrollHeight) {
      height = docEl.scrollHeight != vh ? docEl.scrollHeight : docEl.offsetHeight
    }else {
      var sh = docEl.scrollHeight;
      var oh = docEl.offsetHeight;
      if(docEl.clientHeight != oh) {
        sh = body.scrollHeight;
        oh = body.offsetHeight
      }
      if(sh > vh) {
        height = sh > oh ? sh : oh
      }else {
        height = sh < oh ? sh : oh
      }
    }
  }
  return height
};
goog.dom.getPageScroll = function(opt_window) {
  var win = opt_window || goog.global || window;
  return goog.dom.getDomHelper(win.document).getDocumentScroll()
};
goog.dom.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(document)
};
goog.dom.getDocumentScroll_ = function(doc) {
  var el = goog.dom.getDocumentScrollElement_(doc);
  var win = goog.dom.getWindow_(doc);
  return new goog.math.Coordinate(win.pageXOffset || el.scrollLeft, win.pageYOffset || el.scrollTop)
};
goog.dom.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(document)
};
goog.dom.getDocumentScrollElement_ = function(doc) {
  return!goog.userAgent.WEBKIT && goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body
};
goog.dom.getWindow = function(opt_doc) {
  return opt_doc ? goog.dom.getWindow_(opt_doc) : window
};
goog.dom.getWindow_ = function(doc) {
  return doc.parentWindow || doc.defaultView
};
goog.dom.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(document, arguments)
};
goog.dom.createDom_ = function(doc, args) {
  var tagName = args[0];
  var attributes = args[1];
  if(!goog.dom.BrowserFeature.CAN_ADD_NAME_OR_TYPE_ATTRIBUTES && attributes && (attributes.name || attributes.type)) {
    var tagNameArr = ["<", tagName];
    if(attributes.name) {
      tagNameArr.push(' name="', goog.string.htmlEscape(attributes.name), '"')
    }
    if(attributes.type) {
      tagNameArr.push(' type="', goog.string.htmlEscape(attributes.type), '"');
      var clone = {};
      goog.object.extend(clone, attributes);
      attributes = clone;
      delete attributes.type
    }
    tagNameArr.push(">");
    tagName = tagNameArr.join("")
  }
  var element = doc.createElement(tagName);
  if(attributes) {
    if(goog.isString(attributes)) {
      element.className = attributes
    }else {
      if(goog.isArray(attributes)) {
        goog.dom.classes.add.apply(null, [element].concat(attributes))
      }else {
        goog.dom.setProperties(element, attributes)
      }
    }
  }
  if(args.length > 2) {
    goog.dom.append_(doc, element, args, 2)
  }
  return element
};
goog.dom.append_ = function(doc, parent, args, startIndex) {
  function childHandler(child) {
    if(child) {
      parent.appendChild(goog.isString(child) ? doc.createTextNode(child) : child)
    }
  }
  for(var i = startIndex;i < args.length;i++) {
    var arg = args[i];
    if(goog.isArrayLike(arg) && !goog.dom.isNodeLike(arg)) {
      goog.array.forEach(goog.dom.isNodeList(arg) ? goog.array.clone(arg) : arg, childHandler)
    }else {
      childHandler(arg)
    }
  }
};
goog.dom.$dom = goog.dom.createDom;
goog.dom.createElement = function(name) {
  return document.createElement(name)
};
goog.dom.createTextNode = function(content) {
  return document.createTextNode(content)
};
goog.dom.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(document, rows, columns, !!opt_fillWithNbsp)
};
goog.dom.createTable_ = function(doc, rows, columns, fillWithNbsp) {
  var rowHtml = ["<tr>"];
  for(var i = 0;i < columns;i++) {
    rowHtml.push(fillWithNbsp ? "<td>&nbsp;</td>" : "<td></td>")
  }
  rowHtml.push("</tr>");
  rowHtml = rowHtml.join("");
  var totalHtml = ["<table>"];
  for(i = 0;i < rows;i++) {
    totalHtml.push(rowHtml)
  }
  totalHtml.push("</table>");
  var elem = doc.createElement(goog.dom.TagName.DIV);
  elem.innerHTML = totalHtml.join("");
  return elem.removeChild(elem.firstChild)
};
goog.dom.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(document, htmlString)
};
goog.dom.htmlToDocumentFragment_ = function(doc, htmlString) {
  var tempDiv = doc.createElement("div");
  if(goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT) {
    tempDiv.innerHTML = "<br>" + htmlString;
    tempDiv.removeChild(tempDiv.firstChild)
  }else {
    tempDiv.innerHTML = htmlString
  }
  if(tempDiv.childNodes.length == 1) {
    return tempDiv.removeChild(tempDiv.firstChild)
  }else {
    var fragment = doc.createDocumentFragment();
    while(tempDiv.firstChild) {
      fragment.appendChild(tempDiv.firstChild)
    }
    return fragment
  }
};
goog.dom.getCompatMode = function() {
  return goog.dom.isCss1CompatMode() ? "CSS1Compat" : "BackCompat"
};
goog.dom.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(document)
};
goog.dom.isCss1CompatMode_ = function(doc) {
  if(goog.dom.COMPAT_MODE_KNOWN_) {
    return goog.dom.ASSUME_STANDARDS_MODE
  }
  return doc.compatMode == "CSS1Compat"
};
goog.dom.canHaveChildren = function(node) {
  if(node.nodeType != goog.dom.NodeType.ELEMENT) {
    return false
  }
  switch(node.tagName) {
    case goog.dom.TagName.APPLET:
    ;
    case goog.dom.TagName.AREA:
    ;
    case goog.dom.TagName.BASE:
    ;
    case goog.dom.TagName.BR:
    ;
    case goog.dom.TagName.COL:
    ;
    case goog.dom.TagName.FRAME:
    ;
    case goog.dom.TagName.HR:
    ;
    case goog.dom.TagName.IMG:
    ;
    case goog.dom.TagName.INPUT:
    ;
    case goog.dom.TagName.IFRAME:
    ;
    case goog.dom.TagName.ISINDEX:
    ;
    case goog.dom.TagName.LINK:
    ;
    case goog.dom.TagName.NOFRAMES:
    ;
    case goog.dom.TagName.NOSCRIPT:
    ;
    case goog.dom.TagName.META:
    ;
    case goog.dom.TagName.OBJECT:
    ;
    case goog.dom.TagName.PARAM:
    ;
    case goog.dom.TagName.SCRIPT:
    ;
    case goog.dom.TagName.STYLE:
      return false
  }
  return true
};
goog.dom.appendChild = function(parent, child) {
  parent.appendChild(child)
};
goog.dom.append = function(parent, var_args) {
  goog.dom.append_(goog.dom.getOwnerDocument(parent), parent, arguments, 1)
};
goog.dom.removeChildren = function(node) {
  var child;
  while(child = node.firstChild) {
    node.removeChild(child)
  }
};
goog.dom.insertSiblingBefore = function(newNode, refNode) {
  if(refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode)
  }
};
goog.dom.insertSiblingAfter = function(newNode, refNode) {
  if(refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode.nextSibling)
  }
};
goog.dom.insertChildAt = function(parent, child, index) {
  parent.insertBefore(child, parent.childNodes[index] || null)
};
goog.dom.removeNode = function(node) {
  return node && node.parentNode ? node.parentNode.removeChild(node) : null
};
goog.dom.replaceNode = function(newNode, oldNode) {
  var parent = oldNode.parentNode;
  if(parent) {
    parent.replaceChild(newNode, oldNode)
  }
};
goog.dom.flattenElement = function(element) {
  var child, parent = element.parentNode;
  if(parent && parent.nodeType != goog.dom.NodeType.DOCUMENT_FRAGMENT) {
    if(element.removeNode) {
      return element.removeNode(false)
    }else {
      while(child = element.firstChild) {
        parent.insertBefore(child, element)
      }
      return goog.dom.removeNode(element)
    }
  }
};
goog.dom.getChildren = function(element) {
  if(goog.dom.BrowserFeature.CAN_USE_CHILDREN_ATTRIBUTE && element.children != undefined) {
    return element.children
  }
  return goog.array.filter(element.childNodes, function(node) {
    return node.nodeType == goog.dom.NodeType.ELEMENT
  })
};
goog.dom.getFirstElementChild = function(node) {
  if(node.firstElementChild != undefined) {
    return node.firstElementChild
  }
  return goog.dom.getNextElementNode_(node.firstChild, true)
};
goog.dom.getLastElementChild = function(node) {
  if(node.lastElementChild != undefined) {
    return node.lastElementChild
  }
  return goog.dom.getNextElementNode_(node.lastChild, false)
};
goog.dom.getNextElementSibling = function(node) {
  if(node.nextElementSibling != undefined) {
    return node.nextElementSibling
  }
  return goog.dom.getNextElementNode_(node.nextSibling, true)
};
goog.dom.getPreviousElementSibling = function(node) {
  if(node.previousElementSibling != undefined) {
    return node.previousElementSibling
  }
  return goog.dom.getNextElementNode_(node.previousSibling, false)
};
goog.dom.getNextElementNode_ = function(node, forward) {
  while(node && node.nodeType != goog.dom.NodeType.ELEMENT) {
    node = forward ? node.nextSibling : node.previousSibling
  }
  return node
};
goog.dom.getNextNode = function(node) {
  if(!node) {
    return null
  }
  if(node.firstChild) {
    return node.firstChild
  }
  while(node && !node.nextSibling) {
    node = node.parentNode
  }
  return node ? node.nextSibling : null
};
goog.dom.getPreviousNode = function(node) {
  if(!node) {
    return null
  }
  if(!node.previousSibling) {
    return node.parentNode
  }
  node = node.previousSibling;
  while(node && node.lastChild) {
    node = node.lastChild
  }
  return node
};
goog.dom.isNodeLike = function(obj) {
  return goog.isObject(obj) && obj.nodeType > 0
};
goog.dom.isElement = function(obj) {
  return goog.isObject(obj) && obj.nodeType == goog.dom.NodeType.ELEMENT
};
goog.dom.isWindow = function(obj) {
  return goog.isObject(obj) && obj["window"] == obj
};
goog.dom.contains = function(parent, descendant) {
  if(parent.contains && descendant.nodeType == goog.dom.NodeType.ELEMENT) {
    return parent == descendant || parent.contains(descendant)
  }
  if(typeof parent.compareDocumentPosition != "undefined") {
    return parent == descendant || Boolean(parent.compareDocumentPosition(descendant) & 16)
  }
  while(descendant && parent != descendant) {
    descendant = descendant.parentNode
  }
  return descendant == parent
};
goog.dom.compareNodeOrder = function(node1, node2) {
  if(node1 == node2) {
    return 0
  }
  if(node1.compareDocumentPosition) {
    return node1.compareDocumentPosition(node2) & 2 ? 1 : -1
  }
  if("sourceIndex" in node1 || node1.parentNode && "sourceIndex" in node1.parentNode) {
    var isElement1 = node1.nodeType == goog.dom.NodeType.ELEMENT;
    var isElement2 = node2.nodeType == goog.dom.NodeType.ELEMENT;
    if(isElement1 && isElement2) {
      return node1.sourceIndex - node2.sourceIndex
    }else {
      var parent1 = node1.parentNode;
      var parent2 = node2.parentNode;
      if(parent1 == parent2) {
        return goog.dom.compareSiblingOrder_(node1, node2)
      }
      if(!isElement1 && goog.dom.contains(parent1, node2)) {
        return-1 * goog.dom.compareParentsDescendantNodeIe_(node1, node2)
      }
      if(!isElement2 && goog.dom.contains(parent2, node1)) {
        return goog.dom.compareParentsDescendantNodeIe_(node2, node1)
      }
      return(isElement1 ? node1.sourceIndex : parent1.sourceIndex) - (isElement2 ? node2.sourceIndex : parent2.sourceIndex)
    }
  }
  var doc = goog.dom.getOwnerDocument(node1);
  var range1, range2;
  range1 = doc.createRange();
  range1.selectNode(node1);
  range1.collapse(true);
  range2 = doc.createRange();
  range2.selectNode(node2);
  range2.collapse(true);
  return range1.compareBoundaryPoints(goog.global["Range"].START_TO_END, range2)
};
goog.dom.compareParentsDescendantNodeIe_ = function(textNode, node) {
  var parent = textNode.parentNode;
  if(parent == node) {
    return-1
  }
  var sibling = node;
  while(sibling.parentNode != parent) {
    sibling = sibling.parentNode
  }
  return goog.dom.compareSiblingOrder_(sibling, textNode)
};
goog.dom.compareSiblingOrder_ = function(node1, node2) {
  var s = node2;
  while(s = s.previousSibling) {
    if(s == node1) {
      return-1
    }
  }
  return 1
};
goog.dom.findCommonAncestor = function(var_args) {
  var i, count = arguments.length;
  if(!count) {
    return null
  }else {
    if(count == 1) {
      return arguments[0]
    }
  }
  var paths = [];
  var minLength = Infinity;
  for(i = 0;i < count;i++) {
    var ancestors = [];
    var node = arguments[i];
    while(node) {
      ancestors.unshift(node);
      node = node.parentNode
    }
    paths.push(ancestors);
    minLength = Math.min(minLength, ancestors.length)
  }
  var output = null;
  for(i = 0;i < minLength;i++) {
    var first = paths[0][i];
    for(var j = 1;j < count;j++) {
      if(first != paths[j][i]) {
        return output
      }
    }
    output = first
  }
  return output
};
goog.dom.getOwnerDocument = function(node) {
  return node.nodeType == goog.dom.NodeType.DOCUMENT ? node : node.ownerDocument || node.document
};
goog.dom.getFrameContentDocument = function(frame) {
  var doc = frame.contentDocument || frame.contentWindow.document;
  return doc
};
goog.dom.getFrameContentWindow = function(frame) {
  return frame.contentWindow || goog.dom.getWindow_(goog.dom.getFrameContentDocument(frame))
};
goog.dom.setTextContent = function(element, text) {
  if("textContent" in element) {
    element.textContent = text
  }else {
    if(element.firstChild && element.firstChild.nodeType == goog.dom.NodeType.TEXT) {
      while(element.lastChild != element.firstChild) {
        element.removeChild(element.lastChild)
      }
      element.firstChild.data = text
    }else {
      goog.dom.removeChildren(element);
      var doc = goog.dom.getOwnerDocument(element);
      element.appendChild(doc.createTextNode(text))
    }
  }
};
goog.dom.getOuterHtml = function(element) {
  if("outerHTML" in element) {
    return element.outerHTML
  }else {
    var doc = goog.dom.getOwnerDocument(element);
    var div = doc.createElement("div");
    div.appendChild(element.cloneNode(true));
    return div.innerHTML
  }
};
goog.dom.findNode = function(root, p) {
  var rv = [];
  var found = goog.dom.findNodes_(root, p, rv, true);
  return found ? rv[0] : undefined
};
goog.dom.findNodes = function(root, p) {
  var rv = [];
  goog.dom.findNodes_(root, p, rv, false);
  return rv
};
goog.dom.findNodes_ = function(root, p, rv, findOne) {
  if(root != null) {
    var child = root.firstChild;
    while(child) {
      if(p(child)) {
        rv.push(child);
        if(findOne) {
          return true
        }
      }
      if(goog.dom.findNodes_(child, p, rv, findOne)) {
        return true
      }
      child = child.nextSibling
    }
  }
  return false
};
goog.dom.TAGS_TO_IGNORE_ = {"SCRIPT":1, "STYLE":1, "HEAD":1, "IFRAME":1, "OBJECT":1};
goog.dom.PREDEFINED_TAG_VALUES_ = {"IMG":" ", "BR":"\n"};
goog.dom.isFocusableTabIndex = function(element) {
  var attrNode = element.getAttributeNode("tabindex");
  if(attrNode && attrNode.specified) {
    var index = element.tabIndex;
    return goog.isNumber(index) && index >= 0 && index < 32768
  }
  return false
};
goog.dom.setFocusableTabIndex = function(element, enable) {
  if(enable) {
    element.tabIndex = 0
  }else {
    element.tabIndex = -1;
    element.removeAttribute("tabIndex")
  }
};
goog.dom.getTextContent = function(node) {
  var textContent;
  if(goog.dom.BrowserFeature.CAN_USE_INNER_TEXT && "innerText" in node) {
    textContent = goog.string.canonicalizeNewlines(node.innerText)
  }else {
    var buf = [];
    goog.dom.getTextContent_(node, buf, true);
    textContent = buf.join("")
  }
  textContent = textContent.replace(/ \xAD /g, " ").replace(/\xAD/g, "");
  textContent = textContent.replace(/\u200B/g, "");
  if(!goog.dom.BrowserFeature.CAN_USE_INNER_TEXT) {
    textContent = textContent.replace(/ +/g, " ")
  }
  if(textContent != " ") {
    textContent = textContent.replace(/^\s*/, "")
  }
  return textContent
};
goog.dom.getRawTextContent = function(node) {
  var buf = [];
  goog.dom.getTextContent_(node, buf, false);
  return buf.join("")
};
goog.dom.getTextContent_ = function(node, buf, normalizeWhitespace) {
  if(node.nodeName in goog.dom.TAGS_TO_IGNORE_) {
  }else {
    if(node.nodeType == goog.dom.NodeType.TEXT) {
      if(normalizeWhitespace) {
        buf.push(String(node.nodeValue).replace(/(\r\n|\r|\n)/g, ""))
      }else {
        buf.push(node.nodeValue)
      }
    }else {
      if(node.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
        buf.push(goog.dom.PREDEFINED_TAG_VALUES_[node.nodeName])
      }else {
        var child = node.firstChild;
        while(child) {
          goog.dom.getTextContent_(child, buf, normalizeWhitespace);
          child = child.nextSibling
        }
      }
    }
  }
};
goog.dom.getNodeTextLength = function(node) {
  return goog.dom.getTextContent(node).length
};
goog.dom.getNodeTextOffset = function(node, opt_offsetParent) {
  var root = opt_offsetParent || goog.dom.getOwnerDocument(node).body;
  var buf = [];
  while(node && node != root) {
    var cur = node;
    while(cur = cur.previousSibling) {
      buf.unshift(goog.dom.getTextContent(cur))
    }
    node = node.parentNode
  }
  return goog.string.trimLeft(buf.join("")).replace(/ +/g, " ").length
};
goog.dom.getNodeAtOffset = function(parent, offset, opt_result) {
  var stack = [parent], pos = 0, cur;
  while(stack.length > 0 && pos < offset) {
    cur = stack.pop();
    if(cur.nodeName in goog.dom.TAGS_TO_IGNORE_) {
    }else {
      if(cur.nodeType == goog.dom.NodeType.TEXT) {
        var text = cur.nodeValue.replace(/(\r\n|\r|\n)/g, "").replace(/ +/g, " ");
        pos += text.length
      }else {
        if(cur.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
          pos += goog.dom.PREDEFINED_TAG_VALUES_[cur.nodeName].length
        }else {
          for(var i = cur.childNodes.length - 1;i >= 0;i--) {
            stack.push(cur.childNodes[i])
          }
        }
      }
    }
  }
  if(goog.isObject(opt_result)) {
    opt_result.remainder = cur ? cur.nodeValue.length + offset - pos - 1 : 0;
    opt_result.node = cur
  }
  return cur
};
goog.dom.isNodeList = function(val) {
  if(val && typeof val.length == "number") {
    if(goog.isObject(val)) {
      return typeof val.item == "function" || typeof val.item == "string"
    }else {
      if(goog.isFunction(val)) {
        return typeof val.item == "function"
      }
    }
  }
  return false
};
goog.dom.getAncestorByTagNameAndClass = function(element, opt_tag, opt_class) {
  var tagName = opt_tag ? opt_tag.toUpperCase() : null;
  return goog.dom.getAncestor(element, function(node) {
    return(!tagName || node.nodeName == tagName) && (!opt_class || goog.dom.classes.has(node, opt_class))
  }, true)
};
goog.dom.getAncestorByClass = function(element, opt_class) {
  return goog.dom.getAncestorByTagNameAndClass(element, null, opt_class)
};
goog.dom.getAncestor = function(element, matcher, opt_includeNode, opt_maxSearchSteps) {
  if(!opt_includeNode) {
    element = element.parentNode
  }
  var ignoreSearchSteps = opt_maxSearchSteps == null;
  var steps = 0;
  while(element && (ignoreSearchSteps || steps <= opt_maxSearchSteps)) {
    if(matcher(element)) {
      return element
    }
    element = element.parentNode;
    steps++
  }
  return null
};
goog.dom.getActiveElement = function(doc) {
  try {
    return doc && doc.activeElement
  }catch(e) {
  }
  return null
};
goog.dom.DomHelper = function(opt_document) {
  this.document_ = opt_document || goog.global.document || document
};
goog.dom.DomHelper.prototype.getDomHelper = goog.dom.getDomHelper;
goog.dom.DomHelper.prototype.setDocument = function(document) {
  this.document_ = document
};
goog.dom.DomHelper.prototype.getDocument = function() {
  return this.document_
};
goog.dom.DomHelper.prototype.getElement = function(element) {
  if(goog.isString(element)) {
    return this.document_.getElementById(element)
  }else {
    return element
  }
};
goog.dom.DomHelper.prototype.$ = goog.dom.DomHelper.prototype.getElement;
goog.dom.DomHelper.prototype.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(this.document_, opt_tag, opt_class, opt_el)
};
goog.dom.DomHelper.prototype.getElementsByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementsByClass(className, doc)
};
goog.dom.DomHelper.prototype.getElementByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementByClass(className, doc)
};
goog.dom.DomHelper.prototype.$$ = goog.dom.DomHelper.prototype.getElementsByTagNameAndClass;
goog.dom.DomHelper.prototype.setProperties = goog.dom.setProperties;
goog.dom.DomHelper.prototype.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize(opt_window || this.getWindow())
};
goog.dom.DomHelper.prototype.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(this.getWindow())
};
goog.dom.Appendable;
goog.dom.DomHelper.prototype.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(this.document_, arguments)
};
goog.dom.DomHelper.prototype.$dom = goog.dom.DomHelper.prototype.createDom;
goog.dom.DomHelper.prototype.createElement = function(name) {
  return this.document_.createElement(name)
};
goog.dom.DomHelper.prototype.createTextNode = function(content) {
  return this.document_.createTextNode(content)
};
goog.dom.DomHelper.prototype.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(this.document_, rows, columns, !!opt_fillWithNbsp)
};
goog.dom.DomHelper.prototype.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(this.document_, htmlString)
};
goog.dom.DomHelper.prototype.getCompatMode = function() {
  return this.isCss1CompatMode() ? "CSS1Compat" : "BackCompat"
};
goog.dom.DomHelper.prototype.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(this.document_)
};
goog.dom.DomHelper.prototype.getWindow = function() {
  return goog.dom.getWindow_(this.document_)
};
goog.dom.DomHelper.prototype.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(this.document_)
};
goog.dom.DomHelper.prototype.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(this.document_)
};
goog.dom.DomHelper.prototype.appendChild = goog.dom.appendChild;
goog.dom.DomHelper.prototype.append = goog.dom.append;
goog.dom.DomHelper.prototype.removeChildren = goog.dom.removeChildren;
goog.dom.DomHelper.prototype.insertSiblingBefore = goog.dom.insertSiblingBefore;
goog.dom.DomHelper.prototype.insertSiblingAfter = goog.dom.insertSiblingAfter;
goog.dom.DomHelper.prototype.removeNode = goog.dom.removeNode;
goog.dom.DomHelper.prototype.replaceNode = goog.dom.replaceNode;
goog.dom.DomHelper.prototype.flattenElement = goog.dom.flattenElement;
goog.dom.DomHelper.prototype.getFirstElementChild = goog.dom.getFirstElementChild;
goog.dom.DomHelper.prototype.getLastElementChild = goog.dom.getLastElementChild;
goog.dom.DomHelper.prototype.getNextElementSibling = goog.dom.getNextElementSibling;
goog.dom.DomHelper.prototype.getPreviousElementSibling = goog.dom.getPreviousElementSibling;
goog.dom.DomHelper.prototype.getNextNode = goog.dom.getNextNode;
goog.dom.DomHelper.prototype.getPreviousNode = goog.dom.getPreviousNode;
goog.dom.DomHelper.prototype.isNodeLike = goog.dom.isNodeLike;
goog.dom.DomHelper.prototype.contains = goog.dom.contains;
goog.dom.DomHelper.prototype.getOwnerDocument = goog.dom.getOwnerDocument;
goog.dom.DomHelper.prototype.getFrameContentDocument = goog.dom.getFrameContentDocument;
goog.dom.DomHelper.prototype.getFrameContentWindow = goog.dom.getFrameContentWindow;
goog.dom.DomHelper.prototype.setTextContent = goog.dom.setTextContent;
goog.dom.DomHelper.prototype.findNode = goog.dom.findNode;
goog.dom.DomHelper.prototype.findNodes = goog.dom.findNodes;
goog.dom.DomHelper.prototype.getTextContent = goog.dom.getTextContent;
goog.dom.DomHelper.prototype.getNodeTextLength = goog.dom.getNodeTextLength;
goog.dom.DomHelper.prototype.getNodeTextOffset = goog.dom.getNodeTextOffset;
goog.dom.DomHelper.prototype.getAncestorByTagNameAndClass = goog.dom.getAncestorByTagNameAndClass;
goog.dom.DomHelper.prototype.getAncestorByClass = goog.dom.getAncestorByClass;
goog.dom.DomHelper.prototype.getAncestor = goog.dom.getAncestor;
goog.provide("goog.structs.Collection");
goog.structs.Collection = function() {
};
goog.structs.Collection.prototype.add;
goog.structs.Collection.prototype.remove;
goog.structs.Collection.prototype.contains;
goog.structs.Collection.prototype.getCount;
goog.provide("goog.structs.Set");
goog.require("goog.structs");
goog.require("goog.structs.Collection");
goog.require("goog.structs.Map");
goog.structs.Set = function(opt_values) {
  this.map_ = new goog.structs.Map;
  if(opt_values) {
    this.addAll(opt_values)
  }
};
goog.structs.Set.getKey_ = function(val) {
  var type = typeof val;
  if(type == "object" && val || type == "function") {
    return"o" + goog.getUid(val)
  }else {
    return type.substr(0, 1) + val
  }
};
goog.structs.Set.prototype.getCount = function() {
  return this.map_.getCount()
};
goog.structs.Set.prototype.add = function(element) {
  this.map_.set(goog.structs.Set.getKey_(element), element)
};
goog.structs.Set.prototype.addAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for(var i = 0;i < l;i++) {
    this.add(values[i])
  }
};
goog.structs.Set.prototype.removeAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for(var i = 0;i < l;i++) {
    this.remove(values[i])
  }
};
goog.structs.Set.prototype.remove = function(element) {
  return this.map_.remove(goog.structs.Set.getKey_(element))
};
goog.structs.Set.prototype.clear = function() {
  this.map_.clear()
};
goog.structs.Set.prototype.isEmpty = function() {
  return this.map_.isEmpty()
};
goog.structs.Set.prototype.contains = function(element) {
  return this.map_.containsKey(goog.structs.Set.getKey_(element))
};
goog.structs.Set.prototype.containsAll = function(col) {
  return goog.structs.every(col, this.contains, this)
};
goog.structs.Set.prototype.intersection = function(col) {
  var result = new goog.structs.Set;
  var values = goog.structs.getValues(col);
  for(var i = 0;i < values.length;i++) {
    var value = values[i];
    if(this.contains(value)) {
      result.add(value)
    }
  }
  return result
};
goog.structs.Set.prototype.getValues = function() {
  return this.map_.getValues()
};
goog.structs.Set.prototype.clone = function() {
  return new goog.structs.Set(this)
};
goog.structs.Set.prototype.equals = function(col) {
  return this.getCount() == goog.structs.getCount(col) && this.isSubsetOf(col)
};
goog.structs.Set.prototype.isSubsetOf = function(col) {
  var colCount = goog.structs.getCount(col);
  if(this.getCount() > colCount) {
    return false
  }
  if(!(col instanceof goog.structs.Set) && colCount > 5) {
    col = new goog.structs.Set(col)
  }
  return goog.structs.every(this, function(value) {
    return goog.structs.contains(col, value)
  })
};
goog.structs.Set.prototype.__iterator__ = function(opt_keys) {
  return this.map_.__iterator__(false)
};
goog.provide("goog.debug");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs.Set");
goog.require("goog.userAgent");
goog.debug.catchErrors = function(logFunc, opt_cancel, opt_target) {
  var target = opt_target || goog.global;
  var oldErrorHandler = target.onerror;
  var retVal = goog.userAgent.WEBKIT ? !opt_cancel : !!opt_cancel;
  target.onerror = function(message, url, line) {
    if(oldErrorHandler) {
      oldErrorHandler(message, url, line)
    }
    logFunc({message:message, fileName:url, line:line});
    return retVal
  }
};
goog.debug.expose = function(obj, opt_showFn) {
  if(typeof obj == "undefined") {
    return"undefined"
  }
  if(obj == null) {
    return"NULL"
  }
  var str = [];
  for(var x in obj) {
    if(!opt_showFn && goog.isFunction(obj[x])) {
      continue
    }
    var s = x + " = ";
    try {
      s += obj[x]
    }catch(e) {
      s += "*** " + e + " ***"
    }
    str.push(s)
  }
  return str.join("\n")
};
goog.debug.deepExpose = function(obj, opt_showFn) {
  var previous = new goog.structs.Set;
  var str = [];
  var helper = function(obj, space) {
    var nestspace = space + "  ";
    var indentMultiline = function(str) {
      return str.replace(/\n/g, "\n" + space)
    };
    try {
      if(!goog.isDef(obj)) {
        str.push("undefined")
      }else {
        if(goog.isNull(obj)) {
          str.push("NULL")
        }else {
          if(goog.isString(obj)) {
            str.push('"' + indentMultiline(obj) + '"')
          }else {
            if(goog.isFunction(obj)) {
              str.push(indentMultiline(String(obj)))
            }else {
              if(goog.isObject(obj)) {
                if(previous.contains(obj)) {
                  str.push("*** reference loop detected ***")
                }else {
                  previous.add(obj);
                  str.push("{");
                  for(var x in obj) {
                    if(!opt_showFn && goog.isFunction(obj[x])) {
                      continue
                    }
                    str.push("\n");
                    str.push(nestspace);
                    str.push(x + " = ");
                    helper(obj[x], nestspace)
                  }
                  str.push("\n" + space + "}")
                }
              }else {
                str.push(obj)
              }
            }
          }
        }
      }
    }catch(e) {
      str.push("*** " + e + " ***")
    }
  };
  helper(obj, "");
  return str.join("")
};
goog.debug.exposeArray = function(arr) {
  var str = [];
  for(var i = 0;i < arr.length;i++) {
    if(goog.isArray(arr[i])) {
      str.push(goog.debug.exposeArray(arr[i]))
    }else {
      str.push(arr[i])
    }
  }
  return"[ " + str.join(", ") + " ]"
};
goog.debug.exposeException = function(err, opt_fn) {
  try {
    var e = goog.debug.normalizeErrorObject(err);
    var error = "Message: " + goog.string.htmlEscape(e.message) + '\nUrl: <a href="view-source:' + e.fileName + '" target="_new">' + e.fileName + "</a>\nLine: " + e.lineNumber + "\n\nBrowser stack:\n" + goog.string.htmlEscape(e.stack + "-> ") + "[end]\n\nJS stack traversal:\n" + goog.string.htmlEscape(goog.debug.getStacktrace(opt_fn) + "-> ");
    return error
  }catch(e2) {
    return"Exception trying to expose exception! You win, we lose. " + e2
  }
};
goog.debug.normalizeErrorObject = function(err) {
  var href = goog.getObjectByName("window.location.href");
  if(goog.isString(err)) {
    return{"message":err, "name":"Unknown error", "lineNumber":"Not available", "fileName":href, "stack":"Not available"}
  }
  var lineNumber, fileName;
  var threwError = false;
  try {
    lineNumber = err.lineNumber || err.line || "Not available"
  }catch(e) {
    lineNumber = "Not available";
    threwError = true
  }
  try {
    fileName = err.fileName || err.filename || err.sourceURL || href
  }catch(e) {
    fileName = "Not available";
    threwError = true
  }
  if(threwError || !err.lineNumber || !err.fileName || !err.stack) {
    return{"message":err.message, "name":err.name, "lineNumber":lineNumber, "fileName":fileName, "stack":err.stack || "Not available"}
  }
  return err
};
goog.debug.enhanceError = function(err, opt_message) {
  var error = typeof err == "string" ? Error(err) : err;
  if(!error.stack) {
    error.stack = goog.debug.getStacktrace(arguments.callee.caller)
  }
  if(opt_message) {
    var x = 0;
    while(error["message" + x]) {
      ++x
    }
    error["message" + x] = String(opt_message)
  }
  return error
};
goog.debug.getStacktraceSimple = function(opt_depth) {
  var sb = [];
  var fn = arguments.callee.caller;
  var depth = 0;
  while(fn && (!opt_depth || depth < opt_depth)) {
    sb.push(goog.debug.getFunctionName(fn));
    sb.push("()\n");
    try {
      fn = fn.caller
    }catch(e) {
      sb.push("[exception trying to get caller]\n");
      break
    }
    depth++;
    if(depth >= goog.debug.MAX_STACK_DEPTH) {
      sb.push("[...long stack...]");
      break
    }
  }
  if(opt_depth && depth >= opt_depth) {
    sb.push("[...reached max depth limit...]")
  }else {
    sb.push("[end]")
  }
  return sb.join("")
};
goog.debug.MAX_STACK_DEPTH = 50;
goog.debug.getStacktrace = function(opt_fn) {
  return goog.debug.getStacktraceHelper_(opt_fn || arguments.callee.caller, [])
};
goog.debug.getStacktraceHelper_ = function(fn, visited) {
  var sb = [];
  if(goog.array.contains(visited, fn)) {
    sb.push("[...circular reference...]")
  }else {
    if(fn && visited.length < goog.debug.MAX_STACK_DEPTH) {
      sb.push(goog.debug.getFunctionName(fn) + "(");
      var args = fn.arguments;
      for(var i = 0;i < args.length;i++) {
        if(i > 0) {
          sb.push(", ")
        }
        var argDesc;
        var arg = args[i];
        switch(typeof arg) {
          case "object":
            argDesc = arg ? "object" : "null";
            break;
          case "string":
            argDesc = arg;
            break;
          case "number":
            argDesc = String(arg);
            break;
          case "boolean":
            argDesc = arg ? "true" : "false";
            break;
          case "function":
            argDesc = goog.debug.getFunctionName(arg);
            argDesc = argDesc ? argDesc : "[fn]";
            break;
          case "undefined":
          ;
          default:
            argDesc = typeof arg;
            break
        }
        if(argDesc.length > 40) {
          argDesc = argDesc.substr(0, 40) + "..."
        }
        sb.push(argDesc)
      }
      visited.push(fn);
      sb.push(")\n");
      try {
        sb.push(goog.debug.getStacktraceHelper_(fn.caller, visited))
      }catch(e) {
        sb.push("[exception trying to get caller]\n")
      }
    }else {
      if(fn) {
        sb.push("[...long stack...]")
      }else {
        sb.push("[end]")
      }
    }
  }
  return sb.join("")
};
goog.debug.setFunctionResolver = function(resolver) {
  goog.debug.fnNameResolver_ = resolver
};
goog.debug.getFunctionName = function(fn) {
  if(goog.debug.fnNameCache_[fn]) {
    return goog.debug.fnNameCache_[fn]
  }
  if(goog.debug.fnNameResolver_) {
    var name = goog.debug.fnNameResolver_(fn);
    if(name) {
      goog.debug.fnNameCache_[fn] = name;
      return name
    }
  }
  var functionSource = String(fn);
  if(!goog.debug.fnNameCache_[functionSource]) {
    var matches = /function ([^\(]+)/.exec(functionSource);
    if(matches) {
      var method = matches[1];
      goog.debug.fnNameCache_[functionSource] = method
    }else {
      goog.debug.fnNameCache_[functionSource] = "[Anonymous]"
    }
  }
  return goog.debug.fnNameCache_[functionSource]
};
goog.debug.makeWhitespaceVisible = function(string) {
  return string.replace(/ /g, "[_]").replace(/\f/g, "[f]").replace(/\n/g, "[n]\n").replace(/\r/g, "[r]").replace(/\t/g, "[t]")
};
goog.debug.fnNameCache_ = {};
goog.debug.fnNameResolver_;
goog.provide("goog.debug.LogRecord");
goog.debug.LogRecord = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  this.reset(level, msg, loggerName, opt_time, opt_sequenceNumber)
};
goog.debug.LogRecord.prototype.time_;
goog.debug.LogRecord.prototype.level_;
goog.debug.LogRecord.prototype.msg_;
goog.debug.LogRecord.prototype.loggerName_;
goog.debug.LogRecord.prototype.sequenceNumber_ = 0;
goog.debug.LogRecord.prototype.exception_ = null;
goog.debug.LogRecord.prototype.exceptionText_ = null;
goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS = true;
goog.debug.LogRecord.nextSequenceNumber_ = 0;
goog.debug.LogRecord.prototype.reset = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  if(goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS) {
    this.sequenceNumber_ = typeof opt_sequenceNumber == "number" ? opt_sequenceNumber : goog.debug.LogRecord.nextSequenceNumber_++
  }
  this.time_ = opt_time || goog.now();
  this.level_ = level;
  this.msg_ = msg;
  this.loggerName_ = loggerName;
  delete this.exception_;
  delete this.exceptionText_
};
goog.debug.LogRecord.prototype.getLoggerName = function() {
  return this.loggerName_
};
goog.debug.LogRecord.prototype.getException = function() {
  return this.exception_
};
goog.debug.LogRecord.prototype.setException = function(exception) {
  this.exception_ = exception
};
goog.debug.LogRecord.prototype.getExceptionText = function() {
  return this.exceptionText_
};
goog.debug.LogRecord.prototype.setExceptionText = function(text) {
  this.exceptionText_ = text
};
goog.debug.LogRecord.prototype.setLoggerName = function(loggerName) {
  this.loggerName_ = loggerName
};
goog.debug.LogRecord.prototype.getLevel = function() {
  return this.level_
};
goog.debug.LogRecord.prototype.setLevel = function(level) {
  this.level_ = level
};
goog.debug.LogRecord.prototype.getMessage = function() {
  return this.msg_
};
goog.debug.LogRecord.prototype.setMessage = function(msg) {
  this.msg_ = msg
};
goog.debug.LogRecord.prototype.getMillis = function() {
  return this.time_
};
goog.debug.LogRecord.prototype.setMillis = function(time) {
  this.time_ = time
};
goog.debug.LogRecord.prototype.getSequenceNumber = function() {
  return this.sequenceNumber_
};
goog.provide("goog.debug.LogBuffer");
goog.require("goog.asserts");
goog.require("goog.debug.LogRecord");
goog.debug.LogBuffer = function() {
  goog.asserts.assert(goog.debug.LogBuffer.isBufferingEnabled(), "Cannot use goog.debug.LogBuffer without defining " + "goog.debug.LogBuffer.CAPACITY.");
  this.clear()
};
goog.debug.LogBuffer.getInstance = function() {
  if(!goog.debug.LogBuffer.instance_) {
    goog.debug.LogBuffer.instance_ = new goog.debug.LogBuffer
  }
  return goog.debug.LogBuffer.instance_
};
goog.debug.LogBuffer.CAPACITY = 0;
goog.debug.LogBuffer.prototype.buffer_;
goog.debug.LogBuffer.prototype.curIndex_;
goog.debug.LogBuffer.prototype.isFull_;
goog.debug.LogBuffer.prototype.addRecord = function(level, msg, loggerName) {
  var curIndex = (this.curIndex_ + 1) % goog.debug.LogBuffer.CAPACITY;
  this.curIndex_ = curIndex;
  if(this.isFull_) {
    var ret = this.buffer_[curIndex];
    ret.reset(level, msg, loggerName);
    return ret
  }
  this.isFull_ = curIndex == goog.debug.LogBuffer.CAPACITY - 1;
  return this.buffer_[curIndex] = new goog.debug.LogRecord(level, msg, loggerName)
};
goog.debug.LogBuffer.isBufferingEnabled = function() {
  return goog.debug.LogBuffer.CAPACITY > 0
};
goog.debug.LogBuffer.prototype.clear = function() {
  this.buffer_ = new Array(goog.debug.LogBuffer.CAPACITY);
  this.curIndex_ = -1;
  this.isFull_ = false
};
goog.debug.LogBuffer.prototype.forEachRecord = function(func) {
  var buffer = this.buffer_;
  if(!buffer[0]) {
    return
  }
  var curIndex = this.curIndex_;
  var i = this.isFull_ ? curIndex : -1;
  do {
    i = (i + 1) % goog.debug.LogBuffer.CAPACITY;
    func(buffer[i])
  }while(i != curIndex)
};
goog.provide("goog.debug.LogManager");
goog.provide("goog.debug.Logger");
goog.provide("goog.debug.Logger.Level");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug");
goog.require("goog.debug.LogBuffer");
goog.require("goog.debug.LogRecord");
goog.debug.Logger = function(name) {
  this.name_ = name
};
goog.debug.Logger.prototype.parent_ = null;
goog.debug.Logger.prototype.level_ = null;
goog.debug.Logger.prototype.children_ = null;
goog.debug.Logger.prototype.handlers_ = null;
goog.debug.Logger.ENABLE_HIERARCHY = true;
if(!goog.debug.Logger.ENABLE_HIERARCHY) {
  goog.debug.Logger.rootHandlers_ = [];
  goog.debug.Logger.rootLevel_
}
goog.debug.Logger.Level = function(name, value) {
  this.name = name;
  this.value = value
};
goog.debug.Logger.Level.prototype.toString = function() {
  return this.name
};
goog.debug.Logger.Level.OFF = new goog.debug.Logger.Level("OFF", Infinity);
goog.debug.Logger.Level.SHOUT = new goog.debug.Logger.Level("SHOUT", 1200);
goog.debug.Logger.Level.SEVERE = new goog.debug.Logger.Level("SEVERE", 1E3);
goog.debug.Logger.Level.WARNING = new goog.debug.Logger.Level("WARNING", 900);
goog.debug.Logger.Level.INFO = new goog.debug.Logger.Level("INFO", 800);
goog.debug.Logger.Level.CONFIG = new goog.debug.Logger.Level("CONFIG", 700);
goog.debug.Logger.Level.FINE = new goog.debug.Logger.Level("FINE", 500);
goog.debug.Logger.Level.FINER = new goog.debug.Logger.Level("FINER", 400);
goog.debug.Logger.Level.FINEST = new goog.debug.Logger.Level("FINEST", 300);
goog.debug.Logger.Level.ALL = new goog.debug.Logger.Level("ALL", 0);
goog.debug.Logger.Level.PREDEFINED_LEVELS = [goog.debug.Logger.Level.OFF, goog.debug.Logger.Level.SHOUT, goog.debug.Logger.Level.SEVERE, goog.debug.Logger.Level.WARNING, goog.debug.Logger.Level.INFO, goog.debug.Logger.Level.CONFIG, goog.debug.Logger.Level.FINE, goog.debug.Logger.Level.FINER, goog.debug.Logger.Level.FINEST, goog.debug.Logger.Level.ALL];
goog.debug.Logger.Level.predefinedLevelsCache_ = null;
goog.debug.Logger.Level.createPredefinedLevelsCache_ = function() {
  goog.debug.Logger.Level.predefinedLevelsCache_ = {};
  for(var i = 0, level;level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];i++) {
    goog.debug.Logger.Level.predefinedLevelsCache_[level.value] = level;
    goog.debug.Logger.Level.predefinedLevelsCache_[level.name] = level
  }
};
goog.debug.Logger.Level.getPredefinedLevel = function(name) {
  if(!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_()
  }
  return goog.debug.Logger.Level.predefinedLevelsCache_[name] || null
};
goog.debug.Logger.Level.getPredefinedLevelByValue = function(value) {
  if(!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_()
  }
  if(value in goog.debug.Logger.Level.predefinedLevelsCache_) {
    return goog.debug.Logger.Level.predefinedLevelsCache_[value]
  }
  for(var i = 0;i < goog.debug.Logger.Level.PREDEFINED_LEVELS.length;++i) {
    var level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];
    if(level.value <= value) {
      return level
    }
  }
  return null
};
goog.debug.Logger.getLogger = function(name) {
  return goog.debug.LogManager.getLogger(name)
};
goog.debug.Logger.logToProfilers = function(msg) {
  if(goog.global["console"]) {
    if(goog.global["console"]["timeStamp"]) {
      goog.global["console"]["timeStamp"](msg)
    }else {
      if(goog.global["console"]["markTimeline"]) {
        goog.global["console"]["markTimeline"](msg)
      }
    }
  }
  if(goog.global["msWriteProfilerMark"]) {
    goog.global["msWriteProfilerMark"](msg)
  }
};
goog.debug.Logger.prototype.getName = function() {
  return this.name_
};
goog.debug.Logger.prototype.addHandler = function(handler) {
  if(goog.debug.Logger.ENABLE_HIERARCHY) {
    if(!this.handlers_) {
      this.handlers_ = []
    }
    this.handlers_.push(handler)
  }else {
    goog.asserts.assert(!this.name_, "Cannot call addHandler on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
    goog.debug.Logger.rootHandlers_.push(handler)
  }
};
goog.debug.Logger.prototype.removeHandler = function(handler) {
  var handlers = goog.debug.Logger.ENABLE_HIERARCHY ? this.handlers_ : goog.debug.Logger.rootHandlers_;
  return!!handlers && goog.array.remove(handlers, handler)
};
goog.debug.Logger.prototype.getParent = function() {
  return this.parent_
};
goog.debug.Logger.prototype.getChildren = function() {
  if(!this.children_) {
    this.children_ = {}
  }
  return this.children_
};
goog.debug.Logger.prototype.setLevel = function(level) {
  if(goog.debug.Logger.ENABLE_HIERARCHY) {
    this.level_ = level
  }else {
    goog.asserts.assert(!this.name_, "Cannot call setLevel() on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
    goog.debug.Logger.rootLevel_ = level
  }
};
goog.debug.Logger.prototype.getLevel = function() {
  return this.level_
};
goog.debug.Logger.prototype.getEffectiveLevel = function() {
  if(!goog.debug.Logger.ENABLE_HIERARCHY) {
    return goog.debug.Logger.rootLevel_
  }
  if(this.level_) {
    return this.level_
  }
  if(this.parent_) {
    return this.parent_.getEffectiveLevel()
  }
  goog.asserts.fail("Root logger has no level set.");
  return null
};
goog.debug.Logger.prototype.isLoggable = function(level) {
  return level.value >= this.getEffectiveLevel().value
};
goog.debug.Logger.prototype.log = function(level, msg, opt_exception) {
  if(this.isLoggable(level)) {
    this.doLogRecord_(this.getLogRecord(level, msg, opt_exception))
  }
};
goog.debug.Logger.prototype.getLogRecord = function(level, msg, opt_exception) {
  if(goog.debug.LogBuffer.isBufferingEnabled()) {
    var logRecord = goog.debug.LogBuffer.getInstance().addRecord(level, msg, this.name_)
  }else {
    logRecord = new goog.debug.LogRecord(level, String(msg), this.name_)
  }
  if(opt_exception) {
    logRecord.setException(opt_exception);
    logRecord.setExceptionText(goog.debug.exposeException(opt_exception, arguments.callee.caller))
  }
  return logRecord
};
goog.debug.Logger.prototype.shout = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.SHOUT, msg, opt_exception)
};
goog.debug.Logger.prototype.severe = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.SEVERE, msg, opt_exception)
};
goog.debug.Logger.prototype.warning = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.WARNING, msg, opt_exception)
};
goog.debug.Logger.prototype.info = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.INFO, msg, opt_exception)
};
goog.debug.Logger.prototype.config = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.CONFIG, msg, opt_exception)
};
goog.debug.Logger.prototype.fine = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.FINE, msg, opt_exception)
};
goog.debug.Logger.prototype.finer = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.FINER, msg, opt_exception)
};
goog.debug.Logger.prototype.finest = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.FINEST, msg, opt_exception)
};
goog.debug.Logger.prototype.logRecord = function(logRecord) {
  if(this.isLoggable(logRecord.getLevel())) {
    this.doLogRecord_(logRecord)
  }
};
goog.debug.Logger.prototype.doLogRecord_ = function(logRecord) {
  goog.debug.Logger.logToProfilers("log:" + logRecord.getMessage());
  if(goog.debug.Logger.ENABLE_HIERARCHY) {
    var target = this;
    while(target) {
      target.callPublish_(logRecord);
      target = target.getParent()
    }
  }else {
    for(var i = 0, handler;handler = goog.debug.Logger.rootHandlers_[i++];) {
      handler(logRecord)
    }
  }
};
goog.debug.Logger.prototype.callPublish_ = function(logRecord) {
  if(this.handlers_) {
    for(var i = 0, handler;handler = this.handlers_[i];i++) {
      handler(logRecord)
    }
  }
};
goog.debug.Logger.prototype.setParent_ = function(parent) {
  this.parent_ = parent
};
goog.debug.Logger.prototype.addChild_ = function(name, logger) {
  this.getChildren()[name] = logger
};
goog.debug.LogManager = {};
goog.debug.LogManager.loggers_ = {};
goog.debug.LogManager.rootLogger_ = null;
goog.debug.LogManager.initialize = function() {
  if(!goog.debug.LogManager.rootLogger_) {
    goog.debug.LogManager.rootLogger_ = new goog.debug.Logger("");
    goog.debug.LogManager.loggers_[""] = goog.debug.LogManager.rootLogger_;
    goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG)
  }
};
goog.debug.LogManager.getLoggers = function() {
  return goog.debug.LogManager.loggers_
};
goog.debug.LogManager.getRoot = function() {
  goog.debug.LogManager.initialize();
  return goog.debug.LogManager.rootLogger_
};
goog.debug.LogManager.getLogger = function(name) {
  goog.debug.LogManager.initialize();
  var ret = goog.debug.LogManager.loggers_[name];
  return ret || goog.debug.LogManager.createLogger_(name)
};
goog.debug.LogManager.createFunctionForCatchErrors = function(opt_logger) {
  return function(info) {
    var logger = opt_logger || goog.debug.LogManager.getRoot();
    logger.severe("Error: " + info.message + " (" + info.fileName + " @ Line: " + info.line + ")")
  }
};
goog.debug.LogManager.createLogger_ = function(name) {
  var logger = new goog.debug.Logger(name);
  if(goog.debug.Logger.ENABLE_HIERARCHY) {
    var lastDotIndex = name.lastIndexOf(".");
    var parentName = name.substr(0, lastDotIndex);
    var leafName = name.substr(lastDotIndex + 1);
    var parentLogger = goog.debug.LogManager.getLogger(parentName);
    parentLogger.addChild_(leafName, logger);
    logger.setParent_(parentLogger)
  }
  goog.debug.LogManager.loggers_[name] = logger;
  return logger
};
goog.provide("goog.messaging.MessageChannel");
goog.messaging.MessageChannel = function() {
};
goog.messaging.MessageChannel.prototype.connect = function(opt_connectCb) {
};
goog.messaging.MessageChannel.prototype.isConnected = function() {
};
goog.messaging.MessageChannel.prototype.registerService = function(serviceName, callback, opt_objectPayload) {
};
goog.messaging.MessageChannel.prototype.registerDefaultService = function(callback) {
};
goog.messaging.MessageChannel.prototype.send = function(serviceName, payload) {
};
goog.provide("goog.messaging.AbstractChannel");
goog.require("goog.Disposable");
goog.require("goog.debug");
goog.require("goog.debug.Logger");
goog.require("goog.json");
goog.require("goog.messaging.MessageChannel");
goog.messaging.AbstractChannel = function() {
  goog.base(this);
  this.services_ = {}
};
goog.inherits(goog.messaging.AbstractChannel, goog.Disposable);
goog.messaging.AbstractChannel.prototype.defaultService_;
goog.messaging.AbstractChannel.prototype.logger = goog.debug.Logger.getLogger("goog.messaging.AbstractChannel");
goog.messaging.AbstractChannel.prototype.connect = function(opt_connectCb) {
  if(opt_connectCb) {
    opt_connectCb()
  }
};
goog.messaging.AbstractChannel.prototype.isConnected = function() {
  return true
};
goog.messaging.AbstractChannel.prototype.registerService = function(serviceName, callback, opt_objectPayload) {
  this.services_[serviceName] = {callback:callback, objectPayload:!!opt_objectPayload}
};
goog.messaging.AbstractChannel.prototype.registerDefaultService = function(callback) {
  this.defaultService_ = callback
};
goog.messaging.AbstractChannel.prototype.send = goog.abstractMethod;
goog.messaging.AbstractChannel.prototype.deliver = function(serviceName, payload) {
  var service = this.getService(serviceName, payload);
  if(!service) {
    return
  }
  var decodedPayload = this.decodePayload(serviceName, payload, service.objectPayload);
  if(goog.isDefAndNotNull(decodedPayload)) {
    service.callback(decodedPayload)
  }
};
goog.messaging.AbstractChannel.prototype.getService = function(serviceName, payload) {
  var service = this.services_[serviceName];
  if(service) {
    return service
  }else {
    if(this.defaultService_) {
      var callback = goog.partial(this.defaultService_, serviceName);
      var objectPayload = goog.isObject(payload);
      return{callback:callback, objectPayload:objectPayload}
    }
  }
  this.logger.warning('Unknown service name "' + serviceName + '"');
  return null
};
goog.messaging.AbstractChannel.prototype.decodePayload = function(serviceName, payload, objectPayload) {
  if(objectPayload && goog.isString(payload)) {
    try {
      return goog.json.parse(payload)
    }catch(err) {
      this.logger.warning("Expected JSON payload for " + serviceName + ', was "' + payload + '"');
      return null
    }
  }else {
    if(!objectPayload && !goog.isString(payload)) {
      return goog.json.serialize(payload)
    }
  }
  return payload
};
goog.messaging.AbstractChannel.prototype.disposeInternal = function() {
  goog.base(this, "disposeInternal");
  goog.dispose(this.logger);
  delete this.logger;
  delete this.services_;
  delete this.defaultService_
};
goog.provide("goog.net.xpc");
goog.provide("goog.net.xpc.CfgFields");
goog.provide("goog.net.xpc.ChannelStates");
goog.provide("goog.net.xpc.TransportNames");
goog.provide("goog.net.xpc.TransportTypes");
goog.provide("goog.net.xpc.UriCfgFields");
goog.require("goog.debug.Logger");
goog.net.xpc.TransportTypes = {NATIVE_MESSAGING:1, FRAME_ELEMENT_METHOD:2, IFRAME_RELAY:3, IFRAME_POLLING:4, FLASH:5, NIX:6};
goog.net.xpc.TransportNames = {1:"NativeMessagingTransport", 2:"FrameElementMethodTransport", 3:"IframeRelayTransport", 4:"IframePollingTransport", 5:"FlashTransport", 6:"NixTransport"};
goog.net.xpc.CfgFields = {CHANNEL_NAME:"cn", AUTH_TOKEN:"at", REMOTE_AUTH_TOKEN:"rat", PEER_URI:"pu", IFRAME_ID:"ifrid", TRANSPORT:"tp", LOCAL_RELAY_URI:"lru", PEER_RELAY_URI:"pru", LOCAL_POLL_URI:"lpu", PEER_POLL_URI:"ppu", PEER_HOSTNAME:"ph"};
goog.net.xpc.UriCfgFields = [goog.net.xpc.CfgFields.PEER_URI, goog.net.xpc.CfgFields.LOCAL_RELAY_URI, goog.net.xpc.CfgFields.PEER_RELAY_URI, goog.net.xpc.CfgFields.LOCAL_POLL_URI, goog.net.xpc.CfgFields.PEER_POLL_URI];
goog.net.xpc.ChannelStates = {NOT_CONNECTED:1, CONNECTED:2, CLOSED:3};
goog.net.xpc.TRANSPORT_SERVICE_ = "tp";
goog.net.xpc.SETUP = "SETUP";
goog.net.xpc.SETUP_ACK_ = "SETUP_ACK";
goog.net.xpc.channels_ = {};
goog.net.xpc.getRandomString = function(length, opt_characters) {
  var chars = opt_characters || goog.net.xpc.randomStringCharacters_;
  var charsLength = chars.length;
  var s = "";
  while(length-- > 0) {
    s += chars.charAt(Math.floor(Math.random() * charsLength))
  }
  return s
};
goog.net.xpc.randomStringCharacters_ = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
goog.net.xpc.logger = goog.debug.Logger.getLogger("goog.net.xpc");
goog.provide("goog.net.xpc.CrossPageChannelRole");
goog.net.xpc.CrossPageChannelRole = {OUTER:0, INNER:1};
goog.provide("goog.net.xpc.Transport");
goog.require("goog.Disposable");
goog.require("goog.dom");
goog.require("goog.net.xpc");
goog.net.xpc.Transport = function(opt_domHelper) {
  goog.Disposable.call(this);
  this.domHelper_ = opt_domHelper || goog.dom.getDomHelper()
};
goog.inherits(goog.net.xpc.Transport, goog.Disposable);
goog.net.xpc.Transport.prototype.transportType = 0;
goog.net.xpc.Transport.prototype.getType = function() {
  return this.transportType
};
goog.net.xpc.Transport.prototype.getWindow = function() {
  return this.domHelper_.getWindow()
};
goog.net.xpc.Transport.prototype.getName = function() {
  return goog.net.xpc.TransportNames[this.transportType] || ""
};
goog.net.xpc.Transport.prototype.transportServiceHandler = goog.abstractMethod;
goog.net.xpc.Transport.prototype.connect = goog.abstractMethod;
goog.net.xpc.Transport.prototype.send = goog.abstractMethod;
goog.provide("goog.net.xpc.FrameElementMethodTransport");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.net.xpc.FrameElementMethodTransport = function(channel, opt_domHelper) {
  goog.base(this, opt_domHelper);
  this.channel_ = channel;
  this.queue_ = [];
  this.deliverQueuedCb_ = goog.bind(this.deliverQueued_, this)
};
goog.inherits(goog.net.xpc.FrameElementMethodTransport, goog.net.xpc.Transport);
goog.net.xpc.FrameElementMethodTransport.prototype.transportType = goog.net.xpc.TransportTypes.FRAME_ELEMENT_METHOD;
goog.net.xpc.FrameElementMethodTransport.prototype.recursive_ = false;
goog.net.xpc.FrameElementMethodTransport.prototype.timer_ = 0;
goog.net.xpc.FrameElementMethodTransport.outgoing_ = null;
goog.net.xpc.FrameElementMethodTransport.prototype.connect = function() {
  if(this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER) {
    this.iframeElm_ = this.channel_.iframeElement_;
    this.iframeElm_["XPC_toOuter"] = goog.bind(this.incoming_, this)
  }else {
    this.attemptSetup_()
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.attemptSetup_ = function() {
  var retry = true;
  try {
    if(!this.iframeElm_) {
      this.iframeElm_ = this.getWindow().frameElement
    }
    if(this.iframeElm_ && this.iframeElm_["XPC_toOuter"]) {
      this.outgoing_ = this.iframeElm_["XPC_toOuter"];
      this.iframeElm_["XPC_toOuter"]["XPC_toInner"] = goog.bind(this.incoming_, this);
      retry = false;
      this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
      this.channel_.notifyConnected_()
    }
  }catch(e) {
    goog.net.xpc.logger.severe("exception caught while attempting setup: " + e)
  }
  if(retry) {
    if(!this.attemptSetupCb_) {
      this.attemptSetupCb_ = goog.bind(this.attemptSetup_, this)
    }
    this.getWindow().setTimeout(this.attemptSetupCb_, 100)
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.transportServiceHandler = function(payload) {
  if(this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER && !this.channel_.isConnected() && payload == goog.net.xpc.SETUP_ACK_) {
    this.outgoing_ = this.iframeElm_["XPC_toOuter"]["XPC_toInner"];
    this.channel_.notifyConnected_()
  }else {
    throw Error("Got unexpected transport message.");
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.incoming_ = function(serviceName, payload) {
  if(!this.recursive_ && this.queue_.length == 0) {
    this.channel_.deliver_(serviceName, payload)
  }else {
    this.queue_.push({serviceName:serviceName, payload:payload});
    if(this.queue_.length == 1) {
      this.timer_ = this.getWindow().setTimeout(this.deliverQueuedCb_, 1)
    }
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.deliverQueued_ = function() {
  while(this.queue_.length) {
    var msg = this.queue_.shift();
    this.channel_.deliver_(msg.serviceName, msg.payload)
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.send = function(service, payload) {
  this.recursive_ = true;
  this.outgoing_(service, payload);
  this.recursive_ = false
};
goog.net.xpc.FrameElementMethodTransport.prototype.disposeInternal = function() {
  goog.net.xpc.FrameElementMethodTransport.superClass_.disposeInternal.call(this);
  this.outgoing_ = null;
  this.iframeElm_ = null
};
goog.provide("goog.net.xpc.IframePollingTransport");
goog.provide("goog.net.xpc.IframePollingTransport.Receiver");
goog.provide("goog.net.xpc.IframePollingTransport.Sender");
goog.require("goog.array");
goog.require("goog.dom");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.userAgent");
goog.net.xpc.IframePollingTransport = function(channel, opt_domHelper) {
  goog.base(this, opt_domHelper);
  this.channel_ = channel;
  this.sendUri_ = this.channel_.cfg_[goog.net.xpc.CfgFields.PEER_POLL_URI];
  this.rcvUri_ = this.channel_.cfg_[goog.net.xpc.CfgFields.LOCAL_POLL_URI];
  this.sendQueue_ = []
};
goog.inherits(goog.net.xpc.IframePollingTransport, goog.net.xpc.Transport);
goog.net.xpc.IframePollingTransport.prototype.transportType = goog.net.xpc.TransportTypes.IFRAME_POLLING;
goog.net.xpc.IframePollingTransport.prototype.sequence_ = 0;
goog.net.xpc.IframePollingTransport.prototype.waitForAck_ = false;
goog.net.xpc.IframePollingTransport.prototype.initialized_ = false;
goog.net.xpc.IframePollingTransport.IFRAME_PREFIX = "googlexpc";
goog.net.xpc.IframePollingTransport.prototype.getMsgFrameName_ = function() {
  return goog.net.xpc.IframePollingTransport.IFRAME_PREFIX + "_" + this.channel_.name + "_msg"
};
goog.net.xpc.IframePollingTransport.prototype.getAckFrameName_ = function() {
  return goog.net.xpc.IframePollingTransport.IFRAME_PREFIX + "_" + this.channel_.name + "_ack"
};
goog.net.xpc.IframePollingTransport.prototype.connect = function() {
  if(this.isDisposed()) {
    return
  }
  goog.net.xpc.logger.fine("transport connect called");
  if(!this.initialized_) {
    goog.net.xpc.logger.fine("initializing...");
    this.constructSenderFrames_();
    this.initialized_ = true
  }
  this.checkForeignFramesReady_()
};
goog.net.xpc.IframePollingTransport.prototype.constructSenderFrames_ = function() {
  var name = this.getMsgFrameName_();
  this.msgIframeElm_ = this.constructSenderFrame_(name);
  this.msgWinObj_ = this.getWindow().frames[name];
  name = this.getAckFrameName_();
  this.ackIframeElm_ = this.constructSenderFrame_(name);
  this.ackWinObj_ = this.getWindow().frames[name]
};
goog.net.xpc.IframePollingTransport.prototype.constructSenderFrame_ = function(id) {
  goog.net.xpc.logger.finest("constructing sender frame: " + id);
  var ifr = goog.dom.createElement("iframe");
  var s = ifr.style;
  s.position = "absolute";
  s.top = "-10px";
  s.left = "10px";
  s.width = "1px";
  s.height = "1px";
  ifr.id = ifr.name = id;
  ifr.src = this.sendUri_ + "#INITIAL";
  this.getWindow().document.body.appendChild(ifr);
  return ifr
};
goog.net.xpc.IframePollingTransport.prototype.innerPeerReconnect_ = function() {
  goog.net.xpc.logger.finest("innerPeerReconnect called");
  this.channel_.name = goog.net.xpc.getRandomString(10);
  goog.net.xpc.logger.finest("switching channels: " + this.channel_.name);
  this.deconstructSenderFrames_();
  this.initialized_ = false;
  this.reconnectFrame_ = this.constructSenderFrame_(goog.net.xpc.IframePollingTransport.IFRAME_PREFIX + "_reconnect_" + this.channel_.name)
};
goog.net.xpc.IframePollingTransport.prototype.outerPeerReconnect_ = function() {
  goog.net.xpc.logger.finest("outerPeerReconnect called");
  var frames = this.channel_.peerWindowObject_.frames;
  var length = frames.length;
  for(var i = 0;i < length;i++) {
    var frameName;
    try {
      if(frames[i] && frames[i].name) {
        frameName = frames[i].name
      }
    }catch(e) {
    }
    if(!frameName) {
      continue
    }
    var message = frameName.split("_");
    if(message.length == 3 && message[0] == goog.net.xpc.IframePollingTransport.IFRAME_PREFIX && message[1] == "reconnect") {
      this.channel_.name = message[2];
      this.deconstructSenderFrames_();
      this.initialized_ = false;
      break
    }
  }
};
goog.net.xpc.IframePollingTransport.prototype.deconstructSenderFrames_ = function() {
  goog.net.xpc.logger.finest("deconstructSenderFrames called");
  if(this.msgIframeElm_) {
    this.msgIframeElm_.parentNode.removeChild(this.msgIframeElm_);
    this.msgIframeElm_ = null;
    this.msgWinObj_ = null
  }
  if(this.ackIframeElm_) {
    this.ackIframeElm_.parentNode.removeChild(this.ackIframeElm_);
    this.ackIframeElm_ = null;
    this.ackWinObj_ = null
  }
};
goog.net.xpc.IframePollingTransport.prototype.checkForeignFramesReady_ = function() {
  if(!(this.isRcvFrameReady_(this.getMsgFrameName_()) && this.isRcvFrameReady_(this.getAckFrameName_()))) {
    goog.net.xpc.logger.finest("foreign frames not (yet) present");
    if(this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.INNER && !this.reconnectFrame_) {
      this.innerPeerReconnect_()
    }else {
      if(this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER) {
        this.outerPeerReconnect_()
      }
    }
    this.getWindow().setTimeout(goog.bind(this.connect, this), 100)
  }else {
    goog.net.xpc.logger.fine("foreign frames present");
    this.msgReceiver_ = new goog.net.xpc.IframePollingTransport.Receiver(this, this.channel_.peerWindowObject_.frames[this.getMsgFrameName_()], goog.bind(this.processIncomingMsg, this));
    this.ackReceiver_ = new goog.net.xpc.IframePollingTransport.Receiver(this, this.channel_.peerWindowObject_.frames[this.getAckFrameName_()], goog.bind(this.processIncomingAck, this));
    this.checkLocalFramesPresent_()
  }
};
goog.net.xpc.IframePollingTransport.prototype.isRcvFrameReady_ = function(frameName) {
  goog.net.xpc.logger.finest("checking for receive frame: " + frameName);
  try {
    var winObj = this.channel_.peerWindowObject_.frames[frameName];
    if(!winObj || winObj.location.href.indexOf(this.rcvUri_) != 0) {
      return false
    }
  }catch(e) {
    return false
  }
  return true
};
goog.net.xpc.IframePollingTransport.prototype.checkLocalFramesPresent_ = function() {
  var frames = this.channel_.peerWindowObject_.frames;
  if(!(frames[this.getAckFrameName_()] && frames[this.getMsgFrameName_()])) {
    if(!this.checkLocalFramesPresentCb_) {
      this.checkLocalFramesPresentCb_ = goog.bind(this.checkLocalFramesPresent_, this)
    }
    this.getWindow().setTimeout(this.checkLocalFramesPresentCb_, 100);
    goog.net.xpc.logger.fine("local frames not (yet) present")
  }else {
    this.msgSender_ = new goog.net.xpc.IframePollingTransport.Sender(this.sendUri_, this.msgWinObj_);
    this.ackSender_ = new goog.net.xpc.IframePollingTransport.Sender(this.sendUri_, this.ackWinObj_);
    goog.net.xpc.logger.fine("local frames ready");
    this.getWindow().setTimeout(goog.bind(function() {
      this.msgSender_.send(goog.net.xpc.SETUP);
      this.sentConnectionSetup_ = true;
      this.waitForAck_ = true;
      goog.net.xpc.logger.fine("SETUP sent")
    }, this), 100)
  }
};
goog.net.xpc.IframePollingTransport.prototype.checkIfConnected_ = function() {
  if(this.sentConnectionSetupAck_ && this.rcvdConnectionSetupAck_) {
    this.channel_.notifyConnected_();
    if(this.deliveryQueue_) {
      goog.net.xpc.logger.fine("delivering queued messages " + "(" + this.deliveryQueue_.length + ")");
      for(var i = 0, m;i < this.deliveryQueue_.length;i++) {
        m = this.deliveryQueue_[i];
        this.channel_.deliver_(m.service, m.payload)
      }
      delete this.deliveryQueue_
    }
  }else {
    goog.net.xpc.logger.finest("checking if connected: " + "ack sent:" + this.sentConnectionSetupAck_ + ", ack rcvd: " + this.rcvdConnectionSetupAck_)
  }
};
goog.net.xpc.IframePollingTransport.prototype.processIncomingMsg = function(raw) {
  goog.net.xpc.logger.finest("msg received: " + raw);
  if(raw == goog.net.xpc.SETUP) {
    if(!this.ackSender_) {
      return
    }
    this.ackSender_.send(goog.net.xpc.SETUP_ACK_);
    goog.net.xpc.logger.finest("SETUP_ACK sent");
    this.sentConnectionSetupAck_ = true;
    this.checkIfConnected_()
  }else {
    if(this.channel_.isConnected() || this.sentConnectionSetupAck_) {
      var pos = raw.indexOf("|");
      var head = raw.substring(0, pos);
      var frame = raw.substring(pos + 1);
      pos = head.indexOf(",");
      if(pos == -1) {
        var seq = head;
        this.ackSender_.send("ACK:" + seq);
        this.deliverPayload_(frame)
      }else {
        var seq = head.substring(0, pos);
        this.ackSender_.send("ACK:" + seq);
        var partInfo = head.substring(pos + 1).split("/");
        var part0 = parseInt(partInfo[0], 10);
        var part1 = parseInt(partInfo[1], 10);
        if(part0 == 1) {
          this.parts_ = []
        }
        this.parts_.push(frame);
        if(part0 == part1) {
          this.deliverPayload_(this.parts_.join(""));
          delete this.parts_
        }
      }
    }else {
      goog.net.xpc.logger.warning("received msg, but channel is not connected")
    }
  }
};
goog.net.xpc.IframePollingTransport.prototype.processIncomingAck = function(msgStr) {
  goog.net.xpc.logger.finest("ack received: " + msgStr);
  if(msgStr == goog.net.xpc.SETUP_ACK_) {
    this.waitForAck_ = false;
    this.rcvdConnectionSetupAck_ = true;
    this.checkIfConnected_()
  }else {
    if(this.channel_.isConnected()) {
      if(!this.waitForAck_) {
        goog.net.xpc.logger.warning("got unexpected ack");
        return
      }
      var seq = parseInt(msgStr.split(":")[1], 10);
      if(seq == this.sequence_) {
        this.waitForAck_ = false;
        this.sendNextFrame_()
      }else {
        goog.net.xpc.logger.warning("got ack with wrong sequence")
      }
    }else {
      goog.net.xpc.logger.warning("received ack, but channel not connected")
    }
  }
};
goog.net.xpc.IframePollingTransport.prototype.sendNextFrame_ = function() {
  if(this.waitForAck_ || !this.sendQueue_.length) {
    return
  }
  var s = this.sendQueue_.shift();
  ++this.sequence_;
  this.msgSender_.send(this.sequence_ + s);
  goog.net.xpc.logger.finest("msg sent: " + this.sequence_ + s);
  this.waitForAck_ = true
};
goog.net.xpc.IframePollingTransport.prototype.deliverPayload_ = function(s) {
  var pos = s.indexOf(":");
  var service = s.substr(0, pos);
  var payload = s.substring(pos + 1);
  if(!this.channel_.isConnected()) {
    (this.deliveryQueue_ || (this.deliveryQueue_ = [])).push({service:service, payload:payload});
    goog.net.xpc.logger.finest("queued delivery")
  }else {
    this.channel_.deliver_(service, payload)
  }
};
goog.net.xpc.IframePollingTransport.prototype.MAX_FRAME_LENGTH_ = 3800;
goog.net.xpc.IframePollingTransport.prototype.send = function(service, payload) {
  var frame = service + ":" + payload;
  if(!goog.userAgent.IE || payload.length <= this.MAX_FRAME_LENGTH_) {
    this.sendQueue_.push("|" + frame)
  }else {
    var l = payload.length;
    var num = Math.ceil(l / this.MAX_FRAME_LENGTH_);
    var pos = 0;
    var i = 1;
    while(pos < l) {
      this.sendQueue_.push("," + i + "/" + num + "|" + frame.substr(pos, this.MAX_FRAME_LENGTH_));
      i++;
      pos += this.MAX_FRAME_LENGTH_
    }
  }
  this.sendNextFrame_()
};
goog.net.xpc.IframePollingTransport.prototype.disposeInternal = function() {
  goog.base(this, "disposeInternal");
  var receivers = goog.net.xpc.IframePollingTransport.receivers_;
  goog.array.remove(receivers, this.msgReceiver_);
  goog.array.remove(receivers, this.ackReceiver_);
  this.msgReceiver_ = this.ackReceiver_ = null;
  goog.dom.removeNode(this.msgIframeElm_);
  goog.dom.removeNode(this.ackIframeElm_);
  this.msgIframeElm_ = this.ackIframeElm_ = null;
  this.msgWinObj_ = this.ackWinObj_ = null
};
goog.net.xpc.IframePollingTransport.receivers_ = [];
goog.net.xpc.IframePollingTransport.TIME_POLL_SHORT_ = 10;
goog.net.xpc.IframePollingTransport.TIME_POLL_LONG_ = 100;
goog.net.xpc.IframePollingTransport.TIME_SHORT_POLL_AFTER_ACTIVITY_ = 1E3;
goog.net.xpc.IframePollingTransport.receive_ = function() {
  var rcvd = false;
  try {
    for(var i = 0, l = goog.net.xpc.IframePollingTransport.receivers_.length;i < l;i++) {
      rcvd = rcvd || goog.net.xpc.IframePollingTransport.receivers_[i].receive()
    }
  }catch(e) {
    goog.net.xpc.logger.info("receive_() failed: " + e);
    goog.net.xpc.IframePollingTransport.receivers_[i].transport_.channel_.notifyTransportError_();
    if(!goog.net.xpc.IframePollingTransport.receivers_.length) {
      return
    }
  }
  var now = goog.now();
  if(rcvd) {
    goog.net.xpc.IframePollingTransport.lastActivity_ = now
  }
  var t = now - goog.net.xpc.IframePollingTransport.lastActivity_ < goog.net.xpc.IframePollingTransport.TIME_SHORT_POLL_AFTER_ACTIVITY_ ? goog.net.xpc.IframePollingTransport.TIME_POLL_SHORT_ : goog.net.xpc.IframePollingTransport.TIME_POLL_LONG_;
  goog.net.xpc.IframePollingTransport.rcvTimer_ = window.setTimeout(goog.net.xpc.IframePollingTransport.receiveCb_, t)
};
goog.net.xpc.IframePollingTransport.receiveCb_ = goog.bind(goog.net.xpc.IframePollingTransport.receive_, goog.net.xpc.IframePollingTransport);
goog.net.xpc.IframePollingTransport.startRcvTimer_ = function() {
  goog.net.xpc.logger.fine("starting receive-timer");
  goog.net.xpc.IframePollingTransport.lastActivity_ = goog.now();
  if(goog.net.xpc.IframePollingTransport.rcvTimer_) {
    window.clearTimeout(goog.net.xpc.IframePollingTransport.rcvTimer_)
  }
  goog.net.xpc.IframePollingTransport.rcvTimer_ = window.setTimeout(goog.net.xpc.IframePollingTransport.receiveCb_, goog.net.xpc.IframePollingTransport.TIME_POLL_SHORT_)
};
goog.net.xpc.IframePollingTransport.Sender = function(url, windowObj) {
  this.sendUri_ = url;
  this.sendFrame_ = windowObj;
  this.cycle_ = 0
};
goog.net.xpc.IframePollingTransport.Sender.prototype.send = function(payload) {
  this.cycle_ = ++this.cycle_ % 2;
  var url = this.sendUri_ + "#" + this.cycle_ + encodeURIComponent(payload);
  try {
    if(goog.userAgent.WEBKIT) {
      this.sendFrame_.location.href = url
    }else {
      this.sendFrame_.location.replace(url)
    }
  }catch(e) {
    goog.net.xpc.logger.severe("sending failed", e)
  }
  goog.net.xpc.IframePollingTransport.startRcvTimer_()
};
goog.net.xpc.IframePollingTransport.Receiver = function(transport, windowObj, callback) {
  this.transport_ = transport;
  this.rcvFrame_ = windowObj;
  this.cb_ = callback;
  this.currentLoc_ = this.rcvFrame_.location.href.split("#")[0] + "#INITIAL";
  goog.net.xpc.IframePollingTransport.receivers_.push(this);
  goog.net.xpc.IframePollingTransport.startRcvTimer_()
};
goog.net.xpc.IframePollingTransport.Receiver.prototype.receive = function() {
  var loc = this.rcvFrame_.location.href;
  if(loc != this.currentLoc_) {
    this.currentLoc_ = loc;
    var payload = loc.split("#")[1];
    if(payload) {
      payload = payload.substr(1);
      this.cb_(decodeURIComponent(payload))
    }
    return true
  }else {
    return false
  }
};
goog.provide("goog.net.xpc.IframeRelayTransport");
goog.require("goog.dom");
goog.require("goog.events");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.Transport");
goog.require("goog.userAgent");
goog.net.xpc.IframeRelayTransport = function(channel, opt_domHelper) {
  goog.base(this, opt_domHelper);
  this.channel_ = channel;
  this.peerRelayUri_ = this.channel_.cfg_[goog.net.xpc.CfgFields.PEER_RELAY_URI];
  this.peerIframeId_ = this.channel_.cfg_[goog.net.xpc.CfgFields.IFRAME_ID];
  if(goog.userAgent.WEBKIT) {
    goog.net.xpc.IframeRelayTransport.startCleanupTimer_()
  }
};
goog.inherits(goog.net.xpc.IframeRelayTransport, goog.net.xpc.Transport);
if(goog.userAgent.WEBKIT) {
  goog.net.xpc.IframeRelayTransport.iframeRefs_ = [];
  goog.net.xpc.IframeRelayTransport.CLEANUP_INTERVAL_ = 1E3;
  goog.net.xpc.IframeRelayTransport.IFRAME_MAX_AGE_ = 3E3;
  goog.net.xpc.IframeRelayTransport.cleanupTimer_ = 0;
  goog.net.xpc.IframeRelayTransport.startCleanupTimer_ = function() {
    if(!goog.net.xpc.IframeRelayTransport.cleanupTimer_) {
      goog.net.xpc.IframeRelayTransport.cleanupTimer_ = window.setTimeout(function() {
        goog.net.xpc.IframeRelayTransport.cleanup_()
      }, goog.net.xpc.IframeRelayTransport.CLEANUP_INTERVAL_)
    }
  };
  goog.net.xpc.IframeRelayTransport.cleanup_ = function(opt_maxAge) {
    var now = goog.now();
    var maxAge = opt_maxAge || goog.net.xpc.IframeRelayTransport.IFRAME_MAX_AGE_;
    while(goog.net.xpc.IframeRelayTransport.iframeRefs_.length && now - goog.net.xpc.IframeRelayTransport.iframeRefs_[0].timestamp >= maxAge) {
      var ifr = goog.net.xpc.IframeRelayTransport.iframeRefs_.shift().iframeElement;
      goog.dom.removeNode(ifr);
      goog.net.xpc.logger.finest("iframe removed")
    }
    goog.net.xpc.IframeRelayTransport.cleanupTimer_ = window.setTimeout(goog.net.xpc.IframeRelayTransport.cleanupCb_, goog.net.xpc.IframeRelayTransport.CLEANUP_INTERVAL_)
  };
  goog.net.xpc.IframeRelayTransport.cleanupCb_ = function() {
    goog.net.xpc.IframeRelayTransport.cleanup_()
  }
}
goog.net.xpc.IframeRelayTransport.IE_PAYLOAD_MAX_SIZE_ = 1800;
goog.net.xpc.IframeRelayTransport.FragmentInfo;
goog.net.xpc.IframeRelayTransport.fragmentMap_ = {};
goog.net.xpc.IframeRelayTransport.prototype.transportType = goog.net.xpc.TransportTypes.IFRAME_RELAY;
goog.net.xpc.IframeRelayTransport.prototype.connect = function() {
  if(!this.getWindow()["xpcRelay"]) {
    this.getWindow()["xpcRelay"] = goog.net.xpc.IframeRelayTransport.receiveMessage_
  }
  this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP)
};
goog.net.xpc.IframeRelayTransport.receiveMessage_ = function(channelName, frame) {
  var pos = frame.indexOf(":");
  var header = frame.substr(0, pos);
  var payload = frame.substr(pos + 1);
  if(!goog.userAgent.IE || (pos = header.indexOf("|")) == -1) {
    var service = header
  }else {
    var service = header.substr(0, pos);
    var fragmentIdStr = header.substr(pos + 1);
    pos = fragmentIdStr.indexOf("+");
    var messageIdStr = fragmentIdStr.substr(0, pos);
    var fragmentNum = parseInt(fragmentIdStr.substr(pos + 1), 10);
    var fragmentInfo = goog.net.xpc.IframeRelayTransport.fragmentMap_[messageIdStr];
    if(!fragmentInfo) {
      fragmentInfo = goog.net.xpc.IframeRelayTransport.fragmentMap_[messageIdStr] = {fragments:[], received:0, expected:0}
    }
    if(goog.string.contains(fragmentIdStr, "++")) {
      fragmentInfo.expected = fragmentNum + 1
    }
    fragmentInfo.fragments[fragmentNum] = payload;
    fragmentInfo.received++;
    if(fragmentInfo.received != fragmentInfo.expected) {
      return
    }
    payload = fragmentInfo.fragments.join("");
    delete goog.net.xpc.IframeRelayTransport.fragmentMap_[messageIdStr]
  }
  goog.net.xpc.channels_[channelName].deliver_(service, decodeURIComponent(payload))
};
goog.net.xpc.IframeRelayTransport.prototype.transportServiceHandler = function(payload) {
  if(payload == goog.net.xpc.SETUP) {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
    this.channel_.notifyConnected_()
  }else {
    if(payload == goog.net.xpc.SETUP_ACK_) {
      this.channel_.notifyConnected_()
    }
  }
};
goog.net.xpc.IframeRelayTransport.prototype.send = function(service, payload) {
  var encodedPayload = encodeURIComponent(payload);
  var encodedLen = encodedPayload.length;
  var maxSize = goog.net.xpc.IframeRelayTransport.IE_PAYLOAD_MAX_SIZE_;
  if(goog.userAgent.IE && encodedLen > maxSize) {
    var messageIdStr = goog.string.getRandomString();
    for(var startIndex = 0, fragmentNum = 0;startIndex < encodedLen;fragmentNum++) {
      var payloadFragment = encodedPayload.substr(startIndex, maxSize);
      startIndex += maxSize;
      var fragmentIdStr = messageIdStr + (startIndex >= encodedLen ? "++" : "+") + fragmentNum;
      this.send_(service, payloadFragment, fragmentIdStr)
    }
  }else {
    this.send_(service, encodedPayload)
  }
};
goog.net.xpc.IframeRelayTransport.prototype.send_ = function(service, encodedPayload, opt_fragmentIdStr) {
  if(goog.userAgent.IE) {
    var div = this.getWindow().document.createElement("div");
    div.innerHTML = '<iframe onload="this.xpcOnload()"></iframe>';
    var ifr = div.childNodes[0];
    div = null;
    ifr["xpcOnload"] = goog.net.xpc.IframeRelayTransport.iframeLoadHandler_
  }else {
    var ifr = this.getWindow().document.createElement("iframe");
    if(goog.userAgent.WEBKIT) {
      goog.net.xpc.IframeRelayTransport.iframeRefs_.push({timestamp:goog.now(), iframeElement:ifr})
    }else {
      goog.events.listen(ifr, "load", goog.net.xpc.IframeRelayTransport.iframeLoadHandler_)
    }
  }
  var style = ifr.style;
  style.visibility = "hidden";
  style.width = ifr.style.height = "0px";
  style.position = "absolute";
  var url = this.peerRelayUri_;
  url += "#" + this.channel_.name;
  if(this.peerIframeId_) {
    url += "," + this.peerIframeId_
  }
  url += "|" + service;
  if(opt_fragmentIdStr) {
    url += "|" + opt_fragmentIdStr
  }
  url += ":" + encodedPayload;
  ifr.src = url;
  this.getWindow().document.body.appendChild(ifr);
  goog.net.xpc.logger.finest("msg sent: " + url)
};
goog.net.xpc.IframeRelayTransport.iframeLoadHandler_ = function() {
  goog.net.xpc.logger.finest("iframe-load");
  goog.dom.removeNode(this);
  this.xpcOnload = null
};
goog.net.xpc.IframeRelayTransport.prototype.disposeInternal = function() {
  goog.base(this, "disposeInternal");
  if(goog.userAgent.WEBKIT) {
    goog.net.xpc.IframeRelayTransport.cleanup_(0)
  }
};
goog.provide("goog.net.xpc.NativeMessagingTransport");
goog.require("goog.events");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.net.xpc.NativeMessagingTransport = function(channel, peerHostname, opt_domHelper) {
  goog.base(this, opt_domHelper);
  this.channel_ = channel;
  this.peerHostname_ = peerHostname || "*"
};
goog.inherits(goog.net.xpc.NativeMessagingTransport, goog.net.xpc.Transport);
goog.net.xpc.NativeMessagingTransport.prototype.initialized_ = false;
goog.net.xpc.NativeMessagingTransport.prototype.transportType = goog.net.xpc.TransportTypes.NATIVE_MESSAGING;
goog.net.xpc.NativeMessagingTransport.activeCount_ = {};
goog.net.xpc.NativeMessagingTransport.initialize_ = function(listenWindow) {
  var uid = goog.getUid(listenWindow);
  var value = goog.net.xpc.NativeMessagingTransport.activeCount_[uid];
  if(!goog.isNumber(value)) {
    value = 0
  }
  if(value == 0) {
    goog.events.listen(listenWindow.postMessage ? listenWindow : listenWindow.document, "message", goog.net.xpc.NativeMessagingTransport.messageReceived_, false, goog.net.xpc.NativeMessagingTransport)
  }
  goog.net.xpc.NativeMessagingTransport.activeCount_[uid] = value + 1
};
goog.net.xpc.NativeMessagingTransport.messageReceived_ = function(msgEvt) {
  var data = msgEvt.getBrowserEvent().data;
  if(!goog.isString(data)) {
    return false
  }
  var headDelim = data.indexOf("|");
  var serviceDelim = data.indexOf(":");
  if(headDelim == -1 || serviceDelim == -1) {
    return false
  }
  var channelName = data.substring(0, headDelim);
  var service = data.substring(headDelim + 1, serviceDelim);
  var payload = data.substring(serviceDelim + 1);
  goog.net.xpc.logger.fine("messageReceived: channel=" + channelName + ", service=" + service + ", payload=" + payload);
  var channel = goog.net.xpc.channels_[channelName];
  if(channel) {
    channel.deliver_(service, payload, msgEvt.getBrowserEvent().origin);
    return true
  }
  for(var staleChannelName in goog.net.xpc.channels_) {
    var staleChannel = goog.net.xpc.channels_[staleChannelName];
    if(staleChannel.getRole() == goog.net.xpc.CrossPageChannelRole.INNER && !staleChannel.isConnected() && service == goog.net.xpc.TRANSPORT_SERVICE_ && payload == goog.net.xpc.SETUP) {
      goog.net.xpc.logger.fine("changing channel name to " + channelName);
      staleChannel.name = channelName;
      delete goog.net.xpc.channels_[staleChannelName];
      goog.net.xpc.channels_[channelName] = staleChannel;
      staleChannel.deliver_(service, payload);
      return true
    }
  }
  goog.net.xpc.logger.info('channel name mismatch; message ignored"');
  return false
};
goog.net.xpc.NativeMessagingTransport.prototype.transportServiceHandler = function(payload) {
  switch(payload) {
    case goog.net.xpc.SETUP:
      this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
      break;
    case goog.net.xpc.SETUP_ACK_:
      this.channel_.notifyConnected_();
      break
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.connect = function() {
  goog.net.xpc.NativeMessagingTransport.initialize_(this.getWindow());
  this.initialized_ = true;
  this.connectWithRetries_()
};
goog.net.xpc.NativeMessagingTransport.prototype.connectWithRetries_ = function() {
  if(this.channel_.isConnected() || this.isDisposed()) {
    return
  }
  this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP);
  this.getWindow().setTimeout(goog.bind(this.connectWithRetries_, this), 100)
};
goog.net.xpc.NativeMessagingTransport.prototype.send = function(service, payload) {
  var win = this.channel_.peerWindowObject_;
  if(!win) {
    goog.net.xpc.logger.fine("send(): window not ready");
    return
  }
  var obj = win.postMessage ? win : win.document;
  this.send = function(service, payload) {
    goog.net.xpc.logger.fine("send(): payload=" + payload + " to hostname=" + this.peerHostname_);
    obj.postMessage(this.channel_.name + "|" + service + ":" + payload, this.peerHostname_)
  };
  this.send(service, payload)
};
goog.net.xpc.NativeMessagingTransport.prototype.disposeInternal = function() {
  goog.base(this, "disposeInternal");
  if(this.initialized_) {
    var listenWindow = this.getWindow();
    var uid = goog.getUid(listenWindow);
    var value = goog.net.xpc.NativeMessagingTransport.activeCount_[uid];
    goog.net.xpc.NativeMessagingTransport.activeCount_[uid] = value - 1;
    if(value == 1) {
      goog.events.unlisten(listenWindow.postMessage ? listenWindow : listenWindow.document, "message", goog.net.xpc.NativeMessagingTransport.messageReceived_, false, goog.net.xpc.NativeMessagingTransport)
    }
  }
  delete this.send
};
goog.provide("goog.net.xpc.NixTransport");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.reflect");
goog.net.xpc.NixTransport = function(channel, opt_domHelper) {
  goog.base(this, opt_domHelper);
  this.channel_ = channel;
  this.authToken_ = channel[goog.net.xpc.CfgFields.AUTH_TOKEN] || "";
  this.remoteAuthToken_ = channel[goog.net.xpc.CfgFields.REMOTE_AUTH_TOKEN] || "";
  goog.net.xpc.NixTransport.conductGlobalSetup_(this.getWindow());
  this[goog.net.xpc.NixTransport.NIX_HANDLE_MESSAGE] = this.handleMessage_;
  this[goog.net.xpc.NixTransport.NIX_CREATE_CHANNEL] = this.createChannel_
};
goog.inherits(goog.net.xpc.NixTransport, goog.net.xpc.Transport);
goog.net.xpc.NixTransport.NIX_WRAPPER = "GCXPC____NIXVBS_wrapper";
goog.net.xpc.NixTransport.NIX_GET_WRAPPER = "GCXPC____NIXVBS_get_wrapper";
goog.net.xpc.NixTransport.NIX_HANDLE_MESSAGE = "GCXPC____NIXJS_handle_message";
goog.net.xpc.NixTransport.NIX_CREATE_CHANNEL = "GCXPC____NIXJS_create_channel";
goog.net.xpc.NixTransport.NIX_ID_FIELD = "GCXPC____NIXVBS_container";
goog.net.xpc.NixTransport.isNixSupported = function() {
  var isSupported = false;
  try {
    var oldOpener = window.opener;
    window.opener = {};
    isSupported = goog.reflect.canAccessProperty(window, "opener");
    window.opener = oldOpener
  }catch(e) {
  }
  return isSupported
};
goog.net.xpc.NixTransport.conductGlobalSetup_ = function(listenWindow) {
  if(listenWindow["nix_setup_complete"]) {
    return
  }
  var vbscript = "Class " + goog.net.xpc.NixTransport.NIX_WRAPPER + "\n " + "Private m_Transport\n" + "Private m_Auth\n" + "Public Sub SetTransport(transport)\n" + "If isEmpty(m_Transport) Then\n" + "Set m_Transport = transport\n" + "End If\n" + "End Sub\n" + "Public Sub SetAuth(auth)\n" + "If isEmpty(m_Auth) Then\n" + "m_Auth = auth\n" + "End If\n" + "End Sub\n" + "Public Function GetAuthToken()\n " + "GetAuthToken = m_Auth\n" + "End Function\n" + "Public Sub SendMessage(service, payload)\n " + 
  "Call m_Transport." + goog.net.xpc.NixTransport.NIX_HANDLE_MESSAGE + "(service, payload)\n" + "End Sub\n" + "Public Sub CreateChannel(channel)\n " + "Call m_Transport." + goog.net.xpc.NixTransport.NIX_CREATE_CHANNEL + "(channel)\n" + "End Sub\n" + "Public Sub " + goog.net.xpc.NixTransport.NIX_ID_FIELD + "()\n " + "End Sub\n" + "End Class\n " + "Function " + goog.net.xpc.NixTransport.NIX_GET_WRAPPER + "(transport, auth)\n" + "Dim wrap\n" + "Set wrap = New " + goog.net.xpc.NixTransport.NIX_WRAPPER + 
  "\n" + "wrap.SetTransport transport\n" + "wrap.SetAuth auth\n" + "Set " + goog.net.xpc.NixTransport.NIX_GET_WRAPPER + " = wrap\n" + "End Function";
  try {
    listenWindow.execScript(vbscript, "vbscript");
    listenWindow["nix_setup_complete"] = true
  }catch(e) {
    goog.net.xpc.logger.severe("exception caught while attempting global setup: " + e)
  }
};
goog.net.xpc.NixTransport.prototype.transportType = goog.net.xpc.TransportTypes.NIX;
goog.net.xpc.NixTransport.prototype.localSetupCompleted_ = false;
goog.net.xpc.NixTransport.prototype.nixChannel_ = null;
goog.net.xpc.NixTransport.prototype.connect = function() {
  if(this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER) {
    this.attemptOuterSetup_()
  }else {
    this.attemptInnerSetup_()
  }
};
goog.net.xpc.NixTransport.prototype.attemptOuterSetup_ = function() {
  if(this.localSetupCompleted_) {
    return
  }
  var innerFrame = this.channel_.iframeElement_;
  try {
    innerFrame.contentWindow.opener = this.getWindow()[goog.net.xpc.NixTransport.NIX_GET_WRAPPER](this, this.authToken_);
    this.localSetupCompleted_ = true
  }catch(e) {
    goog.net.xpc.logger.severe("exception caught while attempting setup: " + e)
  }
  if(!this.localSetupCompleted_) {
    this.getWindow().setTimeout(goog.bind(this.attemptOuterSetup_, this), 100)
  }
};
goog.net.xpc.NixTransport.prototype.attemptInnerSetup_ = function() {
  if(this.localSetupCompleted_) {
    return
  }
  try {
    var opener = this.getWindow().opener;
    if(opener && goog.net.xpc.NixTransport.NIX_ID_FIELD in opener) {
      this.nixChannel_ = opener;
      var remoteAuthToken = this.nixChannel_["GetAuthToken"]();
      if(remoteAuthToken != this.remoteAuthToken_) {
        goog.net.xpc.logger.severe("Invalid auth token from other party");
        return
      }
      this.nixChannel_["CreateChannel"](this.getWindow()[goog.net.xpc.NixTransport.NIX_GET_WRAPPER](this, this.authToken_));
      this.localSetupCompleted_ = true;
      this.channel_.notifyConnected_()
    }
  }catch(e) {
    goog.net.xpc.logger.severe("exception caught while attempting setup: " + e);
    return
  }
  if(!this.localSetupCompleted_) {
    this.getWindow().setTimeout(goog.bind(this.attemptInnerSetup_, this), 100)
  }
};
goog.net.xpc.NixTransport.prototype.createChannel_ = function(channel) {
  if(typeof channel != "unknown" || !(goog.net.xpc.NixTransport.NIX_ID_FIELD in channel)) {
    goog.net.xpc.logger.severe("Invalid NIX channel given to createChannel_")
  }
  this.nixChannel_ = channel;
  var remoteAuthToken = this.nixChannel_["GetAuthToken"]();
  if(remoteAuthToken != this.remoteAuthToken_) {
    goog.net.xpc.logger.severe("Invalid auth token from other party");
    return
  }
  this.channel_.notifyConnected_()
};
goog.net.xpc.NixTransport.prototype.handleMessage_ = function(serviceName, payload) {
  function deliveryHandler() {
    this.channel_.deliver_(serviceName, payload)
  }
  this.getWindow().setTimeout(goog.bind(deliveryHandler, this), 1)
};
goog.net.xpc.NixTransport.prototype.send = function(service, payload) {
  if(typeof this.nixChannel_ !== "unknown") {
    goog.net.xpc.logger.severe("NIX channel not connected")
  }
  this.nixChannel_["SendMessage"](service, payload)
};
goog.net.xpc.NixTransport.prototype.disposeInternal = function() {
  goog.base(this, "disposeInternal");
  this.nixChannel_ = null
};
goog.provide("goog.net.xpc.CrossPageChannel");
goog.require("goog.Disposable");
goog.require("goog.Uri");
goog.require("goog.dom");
goog.require("goog.events");
goog.require("goog.json");
goog.require("goog.messaging.AbstractChannel");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.FrameElementMethodTransport");
goog.require("goog.net.xpc.IframePollingTransport");
goog.require("goog.net.xpc.IframeRelayTransport");
goog.require("goog.net.xpc.NativeMessagingTransport");
goog.require("goog.net.xpc.NixTransport");
goog.require("goog.net.xpc.Transport");
goog.require("goog.userAgent");
goog.net.xpc.CrossPageChannel = function(cfg, opt_domHelper) {
  goog.base(this);
  for(var i = 0, uriField;uriField = goog.net.xpc.UriCfgFields[i];i++) {
    if(uriField in cfg && !/^https?:\/\//.test(cfg[uriField])) {
      throw Error("URI " + cfg[uriField] + " is invalid for field " + uriField);
    }
  }
  this.cfg_ = cfg;
  this.name = this.cfg_[goog.net.xpc.CfgFields.CHANNEL_NAME] || goog.net.xpc.getRandomString(10);
  this.domHelper_ = opt_domHelper || goog.dom.getDomHelper();
  this.deferredDeliveries_ = [];
  cfg[goog.net.xpc.CfgFields.LOCAL_POLL_URI] = cfg[goog.net.xpc.CfgFields.LOCAL_POLL_URI] || goog.uri.utils.getHost(this.domHelper_.getWindow().location.href) + "/robots.txt";
  cfg[goog.net.xpc.CfgFields.PEER_POLL_URI] = cfg[goog.net.xpc.CfgFields.PEER_POLL_URI] || goog.uri.utils.getHost(cfg[goog.net.xpc.CfgFields.PEER_URI] || "") + "/robots.txt";
  goog.net.xpc.channels_[this.name] = this;
  goog.events.listen(window, "unload", goog.net.xpc.CrossPageChannel.disposeAll_);
  goog.net.xpc.logger.info("CrossPageChannel created: " + this.name)
};
goog.inherits(goog.net.xpc.CrossPageChannel, goog.messaging.AbstractChannel);
goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_ESCAPE_RE_ = new RegExp("^%*" + goog.net.xpc.TRANSPORT_SERVICE_ + "$");
goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_UNESCAPE_RE_ = new RegExp("^%+" + goog.net.xpc.TRANSPORT_SERVICE_ + "$");
goog.net.xpc.CrossPageChannel.prototype.transport_ = null;
goog.net.xpc.CrossPageChannel.prototype.state_ = goog.net.xpc.ChannelStates.NOT_CONNECTED;
goog.net.xpc.CrossPageChannel.prototype.isConnected = function() {
  return this.state_ == goog.net.xpc.ChannelStates.CONNECTED
};
goog.net.xpc.CrossPageChannel.prototype.peerWindowObject_ = null;
goog.net.xpc.CrossPageChannel.prototype.iframeElement_ = null;
goog.net.xpc.CrossPageChannel.prototype.setPeerWindowObject = function(peerWindowObject) {
  this.peerWindowObject_ = peerWindowObject
};
goog.net.xpc.CrossPageChannel.prototype.determineTransportType_ = function() {
  var transportType;
  if(goog.isFunction(document.postMessage) || goog.isFunction(window.postMessage) || goog.userAgent.IE && window.postMessage) {
    transportType = goog.net.xpc.TransportTypes.NATIVE_MESSAGING
  }else {
    if(goog.userAgent.GECKO) {
      transportType = goog.net.xpc.TransportTypes.FRAME_ELEMENT_METHOD
    }else {
      if(goog.userAgent.IE && this.cfg_[goog.net.xpc.CfgFields.PEER_RELAY_URI]) {
        transportType = goog.net.xpc.TransportTypes.IFRAME_RELAY
      }else {
        if(goog.userAgent.IE && goog.net.xpc.NixTransport.isNixSupported()) {
          transportType = goog.net.xpc.TransportTypes.NIX
        }else {
          transportType = goog.net.xpc.TransportTypes.IFRAME_POLLING
        }
      }
    }
  }
  return transportType
};
goog.net.xpc.CrossPageChannel.prototype.createTransport_ = function() {
  if(this.transport_) {
    return
  }
  if(!this.cfg_[goog.net.xpc.CfgFields.TRANSPORT]) {
    this.cfg_[goog.net.xpc.CfgFields.TRANSPORT] = this.determineTransportType_()
  }
  switch(this.cfg_[goog.net.xpc.CfgFields.TRANSPORT]) {
    case goog.net.xpc.TransportTypes.NATIVE_MESSAGING:
      this.transport_ = new goog.net.xpc.NativeMessagingTransport(this, this.cfg_[goog.net.xpc.CfgFields.PEER_HOSTNAME], this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.NIX:
      this.transport_ = new goog.net.xpc.NixTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.FRAME_ELEMENT_METHOD:
      this.transport_ = new goog.net.xpc.FrameElementMethodTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.IFRAME_RELAY:
      this.transport_ = new goog.net.xpc.IframeRelayTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.IFRAME_POLLING:
      this.transport_ = new goog.net.xpc.IframePollingTransport(this, this.domHelper_);
      break
  }
  if(this.transport_) {
    goog.net.xpc.logger.info("Transport created: " + this.transport_.getName())
  }else {
    throw Error("CrossPageChannel: No suitable transport found!");
  }
};
goog.net.xpc.CrossPageChannel.prototype.getTransportType = function() {
  return this.transport_.getType()
};
goog.net.xpc.CrossPageChannel.prototype.getTransportName = function() {
  return this.transport_.getName()
};
goog.net.xpc.CrossPageChannel.prototype.getPeerConfiguration = function() {
  var peerCfg = {};
  peerCfg[goog.net.xpc.CfgFields.CHANNEL_NAME] = this.name;
  peerCfg[goog.net.xpc.CfgFields.TRANSPORT] = this.cfg_[goog.net.xpc.CfgFields.TRANSPORT];
  if(this.cfg_[goog.net.xpc.CfgFields.LOCAL_RELAY_URI]) {
    peerCfg[goog.net.xpc.CfgFields.PEER_RELAY_URI] = this.cfg_[goog.net.xpc.CfgFields.LOCAL_RELAY_URI]
  }
  if(this.cfg_[goog.net.xpc.CfgFields.LOCAL_POLL_URI]) {
    peerCfg[goog.net.xpc.CfgFields.PEER_POLL_URI] = this.cfg_[goog.net.xpc.CfgFields.LOCAL_POLL_URI]
  }
  if(this.cfg_[goog.net.xpc.CfgFields.PEER_POLL_URI]) {
    peerCfg[goog.net.xpc.CfgFields.LOCAL_POLL_URI] = this.cfg_[goog.net.xpc.CfgFields.PEER_POLL_URI]
  }
  return peerCfg
};
goog.net.xpc.CrossPageChannel.prototype.createPeerIframe = function(parentElm, opt_configureIframeCb, opt_addCfgParam) {
  var iframeId = this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID];
  if(!iframeId) {
    iframeId = this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID] = "xpcpeer" + goog.net.xpc.getRandomString(4)
  }
  var iframeElm = goog.dom.createElement("IFRAME");
  iframeElm.id = iframeElm.name = iframeId;
  if(opt_configureIframeCb) {
    opt_configureIframeCb(iframeElm)
  }else {
    iframeElm.style.width = iframeElm.style.height = "100%"
  }
  var peerUri = this.cfg_[goog.net.xpc.CfgFields.PEER_URI];
  if(goog.isString(peerUri)) {
    peerUri = this.cfg_[goog.net.xpc.CfgFields.PEER_URI] = new goog.Uri(peerUri)
  }
  if(opt_addCfgParam !== false) {
    peerUri.setParameterValue("xpc", goog.json.serialize(this.getPeerConfiguration()))
  }
  if(goog.userAgent.GECKO || goog.userAgent.WEBKIT) {
    this.deferConnect_ = true;
    window.setTimeout(goog.bind(function() {
      this.deferConnect_ = false;
      parentElm.appendChild(iframeElm);
      iframeElm.src = peerUri.toString();
      goog.net.xpc.logger.info("peer iframe created (" + iframeId + ")");
      if(this.connectDeferred_) {
        this.connect(this.connectCb_)
      }
    }, this), 1)
  }else {
    iframeElm.src = peerUri.toString();
    parentElm.appendChild(iframeElm);
    goog.net.xpc.logger.info("peer iframe created (" + iframeId + ")")
  }
  return iframeElm
};
goog.net.xpc.CrossPageChannel.prototype.deferConnect_ = false;
goog.net.xpc.CrossPageChannel.prototype.connectDeferred_ = false;
goog.net.xpc.CrossPageChannel.prototype.connect = function(opt_connectCb) {
  this.connectCb_ = opt_connectCb || goog.nullFunction;
  if(this.deferConnect_) {
    goog.net.xpc.logger.info("connect() deferred");
    this.connectDeferred_ = true;
    return
  }
  this.connectDeferred_ = false;
  goog.net.xpc.logger.info("connect()");
  if(this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID]) {
    this.iframeElement_ = this.domHelper_.getElement(this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID])
  }
  if(this.iframeElement_) {
    var winObj = this.iframeElement_.contentWindow;
    if(!winObj) {
      winObj = window.frames[this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID]]
    }
    this.setPeerWindowObject(winObj)
  }
  if(!this.peerWindowObject_) {
    if(window == top) {
      throw Error("CrossPageChannel: Can't connect, peer window-object not set.");
    }else {
      this.setPeerWindowObject(window.parent)
    }
  }
  this.createTransport_();
  this.transport_.connect();
  while(this.deferredDeliveries_.length > 0) {
    this.deferredDeliveries_.shift()()
  }
};
goog.net.xpc.CrossPageChannel.prototype.close = function() {
  if(!this.isConnected()) {
    return
  }
  this.state_ = goog.net.xpc.ChannelStates.CLOSED;
  this.transport_.dispose();
  this.transport_ = null;
  this.connectCb_ = null;
  this.connectDeferred_ = false;
  this.deferredDeliveries_.length = 0;
  goog.net.xpc.logger.info('Channel "' + this.name + '" closed')
};
goog.net.xpc.CrossPageChannel.prototype.notifyConnected_ = function() {
  if(this.isConnected()) {
    return
  }
  this.state_ = goog.net.xpc.ChannelStates.CONNECTED;
  goog.net.xpc.logger.info('Channel "' + this.name + '" connected');
  this.connectCb_()
};
goog.net.xpc.CrossPageChannel.prototype.notifyTransportError_ = function() {
  goog.net.xpc.logger.info("Transport Error");
  this.close()
};
goog.net.xpc.CrossPageChannel.prototype.send = function(serviceName, payload) {
  if(!this.isConnected()) {
    goog.net.xpc.logger.severe("Can't send. Channel not connected.");
    return
  }
  if(Boolean(this.peerWindowObject_.closed)) {
    goog.net.xpc.logger.severe("Peer has disappeared.");
    this.close();
    return
  }
  if(goog.isObject(payload)) {
    payload = goog.json.serialize(payload)
  }
  this.transport_.send(this.escapeServiceName_(serviceName), payload)
};
goog.net.xpc.CrossPageChannel.prototype.deliver_ = function(serviceName, payload, opt_origin) {
  if(this.connectDeferred_) {
    this.deferredDeliveries_.push(goog.bind(this.deliver_, this, serviceName, payload, opt_origin));
    return
  }
  if(!this.isMessageOriginAcceptable_(opt_origin)) {
    goog.net.xpc.logger.warning('Message received from unapproved origin "' + opt_origin + '" - rejected.');
    return
  }
  if(this.isDisposed()) {
    goog.net.xpc.logger.warning("CrossPageChannel::deliver_(): Disposed.")
  }else {
    if(!serviceName || serviceName == goog.net.xpc.TRANSPORT_SERVICE_) {
      this.transport_.transportServiceHandler(payload)
    }else {
      if(this.isConnected()) {
        this.deliver(this.unescapeServiceName_(serviceName), payload)
      }else {
        goog.net.xpc.logger.info("CrossPageChannel::deliver_(): Not connected.")
      }
    }
  }
};
goog.net.xpc.CrossPageChannel.prototype.escapeServiceName_ = function(name) {
  if(goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_ESCAPE_RE_.test(name)) {
    name = "%" + name
  }
  return name.replace(/[%:|]/g, encodeURIComponent)
};
goog.net.xpc.CrossPageChannel.prototype.unescapeServiceName_ = function(name) {
  name = name.replace(/%[0-9a-f]{2}/gi, decodeURIComponent);
  if(goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_UNESCAPE_RE_.test(name)) {
    return name.substring(1)
  }else {
    return name
  }
};
goog.net.xpc.CrossPageChannel.prototype.getRole = function() {
  return window.parent == this.peerWindowObject_ ? goog.net.xpc.CrossPageChannelRole.INNER : goog.net.xpc.CrossPageChannelRole.OUTER
};
goog.net.xpc.CrossPageChannel.prototype.isMessageOriginAcceptable_ = function(opt_origin) {
  var peerHostname = this.cfg_[goog.net.xpc.CfgFields.PEER_HOSTNAME];
  return goog.string.isEmptySafe(opt_origin) || goog.string.isEmptySafe(peerHostname) || opt_origin == this.cfg_[goog.net.xpc.CfgFields.PEER_HOSTNAME]
};
goog.net.xpc.CrossPageChannel.prototype.disposeInternal = function() {
  goog.base(this, "disposeInternal");
  this.close();
  this.peerWindowObject_ = null;
  this.iframeElement_ = null;
  delete goog.net.xpc.channels_[this.name];
  this.deferredDeliveries_.length = 0
};
goog.net.xpc.CrossPageChannel.disposeAll_ = function() {
  for(var name in goog.net.xpc.channels_) {
    var ch = goog.net.xpc.channels_[name];
    if(ch) {
      ch.dispose()
    }
  }
};
goog.provide("goog.net.EventType");
goog.net.EventType = {COMPLETE:"complete", SUCCESS:"success", ERROR:"error", ABORT:"abort", READY:"ready", READY_STATE_CHANGE:"readystatechange", TIMEOUT:"timeout", INCREMENTAL_DATA:"incrementaldata", PROGRESS:"progress"};
goog.provide("goog.Timer");
goog.require("goog.events.EventTarget");
goog.Timer = function(opt_interval, opt_timerObject) {
  goog.events.EventTarget.call(this);
  this.interval_ = opt_interval || 1;
  this.timerObject_ = opt_timerObject || goog.Timer.defaultTimerObject;
  this.boundTick_ = goog.bind(this.tick_, this);
  this.last_ = goog.now()
};
goog.inherits(goog.Timer, goog.events.EventTarget);
goog.Timer.MAX_TIMEOUT_ = 2147483647;
goog.Timer.prototype.enabled = false;
goog.Timer.defaultTimerObject = goog.global["window"];
goog.Timer.intervalScale = 0.8;
goog.Timer.prototype.timer_ = null;
goog.Timer.prototype.getInterval = function() {
  return this.interval_
};
goog.Timer.prototype.setInterval = function(interval) {
  this.interval_ = interval;
  if(this.timer_ && this.enabled) {
    this.stop();
    this.start()
  }else {
    if(this.timer_) {
      this.stop()
    }
  }
};
goog.Timer.prototype.tick_ = function() {
  if(this.enabled) {
    var elapsed = goog.now() - this.last_;
    if(elapsed > 0 && elapsed < this.interval_ * goog.Timer.intervalScale) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_ - elapsed);
      return
    }
    this.dispatchTick();
    if(this.enabled) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
      this.last_ = goog.now()
    }
  }
};
goog.Timer.prototype.dispatchTick = function() {
  this.dispatchEvent(goog.Timer.TICK)
};
goog.Timer.prototype.start = function() {
  this.enabled = true;
  if(!this.timer_) {
    this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
    this.last_ = goog.now()
  }
};
goog.Timer.prototype.stop = function() {
  this.enabled = false;
  if(this.timer_) {
    this.timerObject_.clearTimeout(this.timer_);
    this.timer_ = null
  }
};
goog.Timer.prototype.disposeInternal = function() {
  goog.Timer.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.timerObject_
};
goog.Timer.TICK = "tick";
goog.Timer.callOnce = function(listener, opt_delay, opt_handler) {
  if(goog.isFunction(listener)) {
    if(opt_handler) {
      listener = goog.bind(listener, opt_handler)
    }
  }else {
    if(listener && typeof listener.handleEvent == "function") {
      listener = goog.bind(listener.handleEvent, listener)
    }else {
      throw Error("Invalid listener argument");
    }
  }
  if(opt_delay > goog.Timer.MAX_TIMEOUT_) {
    return-1
  }else {
    return goog.Timer.defaultTimerObject.setTimeout(listener, opt_delay || 0)
  }
};
goog.Timer.clear = function(timerId) {
  goog.Timer.defaultTimerObject.clearTimeout(timerId)
};
goog.provide("goog.net.ErrorCode");
goog.net.ErrorCode = {NO_ERROR:0, ACCESS_DENIED:1, FILE_NOT_FOUND:2, FF_SILENT_ERROR:3, CUSTOM_ERROR:4, EXCEPTION:5, HTTP_ERROR:6, ABORT:7, TIMEOUT:8, OFFLINE:9};
goog.net.ErrorCode.getDebugMessage = function(errorCode) {
  switch(errorCode) {
    case goog.net.ErrorCode.NO_ERROR:
      return"No Error";
    case goog.net.ErrorCode.ACCESS_DENIED:
      return"Access denied to content document";
    case goog.net.ErrorCode.FILE_NOT_FOUND:
      return"File not found";
    case goog.net.ErrorCode.FF_SILENT_ERROR:
      return"Firefox silently errored";
    case goog.net.ErrorCode.CUSTOM_ERROR:
      return"Application custom error";
    case goog.net.ErrorCode.EXCEPTION:
      return"An exception occurred";
    case goog.net.ErrorCode.HTTP_ERROR:
      return"Http response at 400 or 500 level";
    case goog.net.ErrorCode.ABORT:
      return"Request was aborted";
    case goog.net.ErrorCode.TIMEOUT:
      return"Request timed out";
    case goog.net.ErrorCode.OFFLINE:
      return"The resource is not available offline";
    default:
      return"Unrecognized error code"
  }
};
goog.provide("goog.net.HttpStatus");
goog.net.HttpStatus = {CONTINUE:100, SWITCHING_PROTOCOLS:101, OK:200, CREATED:201, ACCEPTED:202, NON_AUTHORITATIVE_INFORMATION:203, NO_CONTENT:204, RESET_CONTENT:205, PARTIAL_CONTENT:206, MULTIPLE_CHOICES:300, MOVED_PERMANENTLY:301, FOUND:302, SEE_OTHER:303, NOT_MODIFIED:304, USE_PROXY:305, TEMPORARY_REDIRECT:307, BAD_REQUEST:400, UNAUTHORIZED:401, PAYMENT_REQUIRED:402, FORBIDDEN:403, NOT_FOUND:404, METHOD_NOT_ALLOWED:405, NOT_ACCEPTABLE:406, PROXY_AUTHENTICATION_REQUIRED:407, REQUEST_TIMEOUT:408, 
CONFLICT:409, GONE:410, LENGTH_REQUIRED:411, PRECONDITION_FAILED:412, REQUEST_ENTITY_TOO_LARGE:413, REQUEST_URI_TOO_LONG:414, UNSUPPORTED_MEDIA_TYPE:415, REQUEST_RANGE_NOT_SATISFIABLE:416, EXPECTATION_FAILED:417, INTERNAL_SERVER_ERROR:500, NOT_IMPLEMENTED:501, BAD_GATEWAY:502, SERVICE_UNAVAILABLE:503, GATEWAY_TIMEOUT:504, HTTP_VERSION_NOT_SUPPORTED:505, QUIRK_IE_NO_CONTENT:1223};
goog.provide("goog.net.XmlHttpFactory");
goog.net.XmlHttpFactory = function() {
};
goog.net.XmlHttpFactory.prototype.cachedOptions_ = null;
goog.net.XmlHttpFactory.prototype.createInstance = goog.abstractMethod;
goog.net.XmlHttpFactory.prototype.getOptions = function() {
  return this.cachedOptions_ || (this.cachedOptions_ = this.internalGetOptions())
};
goog.net.XmlHttpFactory.prototype.internalGetOptions = goog.abstractMethod;
goog.provide("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XmlHttpFactory");
goog.net.WrapperXmlHttpFactory = function(xhrFactory, optionsFactory) {
  goog.net.XmlHttpFactory.call(this);
  this.xhrFactory_ = xhrFactory;
  this.optionsFactory_ = optionsFactory
};
goog.inherits(goog.net.WrapperXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.WrapperXmlHttpFactory.prototype.createInstance = function() {
  return this.xhrFactory_()
};
goog.net.WrapperXmlHttpFactory.prototype.getOptions = function() {
  return this.optionsFactory_()
};
goog.provide("goog.net.DefaultXmlHttpFactory");
goog.provide("goog.net.XmlHttp");
goog.provide("goog.net.XmlHttp.OptionType");
goog.provide("goog.net.XmlHttp.ReadyState");
goog.require("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XmlHttpFactory");
goog.net.XmlHttp = function() {
  return goog.net.XmlHttp.factory_.createInstance()
};
goog.net.XmlHttp.getOptions = function() {
  return goog.net.XmlHttp.factory_.getOptions()
};
goog.net.XmlHttp.OptionType = {USE_NULL_FUNCTION:0, LOCAL_REQUEST_ERROR:1};
goog.net.XmlHttp.ReadyState = {UNINITIALIZED:0, LOADING:1, LOADED:2, INTERACTIVE:3, COMPLETE:4};
goog.net.XmlHttp.factory_;
goog.net.XmlHttp.setFactory = function(factory, optionsFactory) {
  goog.net.XmlHttp.setGlobalFactory(new goog.net.WrapperXmlHttpFactory(factory, optionsFactory))
};
goog.net.XmlHttp.setGlobalFactory = function(factory) {
  goog.net.XmlHttp.factory_ = factory
};
goog.net.DefaultXmlHttpFactory = function() {
  goog.net.XmlHttpFactory.call(this)
};
goog.inherits(goog.net.DefaultXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.DefaultXmlHttpFactory.prototype.createInstance = function() {
  var progId = this.getProgId_();
  if(progId) {
    return new ActiveXObject(progId)
  }else {
    return new XMLHttpRequest
  }
};
goog.net.DefaultXmlHttpFactory.prototype.internalGetOptions = function() {
  var progId = this.getProgId_();
  var options = {};
  if(progId) {
    options[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] = true;
    options[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] = true
  }
  return options
};
goog.net.DefaultXmlHttpFactory.prototype.ieProgId_ = null;
goog.net.DefaultXmlHttpFactory.prototype.getProgId_ = function() {
  if(!this.ieProgId_ && typeof XMLHttpRequest == "undefined" && typeof ActiveXObject != "undefined") {
    var ACTIVE_X_IDENTS = ["MSXML2.XMLHTTP.6.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"];
    for(var i = 0;i < ACTIVE_X_IDENTS.length;i++) {
      var candidate = ACTIVE_X_IDENTS[i];
      try {
        new ActiveXObject(candidate);
        this.ieProgId_ = candidate;
        return candidate
      }catch(e) {
      }
    }
    throw Error("Could not create ActiveXObject. ActiveX might be disabled," + " or MSXML might not be installed");
  }
  return this.ieProgId_
};
goog.net.XmlHttp.setGlobalFactory(new goog.net.DefaultXmlHttpFactory);
goog.provide("goog.net.xhrMonitor");
goog.require("goog.array");
goog.require("goog.debug.Logger");
goog.require("goog.userAgent");
goog.net.XhrMonitor_ = function() {
  if(!goog.userAgent.GECKO) {
    return
  }
  this.contextsToXhr_ = {};
  this.xhrToContexts_ = {};
  this.stack_ = []
};
goog.net.XhrMonitor_.getKey = function(obj) {
  return goog.isString(obj) ? obj : goog.isObject(obj) ? goog.getUid(obj) : ""
};
goog.net.XhrMonitor_.prototype.logger_ = goog.debug.Logger.getLogger("goog.net.xhrMonitor");
goog.net.XhrMonitor_.prototype.enabled_ = goog.userAgent.GECKO;
goog.net.XhrMonitor_.prototype.setEnabled = function(val) {
  this.enabled_ = goog.userAgent.GECKO && val
};
goog.net.XhrMonitor_.prototype.pushContext = function(context) {
  if(!this.enabled_) {
    return
  }
  var key = goog.net.XhrMonitor_.getKey(context);
  this.logger_.finest("Pushing context: " + context + " (" + key + ")");
  this.stack_.push(key)
};
goog.net.XhrMonitor_.prototype.popContext = function() {
  if(!this.enabled_) {
    return
  }
  var context = this.stack_.pop();
  this.logger_.finest("Popping context: " + context);
  this.updateDependentContexts_(context)
};
goog.net.XhrMonitor_.prototype.isContextSafe = function(context) {
  if(!this.enabled_) {
    return true
  }
  var deps = this.contextsToXhr_[goog.net.XhrMonitor_.getKey(context)];
  this.logger_.fine("Context is safe : " + context + " - " + deps);
  return!deps
};
goog.net.XhrMonitor_.prototype.markXhrOpen = function(xhr) {
  if(!this.enabled_) {
    return
  }
  var uid = goog.getUid(xhr);
  this.logger_.fine("Opening XHR : " + uid);
  for(var i = 0;i < this.stack_.length;i++) {
    var context = this.stack_[i];
    this.addToMap_(this.contextsToXhr_, context, uid);
    this.addToMap_(this.xhrToContexts_, uid, context)
  }
};
goog.net.XhrMonitor_.prototype.markXhrClosed = function(xhr) {
  if(!this.enabled_) {
    return
  }
  var uid = goog.getUid(xhr);
  this.logger_.fine("Closing XHR : " + uid);
  delete this.xhrToContexts_[uid];
  for(var context in this.contextsToXhr_) {
    goog.array.remove(this.contextsToXhr_[context], uid);
    if(this.contextsToXhr_[context].length == 0) {
      delete this.contextsToXhr_[context]
    }
  }
};
goog.net.XhrMonitor_.prototype.updateDependentContexts_ = function(xhrUid) {
  var contexts = this.xhrToContexts_[xhrUid];
  var xhrs = this.contextsToXhr_[xhrUid];
  if(contexts && xhrs) {
    this.logger_.finest("Updating dependent contexts");
    goog.array.forEach(contexts, function(context) {
      goog.array.forEach(xhrs, function(xhr) {
        this.addToMap_(this.contextsToXhr_, context, xhr);
        this.addToMap_(this.xhrToContexts_, xhr, context)
      }, this)
    }, this)
  }
};
goog.net.XhrMonitor_.prototype.addToMap_ = function(map, key, value) {
  if(!map[key]) {
    map[key] = []
  }
  if(!goog.array.contains(map[key], value)) {
    map[key].push(value)
  }
};
goog.net.xhrMonitor = new goog.net.XhrMonitor_;
goog.provide("goog.net.XhrIo");
goog.provide("goog.net.XhrIo.ResponseType");
goog.require("goog.Timer");
goog.require("goog.debug.Logger");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.debug.errorHandlerWeakDep");
goog.require("goog.events.EventTarget");
goog.require("goog.json");
goog.require("goog.net.ErrorCode");
goog.require("goog.net.EventType");
goog.require("goog.net.HttpStatus");
goog.require("goog.net.XmlHttp");
goog.require("goog.net.xhrMonitor");
goog.require("goog.object");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.net.XhrIo = function(opt_xmlHttpFactory) {
  goog.events.EventTarget.call(this);
  this.headers = new goog.structs.Map;
  this.xmlHttpFactory_ = opt_xmlHttpFactory || null
};
goog.inherits(goog.net.XhrIo, goog.events.EventTarget);
goog.net.XhrIo.ResponseType = {DEFAULT:"", TEXT:"text", DOCUMENT:"document", BLOB:"blob", ARRAY_BUFFER:"arraybuffer"};
goog.net.XhrIo.prototype.logger_ = goog.debug.Logger.getLogger("goog.net.XhrIo");
goog.net.XhrIo.CONTENT_TYPE_HEADER = "Content-Type";
goog.net.XhrIo.HTTP_SCHEME_PATTERN = /^https?:?$/i;
goog.net.XhrIo.FORM_CONTENT_TYPE = "application/x-www-form-urlencoded;charset=utf-8";
goog.net.XhrIo.sendInstances_ = [];
goog.net.XhrIo.send = function(url, opt_callback, opt_method, opt_content, opt_headers, opt_timeoutInterval) {
  var x = new goog.net.XhrIo;
  goog.net.XhrIo.sendInstances_.push(x);
  if(opt_callback) {
    goog.events.listen(x, goog.net.EventType.COMPLETE, opt_callback)
  }
  goog.events.listen(x, goog.net.EventType.READY, goog.partial(goog.net.XhrIo.cleanupSend_, x));
  if(opt_timeoutInterval) {
    x.setTimeoutInterval(opt_timeoutInterval)
  }
  x.send(url, opt_method, opt_content, opt_headers)
};
goog.net.XhrIo.cleanup = function() {
  var instances = goog.net.XhrIo.sendInstances_;
  while(instances.length) {
    instances.pop().dispose()
  }
};
goog.net.XhrIo.protectEntryPoints = function(errorHandler) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = errorHandler.protectEntryPoint(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_)
};
goog.net.XhrIo.cleanupSend_ = function(XhrIo) {
  XhrIo.dispose();
  goog.array.remove(goog.net.XhrIo.sendInstances_, XhrIo)
};
goog.net.XhrIo.prototype.active_ = false;
goog.net.XhrIo.prototype.xhr_ = null;
goog.net.XhrIo.prototype.xhrOptions_ = null;
goog.net.XhrIo.prototype.lastUri_ = "";
goog.net.XhrIo.prototype.lastMethod_ = "";
goog.net.XhrIo.prototype.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
goog.net.XhrIo.prototype.lastError_ = "";
goog.net.XhrIo.prototype.errorDispatched_ = false;
goog.net.XhrIo.prototype.inSend_ = false;
goog.net.XhrIo.prototype.inOpen_ = false;
goog.net.XhrIo.prototype.inAbort_ = false;
goog.net.XhrIo.prototype.timeoutInterval_ = 0;
goog.net.XhrIo.prototype.timeoutId_ = null;
goog.net.XhrIo.prototype.responseType_ = goog.net.XhrIo.ResponseType.DEFAULT;
goog.net.XhrIo.prototype.withCredentials_ = false;
goog.net.XhrIo.prototype.getTimeoutInterval = function() {
  return this.timeoutInterval_
};
goog.net.XhrIo.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms)
};
goog.net.XhrIo.prototype.setResponseType = function(type) {
  this.responseType_ = type
};
goog.net.XhrIo.prototype.getResponseType = function() {
  return this.responseType_
};
goog.net.XhrIo.prototype.setWithCredentials = function(withCredentials) {
  this.withCredentials_ = withCredentials
};
goog.net.XhrIo.prototype.getWithCredentials = function() {
  return this.withCredentials_
};
goog.net.XhrIo.prototype.send = function(url, opt_method, opt_content, opt_headers) {
  if(this.xhr_) {
    throw Error("[goog.net.XhrIo] Object is active with another request");
  }
  var method = opt_method ? opt_method.toUpperCase() : "GET";
  this.lastUri_ = url;
  this.lastError_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastMethod_ = method;
  this.errorDispatched_ = false;
  this.active_ = true;
  this.xhr_ = this.createXhr();
  this.xhrOptions_ = this.xmlHttpFactory_ ? this.xmlHttpFactory_.getOptions() : goog.net.XmlHttp.getOptions();
  goog.net.xhrMonitor.markXhrOpen(this.xhr_);
  this.xhr_.onreadystatechange = goog.bind(this.onReadyStateChange_, this);
  try {
    this.logger_.fine(this.formatMsg_("Opening Xhr"));
    this.inOpen_ = true;
    this.xhr_.open(method, url, true);
    this.inOpen_ = false
  }catch(err) {
    this.logger_.fine(this.formatMsg_("Error opening Xhr: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
    return
  }
  var content = opt_content || "";
  var headers = this.headers.clone();
  if(opt_headers) {
    goog.structs.forEach(opt_headers, function(value, key) {
      headers.set(key, value)
    })
  }
  if(method == "POST" && !headers.containsKey(goog.net.XhrIo.CONTENT_TYPE_HEADER)) {
    headers.set(goog.net.XhrIo.CONTENT_TYPE_HEADER, goog.net.XhrIo.FORM_CONTENT_TYPE)
  }
  goog.structs.forEach(headers, function(value, key) {
    this.xhr_.setRequestHeader(key, value)
  }, this);
  if(this.responseType_) {
    this.xhr_.responseType = this.responseType_
  }
  if(goog.object.containsKey(this.xhr_, "withCredentials")) {
    this.xhr_.withCredentials = this.withCredentials_
  }
  try {
    if(this.timeoutId_) {
      goog.Timer.defaultTimerObject.clearTimeout(this.timeoutId_);
      this.timeoutId_ = null
    }
    if(this.timeoutInterval_ > 0) {
      this.logger_.fine(this.formatMsg_("Will abort after " + this.timeoutInterval_ + "ms if incomplete"));
      this.timeoutId_ = goog.Timer.defaultTimerObject.setTimeout(goog.bind(this.timeout_, this), this.timeoutInterval_)
    }
    this.logger_.fine(this.formatMsg_("Sending request"));
    this.inSend_ = true;
    this.xhr_.send(content);
    this.inSend_ = false
  }catch(err) {
    this.logger_.fine(this.formatMsg_("Send error: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err)
  }
};
goog.net.XhrIo.prototype.createXhr = function() {
  return this.xmlHttpFactory_ ? this.xmlHttpFactory_.createInstance() : goog.net.XmlHttp()
};
goog.net.XhrIo.prototype.dispatchEvent = function(e) {
  if(this.xhr_) {
    goog.net.xhrMonitor.pushContext(this.xhr_);
    try {
      return goog.net.XhrIo.superClass_.dispatchEvent.call(this, e)
    }finally {
      goog.net.xhrMonitor.popContext()
    }
  }else {
    return goog.net.XhrIo.superClass_.dispatchEvent.call(this, e)
  }
};
goog.net.XhrIo.prototype.timeout_ = function() {
  if(typeof goog == "undefined") {
  }else {
    if(this.xhr_) {
      this.lastError_ = "Timed out after " + this.timeoutInterval_ + "ms, aborting";
      this.lastErrorCode_ = goog.net.ErrorCode.TIMEOUT;
      this.logger_.fine(this.formatMsg_(this.lastError_));
      this.dispatchEvent(goog.net.EventType.TIMEOUT);
      this.abort(goog.net.ErrorCode.TIMEOUT)
    }
  }
};
goog.net.XhrIo.prototype.error_ = function(errorCode, err) {
  this.active_ = false;
  if(this.xhr_) {
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false
  }
  this.lastError_ = err;
  this.lastErrorCode_ = errorCode;
  this.dispatchErrors_();
  this.cleanUpXhr_()
};
goog.net.XhrIo.prototype.dispatchErrors_ = function() {
  if(!this.errorDispatched_) {
    this.errorDispatched_ = true;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ERROR)
  }
};
goog.net.XhrIo.prototype.abort = function(opt_failureCode) {
  if(this.xhr_ && this.active_) {
    this.logger_.fine(this.formatMsg_("Aborting"));
    this.active_ = false;
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
    this.lastErrorCode_ = opt_failureCode || goog.net.ErrorCode.ABORT;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ABORT);
    this.cleanUpXhr_()
  }
};
goog.net.XhrIo.prototype.disposeInternal = function() {
  if(this.xhr_) {
    if(this.active_) {
      this.active_ = false;
      this.inAbort_ = true;
      this.xhr_.abort();
      this.inAbort_ = false
    }
    this.cleanUpXhr_(true)
  }
  goog.net.XhrIo.superClass_.disposeInternal.call(this)
};
goog.net.XhrIo.prototype.onReadyStateChange_ = function() {
  if(!this.inOpen_ && !this.inSend_ && !this.inAbort_) {
    this.onReadyStateChangeEntryPoint_()
  }else {
    this.onReadyStateChangeHelper_()
  }
};
goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = function() {
  this.onReadyStateChangeHelper_()
};
goog.net.XhrIo.prototype.onReadyStateChangeHelper_ = function() {
  if(!this.active_) {
    return
  }
  if(typeof goog == "undefined") {
  }else {
    if(this.xhrOptions_[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE && this.getStatus() == 2) {
      this.logger_.fine(this.formatMsg_("Local request error detected and ignored"))
    }else {
      if(this.inSend_ && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE) {
        goog.Timer.defaultTimerObject.setTimeout(goog.bind(this.onReadyStateChange_, this), 0);
        return
      }
      this.dispatchEvent(goog.net.EventType.READY_STATE_CHANGE);
      if(this.isComplete()) {
        this.logger_.fine(this.formatMsg_("Request complete"));
        this.active_ = false;
        if(this.isSuccess()) {
          this.dispatchEvent(goog.net.EventType.COMPLETE);
          this.dispatchEvent(goog.net.EventType.SUCCESS)
        }else {
          this.lastErrorCode_ = goog.net.ErrorCode.HTTP_ERROR;
          this.lastError_ = this.getStatusText() + " [" + this.getStatus() + "]";
          this.dispatchErrors_()
        }
        this.cleanUpXhr_()
      }
    }
  }
};
goog.net.XhrIo.prototype.cleanUpXhr_ = function(opt_fromDispose) {
  if(this.xhr_) {
    var xhr = this.xhr_;
    var clearedOnReadyStateChange = this.xhrOptions_[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] ? goog.nullFunction : null;
    this.xhr_ = null;
    this.xhrOptions_ = null;
    if(this.timeoutId_) {
      goog.Timer.defaultTimerObject.clearTimeout(this.timeoutId_);
      this.timeoutId_ = null
    }
    if(!opt_fromDispose) {
      goog.net.xhrMonitor.pushContext(xhr);
      this.dispatchEvent(goog.net.EventType.READY);
      goog.net.xhrMonitor.popContext()
    }
    goog.net.xhrMonitor.markXhrClosed(xhr);
    try {
      xhr.onreadystatechange = clearedOnReadyStateChange
    }catch(e) {
      this.logger_.severe("Problem encountered resetting onreadystatechange: " + e.message)
    }
  }
};
goog.net.XhrIo.prototype.isActive = function() {
  return!!this.xhr_
};
goog.net.XhrIo.prototype.isComplete = function() {
  return this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE
};
goog.net.XhrIo.prototype.isSuccess = function() {
  switch(this.getStatus()) {
    case 0:
      return!this.isLastUriEffectiveSchemeHttp_();
    case goog.net.HttpStatus.OK:
    ;
    case goog.net.HttpStatus.CREATED:
    ;
    case goog.net.HttpStatus.ACCEPTED:
    ;
    case goog.net.HttpStatus.NO_CONTENT:
    ;
    case goog.net.HttpStatus.NOT_MODIFIED:
    ;
    case goog.net.HttpStatus.QUIRK_IE_NO_CONTENT:
      return true;
    default:
      return false
  }
};
goog.net.XhrIo.prototype.isLastUriEffectiveSchemeHttp_ = function() {
  var lastUriScheme = goog.isString(this.lastUri_) ? goog.uri.utils.getScheme(this.lastUri_) : this.lastUri_.getScheme();
  if(lastUriScheme) {
    return goog.net.XhrIo.HTTP_SCHEME_PATTERN.test(lastUriScheme)
  }
  if(self.location) {
    return goog.net.XhrIo.HTTP_SCHEME_PATTERN.test(self.location.protocol)
  }else {
    return true
  }
};
goog.net.XhrIo.prototype.getReadyState = function() {
  return this.xhr_ ? this.xhr_.readyState : goog.net.XmlHttp.ReadyState.UNINITIALIZED
};
goog.net.XhrIo.prototype.getStatus = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.status : -1
  }catch(e) {
    this.logger_.warning("Can not get status: " + e.message);
    return-1
  }
};
goog.net.XhrIo.prototype.getStatusText = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.statusText : ""
  }catch(e) {
    this.logger_.fine("Can not get status: " + e.message);
    return""
  }
};
goog.net.XhrIo.prototype.getLastUri = function() {
  return String(this.lastUri_)
};
goog.net.XhrIo.prototype.getResponseText = function() {
  try {
    return this.xhr_ ? this.xhr_.responseText : ""
  }catch(e) {
    this.logger_.fine("Can not get responseText: " + e.message);
    return""
  }
};
goog.net.XhrIo.prototype.getResponseXml = function() {
  try {
    return this.xhr_ ? this.xhr_.responseXML : null
  }catch(e) {
    this.logger_.fine("Can not get responseXML: " + e.message);
    return null
  }
};
goog.net.XhrIo.prototype.getResponseJson = function(opt_xssiPrefix) {
  if(!this.xhr_) {
    return undefined
  }
  var responseText = this.xhr_.responseText;
  if(opt_xssiPrefix && responseText.indexOf(opt_xssiPrefix) == 0) {
    responseText = responseText.substring(opt_xssiPrefix.length)
  }
  return goog.json.parse(responseText)
};
goog.net.XhrIo.prototype.getResponse = function() {
  try {
    if(!this.xhr_) {
      return null
    }
    if("response" in this.xhr_) {
      return this.xhr_.response
    }
    switch(this.responseType_) {
      case goog.net.XhrIo.ResponseType.DEFAULT:
      ;
      case goog.net.XhrIo.ResponseType.TEXT:
        return this.xhr_.responseText;
      case goog.net.XhrIo.ResponseType.ARRAY_BUFFER:
        if("mozResponseArrayBuffer" in this.xhr_) {
          return this.xhr_.mozResponseArrayBuffer
        }
    }
    this.logger_.severe("Response type " + this.responseType_ + " is not " + "supported on this browser");
    return null
  }catch(e) {
    this.logger_.fine("Can not get response: " + e.message);
    return null
  }
};
goog.net.XhrIo.prototype.getResponseHeader = function(key) {
  return this.xhr_ && this.isComplete() ? this.xhr_.getResponseHeader(key) : undefined
};
goog.net.XhrIo.prototype.getAllResponseHeaders = function() {
  return this.xhr_ && this.isComplete() ? this.xhr_.getAllResponseHeaders() : ""
};
goog.net.XhrIo.prototype.getLastErrorCode = function() {
  return this.lastErrorCode_
};
goog.net.XhrIo.prototype.getLastError = function() {
  return goog.isString(this.lastError_) ? this.lastError_ : String(this.lastError_)
};
goog.net.XhrIo.prototype.formatMsg_ = function(msg) {
  return msg + " [" + this.lastMethod_ + " " + this.lastUri_ + " " + this.getStatus() + "]"
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = transformer(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_)
});
goog.provide("clojure.browser.net");
goog.require("cljs.core");
goog.require("goog.json");
goog.require("goog.net.xpc.CrossPageChannel");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.EventType");
goog.require("goog.net.XhrIo");
goog.require("clojure.browser.event");
clojure.browser.net._STAR_timeout_STAR_ = 1E4;
clojure.browser.net.event_types = cljs.core.into.call(null, cljs.core.ObjMap.EMPTY, cljs.core.map.call(null, function(p__4075) {
  var vec__4076 = p__4075;
  var k = cljs.core.nth.call(null, vec__4076, 0, null);
  var v = cljs.core.nth.call(null, vec__4076, 1, null);
  return cljs.core.PersistentVector.fromArray([cljs.core.keyword.call(null, k.toLowerCase()), v], true)
}, cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.net.EventType))));
clojure.browser.net.IConnection = {};
clojure.browser.net.connect = function() {
  var connect = null;
  var connect__1 = function(this$) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.clojure$browser$net$IConnection$connect$arity$1
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.clojure$browser$net$IConnection$connect$arity$1(this$)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = clojure.browser.net.connect[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = clojure.browser.net.connect["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
          }
        }
      }().call(null, this$)
    }
  };
  var connect__2 = function(this$, opt1) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.clojure$browser$net$IConnection$connect$arity$2
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.clojure$browser$net$IConnection$connect$arity$2(this$, opt1)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = clojure.browser.net.connect[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = clojure.browser.net.connect["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
          }
        }
      }().call(null, this$, opt1)
    }
  };
  var connect__3 = function(this$, opt1, opt2) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.clojure$browser$net$IConnection$connect$arity$3
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.clojure$browser$net$IConnection$connect$arity$3(this$, opt1, opt2)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = clojure.browser.net.connect[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = clojure.browser.net.connect["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
          }
        }
      }().call(null, this$, opt1, opt2)
    }
  };
  var connect__4 = function(this$, opt1, opt2, opt3) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.clojure$browser$net$IConnection$connect$arity$4
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.clojure$browser$net$IConnection$connect$arity$4(this$, opt1, opt2, opt3)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = clojure.browser.net.connect[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = clojure.browser.net.connect["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
          }
        }
      }().call(null, this$, opt1, opt2, opt3)
    }
  };
  connect = function(this$, opt1, opt2, opt3) {
    switch(arguments.length) {
      case 1:
        return connect__1.call(this, this$);
      case 2:
        return connect__2.call(this, this$, opt1);
      case 3:
        return connect__3.call(this, this$, opt1, opt2);
      case 4:
        return connect__4.call(this, this$, opt1, opt2, opt3)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  connect.cljs$lang$arity$1 = connect__1;
  connect.cljs$lang$arity$2 = connect__2;
  connect.cljs$lang$arity$3 = connect__3;
  connect.cljs$lang$arity$4 = connect__4;
  return connect
}();
clojure.browser.net.transmit = function() {
  var transmit = null;
  var transmit__2 = function(this$, opt) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.clojure$browser$net$IConnection$transmit$arity$2
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.clojure$browser$net$IConnection$transmit$arity$2(this$, opt)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = clojure.browser.net.transmit[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = clojure.browser.net.transmit["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
          }
        }
      }().call(null, this$, opt)
    }
  };
  var transmit__3 = function(this$, opt, opt2) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.clojure$browser$net$IConnection$transmit$arity$3
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.clojure$browser$net$IConnection$transmit$arity$3(this$, opt, opt2)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = clojure.browser.net.transmit[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = clojure.browser.net.transmit["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
          }
        }
      }().call(null, this$, opt, opt2)
    }
  };
  var transmit__4 = function(this$, opt, opt2, opt3) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.clojure$browser$net$IConnection$transmit$arity$4
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.clojure$browser$net$IConnection$transmit$arity$4(this$, opt, opt2, opt3)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = clojure.browser.net.transmit[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = clojure.browser.net.transmit["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
          }
        }
      }().call(null, this$, opt, opt2, opt3)
    }
  };
  var transmit__5 = function(this$, opt, opt2, opt3, opt4) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.clojure$browser$net$IConnection$transmit$arity$5
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.clojure$browser$net$IConnection$transmit$arity$5(this$, opt, opt2, opt3, opt4)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = clojure.browser.net.transmit[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = clojure.browser.net.transmit["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
          }
        }
      }().call(null, this$, opt, opt2, opt3, opt4)
    }
  };
  var transmit__6 = function(this$, opt, opt2, opt3, opt4, opt5) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.clojure$browser$net$IConnection$transmit$arity$6
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.clojure$browser$net$IConnection$transmit$arity$6(this$, opt, opt2, opt3, opt4, opt5)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = clojure.browser.net.transmit[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = clojure.browser.net.transmit["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
          }
        }
      }().call(null, this$, opt, opt2, opt3, opt4, opt5)
    }
  };
  transmit = function(this$, opt, opt2, opt3, opt4, opt5) {
    switch(arguments.length) {
      case 2:
        return transmit__2.call(this, this$, opt);
      case 3:
        return transmit__3.call(this, this$, opt, opt2);
      case 4:
        return transmit__4.call(this, this$, opt, opt2, opt3);
      case 5:
        return transmit__5.call(this, this$, opt, opt2, opt3, opt4);
      case 6:
        return transmit__6.call(this, this$, opt, opt2, opt3, opt4, opt5)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transmit.cljs$lang$arity$2 = transmit__2;
  transmit.cljs$lang$arity$3 = transmit__3;
  transmit.cljs$lang$arity$4 = transmit__4;
  transmit.cljs$lang$arity$5 = transmit__5;
  transmit.cljs$lang$arity$6 = transmit__6;
  return transmit
}();
clojure.browser.net.close = function close(this$) {
  if(function() {
    var and__3822__auto__ = this$;
    if(and__3822__auto__) {
      return this$.clojure$browser$net$IConnection$close$arity$1
    }else {
      return and__3822__auto__
    }
  }()) {
    return this$.clojure$browser$net$IConnection$close$arity$1(this$)
  }else {
    var x__2373__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3824__auto__ = clojure.browser.net.close[goog.typeOf(x__2373__auto__)];
      if(or__3824__auto__) {
        return or__3824__auto__
      }else {
        var or__3824__auto____$1 = clojure.browser.net.close["_"];
        if(or__3824__auto____$1) {
          return or__3824__auto____$1
        }else {
          throw cljs.core.missing_protocol.call(null, "IConnection.close", this$);
        }
      }
    }().call(null, this$)
  }
};
goog.net.XhrIo.prototype.clojure$browser$event$EventType$ = true;
goog.net.XhrIo.prototype.clojure$browser$event$EventType$event_types$arity$1 = function(this$) {
  return cljs.core.into.call(null, cljs.core.ObjMap.EMPTY, cljs.core.map.call(null, function(p__4077) {
    var vec__4078 = p__4077;
    var k = cljs.core.nth.call(null, vec__4078, 0, null);
    var v = cljs.core.nth.call(null, vec__4078, 1, null);
    return cljs.core.PersistentVector.fromArray([cljs.core.keyword.call(null, k.toLowerCase()), v], true)
  }, cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.net.EventType))))
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$ = true;
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$2 = function(this$, uri) {
  return clojure.browser.net.transmit.call(null, this$, uri, "GET", null, null, clojure.browser.net._STAR_timeout_STAR_)
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$3 = function(this$, uri, method) {
  return clojure.browser.net.transmit.call(null, this$, uri, method, null, null, clojure.browser.net._STAR_timeout_STAR_)
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$4 = function(this$, uri, method, content) {
  return clojure.browser.net.transmit.call(null, this$, uri, method, content, null, clojure.browser.net._STAR_timeout_STAR_)
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$5 = function(this$, uri, method, content, headers) {
  return clojure.browser.net.transmit.call(null, this$, uri, method, content, headers, clojure.browser.net._STAR_timeout_STAR_)
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$6 = function(this$, uri, method, content, headers, timeout) {
  this$.setTimeoutInterval(timeout);
  return this$.send(uri, method, content, headers)
};
clojure.browser.net.xpc_config_fields = cljs.core.into.call(null, cljs.core.ObjMap.EMPTY, cljs.core.map.call(null, function(p__4079) {
  var vec__4080 = p__4079;
  var k = cljs.core.nth.call(null, vec__4080, 0, null);
  var v = cljs.core.nth.call(null, vec__4080, 1, null);
  return cljs.core.PersistentVector.fromArray([cljs.core.keyword.call(null, k.toLowerCase()), v], true)
}, cljs.core.js__GT_clj.call(null, goog.net.xpc.CfgFields)));
clojure.browser.net.xhr_connection = function xhr_connection() {
  return new goog.net.XhrIo
};
clojure.browser.net.ICrossPageChannel = {};
clojure.browser.net.register_service = function() {
  var register_service = null;
  var register_service__3 = function(this$, service_name, fn) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.clojure$browser$net$ICrossPageChannel$register_service$arity$3
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.clojure$browser$net$ICrossPageChannel$register_service$arity$3(this$, service_name, fn)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = clojure.browser.net.register_service[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = clojure.browser.net.register_service["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "ICrossPageChannel.register-service", this$);
          }
        }
      }().call(null, this$, service_name, fn)
    }
  };
  var register_service__4 = function(this$, service_name, fn, encode_json_QMARK_) {
    if(function() {
      var and__3822__auto__ = this$;
      if(and__3822__auto__) {
        return this$.clojure$browser$net$ICrossPageChannel$register_service$arity$4
      }else {
        return and__3822__auto__
      }
    }()) {
      return this$.clojure$browser$net$ICrossPageChannel$register_service$arity$4(this$, service_name, fn, encode_json_QMARK_)
    }else {
      var x__2373__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3824__auto__ = clojure.browser.net.register_service[goog.typeOf(x__2373__auto__)];
        if(or__3824__auto__) {
          return or__3824__auto__
        }else {
          var or__3824__auto____$1 = clojure.browser.net.register_service["_"];
          if(or__3824__auto____$1) {
            return or__3824__auto____$1
          }else {
            throw cljs.core.missing_protocol.call(null, "ICrossPageChannel.register-service", this$);
          }
        }
      }().call(null, this$, service_name, fn, encode_json_QMARK_)
    }
  };
  register_service = function(this$, service_name, fn, encode_json_QMARK_) {
    switch(arguments.length) {
      case 3:
        return register_service__3.call(this, this$, service_name, fn);
      case 4:
        return register_service__4.call(this, this$, service_name, fn, encode_json_QMARK_)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  register_service.cljs$lang$arity$3 = register_service__3;
  register_service.cljs$lang$arity$4 = register_service__4;
  return register_service
}();
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$ = true;
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$1 = function(this$) {
  return clojure.browser.net.connect.call(null, this$, null)
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$2 = function(this$, on_connect_fn) {
  return this$.connect(on_connect_fn)
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$3 = function(this$, on_connect_fn, config_iframe_fn) {
  return clojure.browser.net.connect.call(null, this$, on_connect_fn, config_iframe_fn, document.body)
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$4 = function(this$, on_connect_fn, config_iframe_fn, iframe_parent) {
  this$.createPeerIframe(iframe_parent, config_iframe_fn);
  return this$.connect(on_connect_fn)
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$transmit$arity$3 = function(this$, service_name, payload) {
  return this$.send(cljs.core.name.call(null, service_name), payload)
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$close$arity$1 = function(this$) {
  return this$.close(cljs.core.List.EMPTY)
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$ICrossPageChannel$ = true;
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$ICrossPageChannel$register_service$arity$3 = function(this$, service_name, fn) {
  return clojure.browser.net.register_service.call(null, this$, service_name, fn, false)
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$ICrossPageChannel$register_service$arity$4 = function(this$, service_name, fn, encode_json_QMARK_) {
  return this$.registerService(cljs.core.name.call(null, service_name), fn, encode_json_QMARK_)
};
clojure.browser.net.xpc_connection = function() {
  var xpc_connection = null;
  var xpc_connection__0 = function() {
    var temp__3974__auto__ = (new goog.Uri(window.location.href)).getParameterValue("xpc");
    if(cljs.core.truth_(temp__3974__auto__)) {
      var config = temp__3974__auto__;
      return new goog.net.xpc.CrossPageChannel(goog.json.parse(config))
    }else {
      return null
    }
  };
  var xpc_connection__1 = function(config) {
    return new goog.net.xpc.CrossPageChannel(cljs.core.reduce.call(null, function(sum, p__4084) {
      var vec__4085 = p__4084;
      var k = cljs.core.nth.call(null, vec__4085, 0, null);
      var v = cljs.core.nth.call(null, vec__4085, 1, null);
      var temp__3971__auto__ = cljs.core._lookup.call(null, clojure.browser.net.xpc_config_fields, k, null);
      if(cljs.core.truth_(temp__3971__auto__)) {
        var field = temp__3971__auto__;
        var G__4086 = sum;
        G__4086[field] = v;
        return G__4086
      }else {
        return sum
      }
    }, {}, config))
  };
  xpc_connection = function(config) {
    switch(arguments.length) {
      case 0:
        return xpc_connection__0.call(this);
      case 1:
        return xpc_connection__1.call(this, config)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  xpc_connection.cljs$lang$arity$0 = xpc_connection__0;
  xpc_connection.cljs$lang$arity$1 = xpc_connection__1;
  return xpc_connection
}();
goog.provide("clojure.browser.repl");
goog.require("cljs.core");
goog.require("clojure.browser.event");
goog.require("clojure.browser.net");
clojure.browser.repl.xpc_connection = cljs.core.atom.call(null, null);
clojure.browser.repl.repl_print = function repl_print(data) {
  var temp__3971__auto__ = cljs.core.deref.call(null, clojure.browser.repl.xpc_connection);
  if(cljs.core.truth_(temp__3971__auto__)) {
    var conn = temp__3971__auto__;
    return clojure.browser.net.transmit.call(null, conn, "\ufdd0'print", cljs.core.pr_str.call(null, data))
  }else {
    return null
  }
};
clojure.browser.repl.evaluate_javascript = function evaluate_javascript(conn, block) {
  var result = function() {
    try {
      return cljs.core.ObjMap.fromObject(["\ufdd0'status", "\ufdd0'value"], {"\ufdd0'status":"\ufdd0'success", "\ufdd0'value":[cljs.core.str(eval(block))].join("")})
    }catch(e4074) {
      if(cljs.core.instance_QMARK_.call(null, Error, e4074)) {
        var e = e4074;
        return cljs.core.ObjMap.fromObject(["\ufdd0'status", "\ufdd0'value", "\ufdd0'stacktrace"], {"\ufdd0'status":"\ufdd0'exception", "\ufdd0'value":cljs.core.pr_str.call(null, e), "\ufdd0'stacktrace":cljs.core.truth_(e.hasOwnProperty("stack")) ? e.stack : "No stacktrace available."})
      }else {
        if("\ufdd0'else") {
          throw e4074;
        }else {
          return null
        }
      }
    }
  }();
  return cljs.core.pr_str.call(null, result)
};
clojure.browser.repl.send_result = function send_result(connection, url, data) {
  return clojure.browser.net.transmit.call(null, connection, url, "POST", data, null, 0)
};
clojure.browser.repl.send_print = function() {
  var send_print = null;
  var send_print__2 = function(url, data) {
    return send_print.call(null, url, data, 0)
  };
  var send_print__3 = function(url, data, n) {
    var conn = clojure.browser.net.xhr_connection.call(null);
    clojure.browser.event.listen.call(null, conn, "\ufdd0'error", function(_) {
      if(n < 10) {
        return send_print.call(null, url, data, n + 1)
      }else {
        return console.log([cljs.core.str("Could not send "), cljs.core.str(data), cljs.core.str(" after "), cljs.core.str(n), cljs.core.str(" attempts.")].join(""))
      }
    });
    return clojure.browser.net.transmit.call(null, conn, url, "POST", data, null, 0)
  };
  send_print = function(url, data, n) {
    switch(arguments.length) {
      case 2:
        return send_print__2.call(this, url, data);
      case 3:
        return send_print__3.call(this, url, data, n)
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  send_print.cljs$lang$arity$2 = send_print__2;
  send_print.cljs$lang$arity$3 = send_print__3;
  return send_print
}();
clojure.browser.repl.order = cljs.core.atom.call(null, 0);
clojure.browser.repl.wrap_message = function wrap_message(t, data) {
  return cljs.core.pr_str.call(null, cljs.core.ObjMap.fromObject(["\ufdd0'type", "\ufdd0'content", "\ufdd0'order"], {"\ufdd0'type":t, "\ufdd0'content":data, "\ufdd0'order":cljs.core.swap_BANG_.call(null, clojure.browser.repl.order, cljs.core.inc)}))
};
clojure.browser.repl.start_evaluator = function start_evaluator(url) {
  var temp__3971__auto__ = clojure.browser.net.xpc_connection.call(null);
  if(cljs.core.truth_(temp__3971__auto__)) {
    var repl_connection = temp__3971__auto__;
    var connection = clojure.browser.net.xhr_connection.call(null);
    clojure.browser.event.listen.call(null, connection, "\ufdd0'success", function(e) {
      return clojure.browser.net.transmit.call(null, repl_connection, "\ufdd0'evaluate-javascript", e.currentTarget.getResponseText(cljs.core.List.EMPTY))
    });
    clojure.browser.net.register_service.call(null, repl_connection, "\ufdd0'send-result", function(data) {
      return clojure.browser.repl.send_result.call(null, connection, url, clojure.browser.repl.wrap_message.call(null, "\ufdd0'result", data))
    });
    clojure.browser.net.register_service.call(null, repl_connection, "\ufdd0'print", function(data) {
      return clojure.browser.repl.send_print.call(null, url, clojure.browser.repl.wrap_message.call(null, "\ufdd0'print", data))
    });
    clojure.browser.net.connect.call(null, repl_connection, cljs.core.constantly.call(null, null));
    return setTimeout(function() {
      return clojure.browser.repl.send_result.call(null, connection, url, clojure.browser.repl.wrap_message.call(null, "\ufdd0'ready", "ready"))
    }, 50)
  }else {
    return alert("No 'xpc' param provided to child iframe.")
  }
};
clojure.browser.repl.connect = function connect(repl_server_url) {
  var repl_connection = clojure.browser.net.xpc_connection.call(null, cljs.core.ObjMap.fromObject(["\ufdd0'peer_uri"], {"\ufdd0'peer_uri":repl_server_url}));
  cljs.core.swap_BANG_.call(null, clojure.browser.repl.xpc_connection, cljs.core.constantly.call(null, repl_connection));
  clojure.browser.net.register_service.call(null, repl_connection, "\ufdd0'evaluate-javascript", function(js) {
    return clojure.browser.net.transmit.call(null, repl_connection, "\ufdd0'send-result", clojure.browser.repl.evaluate_javascript.call(null, repl_connection, js))
  });
  return clojure.browser.net.connect.call(null, repl_connection, cljs.core.constantly.call(null, null), function(iframe) {
    return iframe.style.display = "none"
  })
};
goog.provide("jsrefact.core");
goog.require("cljs.core");
goog.require("clojure.walk");
goog.require("jsrefact.predicates");
goog.require("clojure.browser.repl");
goog.require("clojure.walk");
clojure.browser.repl.connect.call(null, "http://localhost:9000/repl");
